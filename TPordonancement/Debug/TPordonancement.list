
TPordonancement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002078  0800d874  0800d874  0001d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8ec  0800f8ec  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8ec  0800f8ec  0001f8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8f4  0800f8f4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8f4  0800f8f4  0001f8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8f8  0800f8f8  0001f8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800f8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c0  200000b0  0800f9ac  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004970  0800f9ac  00024970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c011  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005512  00000000  00000000  0004c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002578  00000000  00000000  00051608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e0  00000000  00000000  00053b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3d6  00000000  00000000  00055e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f1f0  00000000  00000000  00084236  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114dfd  00000000  00000000  000a3426  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a184  00000000  00000000  001b82a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d85c 	.word	0x0800d85c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800d85c 	.word	0x0800d85c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000cc 	.word	0x200000cc
 80005f0:	20000120 	.word	0x20000120

080005f4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005fe:	20c8      	movs	r0, #200	; 0xc8
 8000600:	f001 ff46 	bl	8002490 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000604:	f000 fa7a 	bl	8000afc <ft5336_I2C_InitializeIfRequired>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000638:	2300      	movs	r3, #0
 800063a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800063c:	f000 fa5e 	bl	8000afc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e010      	b.n	8000668 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	21a8      	movs	r1, #168	; 0xa8
 800064c:	4618      	mov	r0, r3
 800064e:	f001 ff01 	bl	8002454 <TS_IO_Read>
 8000652:	4603      	mov	r3, r0
 8000654:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000656:	7b7b      	ldrb	r3, [r7, #13]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b51      	cmp	r3, #81	; 0x51
 800065c:	d101      	bne.n	8000662 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	3301      	adds	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d802      	bhi.n	8000674 <ft5336_ReadID+0x4e>
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0e8      	beq.n	8000646 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000674:	7b7b      	ldrb	r3, [r7, #13]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	b29b      	uxth	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	4603      	mov	r3, r0
 800068a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fa44 	bl	8000b1c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f932 	bl	8000900 <ft5336_TS_DisableIT>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fecb 	bl	8002454 <TS_IO_Read>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	d901      	bls.n	80006da <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <ft5336_TS_DetectTouch+0x50>)
 80006e0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <ft5336_TS_DetectTouch+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	b2db      	uxtb	r3, r3
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000320 	.word	0x20000320

080006f8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <ft5336_TS_GetXY+0x1d8>)
 800071c:	789a      	ldrb	r2, [r3, #2]
 800071e:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <ft5336_TS_GetXY+0x1d8>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	429a      	cmp	r2, r3
 8000724:	f080 80cf 	bcs.w	80008c6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000728:	4b69      	ldr	r3, [pc, #420]	; (80008d0 <ft5336_TS_GetXY+0x1d8>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	2b09      	cmp	r3, #9
 800072e:	d871      	bhi.n	8000814 <ft5336_TS_GetXY+0x11c>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <ft5336_TS_GetXY+0x40>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000761 	.word	0x08000761
 800073c:	08000773 	.word	0x08000773
 8000740:	08000785 	.word	0x08000785
 8000744:	08000797 	.word	0x08000797
 8000748:	080007a9 	.word	0x080007a9
 800074c:	080007bb 	.word	0x080007bb
 8000750:	080007cd 	.word	0x080007cd
 8000754:	080007df 	.word	0x080007df
 8000758:	080007f1 	.word	0x080007f1
 800075c:	08000803 	.word	0x08000803
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000760:	2304      	movs	r3, #4
 8000762:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000764:	2303      	movs	r3, #3
 8000766:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000768:	2306      	movs	r3, #6
 800076a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800076c:	2305      	movs	r3, #5
 800076e:	753b      	strb	r3, [r7, #20]
      break;
 8000770:	e051      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000772:	230a      	movs	r3, #10
 8000774:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000776:	2309      	movs	r3, #9
 8000778:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800077a:	230c      	movs	r3, #12
 800077c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800077e:	230b      	movs	r3, #11
 8000780:	753b      	strb	r3, [r7, #20]
      break;
 8000782:	e048      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000784:	2310      	movs	r3, #16
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000788:	230f      	movs	r3, #15
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800078c:	2312      	movs	r3, #18
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000790:	2311      	movs	r3, #17
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e03f      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000796:	2316      	movs	r3, #22
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800079a:	2315      	movs	r3, #21
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800079e:	2318      	movs	r3, #24
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007a2:	2317      	movs	r3, #23
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e036      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007a8:	231c      	movs	r3, #28
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007ac:	231b      	movs	r3, #27
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007b0:	231e      	movs	r3, #30
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007b4:	231d      	movs	r3, #29
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e02d      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007ba:	2322      	movs	r3, #34	; 0x22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007be:	2321      	movs	r3, #33	; 0x21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007c2:	2324      	movs	r3, #36	; 0x24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007c6:	2323      	movs	r3, #35	; 0x23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e024      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007cc:	2328      	movs	r3, #40	; 0x28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007d0:	2327      	movs	r3, #39	; 0x27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007d4:	232a      	movs	r3, #42	; 0x2a
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007d8:	2329      	movs	r3, #41	; 0x29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e01b      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007de:	232e      	movs	r3, #46	; 0x2e
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007e2:	232d      	movs	r3, #45	; 0x2d
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007e6:	2330      	movs	r3, #48	; 0x30
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007ea:	232f      	movs	r3, #47	; 0x2f
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e012      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007f0:	2334      	movs	r3, #52	; 0x34
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007f4:	2333      	movs	r3, #51	; 0x33
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007f8:	2336      	movs	r3, #54	; 0x36
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007fc:	2335      	movs	r3, #53	; 0x35
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e009      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000802:	233a      	movs	r3, #58	; 0x3a
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000806:	2339      	movs	r3, #57	; 0x39
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800080a:	233c      	movs	r3, #60	; 0x3c
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800080e:	233b      	movs	r3, #59	; 0x3b
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e000      	b.n	8000816 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000814:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	7dfa      	ldrb	r2, [r7, #23]
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe18 	bl	8002454 <TS_IO_Read>
 8000824:	4603      	mov	r3, r0
 8000826:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000828:	7cfb      	ldrb	r3, [r7, #19]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 8000830:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7dba      	ldrb	r2, [r7, #22]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fe0a 	bl	8002454 <TS_IO_Read>
 8000840:	4603      	mov	r3, r0
 8000842:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000844:	7cfb      	ldrb	r3, [r7, #19]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 800085e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	7d7a      	ldrb	r2, [r7, #21]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fdef 	bl	8002454 <TS_IO_Read>
 8000876:	4603      	mov	r3, r0
 8000878:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800087a:	7cfb      	ldrb	r3, [r7, #19]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	7d3a      	ldrb	r2, [r7, #20]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fde1 	bl	8002454 <TS_IO_Read>
 8000892:	4603      	mov	r3, r0
 8000894:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000896:	7cfb      	ldrb	r3, [r7, #19]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 80008b0:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <ft5336_TS_GetXY+0x1dc>)
 80008b4:	881a      	ldrh	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <ft5336_TS_GetXY+0x1d8>)
 80008bc:	789b      	ldrb	r3, [r3, #2]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <ft5336_TS_GetXY+0x1d8>)
 80008c4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000320 	.word	0x20000320
 80008d4:	20000324 	.word	0x20000324

080008d8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	21a4      	movs	r1, #164	; 0xa4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fd94 	bl	8002420 <TS_IO_Write>
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	21a4      	movs	r1, #164	; 0xa4
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fd80 	bl	8002420 <TS_IO_Write>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	6039      	str	r1, [r7, #0]
 8000960:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fd71 	bl	8002454 <TS_IO_Read>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4603      	mov	r3, r0
 8000996:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009a8:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <ft5336_TS_GetTouchInfo+0x158>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	461a      	mov	r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4293      	cmp	r3, r2
 80009b2:	f080 8090 	bcs.w	8000ad6 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b09      	cmp	r3, #9
 80009ba:	d85d      	bhi.n	8000a78 <ft5336_TS_GetTouchInfo+0xf0>
 80009bc:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <ft5336_TS_GetTouchInfo+0x3c>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	080009ed 	.word	0x080009ed
 80009c8:	080009fb 	.word	0x080009fb
 80009cc:	08000a09 	.word	0x08000a09
 80009d0:	08000a17 	.word	0x08000a17
 80009d4:	08000a25 	.word	0x08000a25
 80009d8:	08000a33 	.word	0x08000a33
 80009dc:	08000a41 	.word	0x08000a41
 80009e0:	08000a4f 	.word	0x08000a4f
 80009e4:	08000a5d 	.word	0x08000a5d
 80009e8:	08000a6b 	.word	0x08000a6b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009f0:	2307      	movs	r3, #7
 80009f2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009f4:	2308      	movs	r3, #8
 80009f6:	757b      	strb	r3, [r7, #21]
      break;
 80009f8:	e03f      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009fa:	2309      	movs	r3, #9
 80009fc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009fe:	230d      	movs	r3, #13
 8000a00:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a02:	230e      	movs	r3, #14
 8000a04:	757b      	strb	r3, [r7, #21]
      break;
 8000a06:	e038      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a0c:	2313      	movs	r3, #19
 8000a0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a10:	2314      	movs	r3, #20
 8000a12:	757b      	strb	r3, [r7, #21]
      break;
 8000a14:	e031      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a16:	2315      	movs	r3, #21
 8000a18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a1a:	2319      	movs	r3, #25
 8000a1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a1e:	231a      	movs	r3, #26
 8000a20:	757b      	strb	r3, [r7, #21]
      break;
 8000a22:	e02a      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a24:	231b      	movs	r3, #27
 8000a26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a28:	231f      	movs	r3, #31
 8000a2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	757b      	strb	r3, [r7, #21]
      break;
 8000a30:	e023      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a32:	2321      	movs	r3, #33	; 0x21
 8000a34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a36:	2325      	movs	r3, #37	; 0x25
 8000a38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a3a:	2326      	movs	r3, #38	; 0x26
 8000a3c:	757b      	strb	r3, [r7, #21]
      break;
 8000a3e:	e01c      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a40:	2327      	movs	r3, #39	; 0x27
 8000a42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a44:	232b      	movs	r3, #43	; 0x2b
 8000a46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a48:	232c      	movs	r3, #44	; 0x2c
 8000a4a:	757b      	strb	r3, [r7, #21]
      break;
 8000a4c:	e015      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a4e:	232d      	movs	r3, #45	; 0x2d
 8000a50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a52:	2331      	movs	r3, #49	; 0x31
 8000a54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a56:	2332      	movs	r3, #50	; 0x32
 8000a58:	757b      	strb	r3, [r7, #21]
      break;
 8000a5a:	e00e      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a5c:	2333      	movs	r3, #51	; 0x33
 8000a5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a60:	2337      	movs	r3, #55	; 0x37
 8000a62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a64:	2338      	movs	r3, #56	; 0x38
 8000a66:	757b      	strb	r3, [r7, #21]
      break;
 8000a68:	e007      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a6a:	2339      	movs	r3, #57	; 0x39
 8000a6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a6e:	233d      	movs	r3, #61	; 0x3d
 8000a70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a72:	233e      	movs	r3, #62	; 0x3e
 8000a74:	757b      	strb	r3, [r7, #21]
      break;
 8000a76:	e000      	b.n	8000a7a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a78:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	7dfa      	ldrb	r2, [r7, #23]
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fce6 	bl	8002454 <TS_IO_Read>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a8c:	7d3b      	ldrb	r3, [r7, #20]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	119b      	asrs	r3, r3, #6
 8000a92:	f003 0203 	and.w	r2, r3, #3
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	7dba      	ldrb	r2, [r7, #22]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fcd6 	bl	8002454 <TS_IO_Read>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000aac:	7d3b      	ldrb	r3, [r7, #20]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	7d7a      	ldrb	r2, [r7, #21]
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fcc8 	bl	8002454 <TS_IO_Read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000ac8:	7d3b      	ldrb	r3, [r7, #20]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	111b      	asrs	r3, r3, #4
 8000ace:	f003 0204 	and.w	r2, r3, #4
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000320 	.word	0x20000320

08000ae4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000320 	.word	0x20000320

08000afc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b00:	f7ff fff0 	bl	8000ae4 <ft5336_Get_I2C_InitializedStatus>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d104      	bne.n	8000b14 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b0a:	f001 fc7f 	bl	800240c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b0e:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
  }
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000320 	.word	0x20000320

08000b1c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b0c4      	sub	sp, #272	; 0x110
 8000b3c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	static TS_StateTypeDef TS_State;
	uint32_t potl, potr, joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f003 fbfb 	bl	8004352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f9be 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f001 f860 	bl	8001c24 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b64:	f000 fabc 	bl	80010e0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b68:	f000 fb68 	bl	800123c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b6c:	f000 fba6 	bl	80012bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b70:	f000 fbe4 	bl	800133c <MX_LTDC_Init>
  MX_RTC_Init();
 8000b74:	f000 fc64 	bl	8001440 <MX_RTC_Init>
  MX_SPI2_Init();
 8000b78:	f000 fd08 	bl	800158c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000b7c:	f000 fd44 	bl	8001608 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd96 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b84:	f000 fde2 	bl	800174c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000b88:	f000 fe6e 	bl	8001868 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000b8c:	f000 feba 	bl	8001904 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000b90:	f000 ff92 	bl	8001ab8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000b94:	f000 ffc8 	bl	8001b28 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000b98:	f000 fa50 	bl	800103c <MX_ADC1_Init>
  MX_DAC_Init();
 8000b9c:	f000 faf2 	bl	8001184 <MX_DAC_Init>
  MX_UART7_Init();
 8000ba0:	f000 ff5a 	bl	8001a58 <MX_UART7_Init>
  MX_FMC_Init();
 8000ba4:	f000 fff0 	bl	8001b88 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000ba8:	f000 fb16 	bl	80011d8 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000bac:	f001 fc7c 	bl	80024a8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bb0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f001 fd0f 	bl	80025d8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000bba:	f001 fce5 	bl	8002588 <BSP_LCD_GetXSize>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f001 fcf6 	bl	80025b0 <BSP_LCD_GetYSize>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000bca:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f001 fd00 	bl	80025d8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000bd8:	f001 ff60 	bl	8002a9c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f001 fd5b 	bl	8002698 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295
 8000be6:	f001 fdc9 	bl	800277c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000bea:	48a9      	ldr	r0, [pc, #676]	; (8000e90 <main+0x358>)
 8000bec:	f001 fd96 	bl	800271c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000bf0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000bf4:	f001 fd60 	bl	80026b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f001 fd74 	bl	80026e8 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c00:	f001 fcc2 	bl	8002588 <BSP_LCD_GetXSize>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29c      	uxth	r4, r3
 8000c08:	f001 fcd2 	bl	80025b0 <BSP_LCD_GetYSize>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	4620      	mov	r0, r4
 8000c14:	f002 fb10 	bl	8003238 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of cafonctionnepas */
  osMutexDef(cafonctionnepas);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	663b      	str	r3, [r7, #96]	; 0x60
  cafonctionnepasHandle = osMutexCreate(osMutex(cafonctionnepas));
 8000c20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00a f802 	bl	800ac2e <osMutexCreate>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b99      	ldr	r3, [pc, #612]	; (8000e94 <main+0x35c>)
 8000c2e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myMutex02 */
  osMutexDef(myMutex02);
 8000c30:	2300      	movs	r3, #0
 8000c32:	657b      	str	r3, [r7, #84]	; 0x54
 8000c34:	2300      	movs	r3, #0
 8000c36:	65bb      	str	r3, [r7, #88]	; 0x58
  myMutex02Handle = osMutexCreate(osMutex(myMutex02));
 8000c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f009 fff6 	bl	800ac2e <osMutexCreate>
 8000c42:	4602      	mov	r2, r0
 8000c44:	4b94      	ldr	r3, [pc, #592]	; (8000e98 <main+0x360>)
 8000c46:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000c48:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <main+0x364>)
 8000c4a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000c4e:	461d      	mov	r5, r3
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f009 ff83 	bl	800ab6e <osThreadCreate>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b8d      	ldr	r3, [pc, #564]	; (8000ea0 <main+0x368>)
 8000c6c:	601a      	str	r2, [r3, #0]

  /* definition and creation of ecrire_gauche */
  osThreadDef(ecrire_gauche, ecrire_g, osPriorityBelowNormal, 0, 1024);
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <main+0x36c>)
 8000c70:	f107 041c 	add.w	r4, r7, #28
 8000c74:	461d      	mov	r5, r3
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ecrire_gaucheHandle = osThreadCreate(osThread(ecrire_gauche), NULL);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f009 ff70 	bl	800ab6e <osThreadCreate>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	4b85      	ldr	r3, [pc, #532]	; (8000ea8 <main+0x370>)
 8000c92:	601a      	str	r2, [r3, #0]

  /* definition and creation of ecrire_droite */
  osThreadDef(ecrire_droite, ecrire_d, osPriorityBelowNormal, 0, 1024);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4a85      	ldr	r2, [pc, #532]	; (8000eac <main+0x374>)
 8000c98:	461c      	mov	r4, r3
 8000c9a:	4615      	mov	r5, r2
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ecrire_droiteHandle = osThreadCreate(osThread(ecrire_droite), NULL);
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f009 ff5e 	bl	800ab6e <osThreadCreate>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <main+0x378>)
 8000cb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cb8:	f009 ff52 	bl	800ab60 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
		//HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
		sprintf(text, "BP1 : %d", HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin));
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	487c      	ldr	r0, [pc, #496]	; (8000eb4 <main+0x37c>)
 8000cc2:	f005 f81b 	bl	8005cfc <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cce:	497a      	ldr	r1, [pc, #488]	; (8000eb8 <main+0x380>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00c f9c7 	bl	800d064 <siprintf>
		BSP_LCD_DisplayStringAtLine(5, (uint8_t*) text);
 8000cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f001 fe7d 	bl	80029dc <BSP_LCD_DisplayStringAtLine>

		sConfig.Channel = ADC_CHANNEL_6;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000ce8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cec:	4619      	mov	r1, r3
 8000cee:	4873      	ldr	r0, [pc, #460]	; (8000ebc <main+0x384>)
 8000cf0:	f003 fd14 	bl	800471c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000cf4:	4871      	ldr	r0, [pc, #452]	; (8000ebc <main+0x384>)
 8000cf6:	f003 fbbf 	bl	8004478 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8000cfa:	bf00      	nop
 8000cfc:	2164      	movs	r1, #100	; 0x64
 8000cfe:	486f      	ldr	r0, [pc, #444]	; (8000ebc <main+0x384>)
 8000d00:	f003 fc7a 	bl	80045f8 <HAL_ADC_PollForConversion>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f8      	bne.n	8000cfc <main+0x1c4>
			;
		potr = HAL_ADC_GetValue(&hadc3);
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <main+0x384>)
 8000d0c:	f003 fcf8 	bl	8004700 <HAL_ADC_GetValue>
 8000d10:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

		sConfig.Channel = ADC_CHANNEL_7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4866      	ldr	r0, [pc, #408]	; (8000ebc <main+0x384>)
 8000d22:	f003 fcfb 	bl	800471c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000d26:	4865      	ldr	r0, [pc, #404]	; (8000ebc <main+0x384>)
 8000d28:	f003 fba6 	bl	8004478 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8000d2c:	bf00      	nop
 8000d2e:	2164      	movs	r1, #100	; 0x64
 8000d30:	4862      	ldr	r0, [pc, #392]	; (8000ebc <main+0x384>)
 8000d32:	f003 fc61 	bl	80045f8 <HAL_ADC_PollForConversion>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1f8      	bne.n	8000d2e <main+0x1f6>
			;
		potl = HAL_ADC_GetValue(&hadc3);
 8000d3c:	485f      	ldr	r0, [pc, #380]	; (8000ebc <main+0x384>)
 8000d3e:	f003 fcdf 	bl	8004700 <HAL_ADC_GetValue>
 8000d42:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100

		sConfig.Channel = ADC_CHANNEL_8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d4c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000d50:	4619      	mov	r1, r3
 8000d52:	485a      	ldr	r0, [pc, #360]	; (8000ebc <main+0x384>)
 8000d54:	f003 fce2 	bl	800471c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8000d58:	4858      	ldr	r0, [pc, #352]	; (8000ebc <main+0x384>)
 8000d5a:	f003 fb8d 	bl	8004478 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8000d5e:	bf00      	nop
 8000d60:	2164      	movs	r1, #100	; 0x64
 8000d62:	4856      	ldr	r0, [pc, #344]	; (8000ebc <main+0x384>)
 8000d64:	f003 fc48 	bl	80045f8 <HAL_ADC_PollForConversion>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f8      	bne.n	8000d60 <main+0x228>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8000d6e:	4853      	ldr	r0, [pc, #332]	; (8000ebc <main+0x384>)
 8000d70:	f003 fcc6 	bl	8004700 <HAL_ADC_GetValue>
 8000d74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

		HAL_ADC_Start(&hadc1);
 8000d78:	4851      	ldr	r0, [pc, #324]	; (8000ec0 <main+0x388>)
 8000d7a:	f003 fb7d 	bl	8004478 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000d7e:	bf00      	nop
 8000d80:	2164      	movs	r1, #100	; 0x64
 8000d82:	484f      	ldr	r0, [pc, #316]	; (8000ec0 <main+0x388>)
 8000d84:	f003 fc38 	bl	80045f8 <HAL_ADC_PollForConversion>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f8      	bne.n	8000d80 <main+0x248>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8000d8e:	484c      	ldr	r0, [pc, #304]	; (8000ec0 <main+0x388>)
 8000d90:	f003 fcb6 	bl	8004700 <HAL_ADC_GetValue>
 8000d94:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

		sprintf(text, "POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",
 8000d98:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000d9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000dac:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000db0:	4944      	ldr	r1, [pc, #272]	; (8000ec4 <main+0x38c>)
 8000db2:	f00c f957 	bl	800d064 <siprintf>
				(uint) potl, (uint) potr, (uint) joystick_v, (uint) joystick_h);
		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) text);
 8000db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2009      	movs	r0, #9
 8000dbe:	f001 fe0d 	bl	80029dc <BSP_LCD_DisplayStringAtLine>

		if (HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin) == 0) {
 8000dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc6:	483b      	ldr	r0, [pc, #236]	; (8000eb4 <main+0x37c>)
 8000dc8:	f004 ff98 	bl	8005cfc <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d114      	bne.n	8000dfc <main+0x2c4>
			sprintf(message_envoye, "Pot1=%3u", (uint) potl);
 8000dd2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000dd6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000dda:	493b      	ldr	r1, [pc, #236]	; (8000ec8 <main+0x390>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f00c f941 	bl	800d064 <siprintf>
			HAL_UART_Transmit(&huart1, message_envoye, strlen(message_envoye),
 8000de2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa12 	bl	8000210 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000df4:	231e      	movs	r3, #30
 8000df6:	4835      	ldr	r0, [pc, #212]	; (8000ecc <main+0x394>)
 8000df8:	f009 f820 	bl	8009e3c <HAL_UART_Transmit>
					30);
		}
		//sprintf(message_envoye,"%4u",(uint)potl);
		//HAL_UART_Transmit(&huart1,message_envoye,strlen(message_envoye),30);
		HAL_UART_Receive(&huart1, message_recu, strlen(message_recu), 100);
 8000dfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fa05 	bl	8000210 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	482e      	ldr	r0, [pc, #184]	; (8000ecc <main+0x394>)
 8000e12:	f009 f8a4 	bl	8009f5e <HAL_UART_Receive>
		BSP_LCD_DisplayStringAtLine(12, (uint8_t*) message_recu);
 8000e16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	200c      	movs	r0, #12
 8000e1e:	f001 fddd 	bl	80029dc <BSP_LCD_DisplayStringAtLine>

		BSP_TS_GetState(&TS_State);
 8000e22:	482b      	ldr	r0, [pc, #172]	; (8000ed0 <main+0x398>)
 8000e24:	f002 fa48 	bl	80032b8 <BSP_TS_GetState>
		if (TS_State.touchDetected) {
 8000e28:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <main+0x398>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d017      	beq.n	8000e60 <main+0x328>
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e36:	4827      	ldr	r0, [pc, #156]	; (8000ed4 <main+0x39c>)
 8000e38:	f004 ff78 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <main+0x39c>)
 8000e44:	f004 ff72 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e4e:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <main+0x39c>)
 8000e50:	f004 ff6c 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED15_GPIO_Port, LED15_Pin, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <main+0x3a0>)
 8000e5a:	f004 ff67 	bl	8005d2c <HAL_GPIO_WritePin>
 8000e5e:	e72d      	b.n	8000cbc <main+0x184>
		} else {
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <main+0x39c>)
 8000e68:	f004 ff60 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <main+0x39c>)
 8000e74:	f004 ff5a 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <main+0x39c>)
 8000e80:	f004 ff54 	bl	8005d2c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED15_GPIO_Port, LED15_Pin, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <main+0x3a0>)
 8000e8a:	f004 ff4f 	bl	8005d2c <HAL_GPIO_WritePin>
		sprintf(text, "BP1 : %d", HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin));
 8000e8e:	e715      	b.n	8000cbc <main+0x184>
 8000e90:	20000030 	.word	0x20000030
 8000e94:	20004410 	.word	0x20004410
 8000e98:	20004844 	.word	0x20004844
 8000e9c:	0800d8c8 	.word	0x0800d8c8
 8000ea0:	2000429c 	.word	0x2000429c
 8000ea4:	0800d8f4 	.word	0x0800d8f4
 8000ea8:	20004848 	.word	0x20004848
 8000eac:	0800d920 	.word	0x0800d920
 8000eb0:	20004460 	.word	0x20004460
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	0800d874 	.word	0x0800d874
 8000ebc:	200045d4 	.word	0x200045d4
 8000ec0:	2000458c 	.word	0x2000458c
 8000ec4:	0800d880 	.word	0x0800d880
 8000ec8:	0800d8b0 	.word	0x0800d8b0
 8000ecc:	2000461c 	.word	0x2000461c
 8000ed0:	20000328 	.word	0x20000328
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40021000 	.word	0x40021000

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0b4      	sub	sp, #208	; 0xd0
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00c f8b1 	bl	800d052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	2284      	movs	r2, #132	; 0x84
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00c f8a2 	bl	800d052 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f0e:	f006 f84f 	bl	8006fb0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <SystemClock_Config+0x154>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a46      	ldr	r2, [pc, #280]	; (8001030 <SystemClock_Config+0x154>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <SystemClock_Config+0x154>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <SystemClock_Config+0x158>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a41      	ldr	r2, [pc, #260]	; (8001034 <SystemClock_Config+0x158>)
 8000f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <SystemClock_Config+0x158>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f42:	2309      	movs	r3, #9
 8000f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f64:	2319      	movs	r3, #25
 8000f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 f874 	bl	8007070 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f8e:	f001 f8e3 	bl	8002158 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f92:	f006 f81d 	bl	8006fd0 <HAL_PWREx_EnableOverDrive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f9c:	f001 f8dc 	bl	8002158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fc6:	2106      	movs	r1, #6
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 faf5 	bl	80075b8 <HAL_RCC_ClockConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fd4:	f001 f8c0 	bl	8002158 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <SystemClock_Config+0x15c>)
 8000fda:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fe0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fea:	2303      	movs	r3, #3
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001002:	2300      	movs	r3, #0
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001006:	2300      	movs	r3, #0
 8001008:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800100a:	2300      	movs	r3, #0
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800100e:	2300      	movs	r3, #0
 8001010:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4618      	mov	r0, r3
 8001018:	f006 fcd2 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001022:	f001 f899 	bl	8002158 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	37d0      	adds	r7, #208	; 0xd0
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000
 8001038:	00015868 	.word	0x00015868

0800103c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_ADC1_Init+0x98>)
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <MX_ADC1_Init+0xa0>)
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_ADC1_Init+0x98>)
 800108a:	2201      	movs	r2, #1
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_ADC1_Init+0x98>)
 8001098:	2201      	movs	r2, #1
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_ADC1_Init+0x98>)
 800109e:	f003 f9a7 	bl	80043f0 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010a8:	f001 f856 	bl	8002158 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_ADC1_Init+0x98>)
 80010be:	f003 fb2d 	bl	800471c <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010c8:	f001 f846 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000458c 	.word	0x2000458c
 80010d8:	40012000 	.word	0x40012000
 80010dc:	0f000001 	.word	0x0f000001

080010e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_ADC3_Init+0x98>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_ADC3_Init+0x9c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_ADC3_Init+0x98>)
 80010fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC3_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC3_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_ADC3_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC3_Init+0x98>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <MX_ADC3_Init+0xa0>)
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC3_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC3_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_ADC3_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC3_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_ADC3_Init+0x98>)
 8001142:	f003 f955 	bl	80043f0 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800114c:	f001 f804 	bl	8002158 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001150:	2306      	movs	r3, #6
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_ADC3_Init+0x98>)
 8001162:	f003 fadb 	bl	800471c <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 fff4 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200045d4 	.word	0x200045d4
 800117c:	40012200 	.word	0x40012200
 8001180:	0f000001 	.word	0x0f000001

08001184 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_DAC_Init+0x4c>)
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <MX_DAC_Init+0x50>)
 8001196:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_DAC_Init+0x4c>)
 800119a:	f003 fde5 	bl	8004d68 <HAL_DAC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011a4:	f000 ffd8 	bl	8002158 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_DAC_Init+0x4c>)
 80011b8:	f003 fe4c 	bl	8004e54 <HAL_DAC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011c2:	f000 ffc9 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000469c 	.word	0x2000469c
 80011d4:	40007400 	.word	0x40007400

080011d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <MX_DMA2D_Init+0x60>)
 80011e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_DMA2D_Init+0x5c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA2D_Init+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_DMA2D_Init+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_DMA2D_Init+0x5c>)
 800120e:	f004 f835 	bl	800527c <HAL_DMA2D_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001218:	f000 ff9e 	bl	8002158 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800121c:	2101      	movs	r1, #1
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_DMA2D_Init+0x5c>)
 8001220:	f004 f98a 	bl	8005538 <HAL_DMA2D_ConfigLayer>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800122a:	f000 ff95 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20004790 	.word	0x20004790
 8001238:	4002b000 	.word	0x4002b000

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C1_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001278:	f004 fd72 	bl	8005d60 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001282:	f000 ff69 	bl	8002158 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x74>)
 800128a:	f005 fa81 	bl	8006790 <HAL_I2CEx_ConfigAnalogFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 ff60 	bl	8002158 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_I2C1_Init+0x74>)
 800129c:	f005 fac3 	bl	8006826 <HAL_I2CEx_ConfigDigitalFilter>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 ff57 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20004414 	.word	0x20004414
 80012b4:	40005400 	.word	0x40005400
 80012b8:	00c0eaff 	.word	0x00c0eaff

080012bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_I2C3_Init+0x74>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_I2C3_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_I2C3_Init+0x74>)
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <MX_I2C3_Init+0x7c>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_I2C3_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_I2C3_Init+0x74>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_I2C3_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C3_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_I2C3_Init+0x74>)
 80012f8:	f004 fd32 	bl	8005d60 <HAL_I2C_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001302:	f000 ff29 	bl	8002158 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001306:	2100      	movs	r1, #0
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <MX_I2C3_Init+0x74>)
 800130a:	f005 fa41 	bl	8006790 <HAL_I2CEx_ConfigAnalogFilter>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001314:	f000 ff20 	bl	8002158 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_I2C3_Init+0x74>)
 800131c:	f005 fa83 	bl	8006826 <HAL_I2CEx_ConfigDigitalFilter>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001326:	f000 ff17 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200042a0 	.word	0x200042a0
 8001334:	40005c00 	.word	0x40005c00
 8001338:	00c0eaff 	.word	0x00c0eaff

0800133c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2234      	movs	r2, #52	; 0x34
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f00b fe82 	bl	800d052 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001350:	4a3a      	ldr	r2, [pc, #232]	; (800143c <MX_LTDC_Init+0x100>)
 8001352:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_LTDC_Init+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MX_LTDC_Init+0xfc>)
 800136e:	2228      	movs	r2, #40	; 0x28
 8001370:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001374:	2209      	movs	r2, #9
 8001376:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MX_LTDC_Init+0xfc>)
 800137a:	2235      	movs	r2, #53	; 0x35
 800137c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001380:	220b      	movs	r2, #11
 8001382:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001386:	f240 2215 	movw	r2, #533	; 0x215
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_LTDC_Init+0xfc>)
 800138e:	f240 121b 	movw	r2, #283	; 0x11b
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001396:	f240 2235 	movw	r2, #565	; 0x235
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_LTDC_Init+0xfc>)
 800139e:	f240 121d 	movw	r2, #285	; 0x11d
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <MX_LTDC_Init+0xfc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_LTDC_Init+0xfc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_LTDC_Init+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <MX_LTDC_Init+0xfc>)
 80013be:	f005 fa7f 	bl	80068c0 <HAL_LTDC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013c8:	f000 fec6 	bl	8002158 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013e0:	2302      	movs	r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013e4:	23ff      	movs	r3, #255	; 0xff
 80013e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013f2:	2307      	movs	r3, #7
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001402:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_LTDC_Init+0xfc>)
 8001422:	f005 fbdf 	bl	8006be4 <HAL_LTDC_ConfigLayer>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800142c:	f000 fe94 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200044e4 	.word	0x200044e4
 800143c:	40016800 	.word	0x40016800

08001440 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b092      	sub	sp, #72	; 0x48
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	222c      	movs	r2, #44	; 0x2c
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f00b fdf5 	bl	800d052 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_RTC_Init+0x144>)
 800146a:	4a47      	ldr	r2, [pc, #284]	; (8001588 <MX_RTC_Init+0x148>)
 800146c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800146e:	4b45      	ldr	r3, [pc, #276]	; (8001584 <MX_RTC_Init+0x144>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <MX_RTC_Init+0x144>)
 8001476:	227f      	movs	r2, #127	; 0x7f
 8001478:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800147a:	4b42      	ldr	r3, [pc, #264]	; (8001584 <MX_RTC_Init+0x144>)
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <MX_RTC_Init+0x144>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_RTC_Init+0x144>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <MX_RTC_Init+0x144>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001492:	483c      	ldr	r0, [pc, #240]	; (8001584 <MX_RTC_Init+0x144>)
 8001494:	f006 fe82 	bl	800819c <HAL_RTC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800149e:	f000 fe5b 	bl	8002158 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	482f      	ldr	r0, [pc, #188]	; (8001584 <MX_RTC_Init+0x144>)
 80014c6:	f006 fee5 	bl	8008294 <HAL_RTC_SetTime>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014d0:	f000 fe42 	bl	8002158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014da:	2301      	movs	r3, #1
 80014dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MX_RTC_Init+0x144>)
 80014f6:	f006 ff8b 	bl	8008410 <HAL_RTC_SetDate>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001500:	f000 fe2a 	bl	8002158 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001504:	2300      	movs	r3, #0
 8001506:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001508:	2300      	movs	r3, #0
 800150a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800150c:	2300      	movs	r3, #0
 800150e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001528:	2301      	movs	r3, #1
 800152a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800152e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	2201      	movs	r2, #1
 8001538:	4619      	mov	r1, r3
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_RTC_Init+0x144>)
 800153c:	f007 f810 	bl	8008560 <HAL_RTC_SetAlarm>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001546:	f000 fe07 	bl	8002158 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800154a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	480b      	ldr	r0, [pc, #44]	; (8001584 <MX_RTC_Init+0x144>)
 8001558:	f007 f802 	bl	8008560 <HAL_RTC_SetAlarm>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001562:	f000 fdf9 	bl	8002158 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001566:	2202      	movs	r2, #2
 8001568:	2100      	movs	r1, #0
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_RTC_Init+0x144>)
 800156c:	f007 f982 	bl	8008874 <HAL_RTCEx_SetTimeStamp>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001576:	f000 fdef 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3748      	adds	r7, #72	; 0x48
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200046b0 	.word	0x200046b0
 8001588:	40002800 	.word	0x40002800

0800158c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_SPI2_Init+0x74>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <MX_SPI2_Init+0x78>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_SPI2_Init+0x74>)
 8001598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800159c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_SPI2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_SPI2_Init+0x74>)
 80015a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_SPI2_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_SPI2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_SPI2_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_SPI2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_SPI2_Init+0x74>)
 80015da:	2207      	movs	r2, #7
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_SPI2_Init+0x74>)
 80015e6:	2208      	movs	r2, #8
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_SPI2_Init+0x74>)
 80015ec:	f007 fa17 	bl	8008a1e <HAL_SPI_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 fdaf 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200042ec 	.word	0x200042ec
 8001604:	40003800 	.word	0x40003800

08001608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <MX_TIM1_Init+0xa4>)
 800162a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM1_Init+0xa0>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_TIM1_Init+0xa0>)
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_TIM1_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001654:	f007 fa75 	bl	8008b42 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800165e:	f000 fd7b 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	480e      	ldr	r0, [pc, #56]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001670:	f007 fd28 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800167a:	f000 fd6d 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM1_Init+0xa0>)
 8001690:	f008 fa5c 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800169a:	f000 fd5d 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200046d0 	.word	0x200046d0
 80016ac:	40010000 	.word	0x40010000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_TIM2_Init+0x98>)
 80016d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_TIM2_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_TIM2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_TIM2_Init+0x98>)
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_TIM2_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_TIM2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <MX_TIM2_Init+0x98>)
 80016f8:	f007 fa23 	bl	8008b42 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001702:	f000 fd29 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <MX_TIM2_Init+0x98>)
 8001714:	f007 fcd6 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800171e:	f000 fd1b 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <MX_TIM2_Init+0x98>)
 8001730:	f008 fa0c 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800173a:	f000 fd0d 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200047d0 	.word	0x200047d0

0800174c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	; 0x50
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <MX_TIM3_Init+0x114>)
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <MX_TIM3_Init+0x118>)
 8001792:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <MX_TIM3_Init+0x114>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <MX_TIM3_Init+0x114>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <MX_TIM3_Init+0x114>)
 80017a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <MX_TIM3_Init+0x114>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <MX_TIM3_Init+0x114>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017b4:	482a      	ldr	r0, [pc, #168]	; (8001860 <MX_TIM3_Init+0x114>)
 80017b6:	f007 f9c4 	bl	8008b42 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017c0:	f000 fcca 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ce:	4619      	mov	r1, r3
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_TIM3_Init+0x114>)
 80017d2:	f007 fc77 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017dc:	f000 fcbc 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017e0:	481f      	ldr	r0, [pc, #124]	; (8001860 <MX_TIM3_Init+0x114>)
 80017e2:	f007 fa03 	bl	8008bec <HAL_TIM_PWM_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80017ec:	f000 fcb4 	bl	8002158 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <MX_TIM3_Init+0x114>)
 8001800:	f007 fd1a 	bl	8009238 <HAL_TIM_SlaveConfigSynchro>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800180a:	f000 fca5 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4619      	mov	r1, r3
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <MX_TIM3_Init+0x114>)
 800181e:	f008 f995 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001828:	f000 fc96 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM3_Init+0x114>)
 8001844:	f007 fb26 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800184e:	f000 fc83 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM3_Init+0x114>)
 8001854:	f002 fac4 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200044a4 	.word	0x200044a4
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM5_Init+0x94>)
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <MX_TIM5_Init+0x98>)
 800188a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM5_Init+0x94>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_TIM5_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_TIM5_Init+0x94>)
 800189a:	f04f 32ff 	mov.w	r2, #4294967295
 800189e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_TIM5_Init+0x94>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM5_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM5_Init+0x94>)
 80018ae:	f007 f948 	bl	8008b42 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018b8:	f000 fc4e 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM5_Init+0x94>)
 80018ca:	f007 fbfb 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018d4:	f000 fc40 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_TIM5_Init+0x94>)
 80018e6:	f008 f931 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018f0:	f000 fc32 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20004464 	.word	0x20004464
 8001900:	40000c00 	.word	0x40000c00

08001904 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09a      	sub	sp, #104	; 0x68
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	222c      	movs	r2, #44	; 0x2c
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00b fb87 	bl	800d052 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001944:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001946:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <MX_TIM8_Init+0x150>)
 8001948:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <MX_TIM8_Init+0x14c>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <MX_TIM8_Init+0x14c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001970:	4837      	ldr	r0, [pc, #220]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001972:	f007 f8e6 	bl	8008b42 <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800197c:	f000 fbec 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001984:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800198a:	4619      	mov	r1, r3
 800198c:	4830      	ldr	r0, [pc, #192]	; (8001a50 <MX_TIM8_Init+0x14c>)
 800198e:	f007 fb99 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001998:	f000 fbde 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800199c:	482c      	ldr	r0, [pc, #176]	; (8001a50 <MX_TIM8_Init+0x14c>)
 800199e:	f007 f925 	bl	8008bec <HAL_TIM_PWM_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80019a8:	f000 fbd6 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019bc:	4619      	mov	r1, r3
 80019be:	4824      	ldr	r0, [pc, #144]	; (8001a50 <MX_TIM8_Init+0x14c>)
 80019c0:	f008 f8c4 	bl	8009b4c <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019ca:	f000 fbc5 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ce:	2360      	movs	r3, #96	; 0x60
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ea:	220c      	movs	r2, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4818      	ldr	r0, [pc, #96]	; (8001a50 <MX_TIM8_Init+0x14c>)
 80019f0:	f007 fa50 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019fa:	f000 fbad 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001a34:	f008 f918 	bl	8009c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a3e:	f000 fb8b 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM8_Init+0x14c>)
 8001a44:	f002 f9cc 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3768      	adds	r7, #104	; 0x68
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200043d0 	.word	0x200043d0
 8001a54:	40010400 	.word	0x40010400

08001a58 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_UART7_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_UART7_Init+0x58>)
 8001a9c:	f008 f980 	bl	8009da0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f000 fb57 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20004350 	.word	0x20004350
 8001ab4:	40007800 	.word	0x40007800

08001ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <MX_USART1_UART_Init+0x6c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001af6:	2230      	movs	r2, #48	; 0x30
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART1_UART_Init+0x68>)
 8001b0c:	f008 f948 	bl	8009da0 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8001b16:	f000 fb1f 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000461c 	.word	0x2000461c
 8001b24:	40011000 	.word	0x40011000

08001b28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <MX_USART6_UART_Init+0x5c>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_USART6_UART_Init+0x58>)
 8001b6c:	f008 f918 	bl	8009da0 <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 faef 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20004710 	.word	0x20004710
 8001b84:	40011400 	.word	0x40011400

08001b88 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_FMC_Init+0x94>)
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <MX_FMC_Init+0x98>)
 8001ba4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <MX_FMC_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bba:	2210      	movs	r2, #16
 8001bbc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_FMC_Init+0x94>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001be2:	2310      	movs	r3, #16
 8001be4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001be6:	2310      	movs	r3, #16
 8001be8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001bea:	2310      	movs	r3, #16
 8001bec:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001bf2:	2310      	movs	r3, #16
 8001bf4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <MX_FMC_Init+0x94>)
 8001c04:	f006 fe8c 	bl	8008920 <HAL_SDRAM_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001c0e:	f000 faa3 	bl	8002158 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20004810 	.word	0x20004810
 8001c20:	a0000140 	.word	0xa0000140

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b090      	sub	sp, #64	; 0x40
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3a:	4bb0      	ldr	r3, [pc, #704]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4aaf      	ldr	r2, [pc, #700]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4bad      	ldr	r3, [pc, #692]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4baa      	ldr	r3, [pc, #680]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4aa9      	ldr	r2, [pc, #676]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4ba7      	ldr	r3, [pc, #668]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4ba4      	ldr	r3, [pc, #656]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4aa3      	ldr	r2, [pc, #652]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4ba1      	ldr	r3, [pc, #644]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c82:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a9d      	ldr	r2, [pc, #628]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b9b      	ldr	r3, [pc, #620]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c9a:	4b98      	ldr	r3, [pc, #608]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a97      	ldr	r2, [pc, #604]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b95      	ldr	r3, [pc, #596]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb2:	4b92      	ldr	r3, [pc, #584]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a91      	ldr	r2, [pc, #580]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cca:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a8b      	ldr	r2, [pc, #556]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b89      	ldr	r3, [pc, #548]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ce2:	4b86      	ldr	r3, [pc, #536]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a85      	ldr	r2, [pc, #532]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b83      	ldr	r3, [pc, #524]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b80      	ldr	r3, [pc, #512]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d12:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a79      	ldr	r2, [pc, #484]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b77      	ldr	r3, [pc, #476]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2a:	4b74      	ldr	r3, [pc, #464]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b71      	ldr	r3, [pc, #452]	; (8001efc <MX_GPIO_Init+0x2d8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2160      	movs	r1, #96	; 0x60
 8001d46:	486e      	ldr	r0, [pc, #440]	; (8001f00 <MX_GPIO_Init+0x2dc>)
 8001d48:	f003 fff0 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2120      	movs	r1, #32
 8001d50:	486c      	ldr	r0, [pc, #432]	; (8001f04 <MX_GPIO_Init+0x2e0>)
 8001d52:	f003 ffeb 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2108      	movs	r1, #8
 8001d5a:	486a      	ldr	r0, [pc, #424]	; (8001f04 <MX_GPIO_Init+0x2e0>)
 8001d5c:	f003 ffe6 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2108      	movs	r1, #8
 8001d64:	4868      	ldr	r0, [pc, #416]	; (8001f08 <MX_GPIO_Init+0x2e4>)
 8001d66:	f003 ffe1 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	4867      	ldr	r0, [pc, #412]	; (8001f0c <MX_GPIO_Init+0x2e8>)
 8001d70:	f003 ffdc 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	4863      	ldr	r0, [pc, #396]	; (8001f08 <MX_GPIO_Init+0x2e4>)
 8001d7c:	f003 ffd6 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d80:	2200      	movs	r2, #0
 8001d82:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d86:	4862      	ldr	r0, [pc, #392]	; (8001f10 <MX_GPIO_Init+0x2ec>)
 8001d88:	f003 ffd0 	bl	8005d2c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2108      	movs	r1, #8
 8001d90:	4860      	ldr	r0, [pc, #384]	; (8001f14 <MX_GPIO_Init+0x2f0>)
 8001d92:	f003 ffcb 	bl	8005d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d96:	2308      	movs	r3, #8
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4855      	ldr	r0, [pc, #340]	; (8001f00 <MX_GPIO_Init+0x2dc>)
 8001daa:	f003 fcf3 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001dae:	f643 0323 	movw	r3, #14371	; 0x3823
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4853      	ldr	r0, [pc, #332]	; (8001f18 <MX_GPIO_Init+0x2f4>)
 8001dcc:	f003 fce2 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001dd0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de2:	4619      	mov	r1, r3
 8001de4:	484d      	ldr	r0, [pc, #308]	; (8001f1c <MX_GPIO_Init+0x2f8>)
 8001de6:	f003 fcd5 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001dea:	2360      	movs	r3, #96	; 0x60
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	483f      	ldr	r0, [pc, #252]	; (8001f00 <MX_GPIO_Init+0x2dc>)
 8001e02:	f003 fcc7 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4841      	ldr	r0, [pc, #260]	; (8001f20 <MX_GPIO_Init+0x2fc>)
 8001e1c:	f003 fcba 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e20:	2340      	movs	r3, #64	; 0x40
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <MX_GPIO_Init+0x300>)
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	4619      	mov	r1, r3
 8001e32:	4834      	ldr	r0, [pc, #208]	; (8001f04 <MX_GPIO_Init+0x2e0>)
 8001e34:	f003 fcae 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e38:	2328      	movs	r3, #40	; 0x28
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	482d      	ldr	r0, [pc, #180]	; (8001f04 <MX_GPIO_Init+0x2e0>)
 8001e50:	f003 fca0 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001e54:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4826      	ldr	r0, [pc, #152]	; (8001f08 <MX_GPIO_Init+0x2e4>)
 8001e6e:	f003 fc91 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_GPIO_Init+0x304>)
 8001e88:	f003 fc84 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <MX_GPIO_Init+0x2e8>)
 8001ea4:	f003 fc76 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4812      	ldr	r0, [pc, #72]	; (8001f04 <MX_GPIO_Init+0x2e0>)
 8001ebc:	f003 fc6a 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ec0:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480e      	ldr	r0, [pc, #56]	; (8001f10 <MX_GPIO_Init+0x2ec>)
 8001ed6:	f003 fc5d 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eda:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	; (8001f10 <MX_GPIO_Init+0x2ec>)
 8001ef4:	f003 fc4e 	bl	8005794 <HAL_GPIO_Init>
 8001ef8:	e018      	b.n	8001f2c <MX_GPIO_Init+0x308>
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40022800 	.word	0x40022800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40022400 	.word	0x40022400
 8001f24:	10120000 	.word	0x10120000
 8001f28:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <MX_GPIO_Init+0x3c0>)
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4829      	ldr	r0, [pc, #164]	; (8001fe8 <MX_GPIO_Init+0x3c4>)
 8001f42:	f003 fc27 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f46:	2310      	movs	r3, #16
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f56:	230a      	movs	r3, #10
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4822      	ldr	r0, [pc, #136]	; (8001fec <MX_GPIO_Init+0x3c8>)
 8001f62:	f003 fc17 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001f66:	2384      	movs	r3, #132	; 0x84
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <MX_GPIO_Init+0x3cc>)
 8001f7a:	f003 fc0b 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f96:	4619      	mov	r1, r3
 8001f98:	4816      	ldr	r0, [pc, #88]	; (8001ff4 <MX_GPIO_Init+0x3d0>)
 8001f9a:	f003 fbfb 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <MX_GPIO_Init+0x3cc>)
 8001fb6:	f003 fbed 	bl	8005794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001fba:	2328      	movs	r3, #40	; 0x28
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fca:	230a      	movs	r3, #10
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <MX_GPIO_Init+0x3d4>)
 8001fd6:	f003 fbdd 	bl	8005794 <HAL_GPIO_Init>

}
 8001fda:	bf00      	nop
 8001fdc:	3740      	adds	r7, #64	; 0x40
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002004:	2001      	movs	r0, #1
 8002006:	f008 fdfe 	bl	800ac06 <osDelay>
 800200a:	e7fb      	b.n	8002004 <StartDefaultTask+0x8>

0800200c <ecrire_g>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ecrire_g */
void ecrire_g(void const * argument)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ecrire_g */
	uint8_t text_gauche[20]="J'ecris a gauche";
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <ecrire_g+0xa4>)
 8002016:	f107 0410 	add.w	r4, r7, #16
 800201a:	461d      	mov	r5, r3
 800201c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	7023      	strb	r3, [r4, #0]
 8002024:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
 800202c:	709a      	strb	r2, [r3, #2]
	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = 100;
 800202e:	2364      	movs	r3, #100	; 0x64
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
	     // Initialise the xLastWakeTime variable with the current time.
	     xLastWakeTime = xTaskGetTickCount();
 8002032:	f009 fecd 	bl	800bdd0 <xTaskGetTickCount>
 8002036:	4603      	mov	r3, r0
 8002038:	60fb      	str	r3, [r7, #12]
	int i;
	int value;
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(cafonctionnepasHandle, ( TickType_t ) 10);
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <ecrire_g+0xa8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	210a      	movs	r1, #10
 8002040:	4618      	mov	r0, r3
 8002042:	f009 f957 	bl	800b2f4 <xQueueSemaphoreTake>

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002046:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800204a:	f000 fb35 	bl	80026b8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(260,24,(uint8_t*) text_gauche,RIGHT_MODE);
 800204e:	f107 0210 	add.w	r2, r7, #16
 8002052:	2302      	movs	r3, #2
 8002054:	2118      	movs	r1, #24
 8002056:	f44f 7082 	mov.w	r0, #260	; 0x104
 800205a:	f000 fbfb 	bl	8002854 <BSP_LCD_DisplayStringAt>
	for (i=1;i<500;i++)
 800205e:	2301      	movs	r3, #1
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002062:	e013      	b.n	800208c <ecrire_g+0x80>
		value = (value + 5)*(int)sqrt(400.5)%100;
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	1d5a      	adds	r2, r3, #5
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <ecrire_g+0xac>)
 8002072:	fb82 1203 	smull	r1, r2, r2, r3
 8002076:	1151      	asrs	r1, r2, #5
 8002078:	17da      	asrs	r2, r3, #31
 800207a:	1a8a      	subs	r2, r1, r2
 800207c:	2164      	movs	r1, #100	; 0x64
 800207e:	fb01 f202 	mul.w	r2, r1, r2
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i=1;i<500;i++)
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	3301      	adds	r3, #1
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002092:	dbe7      	blt.n	8002064 <ecrire_g+0x58>

	xSemaphoreGive(cafonctionnepasHandle);
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <ecrire_g+0xa8>)
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	f009 f827 	bl	800b0f0 <xQueueGenericSend>
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 fccd 	bl	800ba48 <vTaskDelayUntil>
	xSemaphoreTake(cafonctionnepasHandle, ( TickType_t ) 10);
 80020ae:	e7c4      	b.n	800203a <ecrire_g+0x2e>
 80020b0:	0800d93c 	.word	0x0800d93c
 80020b4:	20004410 	.word	0x20004410
 80020b8:	51eb851f 	.word	0x51eb851f

080020bc <ecrire_d>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ecrire_d */
void ecrire_d(void const * argument)
{
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ecrire_d */
	uint8_t text_droite[20]="J'ecris a droite";
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <ecrire_d+0x6c>)
 80020c6:	f107 0410 	add.w	r4, r7, #16
 80020ca:	461d      	mov	r5, r3
 80020cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	7023      	strb	r3, [r4, #0]
 80020d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80020d8:	2200      	movs	r2, #0
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	709a      	strb	r2, [r3, #2]
	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = 7;
 80020de:	2307      	movs	r3, #7
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
	     // Initialise the xLastWakeTime variable with the current time.
	     xLastWakeTime = xTaskGetTickCount();
 80020e2:	f009 fe75 	bl	800bdd0 <xTaskGetTickCount>
 80020e6:	4603      	mov	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	  for(;;)
	  {

		xSemaphoreTake(cafonctionnepasHandle, ( TickType_t ) 10);
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <ecrire_d+0x70>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	210a      	movs	r1, #10
 80020f0:	4618      	mov	r0, r3
 80020f2:	f009 f8ff 	bl	800b2f4 <xQueueSemaphoreTake>

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020f6:	480e      	ldr	r0, [pc, #56]	; (8002130 <ecrire_d+0x74>)
 80020f8:	f000 fade 	bl	80026b8 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(260,24,(uint8_t*) text_droite,LEFT_MODE);
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	2303      	movs	r3, #3
 8002102:	2118      	movs	r1, #24
 8002104:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002108:	f000 fba4 	bl	8002854 <BSP_LCD_DisplayStringAt>

		xSemaphoreGive(cafonctionnepasHandle);
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <ecrire_d+0x70>)
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	2300      	movs	r3, #0
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	f008 ffeb 	bl	800b0f0 <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002120:	4618      	mov	r0, r3
 8002122:	f009 fc91 	bl	800ba48 <vTaskDelayUntil>
		xSemaphoreTake(cafonctionnepasHandle, ( TickType_t ) 10);
 8002126:	e7e0      	b.n	80020ea <ecrire_d+0x2e>
 8002128:	0800d950 	.word	0x0800d950
 800212c:	20004410 	.word	0x20004410
 8002130:	ffff0000 	.word	0xffff0000

08002134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002146:	f002 f911 	bl	800436c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40001000 	.word	0x40001000

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800215e:	e7fe      	b.n	800215e <Error_Handler+0x6>

08002160 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <I2Cx_MspInit+0x150>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d14d      	bne.n	800220c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a4f      	ldr	r2, [pc, #316]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <I2Cx_MspInit+0x154>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800218c:	2312      	movs	r3, #18
 800218e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002198:	2304      	movs	r3, #4
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4845      	ldr	r0, [pc, #276]	; (80022b8 <I2Cx_MspInit+0x158>)
 80021a4:	f003 faf6 	bl	8005794 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4840      	ldr	r0, [pc, #256]	; (80022b8 <I2Cx_MspInit+0x158>)
 80021b6:	f003 faed 	bl	8005794 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a3d      	ldr	r2, [pc, #244]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021dc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <I2Cx_MspInit+0x154>)
 80021e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021e8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	210f      	movs	r1, #15
 80021ee:	2048      	movs	r0, #72	; 0x48
 80021f0:	f002 fd90 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80021f4:	2048      	movs	r0, #72	; 0x48
 80021f6:	f002 fda9 	bl	8004d4c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	210f      	movs	r1, #15
 80021fe:	2049      	movs	r0, #73	; 0x49
 8002200:	f002 fd88 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002204:	2049      	movs	r0, #73	; 0x49
 8002206:	f002 fda1 	bl	8004d4c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800220a:	e04d      	b.n	80022a8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800220c:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <I2Cx_MspInit+0x154>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <I2Cx_MspInit+0x154>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002228:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002232:	2302      	movs	r3, #2
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002236:	2304      	movs	r3, #4
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	481e      	ldr	r0, [pc, #120]	; (80022bc <I2Cx_MspInit+0x15c>)
 8002242:	f003 faa7 	bl	8005794 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	481a      	ldr	r0, [pc, #104]	; (80022bc <I2Cx_MspInit+0x15c>)
 8002254:	f003 fa9e 	bl	8005794 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <I2Cx_MspInit+0x154>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <I2Cx_MspInit+0x154>)
 800225e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <I2Cx_MspInit+0x154>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <I2Cx_MspInit+0x154>)
 8002282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002286:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	210f      	movs	r1, #15
 800228c:	201f      	movs	r0, #31
 800228e:	f002 fd41 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002292:	201f      	movs	r0, #31
 8002294:	f002 fd5a 	bl	8004d4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	210f      	movs	r1, #15
 800229c:	2020      	movs	r0, #32
 800229e:	f002 fd39 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80022a2:	2020      	movs	r0, #32
 80022a4:	f002 fd52 	bl	8004d4c <HAL_NVIC_EnableIRQ>
}
 80022a8:	bf00      	nop
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000354 	.word	0x20000354
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40021c00 	.word	0x40021c00
 80022bc:	40020400 	.word	0x40020400

080022c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f004 f837 	bl	800633c <HAL_I2C_GetState>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d125      	bne.n	8002320 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <I2Cx_Init+0x68>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d103      	bne.n	80022e4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <I2Cx_Init+0x6c>)
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e002      	b.n	80022ea <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <I2Cx_Init+0x70>)
 80022e8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <I2Cx_Init+0x74>)
 80022ee:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff23 	bl	8002160 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f003 fd20 	bl	8005d60 <HAL_I2C_Init>
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000354 	.word	0x20000354
 800232c:	40005c00 	.word	0x40005c00
 8002330:	40005400 	.word	0x40005400
 8002334:	40912732 	.word	0x40912732

08002338 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af04      	add	r7, sp, #16
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	72fb      	strb	r3, [r7, #11]
 800234a:	460b      	mov	r3, r1
 800234c:	813b      	strh	r3, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	b299      	uxth	r1, r3
 800235a:	88f8      	ldrh	r0, [r7, #6]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4603      	mov	r3, r0
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f003 feca 	bl	8006108 <HAL_I2C_Mem_Read>
 8002374:	4603      	mov	r3, r0
 8002376:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	4619      	mov	r1, r3
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f832 	bl	80023ec <I2Cx_Error>
  }
  return status;    
 8002388:	7dfb      	ldrb	r3, [r7, #23]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af04      	add	r7, sp, #16
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	461a      	mov	r2, r3
 80023a0:	4603      	mov	r3, r0
 80023a2:	72fb      	strb	r3, [r7, #11]
 80023a4:	460b      	mov	r3, r1
 80023a6:	813b      	strh	r3, [r7, #8]
 80023a8:	4613      	mov	r3, r2
 80023aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	b299      	uxth	r1, r3
 80023b4:	88f8      	ldrh	r0, [r7, #6]
 80023b6:	893a      	ldrh	r2, [r7, #8]
 80023b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023bc:	9302      	str	r3, [sp, #8]
 80023be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4603      	mov	r3, r0
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f003 fd89 	bl	8005ee0 <HAL_I2C_Mem_Write>
 80023ce:	4603      	mov	r3, r0
 80023d0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	4619      	mov	r1, r3
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f805 	bl	80023ec <I2Cx_Error>
  }
  return status;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f003 fd41 	bl	8005e80 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff5e 	bl	80022c0 <I2Cx_Init>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TS_IO_Init+0x10>)
 8002412:	f7ff ff55 	bl	80022c0 <I2Cx_Init>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000354 	.word	0x20000354

08002420 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af02      	add	r7, sp, #8
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
 800242a:	460b      	mov	r3, r1
 800242c:	71bb      	strb	r3, [r7, #6]
 800242e:	4613      	mov	r3, r2
 8002430:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	b29a      	uxth	r2, r3
 8002436:	79f9      	ldrb	r1, [r7, #7]
 8002438:	2301      	movs	r3, #1
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	1d7b      	adds	r3, r7, #5
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	4803      	ldr	r0, [pc, #12]	; (8002450 <TS_IO_Write+0x30>)
 8002444:	f7ff ffa5 	bl	8002392 <I2Cx_WriteMultiple>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000354 	.word	0x20000354

08002454 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	4603      	mov	r3, r0
 800245c:	460a      	mov	r2, r1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	4613      	mov	r3, r2
 8002462:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002468:	79bb      	ldrb	r3, [r7, #6]
 800246a:	b29a      	uxth	r2, r3
 800246c:	79f9      	ldrb	r1, [r7, #7]
 800246e:	2301      	movs	r3, #1
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	f107 030f 	add.w	r3, r7, #15
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	4804      	ldr	r0, [pc, #16]	; (800248c <TS_IO_Read+0x38>)
 800247c:	f7ff ff5c 	bl	8002338 <I2Cx_ReadMultiple>

  return read_value;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000354 	.word	0x20000354

08002490 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f001 ff87 	bl	80043ac <HAL_Delay>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024ae:	2228      	movs	r2, #40	; 0x28
 80024b0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024b4:	2209      	movs	r2, #9
 80024b6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024ba:	2235      	movs	r2, #53	; 0x35
 80024bc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024c0:	220b      	movs	r2, #11
 80024c2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024c6:	f240 121b 	movw	r2, #283	; 0x11b
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024ce:	f240 2215 	movw	r2, #533	; 0x215
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024d6:	f240 121d 	movw	r2, #285	; 0x11d
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024de:	f240 2235 	movw	r2, #565	; 0x235
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024e4:	2100      	movs	r1, #0
 80024e6:	4823      	ldr	r0, [pc, #140]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024e8:	f000 fbd0 	bl	8002c8c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80024fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <BSP_LCD_Init+0xcc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <BSP_LCD_Init+0xcc>)
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <BSP_LCD_Init+0xcc>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <BSP_LCD_Init+0xcc>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <BSP_LCD_Init+0xd0>)
 8002530:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002532:	4810      	ldr	r0, [pc, #64]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002534:	f004 fb94 	bl	8006c60 <HAL_LTDC_GetState>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800253e:	2100      	movs	r1, #0
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002542:	f000 fac9 	bl	8002ad8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002546:	480b      	ldr	r0, [pc, #44]	; (8002574 <BSP_LCD_Init+0xcc>)
 8002548:	f004 f9ba 	bl	80068c0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002552:	480a      	ldr	r0, [pc, #40]	; (800257c <BSP_LCD_Init+0xd4>)
 8002554:	f003 fbea 	bl	8005d2c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002558:	2201      	movs	r2, #1
 800255a:	2108      	movs	r1, #8
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <BSP_LCD_Init+0xd8>)
 800255e:	f003 fbe5 	bl	8005d2c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002562:	f000 fcb3 	bl	8002ecc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <BSP_LCD_Init+0xdc>)
 8002568:	f000 f8d8 	bl	800271c <BSP_LCD_SetFont>
  
  return LCD_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000484c 	.word	0x2000484c
 8002578:	40016800 	.word	0x40016800
 800257c:	40022000 	.word	0x40022000
 8002580:	40022800 	.word	0x40022800
 8002584:	20000028 	.word	0x20000028

08002588 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <BSP_LCD_GetXSize+0x20>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <BSP_LCD_GetXSize+0x24>)
 8002592:	2134      	movs	r1, #52	; 0x34
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3360      	adds	r3, #96	; 0x60
 800259c:	681b      	ldr	r3, [r3, #0]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	200003e0 	.word	0x200003e0
 80025ac:	2000484c 	.word	0x2000484c

080025b0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <BSP_LCD_GetYSize+0x20>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <BSP_LCD_GetYSize+0x24>)
 80025ba:	2134      	movs	r1, #52	; 0x34
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3364      	adds	r3, #100	; 0x64
 80025c4:	681b      	ldr	r3, [r3, #0]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	200003e0 	.word	0x200003e0
 80025d4:	2000484c 	.word	0x2000484c

080025d8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80025d8:	b580      	push	{r7, lr}
 80025da:	b090      	sub	sp, #64	; 0x40
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80025e8:	f7ff ffce 	bl	8002588 <BSP_LCD_GetXSize>
 80025ec:	4603      	mov	r3, r0
 80025ee:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025f4:	f7ff ffdc 	bl	80025b0 <BSP_LCD_GetYSize>
 80025f8:	4603      	mov	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800261e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002624:	2307      	movs	r3, #7
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002628:	f7ff ffae 	bl	8002588 <BSP_LCD_GetXSize>
 800262c:	4603      	mov	r3, r0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002630:	f7ff ffbe 	bl	80025b0 <BSP_LCD_GetYSize>
 8002634:	4603      	mov	r3, r0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	4619      	mov	r1, r3
 8002640:	4812      	ldr	r0, [pc, #72]	; (800268c <BSP_LCD_LayerDefaultInit+0xb4>)
 8002642:	f004 facf 	bl	8006be4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	4911      	ldr	r1, [pc, #68]	; (8002690 <BSP_LCD_LayerDefaultInit+0xb8>)
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3304      	adds	r3, #4
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	490c      	ldr	r1, [pc, #48]	; (8002690 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3308      	adds	r3, #8
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <BSP_LCD_LayerDefaultInit+0xbc>)
 800266e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	4907      	ldr	r1, [pc, #28]	; (8002690 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002682:	601a      	str	r2, [r3, #0]
}
 8002684:	bf00      	nop
 8002686:	3740      	adds	r7, #64	; 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000484c 	.word	0x2000484c
 8002690:	200003e4 	.word	0x200003e4
 8002694:	20000028 	.word	0x20000028

08002698 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <BSP_LCD_SelectLayer+0x1c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
} 
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200003e0 	.word	0x200003e0

080026b8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <BSP_LCD_SetTextColor+0x28>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <BSP_LCD_SetTextColor+0x2c>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	200003e0 	.word	0x200003e0
 80026e4:	200003e4 	.word	0x200003e4

080026e8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <BSP_LCD_SetBackColor+0x2c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4908      	ldr	r1, [pc, #32]	; (8002718 <BSP_LCD_SetBackColor+0x30>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3304      	adds	r3, #4
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200003e0 	.word	0x200003e0
 8002718:	200003e4 	.word	0x200003e4

0800271c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <BSP_LCD_SetFont+0x2c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4908      	ldr	r1, [pc, #32]	; (800274c <BSP_LCD_SetFont+0x30>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	3308      	adds	r3, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200003e0 	.word	0x200003e0
 800274c:	200003e4 	.word	0x200003e4

08002750 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <BSP_LCD_GetFont+0x24>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <BSP_LCD_GetFont+0x28>)
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3308      	adds	r3, #8
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200003e0 	.word	0x200003e0
 8002778:	200003e4 	.word	0x200003e4

0800277c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b085      	sub	sp, #20
 8002780:	af02      	add	r7, sp, #8
 8002782:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <BSP_LCD_Clear+0x48>)
 8002786:	681c      	ldr	r4, [r3, #0]
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <BSP_LCD_Clear+0x48>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <BSP_LCD_Clear+0x4c>)
 800278e:	2134      	movs	r1, #52	; 0x34
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461d      	mov	r5, r3
 800279c:	f7ff fef4 	bl	8002588 <BSP_LCD_GetXSize>
 80027a0:	4606      	mov	r6, r0
 80027a2:	f7ff ff05 	bl	80025b0 <BSP_LCD_GetYSize>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2300      	movs	r3, #0
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	4632      	mov	r2, r6
 80027b4:	4629      	mov	r1, r5
 80027b6:	4620      	mov	r0, r4
 80027b8:	f000 fb3c 	bl	8002e34 <LL_FillBuffer>
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c4:	200003e0 	.word	0x200003e0
 80027c8:	2000484c 	.word	0x2000484c

080027cc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
 80027d6:	460b      	mov	r3, r1
 80027d8:	80bb      	strh	r3, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <BSP_LCD_DisplayChar+0x80>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <BSP_LCD_DisplayChar+0x84>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3308      	adds	r3, #8
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <BSP_LCD_DisplayChar+0x80>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4c14      	ldr	r4, [pc, #80]	; (8002850 <BSP_LCD_DisplayChar+0x84>)
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4423      	add	r3, r4
 800280a:	3308      	adds	r3, #8
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002810:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <BSP_LCD_DisplayChar+0x80>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <BSP_LCD_DisplayChar+0x84>)
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4423      	add	r3, r4
 8002824:	3308      	adds	r3, #8
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	889b      	ldrh	r3, [r3, #4]
 800282a:	3307      	adds	r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	da00      	bge.n	8002832 <BSP_LCD_DisplayChar+0x66>
 8002830:	3307      	adds	r3, #7
 8002832:	10db      	asrs	r3, r3, #3
 8002834:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002838:	18ca      	adds	r2, r1, r3
 800283a:	88b9      	ldrh	r1, [r7, #4]
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fa40 	bl	8002cc4 <DrawChar>
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	200003e0 	.word	0x200003e0
 8002850:	200003e4 	.word	0x200003e4

08002854 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	81fb      	strh	r3, [r7, #14]
 8002862:	460b      	mov	r3, r1
 8002864:	81bb      	strh	r3, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800286a:	2301      	movs	r3, #1
 800286c:	83fb      	strh	r3, [r7, #30]
 800286e:	2300      	movs	r3, #0
 8002870:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800287e:	e002      	b.n	8002886 <BSP_LCD_DisplayStringAt+0x32>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	3301      	adds	r3, #1
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	617a      	str	r2, [r7, #20]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f6      	bne.n	8002880 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002892:	f7ff fe79 	bl	8002588 <BSP_LCD_GetXSize>
 8002896:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	494f      	ldr	r1, [pc, #316]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3308      	adds	r3, #8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	889b      	ldrh	r3, [r3, #4]
 80028ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d01c      	beq.n	80028f2 <BSP_LCD_DisplayStringAt+0x9e>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d017      	beq.n	80028ec <BSP_LCD_DisplayStringAt+0x98>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d12e      	bne.n	800291e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad1      	subs	r1, r2, r3
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4843      	ldr	r0, [pc, #268]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4403      	add	r3, r0
 80028d6:	3308      	adds	r3, #8
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	889b      	ldrh	r3, [r3, #4]
 80028dc:	fb03 f301 	mul.w	r3, r3, r1
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	4413      	add	r3, r2
 80028e8:	83fb      	strh	r3, [r7, #30]
      break;
 80028ea:	e01b      	b.n	8002924 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	83fb      	strh	r3, [r7, #30]
      break;
 80028f0:	e018      	b.n	8002924 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b299      	uxth	r1, r3
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4836      	ldr	r0, [pc, #216]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4403      	add	r3, r0
 800290a:	3308      	adds	r3, #8
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	fb11 f303 	smulbb	r3, r1, r3
 8002914:	b29a      	uxth	r2, r3
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	83fb      	strh	r3, [r7, #30]
      break;
 800291c:	e002      	b.n	8002924 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	83fb      	strh	r3, [r7, #30]
      break;
 8002922:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002924:	8bfb      	ldrh	r3, [r7, #30]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <BSP_LCD_DisplayStringAt+0xde>
 800292a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800292e:	2b00      	cmp	r3, #0
 8002930:	da1d      	bge.n	800296e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002936:	e01a      	b.n	800296e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	89b9      	ldrh	r1, [r7, #12]
 800293e:	8bfb      	ldrh	r3, [r7, #30]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff43 	bl	80027cc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4923      	ldr	r1, [pc, #140]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3308      	adds	r3, #8
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	889a      	ldrh	r2, [r3, #4]
 800295c:	8bfb      	ldrh	r3, [r7, #30]
 800295e:	4413      	add	r3, r2
 8002960:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
    i++;
 8002968:	8bbb      	ldrh	r3, [r7, #28]
 800296a:	3301      	adds	r3, #1
 800296c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2dc      	uxtb	r4, r3
 800297c:	f7ff fe04 	bl	8002588 <BSP_LCD_GetXSize>
 8002980:	4605      	mov	r5, r0
 8002982:	8bb9      	ldrh	r1, [r7, #28]
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4403      	add	r3, r0
 8002994:	3308      	adds	r3, #8
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	889b      	ldrh	r3, [r3, #4]
 800299a:	fb03 f301 	mul.w	r3, r3, r1
 800299e:	1aeb      	subs	r3, r5, r3
 80029a0:	b299      	uxth	r1, r3
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <BSP_LCD_DisplayStringAt+0x180>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	480c      	ldr	r0, [pc, #48]	; (80029d8 <BSP_LCD_DisplayStringAt+0x184>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4403      	add	r3, r0
 80029b2:	3308      	adds	r3, #8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	889b      	ldrh	r3, [r3, #4]
 80029b8:	4299      	cmp	r1, r3
 80029ba:	bf2c      	ite	cs
 80029bc:	2301      	movcs	r3, #1
 80029be:	2300      	movcc	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4023      	ands	r3, r4
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1b6      	bne.n	8002938 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80029ca:	bf00      	nop
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200003e0 	.word	0x200003e0
 80029d8:	200003e4 	.word	0x200003e4

080029dc <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80029e8:	f7ff feb2 	bl	8002750 <BSP_LCD_GetFont>
 80029ec:	4603      	mov	r3, r0
 80029ee:	88db      	ldrh	r3, [r3, #6]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	fb12 f303 	smulbb	r3, r2, r3
 80029f6:	b299      	uxth	r1, r3
 80029f8:	2303      	movs	r3, #3
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff ff29 	bl	8002854 <BSP_LCD_DisplayStringAt>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	603a      	str	r2, [r7, #0]
 8002a16:	80fb      	strh	r3, [r7, #6]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <BSP_LCD_DrawPixel+0x88>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <BSP_LCD_DrawPixel+0x8c>)
 8002a22:	2134      	movs	r1, #52	; 0x34
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3348      	adds	r3, #72	; 0x48
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d116      	bne.n	8002a60 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <BSP_LCD_DrawPixel+0x88>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <BSP_LCD_DrawPixel+0x8c>)
 8002a38:	2134      	movs	r1, #52	; 0x34
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	335c      	adds	r3, #92	; 0x5c
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	88bd      	ldrh	r5, [r7, #4]
 8002a46:	f7ff fd9f 	bl	8002588 <BSP_LCD_GetXSize>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	fb03 f205 	mul.w	r2, r3, r5
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4413      	add	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4423      	add	r3, r4
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002a5e:	e015      	b.n	8002a8c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <BSP_LCD_DrawPixel+0x88>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <BSP_LCD_DrawPixel+0x8c>)
 8002a66:	2134      	movs	r1, #52	; 0x34
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	681c      	ldr	r4, [r3, #0]
 8002a72:	88bd      	ldrh	r5, [r7, #4]
 8002a74:	f7ff fd88 	bl	8002588 <BSP_LCD_GetXSize>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	fb03 f205 	mul.w	r2, r3, r5
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4423      	add	r3, r4
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}
 8002a94:	200003e0 	.word	0x200003e0
 8002a98:	2000484c 	.word	0x2000484c

08002a9c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <BSP_LCD_DisplayOn+0x30>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <BSP_LCD_DisplayOn+0x30>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <BSP_LCD_DisplayOn+0x34>)
 8002ab8:	f003 f938 	bl	8005d2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002abc:	2201      	movs	r2, #1
 8002abe:	2108      	movs	r1, #8
 8002ac0:	4804      	ldr	r0, [pc, #16]	; (8002ad4 <BSP_LCD_DisplayOn+0x38>)
 8002ac2:	f003 f933 	bl	8005d2c <HAL_GPIO_WritePin>
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000484c 	.word	0x2000484c
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40022800 	.word	0x40022800

08002ad8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b090      	sub	sp, #64	; 0x40
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002ae2:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002afa:	4b5e      	ldr	r3, [pc, #376]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b12:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b18:	f043 0310 	orr.w	r3, r3, #16
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b2a:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <BSP_LCD_MspInit+0x19c>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002bba:	2310      	movs	r3, #16
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002bca:	230e      	movs	r3, #14
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4828      	ldr	r0, [pc, #160]	; (8002c78 <BSP_LCD_MspInit+0x1a0>)
 8002bd6:	f002 fddd 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002be4:	2309      	movs	r3, #9
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bec:	4619      	mov	r1, r3
 8002bee:	4823      	ldr	r0, [pc, #140]	; (8002c7c <BSP_LCD_MspInit+0x1a4>)
 8002bf0:	f002 fdd0 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002bf4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c06:	4619      	mov	r1, r3
 8002c08:	481d      	ldr	r0, [pc, #116]	; (8002c80 <BSP_LCD_MspInit+0x1a8>)
 8002c0a:	f002 fdc3 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002c0e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c18:	230e      	movs	r3, #14
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	4818      	ldr	r0, [pc, #96]	; (8002c84 <BSP_LCD_MspInit+0x1ac>)
 8002c24:	f002 fdb6 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002c28:	23f7      	movs	r3, #247	; 0xf7
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c30:	230e      	movs	r3, #14
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4813      	ldr	r0, [pc, #76]	; (8002c88 <BSP_LCD_MspInit+0x1b0>)
 8002c3c:	f002 fdaa 	bl	8005794 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <BSP_LCD_MspInit+0x1a8>)
 8002c52:	f002 fd9f 	bl	8005794 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002c56:	2308      	movs	r3, #8
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c62:	4619      	mov	r1, r3
 8002c64:	4808      	ldr	r0, [pc, #32]	; (8002c88 <BSP_LCD_MspInit+0x1b0>)
 8002c66:	f002 fd95 	bl	8005794 <HAL_GPIO_Init>
}
 8002c6a:	bf00      	nop
 8002c6c:	3740      	adds	r7, #64	; 0x40
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40022400 	.word	0x40022400
 8002c88:	40022800 	.word	0x40022800

08002c8c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <BSP_LCD_ClockConfig+0x34>)
 8002c98:	2208      	movs	r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <BSP_LCD_ClockConfig+0x34>)
 8002c9e:	22c0      	movs	r2, #192	; 0xc0
 8002ca0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <BSP_LCD_ClockConfig+0x34>)
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <BSP_LCD_ClockConfig+0x34>)
 8002caa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <BSP_LCD_ClockConfig+0x34>)
 8002cb2:	f004 fe85 	bl	80079c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200003fc 	.word	0x200003fc

08002cc4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	603a      	str	r2, [r7, #0]
 8002cce:	80fb      	strh	r3, [r7, #6]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <DrawChar+0x168>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4953      	ldr	r1, [pc, #332]	; (8002e30 <DrawChar+0x16c>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3308      	adds	r3, #8
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	88db      	ldrh	r3, [r3, #6]
 8002cf2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002cf4:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <DrawChar+0x168>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	494d      	ldr	r1, [pc, #308]	; (8002e30 <DrawChar+0x16c>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3308      	adds	r3, #8
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	889b      	ldrh	r3, [r3, #4]
 8002d0a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002d0c:	8a3b      	ldrh	r3, [r7, #16]
 8002d0e:	3307      	adds	r3, #7
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da00      	bge.n	8002d16 <DrawChar+0x52>
 8002d14:	3307      	adds	r3, #7
 8002d16:	10db      	asrs	r3, r3, #3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	8a3b      	ldrh	r3, [r7, #16]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e076      	b.n	8002e1a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002d2c:	8a3b      	ldrh	r3, [r7, #16]
 8002d2e:	3307      	adds	r3, #7
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da00      	bge.n	8002d36 <DrawChar+0x72>
 8002d34:	3307      	adds	r3, #7
 8002d36:	10db      	asrs	r3, r3, #3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fb03 f302 	mul.w	r3, r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002d46:	8a3b      	ldrh	r3, [r7, #16]
 8002d48:	3307      	adds	r3, #7
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da00      	bge.n	8002d50 <DrawChar+0x8c>
 8002d4e:	3307      	adds	r3, #7
 8002d50:	10db      	asrs	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <DrawChar+0x98>
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d004      	beq.n	8002d64 <DrawChar+0xa0>
 8002d5a:	e00c      	b.n	8002d76 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	e016      	b.n	8002d92 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	3201      	adds	r2, #1
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
      break;
 8002d74:	e00d      	b.n	8002d92 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	3202      	adds	r2, #2
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
      break;
 8002d90:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e036      	b.n	8002e06 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002d98:	8a3a      	ldrh	r2, [r7, #16]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad2      	subs	r2, r2, r3
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	4413      	add	r3, r2
 8002da2:	3b01      	subs	r3, #1
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b298      	uxth	r0, r3
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <DrawChar+0x168>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	491b      	ldr	r1, [pc, #108]	; (8002e30 <DrawChar+0x16c>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	88bb      	ldrh	r3, [r7, #4]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7ff fe1a 	bl	8002a0c <BSP_LCD_DrawPixel>
 8002dd8:	e012      	b.n	8002e00 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4413      	add	r3, r2
 8002de2:	b298      	uxth	r0, r3
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <DrawChar+0x168>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4911      	ldr	r1, [pc, #68]	; (8002e30 <DrawChar+0x16c>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3304      	adds	r3, #4
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	88bb      	ldrh	r3, [r7, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7ff fe06 	bl	8002a0c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	3301      	adds	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	8a3b      	ldrh	r3, [r7, #16]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3c4      	bcc.n	8002d98 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002e0e:	88bb      	ldrh	r3, [r7, #4]
 8002e10:	3301      	adds	r3, #1
 8002e12:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3301      	adds	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	8a7b      	ldrh	r3, [r7, #18]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d384      	bcc.n	8002d2c <DrawChar+0x68>
  }
}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200003e0 	.word	0x200003e0
 8002e30:	200003e4 	.word	0x200003e4

08002e34 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e48:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <LL_FillBuffer+0x8c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <LL_FillBuffer+0x90>)
 8002e50:	2134      	movs	r1, #52	; 0x34
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3348      	adds	r3, #72	; 0x48
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d103      	bne.n	8002e68 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e62:	2202      	movs	r2, #2
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	e002      	b.n	8002e6e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <LL_FillBuffer+0x94>)
 8002e78:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002e7a:	4810      	ldr	r0, [pc, #64]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e7c:	f002 f9fe 	bl	800527c <HAL_DMA2D_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d115      	bne.n	8002eb2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <LL_FillBuffer+0x88>)
 8002e8a:	f002 fb55 	bl	8005538 <HAL_DMA2D_ConfigLayer>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10e      	bne.n	8002eb2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69f9      	ldr	r1, [r7, #28]
 8002e9e:	4807      	ldr	r0, [pc, #28]	; (8002ebc <LL_FillBuffer+0x88>)
 8002ea0:	f002 fa36 	bl	8005310 <HAL_DMA2D_Start>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002eaa:	210a      	movs	r1, #10
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <LL_FillBuffer+0x88>)
 8002eae:	f002 fa5a 	bl	8005366 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200003a0 	.word	0x200003a0
 8002ec0:	200003e0 	.word	0x200003e0
 8002ec4:	2000484c 	.word	0x2000484c
 8002ec8:	4002b000 	.word	0x4002b000

08002ecc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002ed0:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <BSP_SDRAM_Init+0xb0>)
 8002ed4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002ede:	2207      	movs	r2, #7
 8002ee0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002eea:	2207      	movs	r2, #7
 8002eec:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002efc:	2202      	movs	r2, #2
 8002efe:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f0e:	2204      	movs	r2, #4
 8002f10:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f14:	2210      	movs	r2, #16
 8002f16:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f24:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f32:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002f42:	2100      	movs	r1, #0
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f46:	f000 f87f 	bl	8003048 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002f4a:	490d      	ldr	r1, [pc, #52]	; (8002f80 <BSP_SDRAM_Init+0xb4>)
 8002f4c:	480a      	ldr	r0, [pc, #40]	; (8002f78 <BSP_SDRAM_Init+0xac>)
 8002f4e:	f005 fce7 	bl	8008920 <HAL_SDRAM_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <BSP_SDRAM_Init+0xb8>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e002      	b.n	8002f66 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <BSP_SDRAM_Init+0xb8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002f66:	f240 6003 	movw	r0, #1539	; 0x603
 8002f6a:	f000 f80d 	bl	8002f88 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <BSP_SDRAM_Init+0xb8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200048f4 	.word	0x200048f4
 8002f7c:	a0000140 	.word	0xa0000140
 8002f80:	20000480 	.word	0x20000480
 8002f84:	20000038 	.word	0x20000038

08002f88 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb0:	4923      	ldr	r1, [pc, #140]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fb2:	4824      	ldr	r0, [pc, #144]	; (8003044 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fb4:	f005 fce8 	bl	8008988 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f001 f9f7 	bl	80043ac <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fda:	4919      	ldr	r1, [pc, #100]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fdc:	4819      	ldr	r0, [pc, #100]	; (8003044 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fde:	f005 fcd3 	bl	8008988 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fea:	2210      	movs	r2, #16
 8002fec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffe:	4910      	ldr	r1, [pc, #64]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003000:	4810      	ldr	r0, [pc, #64]	; (8003044 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003002:	f005 fcc1 	bl	8008988 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003006:	f44f 7308 	mov.w	r3, #544	; 0x220
 800300a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800300e:	2204      	movs	r2, #4
 8003010:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003014:	2210      	movs	r2, #16
 8003016:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800301a:	2201      	movs	r2, #1
 800301c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a07      	ldr	r2, [pc, #28]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003022:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003028:	4905      	ldr	r1, [pc, #20]	; (8003040 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800302a:	4806      	ldr	r0, [pc, #24]	; (8003044 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800302c:	f005 fcac 	bl	8008988 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4804      	ldr	r0, [pc, #16]	; (8003044 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003034:	f005 fcd3 	bl	80089de <HAL_SDRAM_ProgramRefreshRate>
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000049c 	.word	0x2000049c
 8003044:	200048f4 	.word	0x200048f4

08003048 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003048:	b580      	push	{r7, lr}
 800304a:	b090      	sub	sp, #64	; 0x40
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003052:	4b70      	ldr	r3, [pc, #448]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	4a6f      	ldr	r2, [pc, #444]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6393      	str	r3, [r2, #56]	; 0x38
 800305e:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003082:	4b64      	ldr	r3, [pc, #400]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a63      	ldr	r2, [pc, #396]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b61      	ldr	r3, [pc, #388]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a57      	ldr	r2, [pc, #348]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ca:	4b52      	ldr	r3, [pc, #328]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a51      	ldr	r2, [pc, #324]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030d0:	f043 0320 	orr.w	r3, r3, #32
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030e2:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a4b      	ldr	r2, [pc, #300]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030fa:	4b46      	ldr	r3, [pc, #280]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a45      	ldr	r2, [pc, #276]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b43      	ldr	r3, [pc, #268]	; (8003214 <BSP_SDRAM_MspInit+0x1cc>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003116:	2301      	movs	r3, #1
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800311a:	2302      	movs	r3, #2
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800311e:	230c      	movs	r3, #12
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003122:	2308      	movs	r3, #8
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312a:	4619      	mov	r1, r3
 800312c:	483a      	ldr	r0, [pc, #232]	; (8003218 <BSP_SDRAM_MspInit+0x1d0>)
 800312e:	f002 fb31 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003132:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800313c:	4619      	mov	r1, r3
 800313e:	4837      	ldr	r0, [pc, #220]	; (800321c <BSP_SDRAM_MspInit+0x1d4>)
 8003140:	f002 fb28 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003144:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800314e:	4619      	mov	r1, r3
 8003150:	4833      	ldr	r0, [pc, #204]	; (8003220 <BSP_SDRAM_MspInit+0x1d8>)
 8003152:	f002 fb1f 	bl	8005794 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003156:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800315c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003160:	4619      	mov	r1, r3
 8003162:	4830      	ldr	r0, [pc, #192]	; (8003224 <BSP_SDRAM_MspInit+0x1dc>)
 8003164:	f002 fb16 	bl	8005794 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003168:	f248 1333 	movw	r3, #33075	; 0x8133
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800316e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003172:	4619      	mov	r1, r3
 8003174:	482c      	ldr	r0, [pc, #176]	; (8003228 <BSP_SDRAM_MspInit+0x1e0>)
 8003176:	f002 fb0d 	bl	8005794 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800317a:	2328      	movs	r3, #40	; 0x28
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800317e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003182:	4619      	mov	r1, r3
 8003184:	4829      	ldr	r0, [pc, #164]	; (800322c <BSP_SDRAM_MspInit+0x1e4>)
 8003186:	f002 fb05 	bl	8005794 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 8003198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ac:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031c2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031cc:	2203      	movs	r2, #3
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <BSP_SDRAM_MspInit+0x1ec>)
 80031e0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80031ee:	4810      	ldr	r0, [pc, #64]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031f0:	f001 ff36 	bl	8005060 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80031f4:	480e      	ldr	r0, [pc, #56]	; (8003230 <BSP_SDRAM_MspInit+0x1e8>)
 80031f6:	f001 fe85 	bl	8004f04 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	210f      	movs	r1, #15
 80031fe:	2038      	movs	r0, #56	; 0x38
 8003200:	f001 fd88 	bl	8004d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003204:	2038      	movs	r0, #56	; 0x38
 8003206:	f001 fda1 	bl	8004d4c <HAL_NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	3740      	adds	r7, #64	; 0x40
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40021c00 	.word	0x40021c00
 8003230:	200004ac 	.word	0x200004ac
 8003234:	40026410 	.word	0x40026410

08003238 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	460a      	mov	r2, r1
 8003242:	80fb      	strh	r3, [r7, #6]
 8003244:	4613      	mov	r3, r2
 8003246:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <BSP_TS_Init+0x68>)
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003252:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <BSP_TS_Init+0x6c>)
 8003254:	88bb      	ldrh	r3, [r7, #4]
 8003256:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <BSP_TS_Init+0x70>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2070      	movs	r0, #112	; 0x70
 800325e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <BSP_TS_Init+0x70>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2070      	movs	r0, #112	; 0x70
 8003266:	4798      	blx	r3
 8003268:	4603      	mov	r3, r0
 800326a:	2b51      	cmp	r3, #81	; 0x51
 800326c:	d111      	bne.n	8003292 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <BSP_TS_Init+0x74>)
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <BSP_TS_Init+0x70>)
 8003272:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <BSP_TS_Init+0x78>)
 8003276:	2270      	movs	r2, #112	; 0x70
 8003278:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <BSP_TS_Init+0x7c>)
 800327c:	2208      	movs	r2, #8
 800327e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <BSP_TS_Init+0x74>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <BSP_TS_Init+0x78>)
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	b292      	uxth	r2, r2
 800328c:	4610      	mov	r0, r2
 800328e:	4798      	blx	r3
 8003290:	e001      	b.n	8003296 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003292:	2303      	movs	r3, #3
 8003294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000510 	.word	0x20000510
 80032a4:	20000512 	.word	0x20000512
 80032a8:	20000000 	.word	0x20000000
 80032ac:	2000050c 	.word	0x2000050c
 80032b0:	20000515 	.word	0x20000515
 80032b4:	20000514 	.word	0x20000514

080032b8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b097      	sub	sp, #92	; 0x5c
 80032bc:	af02      	add	r7, sp, #8
 80032be:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80032d2:	4b97      	ldr	r3, [pc, #604]	; (8003530 <BSP_TS_GetState+0x278>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a96      	ldr	r2, [pc, #600]	; (8003534 <BSP_TS_GetState+0x27c>)
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	b292      	uxth	r2, r2
 80032de:	4610      	mov	r0, r2
 80032e0:	4798      	blx	r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 81a8 	beq.w	8003644 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f8:	e197      	b.n	800362a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80032fa:	4b8d      	ldr	r3, [pc, #564]	; (8003530 <BSP_TS_GetState+0x278>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4a8c      	ldr	r2, [pc, #560]	; (8003534 <BSP_TS_GetState+0x27c>)
 8003302:	7812      	ldrb	r2, [r2, #0]
 8003304:	b290      	uxth	r0, r2
 8003306:	f107 0120 	add.w	r1, r7, #32
 800330a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330c:	0052      	lsls	r2, r2, #1
 800330e:	188c      	adds	r4, r1, r2
 8003310:	f107 0114 	add.w	r1, r7, #20
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	440a      	add	r2, r1
 800331a:	4621      	mov	r1, r4
 800331c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800331e:	4b86      	ldr	r3, [pc, #536]	; (8003538 <BSP_TS_GetState+0x280>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d11b      	bne.n	800335e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8003326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800332e:	4413      	add	r3, r2
 8003330:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800333c:	440b      	add	r3, r1
 800333e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800334a:	4413      	add	r3, r2
 800334c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003358:	440b      	add	r3, r1
 800335a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <BSP_TS_GetState+0x280>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003372:	4413      	add	r3, r2
 8003374:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003378:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800337c:	b29a      	uxth	r2, r3
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003386:	440b      	add	r3, r1
 8003388:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <BSP_TS_GetState+0x280>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033a0:	4413      	add	r3, r2
 80033a2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80033a6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033b4:	440b      	add	r3, r1
 80033b6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80033ba:	4b5f      	ldr	r3, [pc, #380]	; (8003538 <BSP_TS_GetState+0x280>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01b      	beq.n	80033fe <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033ce:	4413      	add	r3, r2
 80033d0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80033d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033dc:	440b      	add	r3, r1
 80033de:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80033e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033ea:	4413      	add	r3, r2
 80033ec:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033f8:	440b      	add	r3, r1
 80033fa:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80033fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003406:	4413      	add	r3, r2
 8003408:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800340c:	4619      	mov	r1, r3
 800340e:	4a4b      	ldr	r2, [pc, #300]	; (800353c <BSP_TS_GetState+0x284>)
 8003410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003416:	4299      	cmp	r1, r3
 8003418:	d90e      	bls.n	8003438 <BSP_TS_GetState+0x180>
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003422:	4413      	add	r3, r2
 8003424:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003428:	4944      	ldr	r1, [pc, #272]	; (800353c <BSP_TS_GetState+0x284>)
 800342a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003430:	b29b      	uxth	r3, r3
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	b29b      	uxth	r3, r3
 8003436:	e00d      	b.n	8003454 <BSP_TS_GetState+0x19c>
 8003438:	4a40      	ldr	r2, [pc, #256]	; (800353c <BSP_TS_GetState+0x284>)
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	b29a      	uxth	r2, r3
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800344a:	440b      	add	r3, r1
 800344c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003460:	4413      	add	r3, r2
 8003462:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003466:	4619      	mov	r1, r3
 8003468:	4a35      	ldr	r2, [pc, #212]	; (8003540 <BSP_TS_GetState+0x288>)
 800346a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	4299      	cmp	r1, r3
 8003472:	d90e      	bls.n	8003492 <BSP_TS_GetState+0x1da>
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800347c:	4413      	add	r3, r2
 800347e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003482:	492f      	ldr	r1, [pc, #188]	; (8003540 <BSP_TS_GetState+0x288>)
 8003484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003486:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800348a:	b29b      	uxth	r3, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	e00d      	b.n	80034ae <BSP_TS_GetState+0x1f6>
 8003492:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <BSP_TS_GetState+0x288>)
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	b29a      	uxth	r2, r3
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80034a4:	440b      	add	r3, r1
 80034a6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80034b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80034b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034ba:	4413      	add	r3, r2
 80034bc:	2b05      	cmp	r3, #5
 80034be:	dd17      	ble.n	80034f0 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80034c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80034c8:	4413      	add	r3, r2
 80034ca:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4a1a      	ldr	r2, [pc, #104]	; (800353c <BSP_TS_GetState+0x284>)
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80034e0:	4413      	add	r3, r2
 80034e2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <BSP_TS_GetState+0x288>)
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <BSP_TS_GetState+0x27c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d125      	bne.n	8003544 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80034f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003500:	4413      	add	r3, r2
 8003502:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	460a      	mov	r2, r1
 8003510:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800351a:	4413      	add	r3, r2
 800351c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003524:	3304      	adds	r3, #4
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	460a      	mov	r2, r1
 800352c:	809a      	strh	r2, [r3, #4]
 800352e:	e02c      	b.n	800358a <BSP_TS_GetState+0x2d2>
 8003530:	2000050c 	.word	0x2000050c
 8003534:	20000515 	.word	0x20000515
 8003538:	20000514 	.word	0x20000514
 800353c:	20000518 	.word	0x20000518
 8003540:	2000052c 	.word	0x2000052c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <BSP_TS_GetState+0x398>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	4619      	mov	r1, r3
 800354a:	4a42      	ldr	r2, [pc, #264]	; (8003654 <BSP_TS_GetState+0x39c>)
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	fb03 f301 	mul.w	r3, r3, r1
 8003556:	0b1b      	lsrs	r3, r3, #12
 8003558:	b299      	uxth	r1, r3
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	460a      	mov	r2, r1
 8003564:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003566:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <BSP_TS_GetState+0x3a0>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <BSP_TS_GetState+0x3a4>)
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	fb03 f301 	mul.w	r3, r3, r1
 8003578:	0b1b      	lsrs	r3, r3, #12
 800357a:	b299      	uxth	r1, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003580:	3304      	adds	r3, #4
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	460a      	mov	r2, r1
 8003588:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800358a:	4b35      	ldr	r3, [pc, #212]	; (8003660 <BSP_TS_GetState+0x3a8>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b298      	uxth	r0, r3
 8003590:	f107 010c 	add.w	r1, r7, #12
 8003594:	f107 0210 	add.w	r2, r7, #16
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	460b      	mov	r3, r1
 80035a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035a2:	f7fd f9f1 	bl	8000988 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	b2d9      	uxtb	r1, r3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ae:	4413      	add	r3, r2
 80035b0:	3316      	adds	r3, #22
 80035b2:	460a      	mov	r2, r1
 80035b4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	b2d9      	uxtb	r1, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	4413      	add	r3, r2
 80035c0:	3320      	adds	r3, #32
 80035c2:	460a      	mov	r2, r1
 80035c4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d827      	bhi.n	800361c <BSP_TS_GetState+0x364>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <BSP_TS_GetState+0x31c>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035f3 	.word	0x080035f3
 80035dc:	08003601 	.word	0x08003601
 80035e0:	0800360f 	.word	0x0800360f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	4413      	add	r3, r2
 80035ea:	331b      	adds	r3, #27
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
          break;
 80035f0:	e018      	b.n	8003624 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	4413      	add	r3, r2
 80035f8:	331b      	adds	r3, #27
 80035fa:	2202      	movs	r2, #2
 80035fc:	701a      	strb	r2, [r3, #0]
          break;
 80035fe:	e011      	b.n	8003624 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	4413      	add	r3, r2
 8003606:	331b      	adds	r3, #27
 8003608:	2203      	movs	r2, #3
 800360a:	701a      	strb	r2, [r3, #0]
          break;
 800360c:	e00a      	b.n	8003624 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003612:	4413      	add	r3, r2
 8003614:	331b      	adds	r3, #27
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
          break;
 800361a:	e003      	b.n	8003624 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003622:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003626:	3301      	adds	r3, #1
 8003628:	64bb      	str	r3, [r7, #72]	; 0x48
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	4293      	cmp	r3, r2
 8003634:	f4ff ae61 	bcc.w	80032fa <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f813 	bl	8003664 <BSP_TS_Get_GestureId>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003648:	4618      	mov	r0, r3
 800364a:	3754      	adds	r7, #84	; 0x54
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}
 8003650:	20000510 	.word	0x20000510
 8003654:	20000518 	.word	0x20000518
 8003658:	20000512 	.word	0x20000512
 800365c:	2000052c 	.word	0x2000052c
 8003660:	20000515 	.word	0x20000515

08003664 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003674:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <BSP_TS_Get_GestureId+0x90>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f107 0208 	add.w	r2, r7, #8
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd f968 	bl	8000956 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b18      	cmp	r3, #24
 800368a:	d01b      	beq.n	80036c4 <BSP_TS_Get_GestureId+0x60>
 800368c:	2b18      	cmp	r3, #24
 800368e:	d806      	bhi.n	800369e <BSP_TS_Get_GestureId+0x3a>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d00f      	beq.n	80036b4 <BSP_TS_Get_GestureId+0x50>
 8003694:	2b14      	cmp	r3, #20
 8003696:	d011      	beq.n	80036bc <BSP_TS_Get_GestureId+0x58>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <BSP_TS_Get_GestureId+0x48>
 800369c:	e022      	b.n	80036e4 <BSP_TS_Get_GestureId+0x80>
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d018      	beq.n	80036d4 <BSP_TS_Get_GestureId+0x70>
 80036a2:	2b49      	cmp	r3, #73	; 0x49
 80036a4:	d01a      	beq.n	80036dc <BSP_TS_Get_GestureId+0x78>
 80036a6:	2b1c      	cmp	r3, #28
 80036a8:	d010      	beq.n	80036cc <BSP_TS_Get_GestureId+0x68>
 80036aa:	e01b      	b.n	80036e4 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036b2:	e01a      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036ba:	e016      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036c2:	e012      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036ca:	e00e      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2204      	movs	r2, #4
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036d2:	e00a      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2205      	movs	r2, #5
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036da:	e006      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2206      	movs	r2, #6
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80036e2:	e002      	b.n	80036ea <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000515 	.word	0x20000515

080036f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_MspInit+0x4c>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_MspInit+0x4c>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_MspInit+0x4c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_MspInit+0x4c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_MspInit+0x4c>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_MspInit+0x4c>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	210f      	movs	r1, #15
 8003732:	f06f 0001 	mvn.w	r0, #1
 8003736:	f001 faed 	bl	8004d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08c      	sub	sp, #48	; 0x30
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <HAL_ADC_MspInit+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d124      	bne.n	80037b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800379a:	2301      	movs	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800379e:	2303      	movs	r3, #3
 80037a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	481a      	ldr	r0, [pc, #104]	; (8003818 <HAL_ADC_MspInit+0xd0>)
 80037ae:	f001 fff1 	bl	8005794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037b2:	e029      	b.n	8003808 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_ADC_MspInit+0xd4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d124      	bne.n	8003808 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037dc:	f043 0320 	orr.w	r3, r3, #32
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_ADC_MspInit+0xcc>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80037ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f4:	2303      	movs	r3, #3
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037fc:	f107 031c 	add.w	r3, r7, #28
 8003800:	4619      	mov	r1, r3
 8003802:	4807      	ldr	r0, [pc, #28]	; (8003820 <HAL_ADC_MspInit+0xd8>)
 8003804:	f001 ffc6 	bl	8005794 <HAL_GPIO_Init>
}
 8003808:	bf00      	nop
 800380a:	3730      	adds	r7, #48	; 0x30
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40012000 	.word	0x40012000
 8003814:	40023800 	.word	0x40023800
 8003818:	40020000 	.word	0x40020000
 800381c:	40012200 	.word	0x40012200
 8003820:	40021400 	.word	0x40021400

08003824 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_DAC_MspInit+0x84>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d12b      	bne.n	800389e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_DAC_MspInit+0x88>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_DAC_MspInit+0x88>)
 800384c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_DAC_MspInit+0x88>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_DAC_MspInit+0x88>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_DAC_MspInit+0x88>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_DAC_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003876:	2310      	movs	r3, #16
 8003878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387a:	2303      	movs	r3, #3
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <HAL_DAC_MspInit+0x8c>)
 800388a:	f001 ff83 	bl	8005794 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	2036      	movs	r0, #54	; 0x36
 8003894:	f001 fa3e 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003898:	2036      	movs	r0, #54	; 0x36
 800389a:	f001 fa57 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800389e:	bf00      	nop
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40007400 	.word	0x40007400
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020000 	.word	0x40020000

080038b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_DMA2D_MspInit+0x38>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10b      	bne.n	80038de <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_DMA2D_MspInit+0x3c>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_DMA2D_MspInit+0x3c>)
 80038cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_DMA2D_MspInit+0x3c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	4002b000 	.word	0x4002b000
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	; 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <HAL_I2C_MspInit+0xdc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d129      	bne.n	800396a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800392e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003934:	2312      	movs	r3, #18
 8003936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	2300      	movs	r3, #0
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003940:	2304      	movs	r3, #4
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003944:	f107 031c 	add.w	r3, r7, #28
 8003948:	4619      	mov	r1, r3
 800394a:	4823      	ldr	r0, [pc, #140]	; (80039d8 <HAL_I2C_MspInit+0xe4>)
 800394c:	f001 ff22 	bl	8005794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003950:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800395a:	6413      	str	r3, [r2, #64]	; 0x40
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003968:	e02d      	b.n	80039c6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_I2C_MspInit+0xe8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d128      	bne.n	80039c6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	6313      	str	r3, [r2, #48]	; 0x30
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800398c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003992:	2312      	movs	r3, #18
 8003994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003996:	2301      	movs	r3, #1
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800399e:	2304      	movs	r3, #4
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	4619      	mov	r1, r3
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <HAL_I2C_MspInit+0xec>)
 80039aa:	f001 fef3 	bl	8005794 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 80039b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_I2C_MspInit+0xe0>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	3730      	adds	r7, #48	; 0x30
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40005400 	.word	0x40005400
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40005c00 	.word	0x40005c00
 80039e0:	40021c00 	.word	0x40021c00

080039e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_I2C_MspDeInit+0x64>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d110      	bne.n	8003a18 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_I2C_MspDeInit+0x68>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <HAL_I2C_MspDeInit+0x68>)
 80039fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a06:	4812      	ldr	r0, [pc, #72]	; (8003a50 <HAL_I2C_MspDeInit+0x6c>)
 8003a08:	f002 f86e 	bl	8005ae8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a10:	480f      	ldr	r0, [pc, #60]	; (8003a50 <HAL_I2C_MspDeInit+0x6c>)
 8003a12:	f002 f869 	bl	8005ae8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003a16:	e013      	b.n	8003a40 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_I2C_MspDeInit+0x70>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10e      	bne.n	8003a40 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_I2C_MspDeInit+0x68>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_I2C_MspDeInit+0x68>)
 8003a28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <HAL_I2C_MspDeInit+0x74>)
 8003a32:	f002 f859 	bl	8005ae8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a3a:	4807      	ldr	r0, [pc, #28]	; (8003a58 <HAL_I2C_MspDeInit+0x74>)
 8003a3c:	f002 f854 	bl	8005ae8 <HAL_GPIO_DeInit>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40005400 	.word	0x40005400
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40005c00 	.word	0x40005c00
 8003a58:	40021c00 	.word	0x40021c00

08003a5c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08e      	sub	sp, #56	; 0x38
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a55      	ldr	r2, [pc, #340]	; (8003bd0 <HAL_LTDC_MspInit+0x174>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f040 80a3 	bne.w	8003bc6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a80:	4b54      	ldr	r3, [pc, #336]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	4a53      	ldr	r2, [pc, #332]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8c:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a98:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4a4d      	ldr	r2, [pc, #308]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003a9e:	f043 0310 	orr.w	r3, r3, #16
 8003aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003ab0:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4a47      	ldr	r2, [pc, #284]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6313      	str	r3, [r2, #48]	; 0x30
 8003abc:	4b45      	ldr	r3, [pc, #276]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ac8:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	4a41      	ldr	r2, [pc, #260]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ae0:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aea:	6313      	str	r3, [r2, #48]	; 0x30
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4a35      	ldr	r2, [pc, #212]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6313      	str	r3, [r2, #48]	; 0x30
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_LTDC_MspInit+0x178>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003b10:	2310      	movs	r3, #16
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b20:	230e      	movs	r3, #14
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	482b      	ldr	r0, [pc, #172]	; (8003bd8 <HAL_LTDC_MspInit+0x17c>)
 8003b2c:	f001 fe32 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003b30:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b42:	230e      	movs	r3, #14
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4823      	ldr	r0, [pc, #140]	; (8003bdc <HAL_LTDC_MspInit+0x180>)
 8003b4e:	f001 fe21 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003b52:	23f7      	movs	r3, #247	; 0xf7
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b62:	230e      	movs	r3, #14
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	481c      	ldr	r0, [pc, #112]	; (8003be0 <HAL_LTDC_MspInit+0x184>)
 8003b6e:	f001 fe11 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b84:	2309      	movs	r3, #9
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4815      	ldr	r0, [pc, #84]	; (8003be4 <HAL_LTDC_MspInit+0x188>)
 8003b90:	f001 fe00 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003b94:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ba6:	230e      	movs	r3, #14
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bae:	4619      	mov	r1, r3
 8003bb0:	480d      	ldr	r0, [pc, #52]	; (8003be8 <HAL_LTDC_MspInit+0x18c>)
 8003bb2:	f001 fdef 	bl	8005794 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2105      	movs	r1, #5
 8003bba:	2058      	movs	r0, #88	; 0x58
 8003bbc:	f001 f8aa 	bl	8004d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003bc0:	2058      	movs	r0, #88	; 0x58
 8003bc2:	f001 f8c3 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003bc6:	bf00      	nop
 8003bc8:	3738      	adds	r7, #56	; 0x38
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40016800 	.word	0x40016800
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40022400 	.word	0x40022400
 8003be0:	40022800 	.word	0x40022800
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_RTC_MspInit+0x2c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d105      	bne.n	8003c0a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <HAL_RTC_MspInit+0x30>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <HAL_RTC_MspInit+0x30>)
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40002800 	.word	0x40002800
 8003c1c:	40023800 	.word	0x40023800

08003c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <HAL_SPI_MspInit+0xd4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d154      	bne.n	8003cec <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_SPI_MspInit+0xd8>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4815      	ldr	r0, [pc, #84]	; (8003cfc <HAL_SPI_MspInit+0xdc>)
 8003ca6:	f001 fd75 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003caa:	2301      	movs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cba:	2305      	movs	r3, #5
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <HAL_SPI_MspInit+0xdc>)
 8003cc6:	f001 fd65 	bl	8005794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003cca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cdc:	2305      	movs	r3, #5
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4806      	ldr	r0, [pc, #24]	; (8003d00 <HAL_SPI_MspInit+0xe0>)
 8003ce8:	f001 fd54 	bl	8005794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003cec:	bf00      	nop
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40003800 	.word	0x40003800
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40020400 	.word	0x40020400

08003d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_TIM_Base_MspInit+0xc8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d2e:	e046      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	69bb      	ldr	r3, [r7, #24]
}
 8003d52:	e034      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_TIM_Base_MspInit+0xd0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10c      	bne.n	8003d78 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]
}
 8003d76:	e022      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_TIM_Base_MspInit+0xd4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
}
 8003d9a:	e010      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_TIM_Base_MspInit+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10b      	bne.n	8003dbe <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003dac:	f043 0302 	orr.w	r3, r3, #2
 8003db0:	6453      	str	r3, [r2, #68]	; 0x44
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <HAL_TIM_Base_MspInit+0xcc>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	3724      	adds	r7, #36	; 0x24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400

08003de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_TIM_MspPostInit+0xa8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d11c      	bne.n	8003e3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e1a:	2310      	movs	r3, #16
 8003e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	4619      	mov	r1, r3
 8003e34:	4816      	ldr	r0, [pc, #88]	; (8003e90 <HAL_TIM_MspPostInit+0xb0>)
 8003e36:	f001 fcad 	bl	8005794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003e3a:	e020      	b.n	8003e7e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_TIM_MspPostInit+0xb4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d11b      	bne.n	8003e7e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a10      	ldr	r2, [pc, #64]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_TIM_MspPostInit+0xac>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	4807      	ldr	r0, [pc, #28]	; (8003e98 <HAL_TIM_MspPostInit+0xb8>)
 8003e7a:	f001 fc8b 	bl	8005794 <HAL_GPIO_Init>
}
 8003e7e:	bf00      	nop
 8003e80:	3728      	adds	r7, #40	; 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40022000 	.word	0x40022000

08003e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	; 0x38
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a53      	ldr	r2, [pc, #332]	; (8004008 <HAL_UART_MspInit+0x16c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d128      	bne.n	8003f10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003ebe:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_UART_MspInit+0x170>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_UART_MspInit+0x170>)
 8003ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_UART_MspInit+0x170>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ed6:	4b4d      	ldr	r3, [pc, #308]	; (800400c <HAL_UART_MspInit+0x170>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	4a4c      	ldr	r2, [pc, #304]	; (800400c <HAL_UART_MspInit+0x170>)
 8003edc:	f043 0320 	orr.w	r3, r3, #32
 8003ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	; (800400c <HAL_UART_MspInit+0x170>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003eee:	23c0      	movs	r3, #192	; 0xc0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003efe:	2308      	movs	r3, #8
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f06:	4619      	mov	r1, r3
 8003f08:	4841      	ldr	r0, [pc, #260]	; (8004010 <HAL_UART_MspInit+0x174>)
 8003f0a:	f001 fc43 	bl	8005794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f0e:	e077      	b.n	8004000 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <HAL_UART_MspInit+0x178>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d145      	bne.n	8003fa6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4a3b      	ldr	r2, [pc, #236]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f20:	f043 0310 	orr.w	r3, r3, #16
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b33      	ldr	r3, [pc, #204]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	4b30      	ldr	r3, [pc, #192]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a2f      	ldr	r2, [pc, #188]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_UART_MspInit+0x170>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f72:	2307      	movs	r3, #7
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4826      	ldr	r0, [pc, #152]	; (8004018 <HAL_UART_MspInit+0x17c>)
 8003f7e:	f001 fc09 	bl	8005794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f94:	2307      	movs	r3, #7
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	481f      	ldr	r0, [pc, #124]	; (800401c <HAL_UART_MspInit+0x180>)
 8003fa0:	f001 fbf8 	bl	8005794 <HAL_GPIO_Init>
}
 8003fa4:	e02c      	b.n	8004000 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_UART_MspInit+0x184>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d127      	bne.n	8004000 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fb6:	f043 0320 	orr.w	r3, r3, #32
 8003fba:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	4a0f      	ldr	r2, [pc, #60]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <HAL_UART_MspInit+0x170>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003fe0:	23c0      	movs	r3, #192	; 0xc0
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fec:	2303      	movs	r3, #3
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	480a      	ldr	r0, [pc, #40]	; (8004024 <HAL_UART_MspInit+0x188>)
 8003ffc:	f001 fbca 	bl	8005794 <HAL_GPIO_Init>
}
 8004000:	bf00      	nop
 8004002:	3738      	adds	r7, #56	; 0x38
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40007800 	.word	0x40007800
 800400c:	40023800 	.word	0x40023800
 8004010:	40021400 	.word	0x40021400
 8004014:	40011000 	.word	0x40011000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020000 	.word	0x40020000
 8004020:	40011400 	.word	0x40011400
 8004024:	40020800 	.word	0x40020800

08004028 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800403c:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <HAL_FMC_MspInit+0x100>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d16d      	bne.n	8004120 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004044:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_FMC_MspInit+0x100>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_FMC_MspInit+0x104>)
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	4a37      	ldr	r2, [pc, #220]	; (800412c <HAL_FMC_MspInit+0x104>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6393      	str	r3, [r2, #56]	; 0x38
 8004056:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_FMC_MspInit+0x104>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004062:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004066:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004074:	230c      	movs	r3, #12
 8004076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004078:	1d3b      	adds	r3, r7, #4
 800407a:	4619      	mov	r1, r3
 800407c:	482c      	ldr	r0, [pc, #176]	; (8004130 <HAL_FMC_MspInit+0x108>)
 800407e:	f001 fb89 	bl	8005794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004082:	f248 1333 	movw	r3, #33075	; 0x8133
 8004086:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004088:	2302      	movs	r3, #2
 800408a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004090:	2303      	movs	r3, #3
 8004092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004094:	230c      	movs	r3, #12
 8004096:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4825      	ldr	r0, [pc, #148]	; (8004134 <HAL_FMC_MspInit+0x10c>)
 800409e:	f001 fb79 	bl	8005794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80040a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040b4:	230c      	movs	r3, #12
 80040b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	481e      	ldr	r0, [pc, #120]	; (8004138 <HAL_FMC_MspInit+0x110>)
 80040be:	f001 fb69 	bl	8005794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040d4:	230c      	movs	r3, #12
 80040d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4817      	ldr	r0, [pc, #92]	; (800413c <HAL_FMC_MspInit+0x114>)
 80040de:	f001 fb59 	bl	8005794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80040e2:	2328      	movs	r3, #40	; 0x28
 80040e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ee:	2303      	movs	r3, #3
 80040f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040f2:	230c      	movs	r3, #12
 80040f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4811      	ldr	r0, [pc, #68]	; (8004140 <HAL_FMC_MspInit+0x118>)
 80040fc:	f001 fb4a 	bl	8005794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004100:	2308      	movs	r3, #8
 8004102:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004110:	230c      	movs	r3, #12
 8004112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4619      	mov	r1, r3
 8004118:	480a      	ldr	r0, [pc, #40]	; (8004144 <HAL_FMC_MspInit+0x11c>)
 800411a:	f001 fb3b 	bl	8005794 <HAL_GPIO_Init>
 800411e:	e000      	b.n	8004122 <HAL_FMC_MspInit+0xfa>
    return;
 8004120:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000540 	.word	0x20000540
 800412c:	40023800 	.word	0x40023800
 8004130:	40021000 	.word	0x40021000
 8004134:	40021800 	.word	0x40021800
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40021400 	.word	0x40021400
 8004140:	40021c00 	.word	0x40021c00
 8004144:	40020800 	.word	0x40020800

08004148 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004150:	f7ff ff6a 	bl	8004028 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800416c:	2200      	movs	r2, #0
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	2036      	movs	r0, #54	; 0x36
 8004172:	f000 fdcf 	bl	8004d14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004176:	2036      	movs	r0, #54	; 0x36
 8004178:	f000 fde8 	bl	8004d4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800417c:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <HAL_InitTick+0xa0>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_InitTick+0xa0>)
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	6413      	str	r3, [r2, #64]	; 0x40
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_InitTick+0xa0>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004194:	f107 0210 	add.w	r2, r7, #16
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fbdc 	bl	800795c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80041a4:	f003 fbb2 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 80041a8:	4603      	mov	r3, r0
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <HAL_InitTick+0xa4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0c9b      	lsrs	r3, r3, #18
 80041b8:	3b01      	subs	r3, #1
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_InitTick+0xa8>)
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <HAL_InitTick+0xac>)
 80041c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_InitTick+0xa8>)
 80041c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <HAL_InitTick+0xa8>)
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_InitTick+0xa8>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_InitTick+0xa8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80041dc:	4809      	ldr	r0, [pc, #36]	; (8004204 <HAL_InitTick+0xa8>)
 80041de:	f004 fcb0 	bl	8008b42 <HAL_TIM_Base_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80041e8:	4806      	ldr	r0, [pc, #24]	; (8004204 <HAL_InitTick+0xa8>)
 80041ea:	f004 fcd5 	bl	8008b98 <HAL_TIM_Base_Start_IT>
 80041ee:	4603      	mov	r3, r0
 80041f0:	e000      	b.n	80041f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3730      	adds	r7, #48	; 0x30
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	431bde83 	.word	0x431bde83
 8004204:	20004928 	.word	0x20004928
 8004208:	40001000 	.word	0x40001000

0800420c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004210:	e7fe      	b.n	8004210 <NMI_Handler+0x4>

08004212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004216:	e7fe      	b.n	8004216 <HardFault_Handler+0x4>

08004218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800421c:	e7fe      	b.n	800421c <MemManage_Handler+0x4>

0800421e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004222:	e7fe      	b.n	8004222 <BusFault_Handler+0x4>

08004224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004228:	e7fe      	b.n	8004228 <UsageFault_Handler+0x4>

0800422a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800423c:	4803      	ldr	r0, [pc, #12]	; (800424c <TIM6_DAC_IRQHandler+0x14>)
 800423e:	f000 fdb5 	bl	8004dac <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004242:	4803      	ldr	r0, [pc, #12]	; (8004250 <TIM6_DAC_IRQHandler+0x18>)
 8004244:	f004 fd07 	bl	8008c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000469c 	.word	0x2000469c
 8004250:	20004928 	.word	0x20004928

08004254 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <LTDC_IRQHandler+0x10>)
 800425a:	f002 fc01 	bl	8006a60 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200044e4 	.word	0x200044e4

08004268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <_sbrk+0x5c>)
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <_sbrk+0x60>)
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <_sbrk+0x64>)
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <_sbrk+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004298:	f008 fea6 	bl	800cfe8 <__errno>
 800429c:	4602      	mov	r2, r0
 800429e:	230c      	movs	r3, #12
 80042a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e009      	b.n	80042bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	4a05      	ldr	r2, [pc, #20]	; (80042cc <_sbrk+0x64>)
 80042b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20050000 	.word	0x20050000
 80042c8:	00000400 	.word	0x00000400
 80042cc:	20000544 	.word	0x20000544
 80042d0:	20004970 	.word	0x20004970

080042d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <SystemInit+0x28>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <SystemInit+0x28>)
 80042e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <SystemInit+0x28>)
 80042ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042ee:	609a      	str	r2, [r3, #8]
#endif
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004338 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004306:	e003      	b.n	8004310 <LoopCopyDataInit>

08004308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800430a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800430c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800430e:	3104      	adds	r1, #4

08004310 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004310:	480b      	ldr	r0, [pc, #44]	; (8004340 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004318:	d3f6      	bcc.n	8004308 <CopyDataInit>
  ldr  r2, =_sbss
 800431a:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800431c:	e002      	b.n	8004324 <LoopFillZerobss>

0800431e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800431e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004320:	f842 3b04 	str.w	r3, [r2], #4

08004324 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004328:	d3f9      	bcc.n	800431e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800432a:	f7ff ffd3 	bl	80042d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800432e:	f008 fe61 	bl	800cff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004332:	f7fc fc01 	bl	8000b38 <main>
  bx  lr    
 8004336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004338:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800433c:	0800f8fc 	.word	0x0800f8fc
  ldr  r0, =_sdata
 8004340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004344:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8004348:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 800434c:	20004970 	.word	0x20004970

08004350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004350:	e7fe      	b.n	8004350 <ADC_IRQHandler>

08004352 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004356:	2003      	movs	r0, #3
 8004358:	f000 fcd1 	bl	8004cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff fefd 	bl	800415c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004362:	f7ff f9c9 	bl	80036f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_IncTick+0x20>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_IncTick+0x24>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4413      	add	r3, r2
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_IncTick+0x24>)
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000044 	.word	0x20000044
 8004390:	20004968 	.word	0x20004968

08004394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return uwTick;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_GetTick+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20004968 	.word	0x20004968

080043ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7ff ffee 	bl	8004394 <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d005      	beq.n	80043d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_Delay+0x40>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043d2:	bf00      	nop
 80043d4:	f7ff ffde 	bl	8004394 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d8f7      	bhi.n	80043d4 <HAL_Delay+0x28>
  {
  }
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000044 	.word	0x20000044

080043f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e031      	b.n	800446a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff f99a 	bl	8003748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_ADC_Init+0x84>)
 8004434:	4013      	ands	r3, r2
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fab6 	bl	80049b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
 800445a:	e001      	b.n	8004460 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004468:	7bfb      	ldrb	r3, [r7, #15]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	ffffeefd 	.word	0xffffeefd

08004478 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Start+0x1a>
 800448e:	2302      	movs	r3, #2
 8004490:	e0a0      	b.n	80045d4 <HAL_ADC_Start+0x15c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d018      	beq.n	80044da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80044b8:	4b49      	ldr	r3, [pc, #292]	; (80045e0 <HAL_ADC_Start+0x168>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a49      	ldr	r2, [pc, #292]	; (80045e4 <HAL_ADC_Start+0x16c>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0c9a      	lsrs	r2, r3, #18
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80044cc:	e002      	b.n	80044d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f9      	bne.n	80044ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d174      	bne.n	80045d2 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ec:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <HAL_ADC_Start+0x170>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800450e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d106      	bne.n	8004532 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004528:	f023 0206 	bic.w	r2, r3, #6
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
 8004530:	e002      	b.n	8004538 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004548:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800454a:	4b28      	ldr	r3, [pc, #160]	; (80045ec <HAL_ADC_Start+0x174>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d136      	bne.n	80045d2 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	e02d      	b.n	80045d2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_ADC_Start+0x178>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10e      	bne.n	800459e <HAL_ADC_Start+0x126>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d107      	bne.n	800459e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800459c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_ADC_Start+0x174>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d113      	bne.n	80045d2 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_ADC_Start+0x17c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10e      	bne.n	80045d2 <HAL_ADC_Start+0x15a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045d0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	2000003c 	.word	0x2000003c
 80045e4:	431bde83 	.word	0x431bde83
 80045e8:	fffff8fe 	.word	0xfffff8fe
 80045ec:	40012300 	.word	0x40012300
 80045f0:	40012000 	.word	0x40012000
 80045f4:	40012200 	.word	0x40012200

080045f8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004614:	d113      	bne.n	800463e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d10b      	bne.n	800463e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e05c      	b.n	80046f8 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800463e:	f7ff fea9 	bl	8004394 <HAL_GetTick>
 8004642:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004644:	e01a      	b.n	800467c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d016      	beq.n	800467c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <HAL_ADC_PollForConversion+0x6c>
 8004654:	f7ff fe9e 	bl	8004394 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d20b      	bcs.n	800467c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e03d      	b.n	80046f8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d1dd      	bne.n	8004646 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0212 	mvn.w	r2, #18
 8004692:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d123      	bne.n	80046f6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11f      	bne.n	80046f6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d111      	bne.n	80046f6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x1c>
 8004734:	2302      	movs	r3, #2
 8004736:	e12a      	b.n	800498e <HAL_ADC_ConfigChannel+0x272>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b09      	cmp	r3, #9
 8004746:	d93a      	bls.n	80047be <HAL_ADC_ConfigChannel+0xa2>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004750:	d035      	beq.n	80047be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68d9      	ldr	r1, [r3, #12]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	3b1e      	subs	r3, #30
 8004768:	2207      	movs	r2, #7
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	400a      	ands	r2, r1
 8004776:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a87      	ldr	r2, [pc, #540]	; (800499c <HAL_ADC_ConfigChannel+0x280>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10a      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68d9      	ldr	r1, [r3, #12]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	061a      	lsls	r2, r3, #24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004796:	e035      	b.n	8004804 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68d9      	ldr	r1, [r3, #12]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4403      	add	r3, r0
 80047b0:	3b1e      	subs	r3, #30
 80047b2:	409a      	lsls	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047bc:	e022      	b.n	8004804 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6919      	ldr	r1, [r3, #16]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	2207      	movs	r2, #7
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43da      	mvns	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	400a      	ands	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	4618      	mov	r0, r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4403      	add	r3, r0
 80047fa:	409a      	lsls	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d824      	bhi.n	8004856 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	3b05      	subs	r3, #5
 800481e:	221f      	movs	r2, #31
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43da      	mvns	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	400a      	ands	r2, r1
 800482c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	4618      	mov	r0, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	3b05      	subs	r3, #5
 8004848:	fa00 f203 	lsl.w	r2, r0, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	635a      	str	r2, [r3, #52]	; 0x34
 8004854:	e04c      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d824      	bhi.n	80048a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	3b23      	subs	r3, #35	; 0x23
 8004870:	221f      	movs	r2, #31
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	400a      	ands	r2, r1
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	3b23      	subs	r3, #35	; 0x23
 800489a:	fa00 f203 	lsl.w	r2, r0, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
 80048a6:	e023      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	3b41      	subs	r3, #65	; 0x41
 80048ba:	221f      	movs	r2, #31
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43da      	mvns	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	400a      	ands	r2, r1
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	3b41      	subs	r3, #65	; 0x41
 80048e4:	fa00 f203 	lsl.w	r2, r0, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <HAL_ADC_ConfigChannel+0x284>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10a      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x1f4>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004902:	d105      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 800490a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800490e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <HAL_ADC_ConfigChannel+0x284>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d109      	bne.n	800492e <HAL_ADC_ConfigChannel+0x212>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b12      	cmp	r3, #18
 8004920:	d105      	bne.n	800492e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004922:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 8004928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800492c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_ADC_ConfigChannel+0x284>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d125      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x268>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <HAL_ADC_ConfigChannel+0x280>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <HAL_ADC_ConfigChannel+0x22e>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b11      	cmp	r3, #17
 8004948:	d11c      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_ADC_ConfigChannel+0x288>)
 8004950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004954:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a10      	ldr	r2, [pc, #64]	; (800499c <HAL_ADC_ConfigChannel+0x280>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_ADC_ConfigChannel+0x28c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_ADC_ConfigChannel+0x290>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0c9a      	lsrs	r2, r3, #18
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004976:	e002      	b.n	800497e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b01      	subs	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f9      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	10000012 	.word	0x10000012
 80049a0:	40012000 	.word	0x40012000
 80049a4:	40012300 	.word	0x40012300
 80049a8:	2000003c 	.word	0x2000003c
 80049ac:	431bde83 	.word	0x431bde83

080049b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80049b8:	4b78      	ldr	r3, [pc, #480]	; (8004b9c <ADC_Init+0x1ec>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a77      	ldr	r2, [pc, #476]	; (8004b9c <ADC_Init+0x1ec>)
 80049be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80049c4:	4b75      	ldr	r3, [pc, #468]	; (8004b9c <ADC_Init+0x1ec>)
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4973      	ldr	r1, [pc, #460]	; (8004b9c <ADC_Init+0x1ec>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	4a58      	ldr	r2, [pc, #352]	; (8004ba0 <ADC_Init+0x1f0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6899      	ldr	r1, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6899      	ldr	r1, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	e00f      	b.n	8004aaa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0202 	bic.w	r2, r2, #2
 8004ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	005a      	lsls	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004af6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	3b01      	subs	r3, #1
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	e007      	b.n	8004b20 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	051a      	lsls	r2, r3, #20
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b62:	025a      	lsls	r2, r3, #9
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6899      	ldr	r1, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	029a      	lsls	r2, r3, #10
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40012300 	.word	0x40012300
 8004ba0:	0f000001 	.word	0x0f000001

08004ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <__NVIC_SetPriorityGrouping+0x40>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd2:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <__NVIC_SetPriorityGrouping+0x40>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60d3      	str	r3, [r2, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00
 8004be8:	05fa0000 	.word	0x05fa0000

08004bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <__NVIC_GetPriorityGrouping+0x18>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 0307 	and.w	r3, r3, #7
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db0b      	blt.n	8004c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	f003 021f 	and.w	r2, r3, #31
 8004c20:	4907      	ldr	r1, [pc, #28]	; (8004c40 <__NVIC_EnableIRQ+0x38>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2001      	movs	r0, #1
 8004c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000e100 	.word	0xe000e100

08004c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	; (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	; (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	; 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf28      	it	cs
 8004cb6:	2304      	movcs	r3, #4
 8004cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d902      	bls.n	8004cc8 <NVIC_EncodePriority+0x30>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	e000      	b.n	8004cca <NVIC_EncodePriority+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	401a      	ands	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43d9      	mvns	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	4313      	orrs	r3, r2
         );
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	; 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff4c 	bl	8004ba4 <__NVIC_SetPriorityGrouping>
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d26:	f7ff ff61 	bl	8004bec <__NVIC_GetPriorityGrouping>
 8004d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	6978      	ldr	r0, [r7, #20]
 8004d32:	f7ff ffb1 	bl	8004c98 <NVIC_EncodePriority>
 8004d36:	4602      	mov	r2, r0
 8004d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff80 	bl	8004c44 <__NVIC_SetPriority>
}
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff54 	bl	8004c08 <__NVIC_EnableIRQ>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e014      	b.n	8004da4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fe fd4a 	bl	8003824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc2:	d118      	bne.n	8004df6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f825 	bl	8004e40 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e04:	d118      	bne.n	8004e38 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f043 0202 	orr.w	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f85b 	bl	8004eee <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	795b      	ldrb	r3, [r3, #5]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_DAC_ConfigChannel+0x20>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e036      	b.n	8004ee2 <HAL_DAC_ConfigChannel+0x8e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004e88:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4013      	ands	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	22c0      	movs	r2, #192	; 0xc0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f10:	f7ff fa40 	bl	8004394 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e099      	b.n	8005054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f40:	e00f      	b.n	8004f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f42:	f7ff fa27 	bl	8004394 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d908      	bls.n	8004f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e078      	b.n	8005054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e8      	bne.n	8004f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_DMA_Init+0x158>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d107      	bne.n	8004fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d117      	bne.n	8005026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8bd 	bl	8005188 <DMA_CheckFifoParam>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005022:	2301      	movs	r3, #1
 8005024:	e016      	b.n	8005054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f874 	bl	800511c <DMA_CalcBaseAndBitshift>
 8005034:	4603      	mov	r3, r0
 8005036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	223f      	movs	r2, #63	; 0x3f
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	f010803f 	.word	0xf010803f

08005060 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e050      	b.n	8005114 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d101      	bne.n	8005082 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	e048      	b.n	8005114 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f82a 	bl	800511c <DMA_CalcBaseAndBitshift>
 80050c8:	4603      	mov	r3, r0
 80050ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	409a      	lsls	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	3b10      	subs	r3, #16
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <DMA_CalcBaseAndBitshift+0x60>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005136:	4a12      	ldr	r2, [pc, #72]	; (8005180 <DMA_CalcBaseAndBitshift+0x64>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d908      	bls.n	800515c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <DMA_CalcBaseAndBitshift+0x68>)
 8005152:	4013      	ands	r3, r2
 8005154:	1d1a      	adds	r2, r3, #4
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	659a      	str	r2, [r3, #88]	; 0x58
 800515a:	e006      	b.n	800516a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <DMA_CalcBaseAndBitshift+0x68>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	aaaaaaab 	.word	0xaaaaaaab
 8005180:	0800f8b0 	.word	0x0800f8b0
 8005184:	fffffc00 	.word	0xfffffc00

08005188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11f      	bne.n	80051e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d855      	bhi.n	8005254 <DMA_CheckFifoParam+0xcc>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <DMA_CheckFifoParam+0x28>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051d3 	.word	0x080051d3
 80051b8:	080051c1 	.word	0x080051c1
 80051bc:	08005255 	.word	0x08005255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d045      	beq.n	8005258 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d0:	e042      	b.n	8005258 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051da:	d13f      	bne.n	800525c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e0:	e03c      	b.n	800525c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ea:	d121      	bne.n	8005230 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d836      	bhi.n	8005260 <DMA_CheckFifoParam+0xd8>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <DMA_CheckFifoParam+0x70>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005209 	.word	0x08005209
 80051fc:	0800520f 	.word	0x0800520f
 8005200:	08005209 	.word	0x08005209
 8005204:	08005221 	.word	0x08005221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	e02f      	b.n	800526e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d024      	beq.n	8005264 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521e:	e021      	b.n	8005264 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005228:	d11e      	bne.n	8005268 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800522e:	e01b      	b.n	8005268 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d902      	bls.n	800523c <DMA_CheckFifoParam+0xb4>
 8005236:	2b03      	cmp	r3, #3
 8005238:	d003      	beq.n	8005242 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800523a:	e018      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e015      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      break;
 8005252:	e00b      	b.n	800526c <DMA_CheckFifoParam+0xe4>
      break;
 8005254:	bf00      	nop
 8005256:	e00a      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;
 8005258:	bf00      	nop
 800525a:	e008      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;
 800525c:	bf00      	nop
 800525e:	e006      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;
 8005260:	bf00      	nop
 8005262:	e004      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;
 8005264:	bf00      	nop
 8005266:	e002      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;   
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <DMA_CheckFifoParam+0xe6>
      break;
 800526c:	bf00      	nop
    }
  } 
  
  return status; 
 800526e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e039      	b.n	8005302 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fe fb06 	bl	80038b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	f023 0107 	bic.w	r1, r3, #7
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_DMA2D_Init+0x90>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68d1      	ldr	r1, [r2, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	ffffc000 	.word	0xffffc000

08005310 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_DMA2D_Start+0x1c>
 8005328:	2302      	movs	r3, #2
 800532a:	e018      	b.n	800535e <HAL_DMA2D_Start+0x4e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f988 	bl	800565c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d056      	beq.n	8005430 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005382:	f7ff f807 	bl	8004394 <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005388:	e04b      	b.n	8005422 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005398:	2b00      	cmp	r3, #0
 800539a:	d023      	beq.n	80053e4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	f043 0201 	orr.w	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2204      	movs	r2, #4
 80053d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0a5      	b.n	8005530 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d01a      	beq.n	8005422 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80053ec:	f7fe ffd2 	bl	8004394 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <HAL_DMA2D_PollForTransfer+0x9c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2203      	movs	r2, #3
 8005412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e086      	b.n	8005530 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ac      	beq.n	800538a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d061      	beq.n	8005516 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005452:	f7fe ff9f 	bl	8004394 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005458:	e056      	b.n	8005508 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02e      	beq.n	80054ca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	f043 0202 	orr.w	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	f043 0201 	orr.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2229      	movs	r2, #41	; 0x29
 80054b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2204      	movs	r2, #4
 80054ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e032      	b.n	8005530 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d01a      	beq.n	8005508 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80054d2:	f7fe ff5f 	bl	8004394 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <HAL_DMA2D_PollForTransfer+0x182>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10f      	bne.n	8005508 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2203      	movs	r2, #3
 80054f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e013      	b.n	8005530 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0a1      	beq.n	800545a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2212      	movs	r2, #18
 800551c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_DMA2D_ConfigLayer+0x20>
 8005554:	2302      	movs	r3, #2
 8005556:	e079      	b.n	800564c <HAL_DMA2D_ConfigLayer+0x114>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	3318      	adds	r3, #24
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005582:	4b35      	ldr	r3, [pc, #212]	; (8005658 <HAL_DMA2D_ConfigLayer+0x120>)
 8005584:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b0a      	cmp	r3, #10
 800558c:	d003      	beq.n	8005596 <HAL_DMA2D_ConfigLayer+0x5e>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b09      	cmp	r3, #9
 8005594:	d107      	bne.n	80055a6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e005      	b.n	80055b2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d120      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	ea02 0103 	and.w	r1, r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d003      	beq.n	80055ea <HAL_DMA2D_ConfigLayer+0xb2>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d127      	bne.n	800563a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
 80055f8:	e01f      	b.n	800563a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	43db      	mvns	r3, r3
 8005604:	ea02 0103 	and.w	r1, r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	430a      	orrs	r2, r1
 8005610:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b0a      	cmp	r3, #10
 8005622:	d003      	beq.n	800562c <HAL_DMA2D_ConfigLayer+0xf4>
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b09      	cmp	r3, #9
 800562a:	d106      	bne.n	800563a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005638:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	ff03000f 	.word	0xff03000f

0800565c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800565c:	b480      	push	{r7}
 800565e:	b08b      	sub	sp, #44	; 0x2c
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	041a      	lsls	r2, r3, #16
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	431a      	orrs	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005694:	d174      	bne.n	8005780 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800569c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	e053      	b.n	8005776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d106      	bne.n	80056e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	e048      	b.n	8005776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d111      	bne.n	8005710 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	0cdb      	lsrs	r3, r3, #19
 80056f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	0a9b      	lsrs	r3, r3, #10
 80056f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	02db      	lsls	r3, r3, #11
 8005706:	4313      	orrs	r3, r2
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	e032      	b.n	8005776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d117      	bne.n	8005748 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	0fdb      	lsrs	r3, r3, #31
 800571c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	0cdb      	lsrs	r3, r3, #19
 8005722:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	0adb      	lsrs	r3, r3, #11
 8005728:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	08db      	lsrs	r3, r3, #3
 800572e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	431a      	orrs	r2, r3
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	03db      	lsls	r3, r3, #15
 800573e:	4313      	orrs	r3, r2
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	e016      	b.n	8005776 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	0f1b      	lsrs	r3, r3, #28
 800574c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	0d1b      	lsrs	r3, r3, #20
 8005752:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	0b1b      	lsrs	r3, r3, #12
 8005758:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	011a      	lsls	r2, r3, #4
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	431a      	orrs	r2, r3
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	4313      	orrs	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800577e:	e003      	b.n	8005788 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	60da      	str	r2, [r3, #12]
}
 8005788:	bf00      	nop
 800578a:	372c      	adds	r7, #44	; 0x2c
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	e175      	b.n	8005aa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80057b4:	2201      	movs	r2, #1
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f040 8164 	bne.w	8005a9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d00b      	beq.n	80057f2 <HAL_GPIO_Init+0x5e>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d007      	beq.n	80057f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e6:	2b11      	cmp	r3, #17
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b12      	cmp	r3, #18
 80057f0:	d130      	bne.n	8005854 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	2203      	movs	r2, #3
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005828:	2201      	movs	r2, #1
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	091b      	lsrs	r3, r3, #4
 800583e:	f003 0201 	and.w	r2, r3, #1
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	2203      	movs	r2, #3
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d003      	beq.n	8005894 <HAL_GPIO_Init+0x100>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b12      	cmp	r3, #18
 8005892:	d123      	bne.n	80058dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	08da      	lsrs	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3208      	adds	r2, #8
 800589c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	220f      	movs	r2, #15
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2203      	movs	r2, #3
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0203 	and.w	r2, r3, #3
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80be 	beq.w	8005a9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800591e:	4b65      	ldr	r3, [pc, #404]	; (8005ab4 <HAL_GPIO_Init+0x320>)
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	4a64      	ldr	r2, [pc, #400]	; (8005ab4 <HAL_GPIO_Init+0x320>)
 8005924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005928:	6453      	str	r3, [r2, #68]	; 0x44
 800592a:	4b62      	ldr	r3, [pc, #392]	; (8005ab4 <HAL_GPIO_Init+0x320>)
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005936:	4a60      	ldr	r2, [pc, #384]	; (8005ab8 <HAL_GPIO_Init+0x324>)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	089b      	lsrs	r3, r3, #2
 800593c:	3302      	adds	r3, #2
 800593e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	220f      	movs	r2, #15
 800594e:	fa02 f303 	lsl.w	r3, r2, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a57      	ldr	r2, [pc, #348]	; (8005abc <HAL_GPIO_Init+0x328>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d037      	beq.n	80059d2 <HAL_GPIO_Init+0x23e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a56      	ldr	r2, [pc, #344]	; (8005ac0 <HAL_GPIO_Init+0x32c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_GPIO_Init+0x23a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a55      	ldr	r2, [pc, #340]	; (8005ac4 <HAL_GPIO_Init+0x330>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d02b      	beq.n	80059ca <HAL_GPIO_Init+0x236>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a54      	ldr	r2, [pc, #336]	; (8005ac8 <HAL_GPIO_Init+0x334>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d025      	beq.n	80059c6 <HAL_GPIO_Init+0x232>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a53      	ldr	r2, [pc, #332]	; (8005acc <HAL_GPIO_Init+0x338>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01f      	beq.n	80059c2 <HAL_GPIO_Init+0x22e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a52      	ldr	r2, [pc, #328]	; (8005ad0 <HAL_GPIO_Init+0x33c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d019      	beq.n	80059be <HAL_GPIO_Init+0x22a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a51      	ldr	r2, [pc, #324]	; (8005ad4 <HAL_GPIO_Init+0x340>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_GPIO_Init+0x226>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a50      	ldr	r2, [pc, #320]	; (8005ad8 <HAL_GPIO_Init+0x344>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00d      	beq.n	80059b6 <HAL_GPIO_Init+0x222>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4f      	ldr	r2, [pc, #316]	; (8005adc <HAL_GPIO_Init+0x348>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <HAL_GPIO_Init+0x21e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a4e      	ldr	r2, [pc, #312]	; (8005ae0 <HAL_GPIO_Init+0x34c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <HAL_GPIO_Init+0x21a>
 80059aa:	2309      	movs	r3, #9
 80059ac:	e012      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059ae:	230a      	movs	r3, #10
 80059b0:	e010      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059b2:	2308      	movs	r3, #8
 80059b4:	e00e      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059b6:	2307      	movs	r3, #7
 80059b8:	e00c      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059ba:	2306      	movs	r3, #6
 80059bc:	e00a      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059be:	2305      	movs	r3, #5
 80059c0:	e008      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059c2:	2304      	movs	r3, #4
 80059c4:	e006      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059c6:	2303      	movs	r3, #3
 80059c8:	e004      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e002      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <HAL_GPIO_Init+0x240>
 80059d2:	2300      	movs	r3, #0
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f002 0203 	and.w	r2, r2, #3
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	4093      	lsls	r3, r2
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059e4:	4934      	ldr	r1, [pc, #208]	; (8005ab8 <HAL_GPIO_Init+0x324>)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	3302      	adds	r3, #2
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059f2:	4b3c      	ldr	r3, [pc, #240]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a16:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a40:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a46:	4b27      	ldr	r3, [pc, #156]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <HAL_GPIO_Init+0x350>)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	f67f ae86 	bls.w	80057b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3724      	adds	r7, #36	; 0x24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40013800 	.word	0x40013800
 8005abc:	40020000 	.word	0x40020000
 8005ac0:	40020400 	.word	0x40020400
 8005ac4:	40020800 	.word	0x40020800
 8005ac8:	40020c00 	.word	0x40020c00
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	40021400 	.word	0x40021400
 8005ad4:	40021800 	.word	0x40021800
 8005ad8:	40021c00 	.word	0x40021c00
 8005adc:	40022000 	.word	0x40022000
 8005ae0:	40022400 	.word	0x40022400
 8005ae4:	40013c00 	.word	0x40013c00

08005ae8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e0d9      	b.n	8005cb8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b04:	2201      	movs	r2, #1
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f040 80c9 	bne.w	8005cb2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005b20:	4a6a      	ldr	r2, [pc, #424]	; (8005ccc <HAL_GPIO_DeInit+0x1e4>)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	3302      	adds	r3, #2
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	220f      	movs	r2, #15
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a62      	ldr	r2, [pc, #392]	; (8005cd0 <HAL_GPIO_DeInit+0x1e8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d037      	beq.n	8005bba <HAL_GPIO_DeInit+0xd2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a61      	ldr	r2, [pc, #388]	; (8005cd4 <HAL_GPIO_DeInit+0x1ec>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_GPIO_DeInit+0xce>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a60      	ldr	r2, [pc, #384]	; (8005cd8 <HAL_GPIO_DeInit+0x1f0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <HAL_GPIO_DeInit+0xca>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a5f      	ldr	r2, [pc, #380]	; (8005cdc <HAL_GPIO_DeInit+0x1f4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d025      	beq.n	8005bae <HAL_GPIO_DeInit+0xc6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <HAL_GPIO_DeInit+0x1f8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <HAL_GPIO_DeInit+0xc2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <HAL_GPIO_DeInit+0x1fc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d019      	beq.n	8005ba6 <HAL_GPIO_DeInit+0xbe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a5c      	ldr	r2, [pc, #368]	; (8005ce8 <HAL_GPIO_DeInit+0x200>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_GPIO_DeInit+0xba>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a5b      	ldr	r2, [pc, #364]	; (8005cec <HAL_GPIO_DeInit+0x204>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00d      	beq.n	8005b9e <HAL_GPIO_DeInit+0xb6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a5a      	ldr	r2, [pc, #360]	; (8005cf0 <HAL_GPIO_DeInit+0x208>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <HAL_GPIO_DeInit+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a59      	ldr	r2, [pc, #356]	; (8005cf4 <HAL_GPIO_DeInit+0x20c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_GPIO_DeInit+0xae>
 8005b92:	2309      	movs	r3, #9
 8005b94:	e012      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005b96:	230a      	movs	r3, #10
 8005b98:	e010      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e00e      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005b9e:	2307      	movs	r3, #7
 8005ba0:	e00c      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005ba2:	2306      	movs	r3, #6
 8005ba4:	e00a      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005ba6:	2305      	movs	r3, #5
 8005ba8:	e008      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005baa:	2304      	movs	r3, #4
 8005bac:	e006      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e004      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e002      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_GPIO_DeInit+0xd4>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	f002 0203 	and.w	r2, r2, #3
 8005bc2:	0092      	lsls	r2, r2, #2
 8005bc4:	4093      	lsls	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d132      	bne.n	8005c32 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005bcc:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	4948      	ldr	r1, [pc, #288]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bda:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	43db      	mvns	r3, r3
 8005be2:	4945      	ldr	r1, [pc, #276]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005be8:	4b43      	ldr	r3, [pc, #268]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	43db      	mvns	r3, r3
 8005bf0:	4941      	ldr	r1, [pc, #260]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bf6:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	493e      	ldr	r1, [pc, #248]	; (8005cf8 <HAL_GPIO_DeInit+0x210>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005c14:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <HAL_GPIO_DeInit+0x1e4>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	43da      	mvns	r2, r3
 8005c24:	4829      	ldr	r0, [pc, #164]	; (8005ccc <HAL_GPIO_DeInit+0x1e4>)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	400a      	ands	r2, r1
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	2103      	movs	r1, #3
 8005c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	401a      	ands	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	08da      	lsrs	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3208      	adds	r2, #8
 8005c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	08d2      	lsrs	r2, r2, #3
 8005c68:	4019      	ands	r1, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3208      	adds	r2, #8
 8005c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2103      	movs	r1, #3
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2103      	movs	r1, #3
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	401a      	ands	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b0f      	cmp	r3, #15
 8005cbc:	f67f af22 	bls.w	8005b04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40013800 	.word	0x40013800
 8005cd0:	40020000 	.word	0x40020000
 8005cd4:	40020400 	.word	0x40020400
 8005cd8:	40020800 	.word	0x40020800
 8005cdc:	40020c00 	.word	0x40020c00
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40021400 	.word	0x40021400
 8005ce8:	40021800 	.word	0x40021800
 8005cec:	40021c00 	.word	0x40021c00
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40022400 	.word	0x40022400
 8005cf8:	40013c00 	.word	0x40013c00

08005cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e001      	b.n	8005d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d42:	887a      	ldrh	r2, [r7, #2]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d48:	e003      	b.n	8005d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d4a:	887b      	ldrh	r3, [r7, #2]
 8005d4c:	041a      	lsls	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07f      	b.n	8005e72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fd fdb4 	bl	80038f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	; 0x24
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005db0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	e006      	b.n	8005de8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d104      	bne.n	8005dfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <HAL_I2C_Init+0x11c>)
 8005e06:	430b      	orrs	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	ea42 0103 	orr.w	r1, r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	02008000 	.word	0x02008000

08005e80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e021      	b.n	8005ed6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2224      	movs	r2, #36	; 0x24
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fd fd9a 	bl	80039e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	813b      	strh	r3, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	f040 80f9 	bne.w	80060fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_I2C_Mem_Write+0x34>
 8005f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0ed      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_I2C_Mem_Write+0x4e>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0e6      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f36:	f7fe fa2d 	bl	8004394 <HAL_GetTick>
 8005f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2319      	movs	r3, #25
 8005f42:	2201      	movs	r2, #1
 8005f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fad1 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0d1      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2221      	movs	r2, #33	; 0x21
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2240      	movs	r2, #64	; 0x40
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f80:	88f8      	ldrh	r0, [r7, #6]
 8005f82:	893a      	ldrh	r2, [r7, #8]
 8005f84:	8979      	ldrh	r1, [r7, #10]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	4603      	mov	r3, r0
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f9e1 	bl	8006358 <I2C_RequestMemoryWrite>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a9      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d90e      	bls.n	8005fd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	8979      	ldrh	r1, [r7, #10]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fbb3 	bl	8006734 <I2C_TransferConfig>
 8005fce:	e00f      	b.n	8005ff0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fba2 	bl	8006734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fabb 	bl	8006570 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e07b      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d034      	beq.n	80060a8 <HAL_I2C_Mem_Write+0x1c8>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d130      	bne.n	80060a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2200      	movs	r2, #0
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fa4d 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e04d      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d90e      	bls.n	8006088 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	22ff      	movs	r2, #255	; 0xff
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	8979      	ldrh	r1, [r7, #10]
 8006078:	2300      	movs	r3, #0
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fb57 	bl	8006734 <I2C_TransferConfig>
 8006086:	e00f      	b.n	80060a8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	b2da      	uxtb	r2, r3
 8006098:	8979      	ldrh	r1, [r7, #10]
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fb46 	bl	8006734 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d19e      	bne.n	8005ff0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa9a 	bl	80065f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e01a      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2220      	movs	r2, #32
 80060cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_I2C_Mem_Write+0x224>)
 80060da:	400b      	ands	r3, r1
 80060dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e000      	b.n	80060fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80060fa:	2302      	movs	r3, #2
  }
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	fe00e800 	.word	0xfe00e800

08006108 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	4608      	mov	r0, r1
 8006112:	4611      	mov	r1, r2
 8006114:	461a      	mov	r2, r3
 8006116:	4603      	mov	r3, r0
 8006118:	817b      	strh	r3, [r7, #10]
 800611a:	460b      	mov	r3, r1
 800611c:	813b      	strh	r3, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b20      	cmp	r3, #32
 800612c:	f040 80fd 	bne.w	800632a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_I2C_Mem_Read+0x34>
 8006136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0f1      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Mem_Read+0x4e>
 8006152:	2302      	movs	r3, #2
 8006154:	e0ea      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800615e:	f7fe f919 	bl	8004394 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2319      	movs	r3, #25
 800616a:	2201      	movs	r2, #1
 800616c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f9bd 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0d5      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2222      	movs	r2, #34	; 0x22
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061a8:	88f8      	ldrh	r0, [r7, #6]
 80061aa:	893a      	ldrh	r2, [r7, #8]
 80061ac:	8979      	ldrh	r1, [r7, #10]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4603      	mov	r3, r0
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f921 	bl	8006400 <I2C_RequestMemoryRead>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0ad      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2bff      	cmp	r3, #255	; 0xff
 80061d8:	d90e      	bls.n	80061f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	8979      	ldrh	r1, [r7, #10]
 80061e8:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_I2C_Mem_Read+0x22c>)
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fa9f 	bl	8006734 <I2C_TransferConfig>
 80061f6:	e00f      	b.n	8006218 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	b2da      	uxtb	r2, r3
 8006208:	8979      	ldrh	r1, [r7, #10]
 800620a:	4b4a      	ldr	r3, [pc, #296]	; (8006334 <HAL_I2C_Mem_Read+0x22c>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa8e 	bl	8006734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2200      	movs	r2, #0
 8006220:	2104      	movs	r1, #4
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f964 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07c      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d034      	beq.n	80062d8 <HAL_I2C_Mem_Read+0x1d0>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d130      	bne.n	80062d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f935 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e04d      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2bff      	cmp	r3, #255	; 0xff
 8006298:	d90e      	bls.n	80062b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	; 0xff
 800629e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fa3f 	bl	8006734 <I2C_TransferConfig>
 80062b6:	e00f      	b.n	80062d8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	8979      	ldrh	r1, [r7, #10]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa2e 	bl	8006734 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d19a      	bne.n	8006218 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f982 	bl	80065f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e01a      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2220      	movs	r2, #32
 80062fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6859      	ldr	r1, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_I2C_Mem_Read+0x230>)
 800630a:	400b      	ands	r3, r1
 800630c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
  }
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	80002400 	.word	0x80002400
 8006338:	fe00e800 	.word	0xfe00e800

0800633c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	817b      	strh	r3, [r7, #10]
 800636a:	460b      	mov	r3, r1
 800636c:	813b      	strh	r3, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	8979      	ldrh	r1, [r7, #10]
 8006378:	4b20      	ldr	r3, [pc, #128]	; (80063fc <I2C_RequestMemoryWrite+0xa4>)
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f9d7 	bl	8006734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f8f0 	bl	8006570 <I2C_WaitOnTXISFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e02c      	b.n	80063f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d105      	bne.n	80063ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063a0:	893b      	ldrh	r3, [r7, #8]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	629a      	str	r2, [r3, #40]	; 0x28
 80063aa:	e015      	b.n	80063d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063ac:	893b      	ldrh	r3, [r7, #8]
 80063ae:	0a1b      	lsrs	r3, r3, #8
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f8d6 	bl	8006570 <I2C_WaitOnTXISFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e012      	b.n	80063f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ce:	893b      	ldrh	r3, [r7, #8]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2200      	movs	r2, #0
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f884 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	80002000 	.word	0x80002000

08006400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	4608      	mov	r0, r1
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	4603      	mov	r3, r0
 8006410:	817b      	strh	r3, [r7, #10]
 8006412:	460b      	mov	r3, r1
 8006414:	813b      	strh	r3, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	8979      	ldrh	r1, [r7, #10]
 8006420:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <I2C_RequestMemoryRead+0xa4>)
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f984 	bl	8006734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f89d 	bl	8006570 <I2C_WaitOnTXISFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e02c      	b.n	800649a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d105      	bne.n	8006452 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006446:	893b      	ldrh	r3, [r7, #8]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
 8006450:	e015      	b.n	800647e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006452:	893b      	ldrh	r3, [r7, #8]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	b29b      	uxth	r3, r3
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f883 	bl	8006570 <I2C_WaitOnTXISFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e012      	b.n	800649a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006474:	893b      	ldrh	r3, [r7, #8]
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2200      	movs	r2, #0
 8006486:	2140      	movs	r1, #64	; 0x40
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f831 	bl	80064f0 <I2C_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	80002000 	.word	0x80002000

080064a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d103      	bne.n	80064c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2200      	movs	r2, #0
 80064c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	619a      	str	r2, [r3, #24]
  }
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006500:	e022      	b.n	8006548 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d01e      	beq.n	8006548 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650a:	f7fd ff43 	bl	8004394 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d113      	bne.n	8006548 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e00f      	b.n	8006568 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	429a      	cmp	r2, r3
 8006564:	d0cd      	beq.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800657c:	e02c      	b.n	80065d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f870 	bl	8006668 <I2C_IsAcknowledgeFailed>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e02a      	b.n	80065e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d01e      	beq.n	80065d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659a:	f7fd fefb 	bl	8004394 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d113      	bne.n	80065d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e007      	b.n	80065e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d1cb      	bne.n	800657e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fc:	e028      	b.n	8006650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f830 	bl	8006668 <I2C_IsAcknowledgeFailed>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e026      	b.n	8006660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fd febf 	bl	8004394 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662c:	f043 0220 	orr.w	r2, r3, #32
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e007      	b.n	8006660 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d1cf      	bne.n	80065fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b10      	cmp	r3, #16
 8006680:	d151      	bne.n	8006726 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006682:	e022      	b.n	80066ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d01e      	beq.n	80066ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668c:	f7fd fe82 	bl	8004394 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <I2C_IsAcknowledgeFailed+0x3a>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d113      	bne.n	80066ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f043 0220 	orr.w	r2, r3, #32
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e02e      	b.n	8006728 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d1d5      	bne.n	8006684 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2210      	movs	r2, #16
 80066de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2220      	movs	r2, #32
 80066e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fedd 	bl	80064a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <I2C_IsAcknowledgeFailed+0xc8>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	fe00e800 	.word	0xfe00e800

08006734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	817b      	strh	r3, [r7, #10]
 8006742:	4613      	mov	r3, r2
 8006744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	0d5b      	lsrs	r3, r3, #21
 8006750:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006754:	4b0d      	ldr	r3, [pc, #52]	; (800678c <I2C_TransferConfig+0x58>)
 8006756:	430b      	orrs	r3, r1
 8006758:	43db      	mvns	r3, r3
 800675a:	ea02 0103 	and.w	r1, r2, r3
 800675e:	897b      	ldrh	r3, [r7, #10]
 8006760:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006764:	7a7b      	ldrb	r3, [r7, #9]
 8006766:	041b      	lsls	r3, r3, #16
 8006768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	431a      	orrs	r2, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	431a      	orrs	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	03ff63ff 	.word	0x03ff63ff

08006790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d138      	bne.n	8006818 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e032      	b.n	800681a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2224      	movs	r2, #36	; 0x24
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b20      	cmp	r3, #32
 800683a:	d139      	bne.n	80068b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006846:	2302      	movs	r3, #2
 8006848:	e033      	b.n	80068b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2224      	movs	r2, #36	; 0x24
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0bf      	b.n	8006a52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fd f8b8 	bl	8003a5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006902:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006918:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6899      	ldr	r1, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b4a      	ldr	r3, [pc, #296]	; (8006a5c <HAL_LTDC_Init+0x19c>)
 8006934:	400b      	ands	r3, r1
 8006936:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6899      	ldr	r1, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68d9      	ldr	r1, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <HAL_LTDC_Init+0x19c>)
 8006962:	400b      	ands	r3, r1
 8006964:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6919      	ldr	r1, [r3, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b33      	ldr	r3, [pc, #204]	; (8006a5c <HAL_LTDC_Init+0x19c>)
 8006990:	400b      	ands	r3, r1
 8006992:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6919      	ldr	r1, [r3, #16]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6959      	ldr	r1, [r3, #20]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4b27      	ldr	r3, [pc, #156]	; (8006a5c <HAL_LTDC_Init+0x19c>)
 80069be:	400b      	ands	r3, r1
 80069c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	041b      	lsls	r3, r3, #16
 80069c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6959      	ldr	r1, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069f0:	041b      	lsls	r3, r3, #16
 80069f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0206 	orr.w	r2, r2, #6
 8006a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	f000f800 	.word	0xf000f800

08006a60 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d023      	beq.n	8006aca <HAL_LTDC_IRQHandler+0x6a>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0204 	bic.w	r2, r2, #4
 8006a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f86f 	bl	8006ba8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d023      	beq.n	8006b1c <HAL_LTDC_IRQHandler+0xbc>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01e      	beq.n	8006b1c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0202 	bic.w	r2, r2, #2
 8006aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2202      	movs	r2, #2
 8006af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006afc:	f043 0202 	orr.w	r2, r3, #2
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f846 	bl	8006ba8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01b      	beq.n	8006b5e <HAL_LTDC_IRQHandler+0xfe>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d016      	beq.n	8006b5e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f82f 	bl	8006bbc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <HAL_LTDC_IRQHandler+0x140>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0208 	bic.w	r2, r2, #8
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2208      	movs	r2, #8
 8006b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f818 	bl	8006bd0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006be4:	b5b0      	push	{r4, r5, r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_LTDC_ConfigLayer+0x1a>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e02c      	b.n	8006c58 <HAL_LTDC_ConfigLayer+0x74>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2134      	movs	r1, #52	; 0x34
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f81f 	bl	8006c7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2201      	movs	r2, #1
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bdb0      	pop	{r4, r5, r7, pc}

08006c60 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c6e:	b2db      	uxtb	r3, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c98:	4413      	add	r3, r2
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	01db      	lsls	r3, r3, #7
 8006ca8:	4413      	add	r3, r2
 8006caa:	3384      	adds	r3, #132	; 0x84
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	01d2      	lsls	r2, r2, #7
 8006cb8:	440a      	add	r2, r1
 8006cba:	3284      	adds	r2, #132	; 0x84
 8006cbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	4413      	add	r3, r2
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	01db      	lsls	r3, r3, #7
 8006ce0:	440b      	add	r3, r1
 8006ce2:	3384      	adds	r3, #132	; 0x84
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cfa:	4413      	add	r3, r2
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	01db      	lsls	r3, r3, #7
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3384      	adds	r3, #132	; 0x84
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	4611      	mov	r1, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	01d2      	lsls	r2, r2, #7
 8006d1a:	440a      	add	r2, r1
 8006d1c:	3284      	adds	r2, #132	; 0x84
 8006d1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d32:	4413      	add	r3, r2
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	01db      	lsls	r3, r3, #7
 8006d40:	440b      	add	r3, r1
 8006d42:	3384      	adds	r3, #132	; 0x84
 8006d44:	4619      	mov	r1, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	01db      	lsls	r3, r3, #7
 8006d56:	4413      	add	r3, r2
 8006d58:	3384      	adds	r3, #132	; 0x84
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	4611      	mov	r1, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	01d2      	lsls	r2, r2, #7
 8006d66:	440a      	add	r2, r1
 8006d68:	3284      	adds	r2, #132	; 0x84
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	01db      	lsls	r3, r3, #7
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3384      	adds	r3, #132	; 0x84
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	01db      	lsls	r3, r3, #7
 8006dac:	4413      	add	r3, r2
 8006dae:	3384      	adds	r3, #132	; 0x84
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	01db      	lsls	r3, r3, #7
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3384      	adds	r3, #132	; 0x84
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dcc:	461a      	mov	r2, r3
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	01db      	lsls	r3, r3, #7
 8006de0:	440b      	add	r3, r1
 8006de2:	3384      	adds	r3, #132	; 0x84
 8006de4:	4619      	mov	r1, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	01db      	lsls	r3, r3, #7
 8006df6:	4413      	add	r3, r2
 8006df8:	3384      	adds	r3, #132	; 0x84
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	4611      	mov	r1, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	01d2      	lsls	r2, r2, #7
 8006e06:	440a      	add	r2, r1
 8006e08:	3284      	adds	r2, #132	; 0x84
 8006e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	01db      	lsls	r3, r3, #7
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3384      	adds	r3, #132	; 0x84
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	01db      	lsls	r3, r3, #7
 8006e30:	4413      	add	r3, r2
 8006e32:	3384      	adds	r3, #132	; 0x84
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	440b      	add	r3, r1
 8006e42:	3384      	adds	r3, #132	; 0x84
 8006e44:	4619      	mov	r1, r3
 8006e46:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <LTDC_SetConfig+0x32c>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	68f9      	ldr	r1, [r7, #12]
 8006e56:	6809      	ldr	r1, [r1, #0]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	01c9      	lsls	r1, r1, #7
 8006e5e:	4401      	add	r1, r0
 8006e60:	3184      	adds	r1, #132	; 0x84
 8006e62:	4313      	orrs	r3, r2
 8006e64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	01db      	lsls	r3, r3, #7
 8006e70:	4413      	add	r3, r2
 8006e72:	3384      	adds	r3, #132	; 0x84
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	01db      	lsls	r3, r3, #7
 8006e80:	4413      	add	r3, r2
 8006e82:	3384      	adds	r3, #132	; 0x84
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	01db      	lsls	r3, r3, #7
 8006e94:	4413      	add	r3, r2
 8006e96:	3384      	adds	r3, #132	; 0x84
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e01b      	b.n	8006ee6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d102      	bne.n	8006ebc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e014      	b.n	8006ee6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d00b      	beq.n	8006edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d007      	beq.n	8006edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d003      	beq.n	8006edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ed8:	2b07      	cmp	r3, #7
 8006eda:	d102      	bne.n	8006ee2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006edc:	2302      	movs	r3, #2
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e001      	b.n	8006ee6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	01db      	lsls	r3, r3, #7
 8006ef0:	4413      	add	r3, r2
 8006ef2:	3384      	adds	r3, #132	; 0x84
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	4611      	mov	r1, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	01d2      	lsls	r2, r2, #7
 8006f00:	440a      	add	r2, r1
 8006f02:	3284      	adds	r2, #132	; 0x84
 8006f04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006f08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	041a      	lsls	r2, r3, #16
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1acb      	subs	r3, r1, r3
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	3303      	adds	r3, #3
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	6809      	ldr	r1, [r1, #0]
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	01c9      	lsls	r1, r1, #7
 8006f32:	4401      	add	r1, r0
 8006f34:	3184      	adds	r1, #132	; 0x84
 8006f36:	4313      	orrs	r3, r2
 8006f38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	01db      	lsls	r3, r3, #7
 8006f44:	4413      	add	r3, r2
 8006f46:	3384      	adds	r3, #132	; 0x84
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	01db      	lsls	r3, r3, #7
 8006f54:	440b      	add	r3, r1
 8006f56:	3384      	adds	r3, #132	; 0x84
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4b14      	ldr	r3, [pc, #80]	; (8006fac <LTDC_SetConfig+0x330>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	01db      	lsls	r3, r3, #7
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3384      	adds	r3, #132	; 0x84
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	01db      	lsls	r3, r3, #7
 8006f80:	4413      	add	r3, r2
 8006f82:	3384      	adds	r3, #132	; 0x84
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	01d2      	lsls	r2, r2, #7
 8006f90:	440a      	add	r2, r1
 8006f92:	3284      	adds	r2, #132	; 0x84
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	6013      	str	r3, [r2, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	3724      	adds	r7, #36	; 0x24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	fffff8f8 	.word	0xfffff8f8
 8006fac:	fffff800 	.word	0xfffff800

08006fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbe:	6013      	str	r3, [r2, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40007000 	.word	0x40007000

08006fd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe6:	4b20      	ldr	r3, [pc, #128]	; (8007068 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ff2:	4b1e      	ldr	r3, [pc, #120]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1d      	ldr	r2, [pc, #116]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ffe:	f7fd f9c9 	bl	8004394 <HAL_GetTick>
 8007002:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007004:	e009      	b.n	800701a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007006:	f7fd f9c5 	bl	8004394 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007014:	d901      	bls.n	800701a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e022      	b.n	8007060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007026:	d1ee      	bne.n	8007006 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007028:	4b10      	ldr	r3, [pc, #64]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a0f      	ldr	r2, [pc, #60]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 800702e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007032:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007034:	f7fd f9ae 	bl	8004394 <HAL_GetTick>
 8007038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800703a:	e009      	b.n	8007050 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800703c:	f7fd f9aa 	bl	8004394 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800704a:	d901      	bls.n	8007050 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e007      	b.n	8007060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705c:	d1ee      	bne.n	800703c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40023800 	.word	0x40023800
 800706c:	40007000 	.word	0x40007000

08007070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007078:	2300      	movs	r3, #0
 800707a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e291      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8087 	beq.w	80071a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007094:	4b96      	ldr	r3, [pc, #600]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b04      	cmp	r3, #4
 800709e:	d00c      	beq.n	80070ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070a0:	4b93      	ldr	r3, [pc, #588]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d112      	bne.n	80070d2 <HAL_RCC_OscConfig+0x62>
 80070ac:	4b90      	ldr	r3, [pc, #576]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d10b      	bne.n	80070d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ba:	4b8d      	ldr	r3, [pc, #564]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d06c      	beq.n	80071a0 <HAL_RCC_OscConfig+0x130>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d168      	bne.n	80071a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e26b      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070da:	d106      	bne.n	80070ea <HAL_RCC_OscConfig+0x7a>
 80070dc:	4b84      	ldr	r3, [pc, #528]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a83      	ldr	r2, [pc, #524]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e02e      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0x9c>
 80070f2:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7e      	ldr	r2, [pc, #504]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b7c      	ldr	r3, [pc, #496]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7b      	ldr	r2, [pc, #492]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e01d      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007114:	d10c      	bne.n	8007130 <HAL_RCC_OscConfig+0xc0>
 8007116:	4b76      	ldr	r3, [pc, #472]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a75      	ldr	r2, [pc, #468]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800711c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	4b73      	ldr	r3, [pc, #460]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a72      	ldr	r2, [pc, #456]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e00b      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 8007130:	4b6f      	ldr	r3, [pc, #444]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6e      	ldr	r2, [pc, #440]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4b6c      	ldr	r3, [pc, #432]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a6b      	ldr	r2, [pc, #428]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d013      	beq.n	8007178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007150:	f7fd f920 	bl	8004394 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007158:	f7fd f91c 	bl	8004394 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b64      	cmp	r3, #100	; 0x64
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e21f      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0xe8>
 8007176:	e014      	b.n	80071a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fd f90c 	bl	8004394 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007180:	f7fd f908 	bl	8004394 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e20b      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	4b57      	ldr	r3, [pc, #348]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x110>
 800719e:	e000      	b.n	80071a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d069      	beq.n	8007282 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ae:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ba:	4b4d      	ldr	r3, [pc, #308]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d11c      	bne.n	8007200 <HAL_RCC_OscConfig+0x190>
 80071c6:	4b4a      	ldr	r3, [pc, #296]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d116      	bne.n	8007200 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCC_OscConfig+0x17a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e1df      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ea:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	493d      	ldr	r1, [pc, #244]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	e040      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d023      	beq.n	8007250 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a38      	ldr	r2, [pc, #224]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fd f8be 	bl	8004394 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800721c:	f7fd f8ba 	bl	8004394 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1bd      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722e:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0f0      	beq.n	800721c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800723a:	4b2d      	ldr	r3, [pc, #180]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4929      	ldr	r1, [pc, #164]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800724a:	4313      	orrs	r3, r2
 800724c:	600b      	str	r3, [r1, #0]
 800724e:	e018      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fd f89a 	bl	8004394 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007264:	f7fd f896 	bl	8004394 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e199      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d038      	beq.n	8007300 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d019      	beq.n	80072ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a2:	f7fd f877 	bl	8004394 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072aa:	f7fd f873 	bl	8004394 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e176      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x23a>
 80072c8:	e01a      	b.n	8007300 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d6:	f7fd f85d 	bl	8004394 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072de:	f7fd f859 	bl	8004394 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d903      	bls.n	80072f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e15c      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
 80072f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f4:	4b91      	ldr	r3, [pc, #580]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80072f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ee      	bne.n	80072de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80a4 	beq.w	8007456 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730e:	4b8b      	ldr	r3, [pc, #556]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10d      	bne.n	8007336 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	4b88      	ldr	r3, [pc, #544]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	4a87      	ldr	r2, [pc, #540]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007324:	6413      	str	r3, [r2, #64]	; 0x40
 8007326:	4b85      	ldr	r3, [pc, #532]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007332:	2301      	movs	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007336:	4b82      	ldr	r3, [pc, #520]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d118      	bne.n	8007374 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007342:	4b7f      	ldr	r3, [pc, #508]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7e      	ldr	r2, [pc, #504]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800734e:	f7fd f821 	bl	8004394 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007356:	f7fd f81d 	bl	8004394 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	; 0x64
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e120      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007368:	4b75      	ldr	r3, [pc, #468]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d106      	bne.n	800738a <HAL_RCC_OscConfig+0x31a>
 800737c:	4b6f      	ldr	r3, [pc, #444]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a6e      	ldr	r2, [pc, #440]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	e02d      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <HAL_RCC_OscConfig+0x33c>
 8007392:	4b6a      	ldr	r3, [pc, #424]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	4a69      	ldr	r2, [pc, #420]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6713      	str	r3, [r2, #112]	; 0x70
 800739e:	4b67      	ldr	r3, [pc, #412]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	4a66      	ldr	r2, [pc, #408]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	; 0x70
 80073aa:	e01c      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d10c      	bne.n	80073ce <HAL_RCC_OscConfig+0x35e>
 80073b4:	4b61      	ldr	r3, [pc, #388]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a60      	ldr	r2, [pc, #384]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	f043 0304 	orr.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	4b5e      	ldr	r3, [pc, #376]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	4a5d      	ldr	r2, [pc, #372]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	6713      	str	r3, [r2, #112]	; 0x70
 80073cc:	e00b      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 80073ce:	4b5b      	ldr	r3, [pc, #364]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	4a5a      	ldr	r2, [pc, #360]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6713      	str	r3, [r2, #112]	; 0x70
 80073da:	4b58      	ldr	r3, [pc, #352]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	4a57      	ldr	r2, [pc, #348]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d015      	beq.n	800741a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ee:	f7fc ffd1 	bl	8004394 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fc ffcd 	bl	8004394 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e0ce      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	4b4b      	ldr	r3, [pc, #300]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RCC_OscConfig+0x386>
 8007418:	e014      	b.n	8007444 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fc ffbb 	bl	8004394 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007420:	e00a      	b.n	8007438 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007422:	f7fc ffb7 	bl	8004394 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007438:	4b40      	ldr	r3, [pc, #256]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ee      	bne.n	8007422 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d105      	bne.n	8007456 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744a:	4b3c      	ldr	r3, [pc, #240]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4a3b      	ldr	r2, [pc, #236]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80a4 	beq.w	80075a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007460:	4b36      	ldr	r3, [pc, #216]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d06b      	beq.n	8007544 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d149      	bne.n	8007508 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007474:	4b31      	ldr	r3, [pc, #196]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a30      	ldr	r2, [pc, #192]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fc ff88 	bl	8004394 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007488:	f7fc ff84 	bl	8004394 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e087      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749a:	4b28      	ldr	r3, [pc, #160]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69da      	ldr	r2, [r3, #28]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	061b      	lsls	r3, r3, #24
 80074ca:	4313      	orrs	r3, r2
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d4:	4b19      	ldr	r3, [pc, #100]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e0:	f7fc ff58 	bl	8004394 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fc ff54 	bl	8004394 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e057      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f0      	beq.n	80074e8 <HAL_RCC_OscConfig+0x478>
 8007506:	e04f      	b.n	80075a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0b      	ldr	r2, [pc, #44]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800750e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fc ff3e 	bl	8004394 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800751c:	f7fc ff3a 	bl	8004394 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e03d      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0x4ac>
 800753a:	e035      	b.n	80075a8 <HAL_RCC_OscConfig+0x538>
 800753c:	40023800 	.word	0x40023800
 8007540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007544:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <HAL_RCC_OscConfig+0x544>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d028      	beq.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800755c:	429a      	cmp	r2, r3
 800755e:	d121      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d11a      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007574:	4013      	ands	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800757a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800757c:	4293      	cmp	r3, r2
 800757e:	d111      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	3b01      	subs	r3, #1
 800758e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007590:	429a      	cmp	r2, r3
 8007592:	d107      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023800 	.word	0x40023800

080075b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0d0      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d0:	4b6a      	ldr	r3, [pc, #424]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d910      	bls.n	8007600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b67      	ldr	r3, [pc, #412]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f023 020f 	bic.w	r2, r3, #15
 80075e6:	4965      	ldr	r1, [pc, #404]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b63      	ldr	r3, [pc, #396]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0b8      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d020      	beq.n	800764e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007618:	4b59      	ldr	r3, [pc, #356]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a58      	ldr	r2, [pc, #352]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800761e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007630:	4b53      	ldr	r3, [pc, #332]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a52      	ldr	r2, [pc, #328]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800763a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763c:	4b50      	ldr	r3, [pc, #320]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	494d      	ldr	r1, [pc, #308]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d040      	beq.n	80076dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007662:	4b47      	ldr	r3, [pc, #284]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d115      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e07f      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d107      	bne.n	800768a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767a:	4b41      	ldr	r3, [pc, #260]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e073      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800768a:	4b3d      	ldr	r3, [pc, #244]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e06b      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800769a:	4b39      	ldr	r3, [pc, #228]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0203 	bic.w	r2, r3, #3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4936      	ldr	r1, [pc, #216]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ac:	f7fc fe72 	bl	8004394 <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	e00a      	b.n	80076ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b4:	f7fc fe6e 	bl	8004394 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e053      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 020c 	and.w	r2, r3, #12
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1eb      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d210      	bcs.n	800770c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ea:	4b24      	ldr	r3, [pc, #144]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 020f 	bic.w	r2, r3, #15
 80076f2:	4922      	ldr	r1, [pc, #136]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d001      	beq.n	800770c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e032      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007718:	4b19      	ldr	r3, [pc, #100]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4916      	ldr	r1, [pc, #88]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	490e      	ldr	r1, [pc, #56]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800774a:	f000 f821 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800774e:	4601      	mov	r1, r0
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <HAL_RCC_ClockConfig+0x1cc>)
 800775c:	5cd3      	ldrb	r3, [r2, r3]
 800775e:	fa21 f303 	lsr.w	r3, r1, r3
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <HAL_RCC_ClockConfig+0x1d0>)
 8007764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <HAL_RCC_ClockConfig+0x1d4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7fc fcf6 	bl	800415c <HAL_InitTick>

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023c00 	.word	0x40023c00
 8007780:	40023800 	.word	0x40023800
 8007784:	0800f898 	.word	0x0800f898
 8007788:	2000003c 	.word	0x2000003c
 800778c:	20000040 	.word	0x20000040

08007790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	607b      	str	r3, [r7, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	2300      	movs	r3, #0
 80077a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077a6:	4b50      	ldr	r3, [pc, #320]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 030c 	and.w	r3, r3, #12
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d007      	beq.n	80077c2 <HAL_RCC_GetSysClockFreq+0x32>
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d008      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x38>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 808d 	bne.w	80078d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077bc:	4b4b      	ldr	r3, [pc, #300]	; (80078ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80077be:	60bb      	str	r3, [r7, #8]
      break;
 80077c0:	e08c      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077c2:	4b4b      	ldr	r3, [pc, #300]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077c4:	60bb      	str	r3, [r7, #8]
      break;
 80077c6:	e089      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c8:	4b47      	ldr	r3, [pc, #284]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077d2:	4b45      	ldr	r3, [pc, #276]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d023      	beq.n	8007826 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077de:	4b42      	ldr	r3, [pc, #264]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	099b      	lsrs	r3, r3, #6
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	ea03 0501 	and.w	r5, r3, r1
 80077f4:	ea04 0602 	and.w	r6, r4, r2
 80077f8:	4a3d      	ldr	r2, [pc, #244]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077fa:	fb02 f106 	mul.w	r1, r2, r6
 80077fe:	2200      	movs	r2, #0
 8007800:	fb02 f205 	mul.w	r2, r2, r5
 8007804:	440a      	add	r2, r1
 8007806:	493a      	ldr	r1, [pc, #232]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007808:	fba5 0101 	umull	r0, r1, r5, r1
 800780c:	1853      	adds	r3, r2, r1
 800780e:	4619      	mov	r1, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f04f 0400 	mov.w	r4, #0
 8007816:	461a      	mov	r2, r3
 8007818:	4623      	mov	r3, r4
 800781a:	f7f8 fd51 	bl	80002c0 <__aeabi_uldivmod>
 800781e:	4603      	mov	r3, r0
 8007820:	460c      	mov	r4, r1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e049      	b.n	80078ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007826:	4b30      	ldr	r3, [pc, #192]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	099b      	lsrs	r3, r3, #6
 800782c:	f04f 0400 	mov.w	r4, #0
 8007830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	ea03 0501 	and.w	r5, r3, r1
 800783c:	ea04 0602 	and.w	r6, r4, r2
 8007840:	4629      	mov	r1, r5
 8007842:	4632      	mov	r2, r6
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	0154      	lsls	r4, r2, #5
 800784e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007852:	014b      	lsls	r3, r1, #5
 8007854:	4619      	mov	r1, r3
 8007856:	4622      	mov	r2, r4
 8007858:	1b49      	subs	r1, r1, r5
 800785a:	eb62 0206 	sbc.w	r2, r2, r6
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	f04f 0400 	mov.w	r4, #0
 8007866:	0194      	lsls	r4, r2, #6
 8007868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800786c:	018b      	lsls	r3, r1, #6
 800786e:	1a5b      	subs	r3, r3, r1
 8007870:	eb64 0402 	sbc.w	r4, r4, r2
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	00e2      	lsls	r2, r4, #3
 800787e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007882:	00d9      	lsls	r1, r3, #3
 8007884:	460b      	mov	r3, r1
 8007886:	4614      	mov	r4, r2
 8007888:	195b      	adds	r3, r3, r5
 800788a:	eb44 0406 	adc.w	r4, r4, r6
 800788e:	f04f 0100 	mov.w	r1, #0
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	02a2      	lsls	r2, r4, #10
 8007898:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800789c:	0299      	lsls	r1, r3, #10
 800789e:	460b      	mov	r3, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	4621      	mov	r1, r4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f04f 0400 	mov.w	r4, #0
 80078ac:	461a      	mov	r2, r3
 80078ae:	4623      	mov	r3, r4
 80078b0:	f7f8 fd06 	bl	80002c0 <__aeabi_uldivmod>
 80078b4:	4603      	mov	r3, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078ba:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	3301      	adds	r3, #1
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	60bb      	str	r3, [r7, #8]
      break;
 80078d4:	e002      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80078d8:	60bb      	str	r3, [r7, #8]
      break;
 80078da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078dc:	68bb      	ldr	r3, [r7, #8]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40023800 	.word	0x40023800
 80078ec:	00f42400 	.word	0x00f42400
 80078f0:	017d7840 	.word	0x017d7840

080078f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <HAL_RCC_GetHCLKFreq+0x14>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000003c 	.word	0x2000003c

0800790c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007910:	f7ff fff0 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 8007914:	4601      	mov	r1, r0
 8007916:	4b05      	ldr	r3, [pc, #20]	; (800792c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	0a9b      	lsrs	r3, r3, #10
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	4a03      	ldr	r2, [pc, #12]	; (8007930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40023800 	.word	0x40023800
 8007930:	0800f8a8 	.word	0x0800f8a8

08007934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007938:	f7ff ffdc 	bl	80078f4 <HAL_RCC_GetHCLKFreq>
 800793c:	4601      	mov	r1, r0
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	0b5b      	lsrs	r3, r3, #13
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	4a03      	ldr	r2, [pc, #12]	; (8007958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800794a:	5cd3      	ldrb	r3, [r2, r3]
 800794c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40023800 	.word	0x40023800
 8007958:	0800f8a8 	.word	0x0800f8a8

0800795c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220f      	movs	r2, #15
 800796a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800796c:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0203 	and.w	r2, r3, #3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	08db      	lsrs	r3, r3, #3
 8007996:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <HAL_RCC_GetClockConfig+0x60>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40023800 	.word	0x40023800
 80079bc:	40023c00 	.word	0x40023c00

080079c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079e8:	4b69      	ldr	r3, [pc, #420]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4a68      	ldr	r2, [pc, #416]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079f2:	6093      	str	r3, [r2, #8]
 80079f4:	4b66      	ldr	r3, [pc, #408]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fc:	4964      	ldr	r1, [pc, #400]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d017      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a1a:	4b5d      	ldr	r3, [pc, #372]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	4959      	ldr	r1, [pc, #356]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a38:	d101      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d017      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a56:	4b4e      	ldr	r3, [pc, #312]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	494a      	ldr	r1, [pc, #296]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a74:	d101      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a76:	2301      	movs	r3, #1
 8007a78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 808b 	beq.w	8007bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aa4:	4b3a      	ldr	r3, [pc, #232]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	4a39      	ldr	r2, [pc, #228]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aae:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab0:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007abc:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a34      	ldr	r2, [pc, #208]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac8:	f7fc fc64 	bl	8004394 <HAL_GetTick>
 8007acc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad0:	f7fc fc60 	bl	8004394 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e355      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ae2:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0f0      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007aee:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d035      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d02e      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b0c:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b16:	4b1e      	ldr	r3, [pc, #120]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b2e:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b34:	4b16      	ldr	r3, [pc, #88]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d114      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b40:	f7fc fc28 	bl	8004394 <HAL_GetTick>
 8007b44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b46:	e00a      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b48:	f7fc fc24 	bl	8004394 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e317      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ee      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b76:	d111      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b86:	400b      	ands	r3, r1
 8007b88:	4901      	ldr	r1, [pc, #4]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	608b      	str	r3, [r1, #8]
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40007000 	.word	0x40007000
 8007b98:	0ffffcff 	.word	0x0ffffcff
 8007b9c:	4bb0      	ldr	r3, [pc, #704]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	4aaf      	ldr	r2, [pc, #700]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ba2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	4bad      	ldr	r3, [pc, #692]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb4:	49aa      	ldr	r1, [pc, #680]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d010      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bc6:	4ba6      	ldr	r3, [pc, #664]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	4aa4      	ldr	r2, [pc, #656]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007bd6:	4ba2      	ldr	r3, [pc, #648]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	499f      	ldr	r1, [pc, #636]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bf4:	4b9a      	ldr	r3, [pc, #616]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c02:	4997      	ldr	r1, [pc, #604]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c16:	4b92      	ldr	r3, [pc, #584]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c24:	498e      	ldr	r1, [pc, #568]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c38:	4b89      	ldr	r3, [pc, #548]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c46:	4986      	ldr	r1, [pc, #536]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c5a:	4b81      	ldr	r3, [pc, #516]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c68:	497d      	ldr	r1, [pc, #500]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c7c:	4b78      	ldr	r3, [pc, #480]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	4975      	ldr	r1, [pc, #468]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c9e:	4b70      	ldr	r3, [pc, #448]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	f023 020c 	bic.w	r2, r3, #12
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cac:	496c      	ldr	r1, [pc, #432]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cc0:	4b67      	ldr	r3, [pc, #412]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cce:	4964      	ldr	r1, [pc, #400]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ce2:	4b5f      	ldr	r3, [pc, #380]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	495b      	ldr	r1, [pc, #364]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d04:	4b56      	ldr	r3, [pc, #344]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	4953      	ldr	r1, [pc, #332]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d26:	4b4e      	ldr	r3, [pc, #312]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	494a      	ldr	r1, [pc, #296]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d48:	4b45      	ldr	r3, [pc, #276]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d56:	4942      	ldr	r1, [pc, #264]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d6a:	4b3d      	ldr	r3, [pc, #244]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d78:	4939      	ldr	r1, [pc, #228]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d8c:	4b34      	ldr	r3, [pc, #208]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9a:	4931      	ldr	r1, [pc, #196]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d011      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007dae:	4b2c      	ldr	r3, [pc, #176]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbc:	4928      	ldr	r1, [pc, #160]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007dde:	2301      	movs	r3, #1
 8007de0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dee:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dfc:	4918      	ldr	r1, [pc, #96]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e10:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e20:	490f      	ldr	r1, [pc, #60]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e36:	f040 80d8 	bne.w	8007fea <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e3a:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e46:	f7fc faa5 	bl	8004394 <HAL_GetTick>
 8007e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e4c:	e00a      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e4e:	f7fc faa1 	bl	8004394 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b64      	cmp	r3, #100	; 0x64
 8007e5a:	d903      	bls.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e196      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007e60:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e64:	4b6c      	ldr	r3, [pc, #432]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1ee      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d021      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11d      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e84:	4b64      	ldr	r3, [pc, #400]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8a:	0c1b      	lsrs	r3, r3, #16
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e92:	4b61      	ldr	r3, [pc, #388]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	0e1b      	lsrs	r3, r3, #24
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	019a      	lsls	r2, r3, #6
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	061b      	lsls	r3, r3, #24
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	071b      	lsls	r3, r3, #28
 8007eb8:	4957      	ldr	r1, [pc, #348]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed4:	d00a      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d02e      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eea:	d129      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007eec:	4b4a      	ldr	r3, [pc, #296]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007efa:	4b47      	ldr	r3, [pc, #284]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f00:	0f1b      	lsrs	r3, r3, #28
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	019a      	lsls	r2, r3, #6
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	041b      	lsls	r3, r3, #16
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	061b      	lsls	r3, r3, #24
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	071b      	lsls	r3, r3, #28
 8007f20:	493d      	ldr	r1, [pc, #244]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f28:	4b3b      	ldr	r3, [pc, #236]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2e:	f023 021f 	bic.w	r2, r3, #31
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	3b01      	subs	r3, #1
 8007f38:	4937      	ldr	r1, [pc, #220]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01d      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f4c:	4b32      	ldr	r3, [pc, #200]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f52:	0e1b      	lsrs	r3, r3, #24
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f60:	0f1b      	lsrs	r3, r3, #28
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	019a      	lsls	r2, r3, #6
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	431a      	orrs	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	061b      	lsls	r3, r3, #24
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	071b      	lsls	r3, r3, #28
 8007f80:	4925      	ldr	r1, [pc, #148]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d011      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	019a      	lsls	r2, r3, #6
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	061b      	lsls	r3, r3, #24
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	071b      	lsls	r3, r3, #28
 8007fb0:	4919      	ldr	r1, [pc, #100]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fb8:	4b17      	ldr	r3, [pc, #92]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc4:	f7fc f9e6 	bl	8004394 <HAL_GetTick>
 8007fc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fcc:	f7fc f9e2 	bl	8004394 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d901      	bls.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e0d7      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	f040 80cd 	bne.w	800818c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a08      	ldr	r2, [pc, #32]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ffe:	f7fc f9c9 	bl	8004394 <HAL_GetTick>
 8008002:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008004:	e00a      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008006:	f7fc f9c5 	bl	8004394 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b64      	cmp	r3, #100	; 0x64
 8008012:	d903      	bls.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e0ba      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008018:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800801c:	4b5e      	ldr	r3, [pc, #376]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008028:	d0ed      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008046:	2b00      	cmp	r3, #0
 8008048:	d02e      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d12a      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008052:	4b51      	ldr	r3, [pc, #324]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	0c1b      	lsrs	r3, r3, #16
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008060:	4b4d      	ldr	r3, [pc, #308]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008066:	0f1b      	lsrs	r3, r3, #28
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	019a      	lsls	r2, r3, #6
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	041b      	lsls	r3, r3, #16
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	061b      	lsls	r3, r3, #24
 8008080:	431a      	orrs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	071b      	lsls	r3, r3, #28
 8008086:	4944      	ldr	r1, [pc, #272]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800808e:	4b42      	ldr	r3, [pc, #264]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008094:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	3b01      	subs	r3, #1
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	493d      	ldr	r1, [pc, #244]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d022      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080bc:	d11d      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c4:	0e1b      	lsrs	r3, r3, #24
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080cc:	4b32      	ldr	r3, [pc, #200]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d2:	0f1b      	lsrs	r3, r3, #28
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	019a      	lsls	r2, r3, #6
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	431a      	orrs	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	061b      	lsls	r3, r3, #24
 80080ec:	431a      	orrs	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	071b      	lsls	r3, r3, #28
 80080f2:	4929      	ldr	r1, [pc, #164]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d028      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	0e1b      	lsrs	r3, r3, #24
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008114:	4b20      	ldr	r3, [pc, #128]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	019a      	lsls	r2, r3, #6
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	061b      	lsls	r3, r3, #24
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	071b      	lsls	r3, r3, #28
 800813a:	4917      	ldr	r1, [pc, #92]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	4911      	ldr	r1, [pc, #68]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008158:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a0e      	ldr	r2, [pc, #56]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800815e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008164:	f7fc f916 	bl	8004394 <HAL_GetTick>
 8008168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800816a:	e008      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800816c:	f7fc f912 	bl	8004394 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b64      	cmp	r3, #100	; 0x64
 8008178:	d901      	bls.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e007      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800817e:	4b06      	ldr	r3, [pc, #24]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800818a:	d1ef      	bne.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800

0800819c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e06b      	b.n	8008286 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	7f5b      	ldrb	r3, [r3, #29]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d105      	bne.n	80081c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fb fd14 	bl	8003bec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	22ca      	movs	r2, #202	; 0xca
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2253      	movs	r2, #83	; 0x53
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb00 	bl	80087e0 <RTC_EnterInitMode>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	22ff      	movs	r2, #255	; 0xff
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e046      	b.n	8008286 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6899      	ldr	r1, [r3, #8]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b23      	ldr	r3, [pc, #140]	; (8008290 <HAL_RTC_Init+0xf4>)
 8008204:	400b      	ands	r3, r1
 8008206:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6899      	ldr	r1, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68d2      	ldr	r2, [r2, #12]
 800822e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6919      	ldr	r1, [r3, #16]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	041a      	lsls	r2, r3, #16
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008252:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0208 	bic.w	r2, r2, #8
 8008262:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	22ff      	movs	r2, #255	; 0xff
 800827c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
  }
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	ff8fffbf 	.word	0xff8fffbf

08008294 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	7f1b      	ldrb	r3, [r3, #28]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_RTC_SetTime+0x1c>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e0a8      	b.n	8008402 <HAL_RTC_SetTime+0x16e>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2202      	movs	r2, #2
 80082ba:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d126      	bne.n	8008310 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d102      	bne.n	80082d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 faac 	bl	8008838 <RTC_ByteToBcd2>
 80082e0:	4603      	mov	r3, r0
 80082e2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 faa5 	bl	8008838 <RTC_ByteToBcd2>
 80082ee:	4603      	mov	r3, r0
 80082f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082f2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	789b      	ldrb	r3, [r3, #2]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fa9d 	bl	8008838 <RTC_ByteToBcd2>
 80082fe:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008300:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	7b1b      	ldrb	r3, [r3, #12]
 8008308:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e018      	b.n	8008342 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008330:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008336:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	7b1b      	ldrb	r3, [r3, #12]
 800833c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	22ca      	movs	r2, #202	; 0xca
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2253      	movs	r2, #83	; 0x53
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fa44 	bl	80087e0 <RTC_EnterInitMode>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	22ff      	movs	r2, #255	; 0xff
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2204      	movs	r2, #4
 800836a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e045      	b.n	8008402 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	6979      	ldr	r1, [r7, #20]
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <HAL_RTC_SetTime+0x178>)
 800837e:	400b      	ands	r3, r1
 8008380:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008390:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6899      	ldr	r1, [r3, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	431a      	orrs	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d111      	bne.n	80083ec <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f9e1 	bl	8008790 <HAL_RTC_WaitForSynchro>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	22ff      	movs	r2, #255	; 0xff
 80083da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2204      	movs	r2, #4
 80083e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e00a      	b.n	8008402 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	22ff      	movs	r2, #255	; 0xff
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008400:	2300      	movs	r3, #0
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd90      	pop	{r4, r7, pc}
 800840a:	bf00      	nop
 800840c:	007f7f7f 	.word	0x007f7f7f

08008410 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	7f1b      	ldrb	r3, [r3, #28]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_RTC_SetDate+0x1c>
 8008428:	2302      	movs	r3, #2
 800842a:	e092      	b.n	8008552 <HAL_RTC_SetDate+0x142>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10e      	bne.n	800845c <HAL_RTC_SetDate+0x4c>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b00      	cmp	r3, #0
 8008448:	d008      	beq.n	800845c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	f023 0310 	bic.w	r3, r3, #16
 8008452:	b2db      	uxtb	r3, r3
 8008454:	330a      	adds	r3, #10
 8008456:	b2da      	uxtb	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d11c      	bne.n	800849c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f9e6 	bl	8008838 <RTC_ByteToBcd2>
 800846c:	4603      	mov	r3, r0
 800846e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f9df 	bl	8008838 <RTC_ByteToBcd2>
 800847a:	4603      	mov	r3, r0
 800847c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800847e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	789b      	ldrb	r3, [r3, #2]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f9d7 	bl	8008838 <RTC_ByteToBcd2>
 800848a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800848c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	e00e      	b.n	80084ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	78db      	ldrb	r3, [r3, #3]
 80084a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80084a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80084ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	22ca      	movs	r2, #202	; 0xca
 80084c0:	625a      	str	r2, [r3, #36]	; 0x24
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2253      	movs	r2, #83	; 0x53
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f988 	bl	80087e0 <RTC_EnterInitMode>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	22ff      	movs	r2, #255	; 0xff
 80084dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2204      	movs	r2, #4
 80084e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e031      	b.n	8008552 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	6979      	ldr	r1, [r7, #20]
 80084f4:	4b19      	ldr	r3, [pc, #100]	; (800855c <HAL_RTC_SetDate+0x14c>)
 80084f6:	400b      	ands	r3, r1
 80084f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008508:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d111      	bne.n	800853c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f939 	bl	8008790 <HAL_RTC_WaitForSynchro>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	22ff      	movs	r2, #255	; 0xff
 800852a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2204      	movs	r2, #4
 8008530:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e00a      	b.n	8008552 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	22ff      	movs	r2, #255	; 0xff
 8008542:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008550:	2300      	movs	r3, #0
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	bd90      	pop	{r4, r7, pc}
 800855a:	bf00      	nop
 800855c:	00ffff3f 	.word	0x00ffff3f

08008560 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008560:	b590      	push	{r4, r7, lr}
 8008562:	b089      	sub	sp, #36	; 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	7f1b      	ldrb	r3, [r3, #28]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_RTC_SetAlarm+0x24>
 8008580:	2302      	movs	r3, #2
 8008582:	e101      	b.n	8008788 <HAL_RTC_SetAlarm+0x228>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2202      	movs	r2, #2
 800858e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d137      	bne.n	8008606 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2200      	movs	r2, #0
 80085a8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f942 	bl	8008838 <RTC_ByteToBcd2>
 80085b4:	4603      	mov	r3, r0
 80085b6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f93b 	bl	8008838 <RTC_ByteToBcd2>
 80085c2:	4603      	mov	r3, r0
 80085c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80085c6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	789b      	ldrb	r3, [r3, #2]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f933 	bl	8008838 <RTC_ByteToBcd2>
 80085d2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80085d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	7b1b      	ldrb	r3, [r3, #12]
 80085dc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80085de:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f925 	bl	8008838 <RTC_ByteToBcd2>
 80085ee:	4603      	mov	r3, r0
 80085f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80085fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008600:	4313      	orrs	r3, r2
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	e023      	b.n	800864e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d102      	bne.n	800861a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2200      	movs	r2, #0
 8008618:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008626:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800862c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	7b1b      	ldrb	r3, [r3, #12]
 8008632:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008634:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800863c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800863e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008644:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800864a:	4313      	orrs	r3, r2
 800864c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	22ca      	movs	r2, #202	; 0xca
 8008660:	625a      	str	r2, [r3, #36]	; 0x24
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2253      	movs	r2, #83	; 0x53
 8008668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008672:	d13f      	bne.n	80086f4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008682:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008692:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008694:	f7fb fe7e 	bl	8004394 <HAL_GetTick>
 8008698:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800869a:	e013      	b.n	80086c4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800869c:	f7fb fe7a 	bl	8004394 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086aa:	d90b      	bls.n	80086c4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	22ff      	movs	r2, #255	; 0xff
 80086b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2203      	movs	r2, #3
 80086b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e061      	b.n	8008788 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0e4      	beq.n	800869c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086f0:	609a      	str	r2, [r3, #8]
 80086f2:	e03e      	b.n	8008772 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008702:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008712:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008714:	f7fb fe3e 	bl	8004394 <HAL_GetTick>
 8008718:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800871a:	e013      	b.n	8008744 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800871c:	f7fb fe3a 	bl	8004394 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800872a:	d90b      	bls.n	8008744 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	22ff      	movs	r2, #255	; 0xff
 8008732:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2203      	movs	r2, #3
 8008738:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e021      	b.n	8008788 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0e4      	beq.n	800871c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008770:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	22ff      	movs	r2, #255	; 0xff
 8008778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3724      	adds	r7, #36	; 0x24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd90      	pop	{r4, r7, pc}

08008790 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087ac:	f7fb fdf2 	bl	8004394 <HAL_GetTick>
 80087b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80087b2:	e009      	b.n	80087c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087b4:	f7fb fdee 	bl	8004394 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087c2:	d901      	bls.n	80087c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e007      	b.n	80087d8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0ee      	beq.n	80087b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d119      	bne.n	800882e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008804:	f7fb fdc6 	bl	8004394 <HAL_GetTick>
 8008808:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800880a:	e009      	b.n	8008820 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800880c:	f7fb fdc2 	bl	8004394 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800881a:	d901      	bls.n	8008820 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e007      	b.n	8008830 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0ee      	beq.n	800880c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008846:	e005      	b.n	8008854 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	3b0a      	subs	r3, #10
 8008852:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	2b09      	cmp	r3, #9
 8008858:	d8f6      	bhi.n	8008848 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	b2da      	uxtb	r2, r3
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4313      	orrs	r3, r2
 8008866:	b2db      	uxtb	r3, r3
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7f1b      	ldrb	r3, [r3, #28]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_RTCEx_SetTimeStamp+0x1c>
 800888c:	2302      	movs	r3, #2
 800888e:	e03e      	b.n	800890e <HAL_RTCEx_SetTimeStamp+0x9a>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2202      	movs	r2, #2
 800889a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	4b1e      	ldr	r3, [pc, #120]	; (800891c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	22ca      	movs	r2, #202	; 0xca
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2253      	movs	r2, #83	; 0x53
 80088be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0206 	bic.w	r2, r2, #6
 80088ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	430a      	orrs	r2, r1
 80088de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	22ff      	movs	r2, #255	; 0xff
 80088fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	fffff7f7 	.word	0xfffff7f7

08008920 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e025      	b.n	8008980 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7fb fbfd 	bl	8004148 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2202      	movs	r2, #2
 8008952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3304      	adds	r3, #4
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f001 ffbf 	bl	800a8e4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	461a      	mov	r2, r3
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	f002 f829 	bl	800a9c8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d101      	bne.n	80089a4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
 80089a2:	e018      	b.n	80089d6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 f887 	bl	800aac8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d104      	bne.n	80089cc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2205      	movs	r2, #5
 80089c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80089ca:	e003      	b.n	80089d4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d101      	bne.n	80089f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80089f4:	2302      	movs	r3, #2
 80089f6:	e00e      	b.n	8008a16 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f002 f87f 	bl	800ab0a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e084      	b.n	8008b3a <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fb f8e8 	bl	8003c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a70:	d902      	bls.n	8008a78 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e002      	b.n	8008a7e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a86:	d007      	beq.n	8008a98 <HAL_SPI_Init+0x7a>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a90:	d002      	beq.n	8008a98 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aa8:	d903      	bls.n	8008ab2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30
 8008ab0:	e002      	b.n	8008ab8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	ea42 0103 	orr.w	r1, r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	f003 0204 	and.w	r2, r3, #4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	ea42 0103 	orr.w	r1, r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69da      	ldr	r2, [r3, #28]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e01d      	b.n	8008b90 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7fb f8cb 	bl	8003d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2202      	movs	r2, #2
 8008b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f000 fbc3 	bl	800930c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <HAL_TIM_Base_Start_IT+0x50>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b06      	cmp	r3, #6
 8008bc0:	d00b      	beq.n	8008bda <HAL_TIM_Base_Start_IT+0x42>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d007      	beq.n	8008bda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0201 	orr.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	00010007 	.word	0x00010007

08008bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e01d      	b.n	8008c3a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f815 	bl	8008c42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f000 fb6e 	bl	800930c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d122      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d11b      	bne.n	8008cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f06f 0202 	mvn.w	r2, #2
 8008c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb19 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 8008c9e:	e005      	b.n	8008cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb0b 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fb1c 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d122      	bne.n	8008d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d11b      	bne.n	8008d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f06f 0204 	mvn.w	r2, #4
 8008cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 faef 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 8008cf2:	e005      	b.n	8008d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fae1 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 faf2 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d122      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d11b      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f06f 0208 	mvn.w	r2, #8
 8008d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2204      	movs	r2, #4
 8008d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fac5 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 8008d46:	e005      	b.n	8008d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fab7 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fac8 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b10      	cmp	r3, #16
 8008d66:	d122      	bne.n	8008dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0310 	and.w	r3, r3, #16
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d11b      	bne.n	8008dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f06f 0210 	mvn.w	r2, #16
 8008d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2208      	movs	r2, #8
 8008d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa9b 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 8008d9a:	e005      	b.n	8008da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa8d 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa9e 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d10e      	bne.n	8008dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d107      	bne.n	8008dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f06f 0201 	mvn.w	r2, #1
 8008dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7f9 f9ad 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d10e      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d107      	bne.n	8008e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 ffb9 	bl	8009d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e14:	d10e      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d107      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 ffac 	bl	8009d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d10e      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d107      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa4c 	bl	80092f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0220 	mvn.w	r2, #32
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 ff6c 	bl	8009d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e105      	b.n	80090ba <HAL_TIM_PWM_ConfigChannel+0x226>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b14      	cmp	r3, #20
 8008ec2:	f200 80f0 	bhi.w	80090a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	080090a7 	.word	0x080090a7
 8008ed4:	080090a7 	.word	0x080090a7
 8008ed8:	080090a7 	.word	0x080090a7
 8008edc:	08008f61 	.word	0x08008f61
 8008ee0:	080090a7 	.word	0x080090a7
 8008ee4:	080090a7 	.word	0x080090a7
 8008ee8:	080090a7 	.word	0x080090a7
 8008eec:	08008fa3 	.word	0x08008fa3
 8008ef0:	080090a7 	.word	0x080090a7
 8008ef4:	080090a7 	.word	0x080090a7
 8008ef8:	080090a7 	.word	0x080090a7
 8008efc:	08008fe3 	.word	0x08008fe3
 8008f00:	080090a7 	.word	0x080090a7
 8008f04:	080090a7 	.word	0x080090a7
 8008f08:	080090a7 	.word	0x080090a7
 8008f0c:	08009025 	.word	0x08009025
 8008f10:	080090a7 	.word	0x080090a7
 8008f14:	080090a7 	.word	0x080090a7
 8008f18:	080090a7 	.word	0x080090a7
 8008f1c:	08009065 	.word	0x08009065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa90 	bl	800944c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f042 0208 	orr.w	r2, r2, #8
 8008f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0204 	bic.w	r2, r2, #4
 8008f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6999      	ldr	r1, [r3, #24]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	619a      	str	r2, [r3, #24]
      break;
 8008f5e:	e0a3      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fae2 	bl	8009530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	021a      	lsls	r2, r3, #8
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	619a      	str	r2, [r3, #24]
      break;
 8008fa0:	e082      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fb39 	bl	8009620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0208 	orr.w	r2, r2, #8
 8008fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0204 	bic.w	r2, r2, #4
 8008fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69d9      	ldr	r1, [r3, #28]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	61da      	str	r2, [r3, #28]
      break;
 8008fe0:	e062      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb8f 	bl	800970c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800900c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69d9      	ldr	r1, [r3, #28]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	021a      	lsls	r2, r3, #8
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	61da      	str	r2, [r3, #28]
      break;
 8009022:	e041      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fbc6 	bl	80097bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0208 	orr.w	r2, r2, #8
 800903e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0204 	bic.w	r2, r2, #4
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	691a      	ldr	r2, [r3, #16]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009062:	e021      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fbf8 	bl	8009860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800907e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800908e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	021a      	lsls	r2, r3, #8
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80090a4:	e000      	b.n	80090a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80090a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop

080090c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIM_ConfigClockSource+0x18>
 80090d8:	2302      	movs	r3, #2
 80090da:	e0a6      	b.n	800922a <HAL_TIM_ConfigClockSource+0x166>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b4f      	ldr	r3, [pc, #316]	; (8009234 <HAL_TIM_ConfigClockSource+0x170>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d067      	beq.n	80091e4 <HAL_TIM_ConfigClockSource+0x120>
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d80b      	bhi.n	8009130 <HAL_TIM_ConfigClockSource+0x6c>
 8009118:	2b10      	cmp	r3, #16
 800911a:	d073      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0x140>
 800911c:	2b10      	cmp	r3, #16
 800911e:	d802      	bhi.n	8009126 <HAL_TIM_ConfigClockSource+0x62>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d06f      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009124:	e078      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009126:	2b20      	cmp	r3, #32
 8009128:	d06c      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0x140>
 800912a:	2b30      	cmp	r3, #48	; 0x30
 800912c:	d06a      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800912e:	e073      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009130:	2b70      	cmp	r3, #112	; 0x70
 8009132:	d00d      	beq.n	8009150 <HAL_TIM_ConfigClockSource+0x8c>
 8009134:	2b70      	cmp	r3, #112	; 0x70
 8009136:	d804      	bhi.n	8009142 <HAL_TIM_ConfigClockSource+0x7e>
 8009138:	2b50      	cmp	r3, #80	; 0x50
 800913a:	d033      	beq.n	80091a4 <HAL_TIM_ConfigClockSource+0xe0>
 800913c:	2b60      	cmp	r3, #96	; 0x60
 800913e:	d041      	beq.n	80091c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009140:	e06a      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009146:	d066      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x152>
 8009148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800914c:	d017      	beq.n	800917e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800914e:	e063      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	6899      	ldr	r1, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f000 fcd4 	bl	8009b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009172:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	609a      	str	r2, [r3, #8]
      break;
 800917c:	e04c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	6899      	ldr	r1, [r3, #8]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f000 fcbd 	bl	8009b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091a0:	609a      	str	r2, [r3, #8]
      break;
 80091a2:	e039      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	6859      	ldr	r1, [r3, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	461a      	mov	r2, r3
 80091b2:	f000 fc31 	bl	8009a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2150      	movs	r1, #80	; 0x50
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fc8a 	bl	8009ad6 <TIM_ITRx_SetConfig>
      break;
 80091c2:	e029      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	6859      	ldr	r1, [r3, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	461a      	mov	r2, r3
 80091d2:	f000 fc50 	bl	8009a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2160      	movs	r1, #96	; 0x60
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fc7a 	bl	8009ad6 <TIM_ITRx_SetConfig>
      break;
 80091e2:	e019      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	6859      	ldr	r1, [r3, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	461a      	mov	r2, r3
 80091f2:	f000 fc11 	bl	8009a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2140      	movs	r1, #64	; 0x40
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fc6a 	bl	8009ad6 <TIM_ITRx_SetConfig>
      break;
 8009202:	e009      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f000 fc61 	bl	8009ad6 <TIM_ITRx_SetConfig>
      break;
 8009214:	e000      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	fffeff88 	.word	0xfffeff88

08009238 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_TIM_SlaveConfigSynchro+0x18>
 800924c:	2302      	movs	r3, #2
 800924e:	e031      	b.n	80092b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb50 	bl	8009908 <TIM_SlaveTimer_SetConfig>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d009      	beq.n	8009282 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e018      	b.n	80092b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009290:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092a0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a40      	ldr	r2, [pc, #256]	; (8009420 <TIM_Base_SetConfig+0x114>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932a:	d00f      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <TIM_Base_SetConfig+0x118>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3c      	ldr	r2, [pc, #240]	; (8009428 <TIM_Base_SetConfig+0x11c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a3b      	ldr	r2, [pc, #236]	; (800942c <TIM_Base_SetConfig+0x120>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3a      	ldr	r2, [pc, #232]	; (8009430 <TIM_Base_SetConfig+0x124>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d108      	bne.n	800935e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2f      	ldr	r2, [pc, #188]	; (8009420 <TIM_Base_SetConfig+0x114>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d02b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d027      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a2c      	ldr	r2, [pc, #176]	; (8009424 <TIM_Base_SetConfig+0x118>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d023      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2b      	ldr	r2, [pc, #172]	; (8009428 <TIM_Base_SetConfig+0x11c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d01f      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2a      	ldr	r2, [pc, #168]	; (800942c <TIM_Base_SetConfig+0x120>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a29      	ldr	r2, [pc, #164]	; (8009430 <TIM_Base_SetConfig+0x124>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d017      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a28      	ldr	r2, [pc, #160]	; (8009434 <TIM_Base_SetConfig+0x128>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a27      	ldr	r2, [pc, #156]	; (8009438 <TIM_Base_SetConfig+0x12c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00f      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a26      	ldr	r2, [pc, #152]	; (800943c <TIM_Base_SetConfig+0x130>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a25      	ldr	r2, [pc, #148]	; (8009440 <TIM_Base_SetConfig+0x134>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a24      	ldr	r2, [pc, #144]	; (8009444 <TIM_Base_SetConfig+0x138>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a23      	ldr	r2, [pc, #140]	; (8009448 <TIM_Base_SetConfig+0x13c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a0a      	ldr	r2, [pc, #40]	; (8009420 <TIM_Base_SetConfig+0x114>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_Base_SetConfig+0xf8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <TIM_Base_SetConfig+0x124>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d103      	bne.n	800940c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	615a      	str	r2, [r3, #20]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40010400 	.word	0x40010400
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800
 8009440:	40001800 	.word	0x40001800
 8009444:	40001c00 	.word	0x40001c00
 8009448:	40002000 	.word	0x40002000

0800944c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	f023 0201 	bic.w	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4b2b      	ldr	r3, [pc, #172]	; (8009524 <TIM_OC1_SetConfig+0xd8>)
 8009478:	4013      	ands	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0303 	bic.w	r3, r3, #3
 8009482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f023 0302 	bic.w	r3, r3, #2
 8009494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a21      	ldr	r2, [pc, #132]	; (8009528 <TIM_OC1_SetConfig+0xdc>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_OC1_SetConfig+0x64>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a20      	ldr	r2, [pc, #128]	; (800952c <TIM_OC1_SetConfig+0xe0>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d10c      	bne.n	80094ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0308 	bic.w	r3, r3, #8
 80094b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	4313      	orrs	r3, r2
 80094c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f023 0304 	bic.w	r3, r3, #4
 80094c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a16      	ldr	r2, [pc, #88]	; (8009528 <TIM_OC1_SetConfig+0xdc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d003      	beq.n	80094da <TIM_OC1_SetConfig+0x8e>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a15      	ldr	r2, [pc, #84]	; (800952c <TIM_OC1_SetConfig+0xe0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d111      	bne.n	80094fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	621a      	str	r2, [r3, #32]
}
 8009518:	bf00      	nop
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	fffeff8f 	.word	0xfffeff8f
 8009528:	40010000 	.word	0x40010000
 800952c:	40010400 	.word	0x40010400

08009530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f023 0210 	bic.w	r2, r3, #16
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <TIM_OC2_SetConfig+0xe4>)
 800955c:	4013      	ands	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f023 0320 	bic.w	r3, r3, #32
 800957a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	4313      	orrs	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a23      	ldr	r2, [pc, #140]	; (8009618 <TIM_OC2_SetConfig+0xe8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_OC2_SetConfig+0x68>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a22      	ldr	r2, [pc, #136]	; (800961c <TIM_OC2_SetConfig+0xec>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d10d      	bne.n	80095b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800959e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a18      	ldr	r2, [pc, #96]	; (8009618 <TIM_OC2_SetConfig+0xe8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d003      	beq.n	80095c4 <TIM_OC2_SetConfig+0x94>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a17      	ldr	r2, [pc, #92]	; (800961c <TIM_OC2_SetConfig+0xec>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d113      	bne.n	80095ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	621a      	str	r2, [r3, #32]
}
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	feff8fff 	.word	0xfeff8fff
 8009618:	40010000 	.word	0x40010000
 800961c:	40010400 	.word	0x40010400

08009620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4b2d      	ldr	r3, [pc, #180]	; (8009700 <TIM_OC3_SetConfig+0xe0>)
 800964c:	4013      	ands	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a22      	ldr	r2, [pc, #136]	; (8009704 <TIM_OC3_SetConfig+0xe4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d003      	beq.n	8009686 <TIM_OC3_SetConfig+0x66>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a21      	ldr	r2, [pc, #132]	; (8009708 <TIM_OC3_SetConfig+0xe8>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d10d      	bne.n	80096a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800968c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	4313      	orrs	r3, r2
 8009698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a17      	ldr	r2, [pc, #92]	; (8009704 <TIM_OC3_SetConfig+0xe4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d003      	beq.n	80096b2 <TIM_OC3_SetConfig+0x92>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a16      	ldr	r2, [pc, #88]	; (8009708 <TIM_OC3_SetConfig+0xe8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d113      	bne.n	80096da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	621a      	str	r2, [r3, #32]
}
 80096f4:	bf00      	nop
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	fffeff8f 	.word	0xfffeff8f
 8009704:	40010000 	.word	0x40010000
 8009708:	40010400 	.word	0x40010400

0800970c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <TIM_OC4_SetConfig+0xa4>)
 8009738:	4013      	ands	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <TIM_OC4_SetConfig+0xa8>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d003      	beq.n	8009774 <TIM_OC4_SetConfig+0x68>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a12      	ldr	r2, [pc, #72]	; (80097b8 <TIM_OC4_SetConfig+0xac>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d109      	bne.n	8009788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800977a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	019b      	lsls	r3, r3, #6
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	621a      	str	r2, [r3, #32]
}
 80097a2:	bf00      	nop
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	feff8fff 	.word	0xfeff8fff
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40010400 	.word	0x40010400

080097bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4b1b      	ldr	r3, [pc, #108]	; (8009854 <TIM_OC5_SetConfig+0x98>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80097fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a12      	ldr	r2, [pc, #72]	; (8009858 <TIM_OC5_SetConfig+0x9c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_OC5_SetConfig+0x5e>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a11      	ldr	r2, [pc, #68]	; (800985c <TIM_OC5_SetConfig+0xa0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d109      	bne.n	800982e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	621a      	str	r2, [r3, #32]
}
 8009848:	bf00      	nop
 800984a:	371c      	adds	r7, #28
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	fffeff8f 	.word	0xfffeff8f
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400

08009860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4b1c      	ldr	r3, [pc, #112]	; (80098fc <TIM_OC6_SetConfig+0x9c>)
 800988c:	4013      	ands	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	051b      	lsls	r3, r3, #20
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a13      	ldr	r2, [pc, #76]	; (8009900 <TIM_OC6_SetConfig+0xa0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d003      	beq.n	80098c0 <TIM_OC6_SetConfig+0x60>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a12      	ldr	r2, [pc, #72]	; (8009904 <TIM_OC6_SetConfig+0xa4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d109      	bne.n	80098d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	029b      	lsls	r3, r3, #10
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	621a      	str	r2, [r3, #32]
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	feff8fff 	.word	0xfeff8fff
 8009900:	40010000 	.word	0x40010000
 8009904:	40010400 	.word	0x40010400

08009908 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009920:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4b39      	ldr	r3, [pc, #228]	; (8009a14 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009930:	4013      	ands	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	2b30      	cmp	r3, #48	; 0x30
 800994c:	d05c      	beq.n	8009a08 <TIM_SlaveTimer_SetConfig+0x100>
 800994e:	2b30      	cmp	r3, #48	; 0x30
 8009950:	d806      	bhi.n	8009960 <TIM_SlaveTimer_SetConfig+0x58>
 8009952:	2b10      	cmp	r3, #16
 8009954:	d058      	beq.n	8009a08 <TIM_SlaveTimer_SetConfig+0x100>
 8009956:	2b20      	cmp	r3, #32
 8009958:	d056      	beq.n	8009a08 <TIM_SlaveTimer_SetConfig+0x100>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d054      	beq.n	8009a08 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800995e:	e054      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009960:	2b50      	cmp	r3, #80	; 0x50
 8009962:	d03d      	beq.n	80099e0 <TIM_SlaveTimer_SetConfig+0xd8>
 8009964:	2b50      	cmp	r3, #80	; 0x50
 8009966:	d802      	bhi.n	800996e <TIM_SlaveTimer_SetConfig+0x66>
 8009968:	2b40      	cmp	r3, #64	; 0x40
 800996a:	d010      	beq.n	800998e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800996c:	e04d      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800996e:	2b60      	cmp	r3, #96	; 0x60
 8009970:	d040      	beq.n	80099f4 <TIM_SlaveTimer_SetConfig+0xec>
 8009972:	2b70      	cmp	r3, #112	; 0x70
 8009974:	d000      	beq.n	8009978 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009976:	e048      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	68d9      	ldr	r1, [r3, #12]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	f000 f8c0 	bl	8009b0c <TIM_ETR_SetConfig>
      break;
 800998c:	e03d      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b05      	cmp	r3, #5
 8009994:	d101      	bne.n	800999a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e038      	b.n	8009a0c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6a1b      	ldr	r3, [r3, #32]
 80099a0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6a1a      	ldr	r2, [r3, #32]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099c0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	621a      	str	r2, [r3, #32]
      break;
 80099de:	e014      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	6899      	ldr	r1, [r3, #8]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	461a      	mov	r2, r3
 80099ee:	f000 f813 	bl	8009a18 <TIM_TI1_ConfigInputStage>
      break;
 80099f2:	e00a      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6899      	ldr	r1, [r3, #8]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	461a      	mov	r2, r3
 8009a02:	f000 f838 	bl	8009a76 <TIM_TI2_ConfigInputStage>
      break;
 8009a06:	e000      	b.n	8009a0a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009a08:	bf00      	nop
  }
  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	fffefff8 	.word	0xfffefff8

08009a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	f023 0201 	bic.w	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	011b      	lsls	r3, r3, #4
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f023 030a 	bic.w	r3, r3, #10
 8009a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	621a      	str	r2, [r3, #32]
}
 8009a6a:	bf00      	nop
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b087      	sub	sp, #28
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	f023 0210 	bic.w	r2, r3, #16
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	031b      	lsls	r3, r3, #12
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	621a      	str	r2, [r3, #32]
}
 8009aca:	bf00      	nop
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	f043 0307 	orr.w	r3, r3, #7
 8009af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	609a      	str	r2, [r3, #8]
}
 8009b00:	bf00      	nop
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	021a      	lsls	r2, r3, #8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	697a      	ldr	r2, [r7, #20]
 8009b3e:	609a      	str	r2, [r3, #8]
}
 8009b40:	bf00      	nop
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d101      	bne.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e06d      	b.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a30      	ldr	r2, [pc, #192]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a2f      	ldr	r2, [pc, #188]	; (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d108      	bne.n	8009baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a20      	ldr	r2, [pc, #128]	; (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d022      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd6:	d01d      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1d      	ldr	r2, [pc, #116]	; (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d018      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1a      	ldr	r2, [pc, #104]	; (8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00e      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d004      	beq.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	; (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10c      	bne.n	8009c2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400
 8009c54:	40000400 	.word	0x40000400
 8009c58:	40000800 	.word	0x40000800
 8009c5c:	40000c00 	.word	0x40000c00
 8009c60:	40014000 	.word	0x40014000
 8009c64:	40001800 	.word	0x40001800

08009c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d101      	bne.n	8009c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c80:	2302      	movs	r3, #2
 8009c82:	e065      	b.n	8009d50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a16      	ldr	r2, [pc, #88]	; (8009d5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d004      	beq.n	8009d12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d115      	bne.n	8009d3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	051b      	lsls	r3, r3, #20
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	40010000 	.word	0x40010000
 8009d60:	40010400 	.word	0x40010400

08009d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e040      	b.n	8009e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fa f86a 	bl	8003e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2224      	movs	r2, #36	; 0x24
 8009dcc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0201 	bic.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f98a 	bl	800a0f8 <UART_SetConfig>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e022      	b.n	8009e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fc28 	bl	800a64c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fcaf 	bl	800a790 <UART_CheckIdleState>
 8009e32:	4603      	mov	r3, r0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	; 0x28
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d17f      	bne.n	8009f54 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <HAL_UART_Transmit+0x24>
 8009e5a:	88fb      	ldrh	r3, [r7, #6]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e078      	b.n	8009f56 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_UART_Transmit+0x36>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e071      	b.n	8009f56 <HAL_UART_Transmit+0x11a>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2221      	movs	r2, #33	; 0x21
 8009e84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009e86:	f7fa fa85 	bl	8004394 <HAL_GetTick>
 8009e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	88fa      	ldrh	r2, [r7, #6]
 8009e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea4:	d108      	bne.n	8009eb8 <HAL_UART_Transmit+0x7c>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d104      	bne.n	8009eb8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	e003      	b.n	8009ec0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009ec8:	e02c      	b.n	8009f24 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2180      	movs	r1, #128	; 0x80
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f000 fc8a 	bl	800a7ee <UART_WaitOnFlagUntilTimeout>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e038      	b.n	8009f56 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ef8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	3302      	adds	r3, #2
 8009efe:	61bb      	str	r3, [r7, #24]
 8009f00:	e007      	b.n	8009f12 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1cc      	bne.n	8009eca <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2200      	movs	r2, #0
 8009f38:	2140      	movs	r1, #64	; 0x40
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 fc57 	bl	800a7ee <UART_WaitOnFlagUntilTimeout>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e005      	b.n	8009f56 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e000      	b.n	8009f56 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009f54:	2302      	movs	r3, #2
  }
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b08a      	sub	sp, #40	; 0x28
 8009f62:	af02      	add	r7, sp, #8
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	603b      	str	r3, [r7, #0]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	f040 80ba 	bne.w	800a0ec <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <HAL_UART_Receive+0x26>
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0b2      	b.n	800a0ee <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_UART_Receive+0x38>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e0ab      	b.n	800a0ee <HAL_UART_Receive+0x190>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2222      	movs	r2, #34	; 0x22
 8009fa8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009faa:	f7fa f9f3 	bl	8004394 <HAL_GetTick>
 8009fae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	88fa      	ldrh	r2, [r7, #6]
 8009fbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc8:	d10e      	bne.n	8009fe8 <HAL_UART_Receive+0x8a>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <HAL_UART_Receive+0x80>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fdc:	e02d      	b.n	800a03a <HAL_UART_Receive+0xdc>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fe6:	e028      	b.n	800a03a <HAL_UART_Receive+0xdc>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10d      	bne.n	800a00c <HAL_UART_Receive+0xae>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <HAL_UART_Receive+0xa4>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	22ff      	movs	r2, #255	; 0xff
 8009ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a000:	e01b      	b.n	800a03a <HAL_UART_Receive+0xdc>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	227f      	movs	r2, #127	; 0x7f
 800a006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a00a:	e016      	b.n	800a03a <HAL_UART_Receive+0xdc>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a014:	d10d      	bne.n	800a032 <HAL_UART_Receive+0xd4>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d104      	bne.n	800a028 <HAL_UART_Receive+0xca>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	227f      	movs	r2, #127	; 0x7f
 800a022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a026:	e008      	b.n	800a03a <HAL_UART_Receive+0xdc>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	223f      	movs	r2, #63	; 0x3f
 800a02c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a030:	e003      	b.n	800a03a <HAL_UART_Receive+0xdc>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a040:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a04a:	d108      	bne.n	800a05e <HAL_UART_Receive+0x100>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d104      	bne.n	800a05e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e003      	b.n	800a066 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a06e:	e032      	b.n	800a0d6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2200      	movs	r2, #0
 800a078:	2120      	movs	r1, #32
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fbb7 	bl	800a7ee <UART_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e031      	b.n	800a0ee <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10c      	bne.n	800a0aa <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	b29a      	uxth	r2, r3
 800a098:	8a7b      	ldrh	r3, [r7, #18]
 800a09a:	4013      	ands	r3, r2
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	e00c      	b.n	800a0c4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	8a7b      	ldrh	r3, [r7, #18]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1c6      	bne.n	800a070 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e000      	b.n	800a0ee <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a100:	2300      	movs	r3, #0
 800a102:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	431a      	orrs	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	431a      	orrs	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4bb1      	ldr	r3, [pc, #708]	; (800a3ec <UART_SetConfig+0x2f4>)
 800a128:	4013      	ands	r3, r2
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	6812      	ldr	r2, [r2, #0]
 800a12e:	6939      	ldr	r1, [r7, #16]
 800a130:	430b      	orrs	r3, r1
 800a132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a9f      	ldr	r2, [pc, #636]	; (800a3f0 <UART_SetConfig+0x2f8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d121      	bne.n	800a1bc <UART_SetConfig+0xc4>
 800a178:	4b9e      	ldr	r3, [pc, #632]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17e:	f003 0303 	and.w	r3, r3, #3
 800a182:	2b03      	cmp	r3, #3
 800a184:	d816      	bhi.n	800a1b4 <UART_SetConfig+0xbc>
 800a186:	a201      	add	r2, pc, #4	; (adr r2, 800a18c <UART_SetConfig+0x94>)
 800a188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18c:	0800a19d 	.word	0x0800a19d
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1a3 	.word	0x0800a1a3
 800a198:	0800a1af 	.word	0x0800a1af
 800a19c:	2301      	movs	r3, #1
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e151      	b.n	800a446 <UART_SetConfig+0x34e>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	77fb      	strb	r3, [r7, #31]
 800a1a6:	e14e      	b.n	800a446 <UART_SetConfig+0x34e>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e14b      	b.n	800a446 <UART_SetConfig+0x34e>
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	77fb      	strb	r3, [r7, #31]
 800a1b2:	e148      	b.n	800a446 <UART_SetConfig+0x34e>
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	77fb      	strb	r3, [r7, #31]
 800a1b8:	bf00      	nop
 800a1ba:	e144      	b.n	800a446 <UART_SetConfig+0x34e>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a8d      	ldr	r2, [pc, #564]	; (800a3f8 <UART_SetConfig+0x300>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d134      	bne.n	800a230 <UART_SetConfig+0x138>
 800a1c6:	4b8b      	ldr	r3, [pc, #556]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1cc:	f003 030c 	and.w	r3, r3, #12
 800a1d0:	2b0c      	cmp	r3, #12
 800a1d2:	d829      	bhi.n	800a228 <UART_SetConfig+0x130>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <UART_SetConfig+0xe4>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a211 	.word	0x0800a211
 800a1e0:	0800a229 	.word	0x0800a229
 800a1e4:	0800a229 	.word	0x0800a229
 800a1e8:	0800a229 	.word	0x0800a229
 800a1ec:	0800a21d 	.word	0x0800a21d
 800a1f0:	0800a229 	.word	0x0800a229
 800a1f4:	0800a229 	.word	0x0800a229
 800a1f8:	0800a229 	.word	0x0800a229
 800a1fc:	0800a217 	.word	0x0800a217
 800a200:	0800a229 	.word	0x0800a229
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a229 	.word	0x0800a229
 800a20c:	0800a223 	.word	0x0800a223
 800a210:	2300      	movs	r3, #0
 800a212:	77fb      	strb	r3, [r7, #31]
 800a214:	e117      	b.n	800a446 <UART_SetConfig+0x34e>
 800a216:	2302      	movs	r3, #2
 800a218:	77fb      	strb	r3, [r7, #31]
 800a21a:	e114      	b.n	800a446 <UART_SetConfig+0x34e>
 800a21c:	2304      	movs	r3, #4
 800a21e:	77fb      	strb	r3, [r7, #31]
 800a220:	e111      	b.n	800a446 <UART_SetConfig+0x34e>
 800a222:	2308      	movs	r3, #8
 800a224:	77fb      	strb	r3, [r7, #31]
 800a226:	e10e      	b.n	800a446 <UART_SetConfig+0x34e>
 800a228:	2310      	movs	r3, #16
 800a22a:	77fb      	strb	r3, [r7, #31]
 800a22c:	bf00      	nop
 800a22e:	e10a      	b.n	800a446 <UART_SetConfig+0x34e>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a71      	ldr	r2, [pc, #452]	; (800a3fc <UART_SetConfig+0x304>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d120      	bne.n	800a27c <UART_SetConfig+0x184>
 800a23a:	4b6e      	ldr	r3, [pc, #440]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a244:	2b10      	cmp	r3, #16
 800a246:	d00f      	beq.n	800a268 <UART_SetConfig+0x170>
 800a248:	2b10      	cmp	r3, #16
 800a24a:	d802      	bhi.n	800a252 <UART_SetConfig+0x15a>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <UART_SetConfig+0x164>
 800a250:	e010      	b.n	800a274 <UART_SetConfig+0x17c>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d005      	beq.n	800a262 <UART_SetConfig+0x16a>
 800a256:	2b30      	cmp	r3, #48	; 0x30
 800a258:	d009      	beq.n	800a26e <UART_SetConfig+0x176>
 800a25a:	e00b      	b.n	800a274 <UART_SetConfig+0x17c>
 800a25c:	2300      	movs	r3, #0
 800a25e:	77fb      	strb	r3, [r7, #31]
 800a260:	e0f1      	b.n	800a446 <UART_SetConfig+0x34e>
 800a262:	2302      	movs	r3, #2
 800a264:	77fb      	strb	r3, [r7, #31]
 800a266:	e0ee      	b.n	800a446 <UART_SetConfig+0x34e>
 800a268:	2304      	movs	r3, #4
 800a26a:	77fb      	strb	r3, [r7, #31]
 800a26c:	e0eb      	b.n	800a446 <UART_SetConfig+0x34e>
 800a26e:	2308      	movs	r3, #8
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e0e8      	b.n	800a446 <UART_SetConfig+0x34e>
 800a274:	2310      	movs	r3, #16
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	bf00      	nop
 800a27a:	e0e4      	b.n	800a446 <UART_SetConfig+0x34e>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a5f      	ldr	r2, [pc, #380]	; (800a400 <UART_SetConfig+0x308>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d120      	bne.n	800a2c8 <UART_SetConfig+0x1d0>
 800a286:	4b5b      	ldr	r3, [pc, #364]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a28c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a290:	2b40      	cmp	r3, #64	; 0x40
 800a292:	d00f      	beq.n	800a2b4 <UART_SetConfig+0x1bc>
 800a294:	2b40      	cmp	r3, #64	; 0x40
 800a296:	d802      	bhi.n	800a29e <UART_SetConfig+0x1a6>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <UART_SetConfig+0x1b0>
 800a29c:	e010      	b.n	800a2c0 <UART_SetConfig+0x1c8>
 800a29e:	2b80      	cmp	r3, #128	; 0x80
 800a2a0:	d005      	beq.n	800a2ae <UART_SetConfig+0x1b6>
 800a2a2:	2bc0      	cmp	r3, #192	; 0xc0
 800a2a4:	d009      	beq.n	800a2ba <UART_SetConfig+0x1c2>
 800a2a6:	e00b      	b.n	800a2c0 <UART_SetConfig+0x1c8>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	77fb      	strb	r3, [r7, #31]
 800a2ac:	e0cb      	b.n	800a446 <UART_SetConfig+0x34e>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	77fb      	strb	r3, [r7, #31]
 800a2b2:	e0c8      	b.n	800a446 <UART_SetConfig+0x34e>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	77fb      	strb	r3, [r7, #31]
 800a2b8:	e0c5      	b.n	800a446 <UART_SetConfig+0x34e>
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	77fb      	strb	r3, [r7, #31]
 800a2be:	e0c2      	b.n	800a446 <UART_SetConfig+0x34e>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	77fb      	strb	r3, [r7, #31]
 800a2c4:	bf00      	nop
 800a2c6:	e0be      	b.n	800a446 <UART_SetConfig+0x34e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a4d      	ldr	r2, [pc, #308]	; (800a404 <UART_SetConfig+0x30c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d124      	bne.n	800a31c <UART_SetConfig+0x224>
 800a2d2:	4b48      	ldr	r3, [pc, #288]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e0:	d012      	beq.n	800a308 <UART_SetConfig+0x210>
 800a2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e6:	d802      	bhi.n	800a2ee <UART_SetConfig+0x1f6>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <UART_SetConfig+0x204>
 800a2ec:	e012      	b.n	800a314 <UART_SetConfig+0x21c>
 800a2ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f2:	d006      	beq.n	800a302 <UART_SetConfig+0x20a>
 800a2f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2f8:	d009      	beq.n	800a30e <UART_SetConfig+0x216>
 800a2fa:	e00b      	b.n	800a314 <UART_SetConfig+0x21c>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e0a1      	b.n	800a446 <UART_SetConfig+0x34e>
 800a302:	2302      	movs	r3, #2
 800a304:	77fb      	strb	r3, [r7, #31]
 800a306:	e09e      	b.n	800a446 <UART_SetConfig+0x34e>
 800a308:	2304      	movs	r3, #4
 800a30a:	77fb      	strb	r3, [r7, #31]
 800a30c:	e09b      	b.n	800a446 <UART_SetConfig+0x34e>
 800a30e:	2308      	movs	r3, #8
 800a310:	77fb      	strb	r3, [r7, #31]
 800a312:	e098      	b.n	800a446 <UART_SetConfig+0x34e>
 800a314:	2310      	movs	r3, #16
 800a316:	77fb      	strb	r3, [r7, #31]
 800a318:	bf00      	nop
 800a31a:	e094      	b.n	800a446 <UART_SetConfig+0x34e>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a39      	ldr	r2, [pc, #228]	; (800a408 <UART_SetConfig+0x310>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d124      	bne.n	800a370 <UART_SetConfig+0x278>
 800a326:	4b33      	ldr	r3, [pc, #204]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a334:	d012      	beq.n	800a35c <UART_SetConfig+0x264>
 800a336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a33a:	d802      	bhi.n	800a342 <UART_SetConfig+0x24a>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d007      	beq.n	800a350 <UART_SetConfig+0x258>
 800a340:	e012      	b.n	800a368 <UART_SetConfig+0x270>
 800a342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a346:	d006      	beq.n	800a356 <UART_SetConfig+0x25e>
 800a348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a34c:	d009      	beq.n	800a362 <UART_SetConfig+0x26a>
 800a34e:	e00b      	b.n	800a368 <UART_SetConfig+0x270>
 800a350:	2301      	movs	r3, #1
 800a352:	77fb      	strb	r3, [r7, #31]
 800a354:	e077      	b.n	800a446 <UART_SetConfig+0x34e>
 800a356:	2302      	movs	r3, #2
 800a358:	77fb      	strb	r3, [r7, #31]
 800a35a:	e074      	b.n	800a446 <UART_SetConfig+0x34e>
 800a35c:	2304      	movs	r3, #4
 800a35e:	77fb      	strb	r3, [r7, #31]
 800a360:	e071      	b.n	800a446 <UART_SetConfig+0x34e>
 800a362:	2308      	movs	r3, #8
 800a364:	77fb      	strb	r3, [r7, #31]
 800a366:	e06e      	b.n	800a446 <UART_SetConfig+0x34e>
 800a368:	2310      	movs	r3, #16
 800a36a:	77fb      	strb	r3, [r7, #31]
 800a36c:	bf00      	nop
 800a36e:	e06a      	b.n	800a446 <UART_SetConfig+0x34e>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a25      	ldr	r2, [pc, #148]	; (800a40c <UART_SetConfig+0x314>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d124      	bne.n	800a3c4 <UART_SetConfig+0x2cc>
 800a37a:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a380:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a388:	d012      	beq.n	800a3b0 <UART_SetConfig+0x2b8>
 800a38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38e:	d802      	bhi.n	800a396 <UART_SetConfig+0x29e>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <UART_SetConfig+0x2ac>
 800a394:	e012      	b.n	800a3bc <UART_SetConfig+0x2c4>
 800a396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a39a:	d006      	beq.n	800a3aa <UART_SetConfig+0x2b2>
 800a39c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3a0:	d009      	beq.n	800a3b6 <UART_SetConfig+0x2be>
 800a3a2:	e00b      	b.n	800a3bc <UART_SetConfig+0x2c4>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	77fb      	strb	r3, [r7, #31]
 800a3a8:	e04d      	b.n	800a446 <UART_SetConfig+0x34e>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	77fb      	strb	r3, [r7, #31]
 800a3ae:	e04a      	b.n	800a446 <UART_SetConfig+0x34e>
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	77fb      	strb	r3, [r7, #31]
 800a3b4:	e047      	b.n	800a446 <UART_SetConfig+0x34e>
 800a3b6:	2308      	movs	r3, #8
 800a3b8:	77fb      	strb	r3, [r7, #31]
 800a3ba:	e044      	b.n	800a446 <UART_SetConfig+0x34e>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	77fb      	strb	r3, [r7, #31]
 800a3c0:	bf00      	nop
 800a3c2:	e040      	b.n	800a446 <UART_SetConfig+0x34e>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a11      	ldr	r2, [pc, #68]	; (800a410 <UART_SetConfig+0x318>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d139      	bne.n	800a442 <UART_SetConfig+0x34a>
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <UART_SetConfig+0x2fc>)
 800a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3dc:	d027      	beq.n	800a42e <UART_SetConfig+0x336>
 800a3de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e2:	d817      	bhi.n	800a414 <UART_SetConfig+0x31c>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01c      	beq.n	800a422 <UART_SetConfig+0x32a>
 800a3e8:	e027      	b.n	800a43a <UART_SetConfig+0x342>
 800a3ea:	bf00      	nop
 800a3ec:	efff69f3 	.word	0xefff69f3
 800a3f0:	40011000 	.word	0x40011000
 800a3f4:	40023800 	.word	0x40023800
 800a3f8:	40004400 	.word	0x40004400
 800a3fc:	40004800 	.word	0x40004800
 800a400:	40004c00 	.word	0x40004c00
 800a404:	40005000 	.word	0x40005000
 800a408:	40011400 	.word	0x40011400
 800a40c:	40007800 	.word	0x40007800
 800a410:	40007c00 	.word	0x40007c00
 800a414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a418:	d006      	beq.n	800a428 <UART_SetConfig+0x330>
 800a41a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a41e:	d009      	beq.n	800a434 <UART_SetConfig+0x33c>
 800a420:	e00b      	b.n	800a43a <UART_SetConfig+0x342>
 800a422:	2300      	movs	r3, #0
 800a424:	77fb      	strb	r3, [r7, #31]
 800a426:	e00e      	b.n	800a446 <UART_SetConfig+0x34e>
 800a428:	2302      	movs	r3, #2
 800a42a:	77fb      	strb	r3, [r7, #31]
 800a42c:	e00b      	b.n	800a446 <UART_SetConfig+0x34e>
 800a42e:	2304      	movs	r3, #4
 800a430:	77fb      	strb	r3, [r7, #31]
 800a432:	e008      	b.n	800a446 <UART_SetConfig+0x34e>
 800a434:	2308      	movs	r3, #8
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e005      	b.n	800a446 <UART_SetConfig+0x34e>
 800a43a:	2310      	movs	r3, #16
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	bf00      	nop
 800a440:	e001      	b.n	800a446 <UART_SetConfig+0x34e>
 800a442:	2310      	movs	r3, #16
 800a444:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a44e:	d17f      	bne.n	800a550 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a450:	7ffb      	ldrb	r3, [r7, #31]
 800a452:	2b08      	cmp	r3, #8
 800a454:	d85c      	bhi.n	800a510 <UART_SetConfig+0x418>
 800a456:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <UART_SetConfig+0x364>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4c1 	.word	0x0800a4c1
 800a468:	0800a511 	.word	0x0800a511
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a511 	.word	0x0800a511
 800a474:	0800a511 	.word	0x0800a511
 800a478:	0800a511 	.word	0x0800a511
 800a47c:	0800a4f9 	.word	0x0800a4f9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a480:	f7fd fa44 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 800a484:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	005a      	lsls	r2, r3, #1
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	441a      	add	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	61bb      	str	r3, [r7, #24]
        break;
 800a49e:	e03a      	b.n	800a516 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4a0:	f7fd fa48 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 800a4a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	005a      	lsls	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	085b      	lsrs	r3, r3, #1
 800a4b0:	441a      	add	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	61bb      	str	r3, [r7, #24]
        break;
 800a4be:	e02a      	b.n	800a516 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	085a      	lsrs	r2, r3, #1
 800a4c6:	4b5f      	ldr	r3, [pc, #380]	; (800a644 <UART_SetConfig+0x54c>)
 800a4c8:	4413      	add	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6852      	ldr	r2, [r2, #4]
 800a4ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	61bb      	str	r3, [r7, #24]
        break;
 800a4d6:	e01e      	b.n	800a516 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d8:	f7fd f95a 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800a4dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	005a      	lsls	r2, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	085b      	lsrs	r3, r3, #1
 800a4e8:	441a      	add	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	61bb      	str	r3, [r7, #24]
        break;
 800a4f6:	e00e      	b.n	800a516 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	61bb      	str	r3, [r7, #24]
        break;
 800a50e:	e002      	b.n	800a516 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
        break;
 800a514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b0f      	cmp	r3, #15
 800a51a:	d916      	bls.n	800a54a <UART_SetConfig+0x452>
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a522:	d212      	bcs.n	800a54a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	b29b      	uxth	r3, r3
 800a528:	f023 030f 	bic.w	r3, r3, #15
 800a52c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	085b      	lsrs	r3, r3, #1
 800a532:	b29b      	uxth	r3, r3
 800a534:	f003 0307 	and.w	r3, r3, #7
 800a538:	b29a      	uxth	r2, r3
 800a53a:	897b      	ldrh	r3, [r7, #10]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	897a      	ldrh	r2, [r7, #10]
 800a546:	60da      	str	r2, [r3, #12]
 800a548:	e070      	b.n	800a62c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
 800a54e:	e06d      	b.n	800a62c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a550:	7ffb      	ldrb	r3, [r7, #31]
 800a552:	2b08      	cmp	r3, #8
 800a554:	d859      	bhi.n	800a60a <UART_SetConfig+0x512>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <UART_SetConfig+0x464>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a59f 	.word	0x0800a59f
 800a564:	0800a5bd 	.word	0x0800a5bd
 800a568:	0800a60b 	.word	0x0800a60b
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a60b 	.word	0x0800a60b
 800a574:	0800a60b 	.word	0x0800a60b
 800a578:	0800a60b 	.word	0x0800a60b
 800a57c:	0800a5f3 	.word	0x0800a5f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a580:	f7fd f9c4 	bl	800790c <HAL_RCC_GetPCLK1Freq>
 800a584:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	085a      	lsrs	r2, r3, #1
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	441a      	add	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	fbb2 f3f3 	udiv	r3, r2, r3
 800a598:	b29b      	uxth	r3, r3
 800a59a:	61bb      	str	r3, [r7, #24]
        break;
 800a59c:	e038      	b.n	800a610 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a59e:	f7fd f9c9 	bl	8007934 <HAL_RCC_GetPCLK2Freq>
 800a5a2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	085a      	lsrs	r2, r3, #1
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	61bb      	str	r3, [r7, #24]
        break;
 800a5ba:	e029      	b.n	800a610 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	085a      	lsrs	r2, r3, #1
 800a5c2:	4b21      	ldr	r3, [pc, #132]	; (800a648 <UART_SetConfig+0x550>)
 800a5c4:	4413      	add	r3, r2
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6852      	ldr	r2, [r2, #4]
 800a5ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	61bb      	str	r3, [r7, #24]
        break;
 800a5d2:	e01d      	b.n	800a610 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d4:	f7fd f8dc 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800a5d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	085a      	lsrs	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	61bb      	str	r3, [r7, #24]
        break;
 800a5f0:	e00e      	b.n	800a610 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	085b      	lsrs	r3, r3, #1
 800a5f8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	fbb2 f3f3 	udiv	r3, r2, r3
 800a604:	b29b      	uxth	r3, r3
 800a606:	61bb      	str	r3, [r7, #24]
        break;
 800a608:	e002      	b.n	800a610 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]
        break;
 800a60e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b0f      	cmp	r3, #15
 800a614:	d908      	bls.n	800a628 <UART_SetConfig+0x530>
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a61c:	d204      	bcs.n	800a628 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	60da      	str	r2, [r3, #12]
 800a626:	e001      	b.n	800a62c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a638:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	01e84800 	.word	0x01e84800
 800a648:	00f42400 	.word	0x00f42400

0800a64c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01a      	beq.n	800a762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74a:	d10a      	bne.n	800a762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a79e:	f7f9 fdf9 	bl	8004394 <HAL_GetTick>
 800a7a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b08      	cmp	r3, #8
 800a7b0:	d10e      	bne.n	800a7d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f814 	bl	800a7ee <UART_WaitOnFlagUntilTimeout>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e00a      	b.n	800a7e6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	603b      	str	r3, [r7, #0]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7fe:	e05d      	b.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d059      	beq.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a808:	f7f9 fdc4 	bl	8004394 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	429a      	cmp	r2, r3
 800a816:	d302      	bcc.n	800a81e <UART_WaitOnFlagUntilTimeout+0x30>
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d11b      	bne.n	800a856 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a82c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0201 	bic.w	r2, r2, #1
 800a83c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e042      	b.n	800a8dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	d02b      	beq.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a86e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a872:	d123      	bne.n	800a8bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a87c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a88c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0201 	bic.w	r2, r2, #1
 800a89c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e00f      	b.n	800a8dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	69da      	ldr	r2, [r3, #28]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2301      	moveq	r3, #1
 800a8ce:	2300      	movne	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	79fb      	ldrb	r3, [r7, #7]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d092      	beq.n	800a800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d027      	beq.n	800a94e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <FMC_SDRAM_Init+0xe0>)
 800a908:	4013      	ands	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a914:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a91a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a920:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a926:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a92c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a932:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a938:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a93e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	e032      	b.n	800a9b4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a95a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a964:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a96a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4b12      	ldr	r3, [pc, #72]	; (800a9c4 <FMC_SDRAM_Init+0xe0>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a988:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a98e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a994:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a99a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a9a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	ffff8000 	.word	0xffff8000

0800a9c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d02e      	beq.n	800aa40 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9ee:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800aa08:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800aa12:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800aa1c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800aa26:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa30:	4313      	orrs	r3, r2
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	609a      	str	r2, [r3, #8]
 800aa3e:	e039      	b.n	800aab4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	4b1e      	ldr	r3, [pc, #120]	; (800aac4 <FMC_SDRAM_Timing_Init+0xfc>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa72:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa82:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa8c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa96:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	371c      	adds	r7, #28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	ff0f0fff 	.word	0xff0f0fff

0800aac8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aae0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aaea:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	695a      	ldr	r2, [r3, #20]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab42:	2b84      	cmp	r3, #132	; 0x84
 800ab44:	d005      	beq.n	800ab52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ab46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	3303      	adds	r3, #3
 800ab50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ab52:	68fb      	ldr	r3, [r7, #12]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ab64:	f001 f826 	bl	800bbb4 <vTaskStartScheduler>
  
  return osOK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ab6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab70:	b089      	sub	sp, #36	; 0x24
 800ab72:	af04      	add	r7, sp, #16
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d020      	beq.n	800abc2 <osThreadCreate+0x54>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d01c      	beq.n	800abc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685c      	ldr	r4, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681d      	ldr	r5, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691e      	ldr	r6, [r3, #16]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff ffc8 	bl	800ab30 <makeFreeRtosPriority>
 800aba0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abaa:	9202      	str	r2, [sp, #8]
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	9100      	str	r1, [sp, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	4632      	mov	r2, r6
 800abb4:	4629      	mov	r1, r5
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fdae 	bl	800b718 <xTaskCreateStatic>
 800abbc:	4603      	mov	r3, r0
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e01c      	b.n	800abfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685c      	ldr	r4, [r3, #4]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abce:	b29e      	uxth	r6, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff ffaa 	bl	800ab30 <makeFreeRtosPriority>
 800abdc:	4602      	mov	r2, r0
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	9200      	str	r2, [sp, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	4632      	mov	r2, r6
 800abea:	4629      	mov	r1, r5
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fdf3 	bl	800b7d8 <xTaskCreate>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d001      	beq.n	800abfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800abf8:	2300      	movs	r3, #0
 800abfa:	e000      	b.n	800abfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800abfc:	68fb      	ldr	r3, [r7, #12]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <osDelay+0x16>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	e000      	b.n	800ac1e <osDelay+0x18>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 ff92 	bl	800bb48 <vTaskDelay>
  
  return osOK;
 800ac24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d007      	beq.n	800ac4e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	4619      	mov	r1, r3
 800ac44:	2001      	movs	r0, #1
 800ac46:	f000 fa38 	bl	800b0ba <xQueueCreateMutexStatic>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	e003      	b.n	800ac56 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ac4e:	2001      	movs	r0, #1
 800ac50:	f000 fa1b 	bl	800b08a <xQueueCreateMutex>
 800ac54:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f103 0208 	add.w	r2, r3, #8
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f103 0208 	add.w	r2, r3, #8
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f103 0208 	add.w	r2, r3, #8
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	689a      	ldr	r2, [r3, #8]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d103      	bne.n	800ad20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e00c      	b.n	800ad3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3308      	adds	r3, #8
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e002      	b.n	800ad2e <vListInsert+0x2e>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d2f6      	bcs.n	800ad28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	601a      	str	r2, [r3, #0]
}
 800ad66:	bf00      	nop
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6892      	ldr	r2, [r2, #8]
 800ad88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6852      	ldr	r2, [r2, #4]
 800ad92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d103      	bne.n	800ada6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	1e5a      	subs	r2, r3, #1
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
	...

0800adc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10b      	bne.n	800adf4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	b672      	cpsid	i
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	b662      	cpsie	i
 800adf0:	60bb      	str	r3, [r7, #8]
 800adf2:	e7fe      	b.n	800adf2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800adf4:	f001 fe38 	bl	800ca68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	68f9      	ldr	r1, [r7, #12]
 800ae02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae04:	fb01 f303 	mul.w	r3, r1, r3
 800ae08:	441a      	add	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae24:	3b01      	subs	r3, #1
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae2a:	fb01 f303 	mul.w	r3, r1, r3
 800ae2e:	441a      	add	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	22ff      	movs	r2, #255	; 0xff
 800ae38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	22ff      	movs	r2, #255	; 0xff
 800ae40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d114      	bne.n	800ae74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d01a      	beq.n	800ae88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3310      	adds	r3, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f001 f906 	bl	800c068 <xTaskRemoveFromEventList>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d012      	beq.n	800ae88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae62:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <xQueueGenericReset+0xd0>)
 800ae64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	e009      	b.n	800ae88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3310      	adds	r3, #16
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fef0 	bl	800ac5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3324      	adds	r3, #36	; 0x24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff feeb 	bl	800ac5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae88:	f001 fe20 	bl	800cacc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae8c:	2301      	movs	r3, #1
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08e      	sub	sp, #56	; 0x38
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10b      	bne.n	800aec8 <xQueueGenericCreateStatic+0x2c>
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	b672      	cpsid	i
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	b662      	cpsie	i
 800aec4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aec6:	e7fe      	b.n	800aec6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10b      	bne.n	800aee6 <xQueueGenericCreateStatic+0x4a>
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	b672      	cpsid	i
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	b662      	cpsie	i
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
 800aee4:	e7fe      	b.n	800aee4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <xQueueGenericCreateStatic+0x56>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <xQueueGenericCreateStatic+0x5a>
 800aef2:	2301      	movs	r3, #1
 800aef4:	e000      	b.n	800aef8 <xQueueGenericCreateStatic+0x5c>
 800aef6:	2300      	movs	r3, #0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10b      	bne.n	800af14 <xQueueGenericCreateStatic+0x78>
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	b672      	cpsid	i
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	b662      	cpsie	i
 800af10:	623b      	str	r3, [r7, #32]
 800af12:	e7fe      	b.n	800af12 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d102      	bne.n	800af20 <xQueueGenericCreateStatic+0x84>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <xQueueGenericCreateStatic+0x88>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <xQueueGenericCreateStatic+0x8a>
 800af24:	2300      	movs	r3, #0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <xQueueGenericCreateStatic+0xa6>
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	b672      	cpsid	i
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	b662      	cpsie	i
 800af3e:	61fb      	str	r3, [r7, #28]
 800af40:	e7fe      	b.n	800af40 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af42:	2348      	movs	r3, #72	; 0x48
 800af44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b48      	cmp	r3, #72	; 0x48
 800af4a:	d00b      	beq.n	800af64 <xQueueGenericCreateStatic+0xc8>
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	b672      	cpsid	i
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	b662      	cpsie	i
 800af60:	61bb      	str	r3, [r7, #24]
 800af62:	e7fe      	b.n	800af62 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00d      	beq.n	800af8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	4613      	mov	r3, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f846 	bl	800b018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af8e:	4618      	mov	r0, r3
 800af90:	3730      	adds	r7, #48	; 0x30
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af96:	b580      	push	{r7, lr}
 800af98:	b08a      	sub	sp, #40	; 0x28
 800af9a:	af02      	add	r7, sp, #8
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	4613      	mov	r3, r2
 800afa2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10b      	bne.n	800afc2 <xQueueGenericCreate+0x2c>
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	b672      	cpsid	i
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	b662      	cpsie	i
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	e7fe      	b.n	800afc0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d102      	bne.n	800afce <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	e004      	b.n	800afd8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	fb02 f303 	mul.w	r3, r2, r3
 800afd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	3348      	adds	r3, #72	; 0x48
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 fe23 	bl	800cc28 <pvPortMalloc>
 800afe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d011      	beq.n	800b00e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	3348      	adds	r3, #72	; 0x48
 800aff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800affc:	79fa      	ldrb	r2, [r7, #7]
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	4613      	mov	r3, r2
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f805 	bl	800b018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b00e:	69bb      	ldr	r3, [r7, #24]
	}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	e002      	b.n	800b03a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b046:	2101      	movs	r1, #1
 800b048:	69b8      	ldr	r0, [r7, #24]
 800b04a:	f7ff febd 	bl	800adc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b076:	2300      	movs	r3, #0
 800b078:	2200      	movs	r2, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f837 	bl	800b0f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af00      	add	r7, sp, #0
 800b090:	4603      	mov	r3, r0
 800b092:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b094:	2301      	movs	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	2300      	movs	r3, #0
 800b09a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6939      	ldr	r1, [r7, #16]
 800b0a2:	6978      	ldr	r0, [r7, #20]
 800b0a4:	f7ff ff77 	bl	800af96 <xQueueGenericCreate>
 800b0a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff ffd3 	bl	800b056 <prvInitialiseMutex>

		return xNewQueue;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b088      	sub	sp, #32
 800b0be:	af02      	add	r7, sp, #8
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	6039      	str	r1, [r7, #0]
 800b0c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	6939      	ldr	r1, [r7, #16]
 800b0d8:	6978      	ldr	r0, [r7, #20]
 800b0da:	f7ff fedf 	bl	800ae9c <xQueueGenericCreateStatic>
 800b0de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7ff ffb8 	bl	800b056 <prvInitialiseMutex>

		return xNewQueue;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08e      	sub	sp, #56	; 0x38
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0fe:	2300      	movs	r3, #0
 800b100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <xQueueGenericSend+0x34>
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
 800b122:	e7fe      	b.n	800b122 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d103      	bne.n	800b132 <xQueueGenericSend+0x42>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueGenericSend+0x46>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueGenericSend+0x48>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xQueueGenericSend+0x64>
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	b672      	cpsid	i
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	b662      	cpsie	i
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
 800b152:	e7fe      	b.n	800b152 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2b02      	cmp	r3, #2
 800b158:	d103      	bne.n	800b162 <xQueueGenericSend+0x72>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d101      	bne.n	800b166 <xQueueGenericSend+0x76>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueGenericSend+0x78>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xQueueGenericSend+0x94>
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	b672      	cpsid	i
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	b662      	cpsie	i
 800b180:	623b      	str	r3, [r7, #32]
 800b182:	e7fe      	b.n	800b182 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b184:	f001 f92e 	bl	800c3e4 <xTaskGetSchedulerState>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <xQueueGenericSend+0xa4>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <xQueueGenericSend+0xa8>
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <xQueueGenericSend+0xaa>
 800b198:	2300      	movs	r3, #0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10b      	bne.n	800b1b6 <xQueueGenericSend+0xc6>
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	b672      	cpsid	i
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	b662      	cpsie	i
 800b1b2:	61fb      	str	r3, [r7, #28]
 800b1b4:	e7fe      	b.n	800b1b4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1b6:	f001 fc57 	bl	800ca68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d302      	bcc.n	800b1cc <xQueueGenericSend+0xdc>
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d129      	bne.n	800b220 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1d2:	f000 f9b7 	bl	800b544 <prvCopyDataToQueue>
 800b1d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d010      	beq.n	800b202 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	3324      	adds	r3, #36	; 0x24
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 ff3f 	bl	800c068 <xTaskRemoveFromEventList>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d013      	beq.n	800b218 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1f0:	4b3f      	ldr	r3, [pc, #252]	; (800b2f0 <xQueueGenericSend+0x200>)
 800b1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	e00a      	b.n	800b218 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b204:	2b00      	cmp	r3, #0
 800b206:	d007      	beq.n	800b218 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b208:	4b39      	ldr	r3, [pc, #228]	; (800b2f0 <xQueueGenericSend+0x200>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b218:	f001 fc58 	bl	800cacc <vPortExitCritical>
				return pdPASS;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e063      	b.n	800b2e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d103      	bne.n	800b22e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b226:	f001 fc51 	bl	800cacc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e05c      	b.n	800b2e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	2b00      	cmp	r3, #0
 800b232:	d106      	bne.n	800b242 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b234:	f107 0314 	add.w	r3, r7, #20
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 ff79 	bl	800c130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b23e:	2301      	movs	r3, #1
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b242:	f001 fc43 	bl	800cacc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b246:	f000 fd17 	bl	800bc78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b24a:	f001 fc0d 	bl	800ca68 <vPortEnterCritical>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b254:	b25b      	sxtb	r3, r3
 800b256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25a:	d103      	bne.n	800b264 <xQueueGenericSend+0x174>
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b26a:	b25b      	sxtb	r3, r3
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b270:	d103      	bne.n	800b27a <xQueueGenericSend+0x18a>
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b27a:	f001 fc27 	bl	800cacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b27e:	1d3a      	adds	r2, r7, #4
 800b280:	f107 0314 	add.w	r3, r7, #20
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f000 ff68 	bl	800c15c <xTaskCheckForTimeOut>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d124      	bne.n	800b2dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b294:	f000 fa28 	bl	800b6e8 <prvIsQueueFull>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d018      	beq.n	800b2d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	3310      	adds	r3, #16
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 feb8 	bl	800c01c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ae:	f000 f9b3 	bl	800b618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2b2:	f000 fcef 	bl	800bc94 <xTaskResumeAll>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f47f af7c 	bne.w	800b1b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <xQueueGenericSend+0x200>)
 800b2c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	e772      	b.n	800b1b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2d2:	f000 f9a1 	bl	800b618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2d6:	f000 fcdd 	bl	800bc94 <xTaskResumeAll>
 800b2da:	e76c      	b.n	800b1b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2de:	f000 f99b 	bl	800b618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2e2:	f000 fcd7 	bl	800bc94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3738      	adds	r7, #56	; 0x38
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	e000ed04 	.word	0xe000ed04

0800b2f4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	; 0x38
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b306:	2300      	movs	r3, #0
 800b308:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10b      	bne.n	800b328 <xQueueSemaphoreTake+0x34>
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	b672      	cpsid	i
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	b662      	cpsie	i
 800b324:	623b      	str	r3, [r7, #32]
 800b326:	e7fe      	b.n	800b326 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00b      	beq.n	800b348 <xQueueSemaphoreTake+0x54>
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	b672      	cpsid	i
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	b662      	cpsie	i
 800b344:	61fb      	str	r3, [r7, #28]
 800b346:	e7fe      	b.n	800b346 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b348:	f001 f84c 	bl	800c3e4 <xTaskGetSchedulerState>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d102      	bne.n	800b358 <xQueueSemaphoreTake+0x64>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <xQueueSemaphoreTake+0x68>
 800b358:	2301      	movs	r3, #1
 800b35a:	e000      	b.n	800b35e <xQueueSemaphoreTake+0x6a>
 800b35c:	2300      	movs	r3, #0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <xQueueSemaphoreTake+0x86>
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	b672      	cpsid	i
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	b662      	cpsie	i
 800b376:	61bb      	str	r3, [r7, #24]
 800b378:	e7fe      	b.n	800b378 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b37a:	f001 fb75 	bl	800ca68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d024      	beq.n	800b3d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d104      	bne.n	800b3a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b39a:	f001 f9e5 	bl	800c768 <pvTaskIncrementMutexHeldCount>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00f      	beq.n	800b3cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	3310      	adds	r3, #16
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fe59 	bl	800c068 <xTaskRemoveFromEventList>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3bc:	4b54      	ldr	r3, [pc, #336]	; (800b510 <xQueueSemaphoreTake+0x21c>)
 800b3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3cc:	f001 fb7e 	bl	800cacc <vPortExitCritical>
				return pdPASS;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e098      	b.n	800b506 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d112      	bne.n	800b400 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00b      	beq.n	800b3f8 <xQueueSemaphoreTake+0x104>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	b672      	cpsid	i
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	b662      	cpsie	i
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e7fe      	b.n	800b3f6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b3f8:	f001 fb68 	bl	800cacc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e082      	b.n	800b506 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b406:	f107 030c 	add.w	r3, r7, #12
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 fe90 	bl	800c130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b410:	2301      	movs	r3, #1
 800b412:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b414:	f001 fb5a 	bl	800cacc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b418:	f000 fc2e 	bl	800bc78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b41c:	f001 fb24 	bl	800ca68 <vPortEnterCritical>
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b426:	b25b      	sxtb	r3, r3
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42c:	d103      	bne.n	800b436 <xQueueSemaphoreTake+0x142>
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b43c:	b25b      	sxtb	r3, r3
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b442:	d103      	bne.n	800b44c <xQueueSemaphoreTake+0x158>
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b44c:	f001 fb3e 	bl	800cacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b450:	463a      	mov	r2, r7
 800b452:	f107 030c 	add.w	r3, r7, #12
 800b456:	4611      	mov	r1, r2
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fe7f 	bl	800c15c <xTaskCheckForTimeOut>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d132      	bne.n	800b4ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b466:	f000 f929 	bl	800b6bc <prvIsQueueEmpty>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d026      	beq.n	800b4be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b478:	f001 faf6 	bl	800ca68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 ffcd 	bl	800c420 <xTaskPriorityInherit>
 800b486:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b488:	f001 fb20 	bl	800cacc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48e:	3324      	adds	r3, #36	; 0x24
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fdc1 	bl	800c01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b49a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b49c:	f000 f8bc 	bl	800b618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4a0:	f000 fbf8 	bl	800bc94 <xTaskResumeAll>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f47f af67 	bne.w	800b37a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b4ac:	4b18      	ldr	r3, [pc, #96]	; (800b510 <xQueueSemaphoreTake+0x21c>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	e75d      	b.n	800b37a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b4be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4c0:	f000 f8aa 	bl	800b618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4c4:	f000 fbe6 	bl	800bc94 <xTaskResumeAll>
 800b4c8:	e757      	b.n	800b37a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4cc:	f000 f8a4 	bl	800b618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4d0:	f000 fbe0 	bl	800bc94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d6:	f000 f8f1 	bl	800b6bc <prvIsQueueEmpty>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f43f af4c 	beq.w	800b37a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00d      	beq.n	800b504 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b4e8:	f001 fabe 	bl	800ca68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4ee:	f000 f811 	bl	800b514 <prvGetDisinheritPriorityAfterTimeout>
 800b4f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 f898 	bl	800c630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b500:	f001 fae4 	bl	800cacc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b506:	4618      	mov	r0, r3
 800b508:	3738      	adds	r7, #56	; 0x38
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d006      	beq.n	800b532 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f1c3 0307 	rsb	r3, r3, #7
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e001      	b.n	800b536 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b536:	68fb      	ldr	r3, [r7, #12]
	}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10d      	bne.n	800b57e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d14d      	bne.n	800b606 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 ffd6 	bl	800c520 <xTaskPriorityDisinherit>
 800b574:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	609a      	str	r2, [r3, #8]
 800b57c:	e043      	b.n	800b606 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d119      	bne.n	800b5b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6858      	ldr	r0, [r3, #4]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58c:	461a      	mov	r2, r3
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	f001 fd54 	bl	800d03c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59c:	441a      	add	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d32b      	bcc.n	800b606 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	605a      	str	r2, [r3, #4]
 800b5b6:	e026      	b.n	800b606 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	68d8      	ldr	r0, [r3, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	f001 fd3a 	bl	800d03c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	425b      	negs	r3, r3
 800b5d2:	441a      	add	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68da      	ldr	r2, [r3, #12]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d207      	bcs.n	800b5f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ec:	425b      	negs	r3, r3
 800b5ee:	441a      	add	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d105      	bne.n	800b606 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	3b01      	subs	r3, #1
 800b604:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b60e:	697b      	ldr	r3, [r7, #20]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3718      	adds	r7, #24
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b620:	f001 fa22 	bl	800ca68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b62c:	e011      	b.n	800b652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	2b00      	cmp	r3, #0
 800b634:	d012      	beq.n	800b65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3324      	adds	r3, #36	; 0x24
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fd14 	bl	800c068 <xTaskRemoveFromEventList>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b646:	f000 fded 	bl	800c224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	3b01      	subs	r3, #1
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b656:	2b00      	cmp	r3, #0
 800b658:	dce9      	bgt.n	800b62e <prvUnlockQueue+0x16>
 800b65a:	e000      	b.n	800b65e <prvUnlockQueue+0x46>
					break;
 800b65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	22ff      	movs	r2, #255	; 0xff
 800b662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b666:	f001 fa31 	bl	800cacc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b66a:	f001 f9fd 	bl	800ca68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b676:	e011      	b.n	800b69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d012      	beq.n	800b6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3310      	adds	r3, #16
 800b684:	4618      	mov	r0, r3
 800b686:	f000 fcef 	bl	800c068 <xTaskRemoveFromEventList>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b690:	f000 fdc8 	bl	800c224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	3b01      	subs	r3, #1
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dce9      	bgt.n	800b678 <prvUnlockQueue+0x60>
 800b6a4:	e000      	b.n	800b6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	22ff      	movs	r2, #255	; 0xff
 800b6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6b0:	f001 fa0c 	bl	800cacc <vPortExitCritical>
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6c4:	f001 f9d0 	bl	800ca68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	60fb      	str	r3, [r7, #12]
 800b6d4:	e001      	b.n	800b6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6da:	f001 f9f7 	bl	800cacc <vPortExitCritical>

	return xReturn;
 800b6de:	68fb      	ldr	r3, [r7, #12]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6f0:	f001 f9ba 	bl	800ca68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d102      	bne.n	800b706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	e001      	b.n	800b70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b70a:	f001 f9df 	bl	800cacc <vPortExitCritical>

	return xReturn;
 800b70e:	68fb      	ldr	r3, [r7, #12]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08e      	sub	sp, #56	; 0x38
 800b71c:	af04      	add	r7, sp, #16
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <xTaskCreateStatic+0x2c>
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	b672      	cpsid	i
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	b662      	cpsie	i
 800b740:	623b      	str	r3, [r7, #32]
 800b742:	e7fe      	b.n	800b742 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <xTaskCreateStatic+0x4a>
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	b672      	cpsid	i
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	b662      	cpsie	i
 800b75e:	61fb      	str	r3, [r7, #28]
 800b760:	e7fe      	b.n	800b760 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b762:	2354      	movs	r3, #84	; 0x54
 800b764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b54      	cmp	r3, #84	; 0x54
 800b76a:	d00b      	beq.n	800b784 <xTaskCreateStatic+0x6c>
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	61bb      	str	r3, [r7, #24]
 800b782:	e7fe      	b.n	800b782 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b784:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d01e      	beq.n	800b7ca <xTaskCreateStatic+0xb2>
 800b78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01b      	beq.n	800b7ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b79a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9303      	str	r3, [sp, #12]
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	9302      	str	r3, [sp, #8]
 800b7ac:	f107 0314 	add.w	r3, r7, #20
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 f850 	bl	800b862 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7c4:	f000 f8d6 	bl	800b974 <prvAddNewTaskToReadyList>
 800b7c8:	e001      	b.n	800b7ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7ce:	697b      	ldr	r3, [r7, #20]
	}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3728      	adds	r7, #40	; 0x28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08c      	sub	sp, #48	; 0x30
 800b7dc:	af04      	add	r7, sp, #16
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f001 fa1b 	bl	800cc28 <pvPortMalloc>
 800b7f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00e      	beq.n	800b818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7fa:	2054      	movs	r0, #84	; 0x54
 800b7fc:	f001 fa14 	bl	800cc28 <pvPortMalloc>
 800b800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	631a      	str	r2, [r3, #48]	; 0x30
 800b80e:	e005      	b.n	800b81c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b810:	6978      	ldr	r0, [r7, #20]
 800b812:	f001 fad1 	bl	800cdb8 <vPortFree>
 800b816:	e001      	b.n	800b81c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d017      	beq.n	800b852 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	2300      	movs	r3, #0
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	9302      	str	r3, [sp, #8]
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f80e 	bl	800b862 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b846:	69f8      	ldr	r0, [r7, #28]
 800b848:	f000 f894 	bl	800b974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b84c:	2301      	movs	r3, #1
 800b84e:	61bb      	str	r3, [r7, #24]
 800b850:	e002      	b.n	800b858 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b852:	f04f 33ff 	mov.w	r3, #4294967295
 800b856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b858:	69bb      	ldr	r3, [r7, #24]
	}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3720      	adds	r7, #32
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b088      	sub	sp, #32
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b87a:	440b      	add	r3, r1
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <prvInitialiseNewTask+0x4a>
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	b672      	cpsid	i
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	b662      	cpsie	i
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	e7fe      	b.n	800b8aa <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01f      	beq.n	800b8f2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	e012      	b.n	800b8de <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	4413      	add	r3, r2
 800b8be:	7819      	ldrb	r1, [r3, #0]
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3334      	adds	r3, #52	; 0x34
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	2b0f      	cmp	r3, #15
 800b8e2:	d9e9      	bls.n	800b8b8 <prvInitialiseNewTask+0x56>
 800b8e4:	e000      	b.n	800b8e8 <prvInitialiseNewTask+0x86>
			{
				break;
 800b8e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8f0:	e003      	b.n	800b8fa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	2b06      	cmp	r3, #6
 800b8fe:	d901      	bls.n	800b904 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b900:	2306      	movs	r3, #6
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	2200      	movs	r2, #0
 800b914:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	3304      	adds	r3, #4
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff f9bf 	bl	800ac9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b922:	3318      	adds	r3, #24
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff f9ba 	bl	800ac9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b92e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f1c3 0207 	rsb	r2, r3, #7
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	2200      	movs	r2, #0
 800b944:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	68f9      	ldr	r1, [r7, #12]
 800b952:	69b8      	ldr	r0, [r7, #24]
 800b954:	f000 ff82 	bl	800c85c <pxPortInitialiseStack>
 800b958:	4602      	mov	r2, r0
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b96a:	bf00      	nop
 800b96c:	3720      	adds	r7, #32
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b97c:	f001 f874 	bl	800ca68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b980:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <prvAddNewTaskToReadyList+0xb8>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3301      	adds	r3, #1
 800b986:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <prvAddNewTaskToReadyList+0xb8>)
 800b988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b98a:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <prvAddNewTaskToReadyList+0xbc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b992:	4a27      	ldr	r2, [pc, #156]	; (800ba30 <prvAddNewTaskToReadyList+0xbc>)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b998:	4b24      	ldr	r3, [pc, #144]	; (800ba2c <prvAddNewTaskToReadyList+0xb8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d110      	bne.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9a0:	f000 fc64 	bl	800c26c <prvInitialiseTaskLists>
 800b9a4:	e00d      	b.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9a6:	4b23      	ldr	r3, [pc, #140]	; (800ba34 <prvAddNewTaskToReadyList+0xc0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d109      	bne.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9ae:	4b20      	ldr	r3, [pc, #128]	; (800ba30 <prvAddNewTaskToReadyList+0xbc>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d802      	bhi.n	800b9c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9bc:	4a1c      	ldr	r2, [pc, #112]	; (800ba30 <prvAddNewTaskToReadyList+0xbc>)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ba38 <prvAddNewTaskToReadyList+0xc4>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	4a1b      	ldr	r2, [pc, #108]	; (800ba38 <prvAddNewTaskToReadyList+0xc4>)
 800b9ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	409a      	lsls	r2, r3
 800b9d4:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	4a18      	ldr	r2, [pc, #96]	; (800ba3c <prvAddNewTaskToReadyList+0xc8>)
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4a15      	ldr	r2, [pc, #84]	; (800ba40 <prvAddNewTaskToReadyList+0xcc>)
 800b9ec:	441a      	add	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f7ff f95f 	bl	800acb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9fa:	f001 f867 	bl	800cacc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <prvAddNewTaskToReadyList+0xc0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00e      	beq.n	800ba24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba06:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <prvAddNewTaskToReadyList+0xbc>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d207      	bcs.n	800ba24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba14:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <prvAddNewTaskToReadyList+0xd0>)
 800ba16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20000648 	.word	0x20000648
 800ba30:	20000548 	.word	0x20000548
 800ba34:	20000654 	.word	0x20000654
 800ba38:	20000664 	.word	0x20000664
 800ba3c:	20000650 	.word	0x20000650
 800ba40:	2000054c 	.word	0x2000054c
 800ba44:	e000ed04 	.word	0xe000ed04

0800ba48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10b      	bne.n	800ba74 <vTaskDelayUntil+0x2c>
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	b672      	cpsid	i
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	b662      	cpsie	i
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	e7fe      	b.n	800ba72 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10b      	bne.n	800ba92 <vTaskDelayUntil+0x4a>
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	b672      	cpsid	i
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	b662      	cpsie	i
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	e7fe      	b.n	800ba90 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800ba92:	4b2a      	ldr	r3, [pc, #168]	; (800bb3c <vTaskDelayUntil+0xf4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <vTaskDelayUntil+0x6a>
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	b672      	cpsid	i
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	b662      	cpsie	i
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	e7fe      	b.n	800bab0 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800bab2:	f000 f8e1 	bl	800bc78 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bab6:	4b22      	ldr	r3, [pc, #136]	; (800bb40 <vTaskDelayUntil+0xf8>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	4413      	add	r3, r2
 800bac4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6a3a      	ldr	r2, [r7, #32]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d20b      	bcs.n	800bae8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	69fa      	ldr	r2, [r7, #28]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d211      	bcs.n	800bafe <vTaskDelayUntil+0xb6>
 800bada:	69fa      	ldr	r2, [r7, #28]
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d90d      	bls.n	800bafe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
 800bae6:	e00a      	b.n	800bafe <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d303      	bcc.n	800bafa <vTaskDelayUntil+0xb2>
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	6a3b      	ldr	r3, [r7, #32]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d901      	bls.n	800bafe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800bafa:	2301      	movs	r3, #1
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69fa      	ldr	r2, [r7, #28]
 800bb02:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d006      	beq.n	800bb18 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bb0a:	69fa      	ldr	r2, [r7, #28]
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fe3c 	bl	800c790 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bb18:	f000 f8bc 	bl	800bc94 <xTaskResumeAll>
 800bb1c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d107      	bne.n	800bb34 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800bb24:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <vTaskDelayUntil+0xfc>)
 800bb26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb34:	bf00      	nop
 800bb36:	3728      	adds	r7, #40	; 0x28
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20000670 	.word	0x20000670
 800bb40:	2000064c 	.word	0x2000064c
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d018      	beq.n	800bb8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb5a:	4b14      	ldr	r3, [pc, #80]	; (800bbac <vTaskDelay+0x64>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00b      	beq.n	800bb7a <vTaskDelay+0x32>
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	b672      	cpsid	i
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	b662      	cpsie	i
 800bb76:	60bb      	str	r3, [r7, #8]
 800bb78:	e7fe      	b.n	800bb78 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800bb7a:	f000 f87d 	bl	800bc78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb7e:	2100      	movs	r1, #0
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fe05 	bl	800c790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb86:	f000 f885 	bl	800bc94 <xTaskResumeAll>
 800bb8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d107      	bne.n	800bba2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb92:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <vTaskDelay+0x68>)
 800bb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20000670 	.word	0x20000670
 800bbb0:	e000ed04 	.word	0xe000ed04

0800bbb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08a      	sub	sp, #40	; 0x28
 800bbb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbc2:	463a      	mov	r2, r7
 800bbc4:	1d39      	adds	r1, r7, #4
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f4 fcf8 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	9202      	str	r2, [sp, #8]
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	491f      	ldr	r1, [pc, #124]	; (800bc60 <vTaskStartScheduler+0xac>)
 800bbe4:	481f      	ldr	r0, [pc, #124]	; (800bc64 <vTaskStartScheduler+0xb0>)
 800bbe6:	f7ff fd97 	bl	800b718 <xTaskCreateStatic>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b1e      	ldr	r3, [pc, #120]	; (800bc68 <vTaskStartScheduler+0xb4>)
 800bbee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bbf0:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <vTaskStartScheduler+0xb4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	e001      	b.n	800bc02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d117      	bne.n	800bc38 <vTaskStartScheduler+0x84>
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	b672      	cpsid	i
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	b662      	cpsie	i
 800bc1c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <vTaskStartScheduler+0xb8>)
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc26:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <vTaskStartScheduler+0xbc>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc2c:	4b11      	ldr	r3, [pc, #68]	; (800bc74 <vTaskStartScheduler+0xc0>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc32:	f000 fe9d 	bl	800c970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc36:	e00f      	b.n	800bc58 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3e:	d10b      	bne.n	800bc58 <vTaskStartScheduler+0xa4>
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	b672      	cpsid	i
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	b662      	cpsie	i
 800bc54:	60fb      	str	r3, [r7, #12]
 800bc56:	e7fe      	b.n	800bc56 <vTaskStartScheduler+0xa2>
}
 800bc58:	bf00      	nop
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	0800d964 	.word	0x0800d964
 800bc64:	0800c23d 	.word	0x0800c23d
 800bc68:	2000066c 	.word	0x2000066c
 800bc6c:	20000668 	.word	0x20000668
 800bc70:	20000654 	.word	0x20000654
 800bc74:	2000064c 	.word	0x2000064c

0800bc78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bc7c:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <vTaskSuspendAll+0x18>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3301      	adds	r3, #1
 800bc82:	4a03      	ldr	r2, [pc, #12]	; (800bc90 <vTaskSuspendAll+0x18>)
 800bc84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bc86:	bf00      	nop
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	20000670 	.word	0x20000670

0800bc94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bca2:	4b42      	ldr	r3, [pc, #264]	; (800bdac <xTaskResumeAll+0x118>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <xTaskResumeAll+0x2e>
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	b672      	cpsid	i
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	b662      	cpsie	i
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	e7fe      	b.n	800bcc0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcc2:	f000 fed1 	bl	800ca68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcc6:	4b39      	ldr	r3, [pc, #228]	; (800bdac <xTaskResumeAll+0x118>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	4a37      	ldr	r2, [pc, #220]	; (800bdac <xTaskResumeAll+0x118>)
 800bcce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcd0:	4b36      	ldr	r3, [pc, #216]	; (800bdac <xTaskResumeAll+0x118>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d161      	bne.n	800bd9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcd8:	4b35      	ldr	r3, [pc, #212]	; (800bdb0 <xTaskResumeAll+0x11c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d05d      	beq.n	800bd9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bce0:	e02e      	b.n	800bd40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce2:	4b34      	ldr	r3, [pc, #208]	; (800bdb4 <xTaskResumeAll+0x120>)
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	3318      	adds	r3, #24
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff f83f 	bl	800ad72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff f83a 	bl	800ad72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	2201      	movs	r2, #1
 800bd04:	409a      	lsls	r2, r3
 800bd06:	4b2c      	ldr	r3, [pc, #176]	; (800bdb8 <xTaskResumeAll+0x124>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	4a2a      	ldr	r2, [pc, #168]	; (800bdb8 <xTaskResumeAll+0x124>)
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4a27      	ldr	r2, [pc, #156]	; (800bdbc <xTaskResumeAll+0x128>)
 800bd1e:	441a      	add	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fe ffc6 	bl	800acb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd30:	4b23      	ldr	r3, [pc, #140]	; (800bdc0 <xTaskResumeAll+0x12c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d302      	bcc.n	800bd40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd3a:	4b22      	ldr	r3, [pc, #136]	; (800bdc4 <xTaskResumeAll+0x130>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd40:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <xTaskResumeAll+0x120>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1cc      	bne.n	800bce2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd4e:	f000 fb29 	bl	800c3a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd52:	4b1d      	ldr	r3, [pc, #116]	; (800bdc8 <xTaskResumeAll+0x134>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d010      	beq.n	800bd80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd5e:	f000 f847 	bl	800bdf0 <xTaskIncrementTick>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd68:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <xTaskResumeAll+0x130>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1f1      	bne.n	800bd5e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bd7a:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <xTaskResumeAll+0x134>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd80:	4b10      	ldr	r3, [pc, #64]	; (800bdc4 <xTaskResumeAll+0x130>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d009      	beq.n	800bd9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <xTaskResumeAll+0x138>)
 800bd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd9c:	f000 fe96 	bl	800cacc <vPortExitCritical>

	return xAlreadyYielded;
 800bda0:	68bb      	ldr	r3, [r7, #8]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20000670 	.word	0x20000670
 800bdb0:	20000648 	.word	0x20000648
 800bdb4:	20000608 	.word	0x20000608
 800bdb8:	20000650 	.word	0x20000650
 800bdbc:	2000054c 	.word	0x2000054c
 800bdc0:	20000548 	.word	0x20000548
 800bdc4:	2000065c 	.word	0x2000065c
 800bdc8:	20000658 	.word	0x20000658
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdd6:	4b05      	ldr	r3, [pc, #20]	; (800bdec <xTaskGetTickCount+0x1c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bddc:	687b      	ldr	r3, [r7, #4]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	2000064c 	.word	0x2000064c

0800bdf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfa:	4b4f      	ldr	r3, [pc, #316]	; (800bf38 <xTaskIncrementTick+0x148>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f040 8089 	bne.w	800bf16 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be04:	4b4d      	ldr	r3, [pc, #308]	; (800bf3c <xTaskIncrementTick+0x14c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be0c:	4a4b      	ldr	r2, [pc, #300]	; (800bf3c <xTaskIncrementTick+0x14c>)
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d121      	bne.n	800be5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800be18:	4b49      	ldr	r3, [pc, #292]	; (800bf40 <xTaskIncrementTick+0x150>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00b      	beq.n	800be3a <xTaskIncrementTick+0x4a>
 800be22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be26:	b672      	cpsid	i
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	b662      	cpsie	i
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	e7fe      	b.n	800be38 <xTaskIncrementTick+0x48>
 800be3a:	4b41      	ldr	r3, [pc, #260]	; (800bf40 <xTaskIncrementTick+0x150>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	4b40      	ldr	r3, [pc, #256]	; (800bf44 <xTaskIncrementTick+0x154>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a3e      	ldr	r2, [pc, #248]	; (800bf40 <xTaskIncrementTick+0x150>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	4a3e      	ldr	r2, [pc, #248]	; (800bf44 <xTaskIncrementTick+0x154>)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	4b3e      	ldr	r3, [pc, #248]	; (800bf48 <xTaskIncrementTick+0x158>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a3c      	ldr	r2, [pc, #240]	; (800bf48 <xTaskIncrementTick+0x158>)
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	f000 faa4 	bl	800c3a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be5c:	4b3b      	ldr	r3, [pc, #236]	; (800bf4c <xTaskIncrementTick+0x15c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	429a      	cmp	r2, r3
 800be64:	d348      	bcc.n	800bef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <xTaskIncrementTick+0x150>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	4b36      	ldr	r3, [pc, #216]	; (800bf4c <xTaskIncrementTick+0x15c>)
 800be72:	f04f 32ff 	mov.w	r2, #4294967295
 800be76:	601a      	str	r2, [r3, #0]
					break;
 800be78:	e03e      	b.n	800bef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7a:	4b31      	ldr	r3, [pc, #196]	; (800bf40 <xTaskIncrementTick+0x150>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d203      	bcs.n	800be9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be92:	4a2e      	ldr	r2, [pc, #184]	; (800bf4c <xTaskIncrementTick+0x15c>)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be98:	e02e      	b.n	800bef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe ff67 	bl	800ad72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3318      	adds	r3, #24
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe ff5e 	bl	800ad72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	2201      	movs	r2, #1
 800bebc:	409a      	lsls	r2, r3
 800bebe:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <xTaskIncrementTick+0x160>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	4a22      	ldr	r2, [pc, #136]	; (800bf50 <xTaskIncrementTick+0x160>)
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4a1f      	ldr	r2, [pc, #124]	; (800bf54 <xTaskIncrementTick+0x164>)
 800bed6:	441a      	add	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	3304      	adds	r3, #4
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f7fe feea 	bl	800acb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee8:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <xTaskIncrementTick+0x168>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	429a      	cmp	r2, r3
 800bef0:	d3b9      	bcc.n	800be66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bef2:	2301      	movs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bef6:	e7b6      	b.n	800be66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bef8:	4b17      	ldr	r3, [pc, #92]	; (800bf58 <xTaskIncrementTick+0x168>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	4915      	ldr	r1, [pc, #84]	; (800bf54 <xTaskIncrementTick+0x164>)
 800bf00:	4613      	mov	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d907      	bls.n	800bf20 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800bf10:	2301      	movs	r3, #1
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	e004      	b.n	800bf20 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf16:	4b11      	ldr	r3, [pc, #68]	; (800bf5c <xTaskIncrementTick+0x16c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	4a0f      	ldr	r2, [pc, #60]	; (800bf5c <xTaskIncrementTick+0x16c>)
 800bf1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf20:	4b0f      	ldr	r3, [pc, #60]	; (800bf60 <xTaskIncrementTick+0x170>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf2c:	697b      	ldr	r3, [r7, #20]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000670 	.word	0x20000670
 800bf3c:	2000064c 	.word	0x2000064c
 800bf40:	20000600 	.word	0x20000600
 800bf44:	20000604 	.word	0x20000604
 800bf48:	20000660 	.word	0x20000660
 800bf4c:	20000668 	.word	0x20000668
 800bf50:	20000650 	.word	0x20000650
 800bf54:	2000054c 	.word	0x2000054c
 800bf58:	20000548 	.word	0x20000548
 800bf5c:	20000658 	.word	0x20000658
 800bf60:	2000065c 	.word	0x2000065c

0800bf64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf6a:	4b27      	ldr	r3, [pc, #156]	; (800c008 <vTaskSwitchContext+0xa4>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf72:	4b26      	ldr	r3, [pc, #152]	; (800c00c <vTaskSwitchContext+0xa8>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf78:	e040      	b.n	800bffc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bf7a:	4b24      	ldr	r3, [pc, #144]	; (800c00c <vTaskSwitchContext+0xa8>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf80:	4b23      	ldr	r3, [pc, #140]	; (800c010 <vTaskSwitchContext+0xac>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	fab3 f383 	clz	r3, r3
 800bf8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf8e:	7afb      	ldrb	r3, [r7, #11]
 800bf90:	f1c3 031f 	rsb	r3, r3, #31
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	491f      	ldr	r1, [pc, #124]	; (800c014 <vTaskSwitchContext+0xb0>)
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10b      	bne.n	800bfc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	b672      	cpsid	i
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	b662      	cpsie	i
 800bfbe:	607b      	str	r3, [r7, #4]
 800bfc0:	e7fe      	b.n	800bfc0 <vTaskSwitchContext+0x5c>
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4a11      	ldr	r2, [pc, #68]	; (800c014 <vTaskSwitchContext+0xb0>)
 800bfce:	4413      	add	r3, r2
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	605a      	str	r2, [r3, #4]
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d104      	bne.n	800bff2 <vTaskSwitchContext+0x8e>
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	605a      	str	r2, [r3, #4]
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	4a07      	ldr	r2, [pc, #28]	; (800c018 <vTaskSwitchContext+0xb4>)
 800bffa:	6013      	str	r3, [r2, #0]
}
 800bffc:	bf00      	nop
 800bffe:	371c      	adds	r7, #28
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	20000670 	.word	0x20000670
 800c00c:	2000065c 	.word	0x2000065c
 800c010:	20000650 	.word	0x20000650
 800c014:	2000054c 	.word	0x2000054c
 800c018:	20000548 	.word	0x20000548

0800c01c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <vTaskPlaceOnEventList+0x28>
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	b672      	cpsid	i
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	b662      	cpsie	i
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	e7fe      	b.n	800c042 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c044:	4b07      	ldr	r3, [pc, #28]	; (800c064 <vTaskPlaceOnEventList+0x48>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3318      	adds	r3, #24
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7fe fe57 	bl	800ad00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c052:	2101      	movs	r1, #1
 800c054:	6838      	ldr	r0, [r7, #0]
 800c056:	f000 fb9b 	bl	800c790 <prvAddCurrentTaskToDelayedList>
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20000548 	.word	0x20000548

0800c068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <xTaskRemoveFromEventList+0x2e>
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	b672      	cpsid	i
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	b662      	cpsie	i
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	e7fe      	b.n	800c094 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	3318      	adds	r3, #24
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fe69 	bl	800ad72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0a0:	4b1d      	ldr	r3, [pc, #116]	; (800c118 <xTaskRemoveFromEventList+0xb0>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d11c      	bne.n	800c0e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fe fe60 	bl	800ad72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	409a      	lsls	r2, r3
 800c0ba:	4b18      	ldr	r3, [pc, #96]	; (800c11c <xTaskRemoveFromEventList+0xb4>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	4a16      	ldr	r2, [pc, #88]	; (800c11c <xTaskRemoveFromEventList+0xb4>)
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4a13      	ldr	r2, [pc, #76]	; (800c120 <xTaskRemoveFromEventList+0xb8>)
 800c0d2:	441a      	add	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4610      	mov	r0, r2
 800c0dc:	f7fe fdec 	bl	800acb8 <vListInsertEnd>
 800c0e0:	e005      	b.n	800c0ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	3318      	adds	r3, #24
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	480e      	ldr	r0, [pc, #56]	; (800c124 <xTaskRemoveFromEventList+0xbc>)
 800c0ea:	f7fe fde5 	bl	800acb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <xTaskRemoveFromEventList+0xc0>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d905      	bls.n	800c108 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <xTaskRemoveFromEventList+0xc4>)
 800c102:	2201      	movs	r2, #1
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	e001      	b.n	800c10c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c108:	2300      	movs	r3, #0
 800c10a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c10c:	697b      	ldr	r3, [r7, #20]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20000670 	.word	0x20000670
 800c11c:	20000650 	.word	0x20000650
 800c120:	2000054c 	.word	0x2000054c
 800c124:	20000608 	.word	0x20000608
 800c128:	20000548 	.word	0x20000548
 800c12c:	2000065c 	.word	0x2000065c

0800c130 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <vTaskInternalSetTimeOutState+0x24>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c140:	4b05      	ldr	r3, [pc, #20]	; (800c158 <vTaskInternalSetTimeOutState+0x28>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	605a      	str	r2, [r3, #4]
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	20000660 	.word	0x20000660
 800c158:	2000064c 	.word	0x2000064c

0800c15c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10b      	bne.n	800c184 <xTaskCheckForTimeOut+0x28>
 800c16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c170:	b672      	cpsid	i
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	b662      	cpsie	i
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	e7fe      	b.n	800c182 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <xTaskCheckForTimeOut+0x46>
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	b672      	cpsid	i
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	b662      	cpsie	i
 800c19e:	60fb      	str	r3, [r7, #12]
 800c1a0:	e7fe      	b.n	800c1a0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800c1a2:	f000 fc61 	bl	800ca68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1a6:	4b1d      	ldr	r3, [pc, #116]	; (800c21c <xTaskCheckForTimeOut+0xc0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d102      	bne.n	800c1c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	61fb      	str	r3, [r7, #28]
 800c1c4:	e023      	b.n	800c20e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <xTaskCheckForTimeOut+0xc4>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d007      	beq.n	800c1e2 <xTaskCheckForTimeOut+0x86>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d302      	bcc.n	800c1e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	61fb      	str	r3, [r7, #28]
 800c1e0:	e015      	b.n	800c20e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d20b      	bcs.n	800c204 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ff99 	bl	800c130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	e004      	b.n	800c20e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c20a:	2301      	movs	r3, #1
 800c20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c20e:	f000 fc5d 	bl	800cacc <vPortExitCritical>

	return xReturn;
 800c212:	69fb      	ldr	r3, [r7, #28]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3720      	adds	r7, #32
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	2000064c 	.word	0x2000064c
 800c220:	20000660 	.word	0x20000660

0800c224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c228:	4b03      	ldr	r3, [pc, #12]	; (800c238 <vTaskMissedYield+0x14>)
 800c22a:	2201      	movs	r2, #1
 800c22c:	601a      	str	r2, [r3, #0]
}
 800c22e:	bf00      	nop
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	2000065c 	.word	0x2000065c

0800c23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c244:	f000 f852 	bl	800c2ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c248:	4b06      	ldr	r3, [pc, #24]	; (800c264 <prvIdleTask+0x28>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d9f9      	bls.n	800c244 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <prvIdleTask+0x2c>)
 800c252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c260:	e7f0      	b.n	800c244 <prvIdleTask+0x8>
 800c262:	bf00      	nop
 800c264:	2000054c 	.word	0x2000054c
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c272:	2300      	movs	r3, #0
 800c274:	607b      	str	r3, [r7, #4]
 800c276:	e00c      	b.n	800c292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4a12      	ldr	r2, [pc, #72]	; (800c2cc <prvInitialiseTaskLists+0x60>)
 800c284:	4413      	add	r3, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fce9 	bl	800ac5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3301      	adds	r3, #1
 800c290:	607b      	str	r3, [r7, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b06      	cmp	r3, #6
 800c296:	d9ef      	bls.n	800c278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c298:	480d      	ldr	r0, [pc, #52]	; (800c2d0 <prvInitialiseTaskLists+0x64>)
 800c29a:	f7fe fce0 	bl	800ac5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c29e:	480d      	ldr	r0, [pc, #52]	; (800c2d4 <prvInitialiseTaskLists+0x68>)
 800c2a0:	f7fe fcdd 	bl	800ac5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2a4:	480c      	ldr	r0, [pc, #48]	; (800c2d8 <prvInitialiseTaskLists+0x6c>)
 800c2a6:	f7fe fcda 	bl	800ac5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2aa:	480c      	ldr	r0, [pc, #48]	; (800c2dc <prvInitialiseTaskLists+0x70>)
 800c2ac:	f7fe fcd7 	bl	800ac5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2b0:	480b      	ldr	r0, [pc, #44]	; (800c2e0 <prvInitialiseTaskLists+0x74>)
 800c2b2:	f7fe fcd4 	bl	800ac5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <prvInitialiseTaskLists+0x78>)
 800c2b8:	4a05      	ldr	r2, [pc, #20]	; (800c2d0 <prvInitialiseTaskLists+0x64>)
 800c2ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <prvInitialiseTaskLists+0x7c>)
 800c2be:	4a05      	ldr	r2, [pc, #20]	; (800c2d4 <prvInitialiseTaskLists+0x68>)
 800c2c0:	601a      	str	r2, [r3, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	2000054c 	.word	0x2000054c
 800c2d0:	200005d8 	.word	0x200005d8
 800c2d4:	200005ec 	.word	0x200005ec
 800c2d8:	20000608 	.word	0x20000608
 800c2dc:	2000061c 	.word	0x2000061c
 800c2e0:	20000634 	.word	0x20000634
 800c2e4:	20000600 	.word	0x20000600
 800c2e8:	20000604 	.word	0x20000604

0800c2ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2f2:	e019      	b.n	800c328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2f4:	f000 fbb8 	bl	800ca68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <prvCheckTasksWaitingTermination+0x4c>)
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3304      	adds	r3, #4
 800c304:	4618      	mov	r0, r3
 800c306:	f7fe fd34 	bl	800ad72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c30a:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <prvCheckTasksWaitingTermination+0x50>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3b01      	subs	r3, #1
 800c310:	4a0a      	ldr	r2, [pc, #40]	; (800c33c <prvCheckTasksWaitingTermination+0x50>)
 800c312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c314:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <prvCheckTasksWaitingTermination+0x54>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3b01      	subs	r3, #1
 800c31a:	4a09      	ldr	r2, [pc, #36]	; (800c340 <prvCheckTasksWaitingTermination+0x54>)
 800c31c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c31e:	f000 fbd5 	bl	800cacc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f80e 	bl	800c344 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <prvCheckTasksWaitingTermination+0x54>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e1      	bne.n	800c2f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	2000061c 	.word	0x2000061c
 800c33c:	20000648 	.word	0x20000648
 800c340:	20000630 	.word	0x20000630

0800c344 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c352:	2b00      	cmp	r3, #0
 800c354:	d108      	bne.n	800c368 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 fd2c 	bl	800cdb8 <vPortFree>
				vPortFree( pxTCB );
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fd29 	bl	800cdb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c366:	e019      	b.n	800c39c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d103      	bne.n	800c37a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fd20 	bl	800cdb8 <vPortFree>
	}
 800c378:	e010      	b.n	800c39c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c380:	2b02      	cmp	r3, #2
 800c382:	d00b      	beq.n	800c39c <prvDeleteTCB+0x58>
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	b672      	cpsid	i
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	b662      	cpsie	i
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	e7fe      	b.n	800c39a <prvDeleteTCB+0x56>
	}
 800c39c:	bf00      	nop
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3aa:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <prvResetNextTaskUnblockTime+0x38>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d104      	bne.n	800c3be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3bc:	e008      	b.n	800c3d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3be:	4b07      	ldr	r3, [pc, #28]	; (800c3dc <prvResetNextTaskUnblockTime+0x38>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ce:	6013      	str	r3, [r2, #0]
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20000600 	.word	0x20000600
 800c3e0:	20000668 	.word	0x20000668

0800c3e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ea:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <xTaskGetSchedulerState+0x34>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	e008      	b.n	800c40a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f8:	4b08      	ldr	r3, [pc, #32]	; (800c41c <xTaskGetSchedulerState+0x38>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c400:	2302      	movs	r3, #2
 800c402:	607b      	str	r3, [r7, #4]
 800c404:	e001      	b.n	800c40a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c406:	2300      	movs	r3, #0
 800c408:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c40a:	687b      	ldr	r3, [r7, #4]
	}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	20000654 	.word	0x20000654
 800c41c:	20000670 	.word	0x20000670

0800c420 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d069      	beq.n	800c50a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	4b36      	ldr	r3, [pc, #216]	; (800c514 <xTaskPriorityInherit+0xf4>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	429a      	cmp	r2, r3
 800c442:	d259      	bcs.n	800c4f8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db06      	blt.n	800c45a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44c:	4b31      	ldr	r3, [pc, #196]	; (800c514 <xTaskPriorityInherit+0xf4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	f1c3 0207 	rsb	r2, r3, #7
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	6959      	ldr	r1, [r3, #20]
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c462:	4613      	mov	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4a2b      	ldr	r2, [pc, #172]	; (800c518 <xTaskPriorityInherit+0xf8>)
 800c46c:	4413      	add	r3, r2
 800c46e:	4299      	cmp	r1, r3
 800c470:	d13a      	bne.n	800c4e8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	3304      	adds	r3, #4
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe fc7b 	bl	800ad72 <uxListRemove>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d115      	bne.n	800c4ae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	4924      	ldr	r1, [pc, #144]	; (800c518 <xTaskPriorityInherit+0xf8>)
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xTaskPriorityInherit+0x8e>
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	2201      	movs	r2, #1
 800c49e:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a2:	43da      	mvns	r2, r3
 800c4a4:	4b1d      	ldr	r3, [pc, #116]	; (800c51c <xTaskPriorityInherit+0xfc>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	4a1c      	ldr	r2, [pc, #112]	; (800c51c <xTaskPriorityInherit+0xfc>)
 800c4ac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4ae:	4b19      	ldr	r3, [pc, #100]	; (800c514 <xTaskPriorityInherit+0xf4>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4bc:	2201      	movs	r2, #1
 800c4be:	409a      	lsls	r2, r3
 800c4c0:	4b16      	ldr	r3, [pc, #88]	; (800c51c <xTaskPriorityInherit+0xfc>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	4a15      	ldr	r2, [pc, #84]	; (800c51c <xTaskPriorityInherit+0xfc>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4a10      	ldr	r2, [pc, #64]	; (800c518 <xTaskPriorityInherit+0xf8>)
 800c4d8:	441a      	add	r2, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f7fe fbe9 	bl	800acb8 <vListInsertEnd>
 800c4e6:	e004      	b.n	800c4f2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <xTaskPriorityInherit+0xf4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	60fb      	str	r3, [r7, #12]
 800c4f6:	e008      	b.n	800c50a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4fc:	4b05      	ldr	r3, [pc, #20]	; (800c514 <xTaskPriorityInherit+0xf4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	429a      	cmp	r2, r3
 800c504:	d201      	bcs.n	800c50a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c506:	2301      	movs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c50a:	68fb      	ldr	r3, [r7, #12]
	}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000548 	.word	0x20000548
 800c518:	2000054c 	.word	0x2000054c
 800c51c:	20000650 	.word	0x20000650

0800c520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d070      	beq.n	800c618 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c536:	4b3b      	ldr	r3, [pc, #236]	; (800c624 <xTaskPriorityDisinherit+0x104>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d00b      	beq.n	800c558 <xTaskPriorityDisinherit+0x38>
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	b672      	cpsid	i
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	b662      	cpsie	i
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e7fe      	b.n	800c556 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <xTaskPriorityDisinherit+0x58>
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	b672      	cpsid	i
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	b662      	cpsie	i
 800c574:	60bb      	str	r3, [r7, #8]
 800c576:	e7fe      	b.n	800c576 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c57c:	1e5a      	subs	r2, r3, #1
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d044      	beq.n	800c618 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c592:	2b00      	cmp	r3, #0
 800c594:	d140      	bne.n	800c618 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	3304      	adds	r3, #4
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fe fbe9 	bl	800ad72 <uxListRemove>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d115      	bne.n	800c5d2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5aa:	491f      	ldr	r1, [pc, #124]	; (800c628 <xTaskPriorityDisinherit+0x108>)
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	440b      	add	r3, r1
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10a      	bne.n	800c5d2 <xTaskPriorityDisinherit+0xb2>
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c6:	43da      	mvns	r2, r3
 800c5c8:	4b18      	ldr	r3, [pc, #96]	; (800c62c <xTaskPriorityDisinherit+0x10c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	4a17      	ldr	r2, [pc, #92]	; (800c62c <xTaskPriorityDisinherit+0x10c>)
 800c5d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5de:	f1c3 0207 	rsb	r2, r3, #7
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	409a      	lsls	r2, r3
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <xTaskPriorityDisinherit+0x10c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	; (800c62c <xTaskPriorityDisinherit+0x10c>)
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4a08      	ldr	r2, [pc, #32]	; (800c628 <xTaskPriorityDisinherit+0x108>)
 800c606:	441a      	add	r2, r3
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3304      	adds	r3, #4
 800c60c:	4619      	mov	r1, r3
 800c60e:	4610      	mov	r0, r2
 800c610:	f7fe fb52 	bl	800acb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c614:	2301      	movs	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c618:	697b      	ldr	r3, [r7, #20]
	}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20000548 	.word	0x20000548
 800c628:	2000054c 	.word	0x2000054c
 800c62c:	20000650 	.word	0x20000650

0800c630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c630:	b580      	push	{r7, lr}
 800c632:	b088      	sub	sp, #32
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c63e:	2301      	movs	r3, #1
 800c640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 8085 	beq.w	800c754 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10b      	bne.n	800c66a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	e7fe      	b.n	800c668 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d902      	bls.n	800c67a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	e002      	b.n	800c680 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c67e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	429a      	cmp	r2, r3
 800c688:	d064      	beq.n	800c754 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	429a      	cmp	r2, r3
 800c692:	d15f      	bne.n	800c754 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c694:	4b31      	ldr	r3, [pc, #196]	; (800c75c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d10b      	bne.n	800c6b6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	b672      	cpsid	i
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	b662      	cpsie	i
 800c6b2:	60bb      	str	r3, [r7, #8]
 800c6b4:	e7fe      	b.n	800c6b4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	69fa      	ldr	r2, [r7, #28]
 800c6c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	db04      	blt.n	800c6d4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	f1c3 0207 	rsb	r2, r3, #7
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	6959      	ldr	r1, [r3, #20]
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4a1f      	ldr	r2, [pc, #124]	; (800c760 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c6e4:	4413      	add	r3, r2
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	d134      	bne.n	800c754 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fb3f 	bl	800ad72 <uxListRemove>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d115      	bne.n	800c726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fe:	4918      	ldr	r1, [pc, #96]	; (800c760 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c700:	4613      	mov	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10a      	bne.n	800c726 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c714:	2201      	movs	r2, #1
 800c716:	fa02 f303 	lsl.w	r3, r2, r3
 800c71a:	43da      	mvns	r2, r3
 800c71c:	4b11      	ldr	r3, [pc, #68]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4013      	ands	r3, r2
 800c722:	4a10      	ldr	r2, [pc, #64]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c724:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72a:	2201      	movs	r2, #1
 800c72c:	409a      	lsls	r2, r3
 800c72e:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4313      	orrs	r3, r2
 800c734:	4a0b      	ldr	r2, [pc, #44]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4a06      	ldr	r2, [pc, #24]	; (800c760 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c746:	441a      	add	r2, r3
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f7fe fab2 	bl	800acb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c754:	bf00      	nop
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	20000548 	.word	0x20000548
 800c760:	2000054c 	.word	0x2000054c
 800c764:	20000650 	.word	0x20000650

0800c768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c768:	b480      	push	{r7}
 800c76a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c76c:	4b07      	ldr	r3, [pc, #28]	; (800c78c <pvTaskIncrementMutexHeldCount+0x24>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d004      	beq.n	800c77e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <pvTaskIncrementMutexHeldCount+0x24>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c77a:	3201      	adds	r2, #1
 800c77c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c77e:	4b03      	ldr	r3, [pc, #12]	; (800c78c <pvTaskIncrementMutexHeldCount+0x24>)
 800c780:	681b      	ldr	r3, [r3, #0]
	}
 800c782:	4618      	mov	r0, r3
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	20000548 	.word	0x20000548

0800c790 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c79a:	4b29      	ldr	r3, [pc, #164]	; (800c840 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fae3 	bl	800ad72 <uxListRemove>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10b      	bne.n	800c7ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7b2:	4b24      	ldr	r3, [pc, #144]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c7be:	43da      	mvns	r2, r3
 800c7c0:	4b21      	ldr	r3, [pc, #132]	; (800c848 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	4a20      	ldr	r2, [pc, #128]	; (800c848 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d0:	d10a      	bne.n	800c7e8 <prvAddCurrentTaskToDelayedList+0x58>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d007      	beq.n	800c7e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	4619      	mov	r1, r3
 800c7e0:	481a      	ldr	r0, [pc, #104]	; (800c84c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c7e2:	f7fe fa69 	bl	800acb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7e6:	e026      	b.n	800c836 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7f0:	4b14      	ldr	r3, [pc, #80]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d209      	bcs.n	800c814 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c800:	4b13      	ldr	r3, [pc, #76]	; (800c850 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3304      	adds	r3, #4
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7fe fa77 	bl	800ad00 <vListInsert>
}
 800c812:	e010      	b.n	800c836 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c814:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3304      	adds	r3, #4
 800c81e:	4619      	mov	r1, r3
 800c820:	4610      	mov	r0, r2
 800c822:	f7fe fa6d 	bl	800ad00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c826:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d202      	bcs.n	800c836 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c830:	4a09      	ldr	r2, [pc, #36]	; (800c858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6013      	str	r3, [r2, #0]
}
 800c836:	bf00      	nop
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	2000064c 	.word	0x2000064c
 800c844:	20000548 	.word	0x20000548
 800c848:	20000650 	.word	0x20000650
 800c84c:	20000634 	.word	0x20000634
 800c850:	20000604 	.word	0x20000604
 800c854:	20000600 	.word	0x20000600
 800c858:	20000668 	.word	0x20000668

0800c85c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3b04      	subs	r3, #4
 800c86c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3b04      	subs	r3, #4
 800c87a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f023 0201 	bic.w	r2, r3, #1
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3b04      	subs	r3, #4
 800c88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c88c:	4a0c      	ldr	r2, [pc, #48]	; (800c8c0 <pxPortInitialiseStack+0x64>)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3b14      	subs	r3, #20
 800c896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3b04      	subs	r3, #4
 800c8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f06f 0202 	mvn.w	r2, #2
 800c8aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3b20      	subs	r3, #32
 800c8b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	0800c8c5 	.word	0x0800c8c5

0800c8c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8ce:	4b13      	ldr	r3, [pc, #76]	; (800c91c <prvTaskExitError+0x58>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d6:	d00b      	beq.n	800c8f0 <prvTaskExitError+0x2c>
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	b672      	cpsid	i
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	b662      	cpsie	i
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	e7fe      	b.n	800c8ee <prvTaskExitError+0x2a>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c906:	bf00      	nop
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0fc      	beq.n	800c908 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	20000048 	.word	0x20000048

0800c920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c920:	4b07      	ldr	r3, [pc, #28]	; (800c940 <pxCurrentTCBConst2>)
 800c922:	6819      	ldr	r1, [r3, #0]
 800c924:	6808      	ldr	r0, [r1, #0]
 800c926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	f380 8809 	msr	PSP, r0
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f04f 0000 	mov.w	r0, #0
 800c936:	f380 8811 	msr	BASEPRI, r0
 800c93a:	4770      	bx	lr
 800c93c:	f3af 8000 	nop.w

0800c940 <pxCurrentTCBConst2>:
 800c940:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop

0800c948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c948:	4808      	ldr	r0, [pc, #32]	; (800c96c <prvPortStartFirstTask+0x24>)
 800c94a:	6800      	ldr	r0, [r0, #0]
 800c94c:	6800      	ldr	r0, [r0, #0]
 800c94e:	f380 8808 	msr	MSP, r0
 800c952:	f04f 0000 	mov.w	r0, #0
 800c956:	f380 8814 	msr	CONTROL, r0
 800c95a:	b662      	cpsie	i
 800c95c:	b661      	cpsie	f
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	df00      	svc	0
 800c968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c96a:	bf00      	nop
 800c96c:	e000ed08 	.word	0xe000ed08

0800c970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c976:	4b36      	ldr	r3, [pc, #216]	; (800ca50 <xPortStartScheduler+0xe0>)
 800c978:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	4b2e      	ldr	r3, [pc, #184]	; (800ca54 <xPortStartScheduler+0xe4>)
 800c99c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c99e:	4b2e      	ldr	r3, [pc, #184]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9a0:	2207      	movs	r2, #7
 800c9a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9a4:	e009      	b.n	800c9ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c9a6:	4b2c      	ldr	r3, [pc, #176]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4a2a      	ldr	r2, [pc, #168]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9b0:	78fb      	ldrb	r3, [r7, #3]
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9ba:	78fb      	ldrb	r3, [r7, #3]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9c2:	2b80      	cmp	r3, #128	; 0x80
 800c9c4:	d0ef      	beq.n	800c9a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9c6:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f1c3 0307 	rsb	r3, r3, #7
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d00b      	beq.n	800c9ea <xPortStartScheduler+0x7a>
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	b672      	cpsid	i
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	b662      	cpsie	i
 800c9e6:	60bb      	str	r3, [r7, #8]
 800c9e8:	e7fe      	b.n	800c9e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ea:	4b1b      	ldr	r3, [pc, #108]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	021b      	lsls	r3, r3, #8
 800c9f0:	4a19      	ldr	r2, [pc, #100]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9f4:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9fc:	4a16      	ldr	r2, [pc, #88]	; (800ca58 <xPortStartScheduler+0xe8>)
 800c9fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca08:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <xPortStartScheduler+0xec>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <xPortStartScheduler+0xec>)
 800ca0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca14:	4b11      	ldr	r3, [pc, #68]	; (800ca5c <xPortStartScheduler+0xec>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a10      	ldr	r2, [pc, #64]	; (800ca5c <xPortStartScheduler+0xec>)
 800ca1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca20:	f000 f8d4 	bl	800cbcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca24:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <xPortStartScheduler+0xf0>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca2a:	f000 f8f3 	bl	800cc14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca2e:	4b0d      	ldr	r3, [pc, #52]	; (800ca64 <xPortStartScheduler+0xf4>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a0c      	ldr	r2, [pc, #48]	; (800ca64 <xPortStartScheduler+0xf4>)
 800ca34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca3a:	f7ff ff85 	bl	800c948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca3e:	f7ff fa91 	bl	800bf64 <vTaskSwitchContext>
	prvTaskExitError();
 800ca42:	f7ff ff3f 	bl	800c8c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	e000e400 	.word	0xe000e400
 800ca54:	20000674 	.word	0x20000674
 800ca58:	20000678 	.word	0x20000678
 800ca5c:	e000ed20 	.word	0xe000ed20
 800ca60:	20000048 	.word	0x20000048
 800ca64:	e000ef34 	.word	0xe000ef34

0800ca68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	b672      	cpsid	i
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	b662      	cpsie	i
 800ca82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <vPortEnterCritical+0x5c>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	4a0e      	ldr	r2, [pc, #56]	; (800cac4 <vPortEnterCritical+0x5c>)
 800ca8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca8e:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <vPortEnterCritical+0x5c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d110      	bne.n	800cab8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <vPortEnterCritical+0x60>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00b      	beq.n	800cab8 <vPortEnterCritical+0x50>
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	b672      	cpsid	i
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	b662      	cpsie	i
 800cab4:	603b      	str	r3, [r7, #0]
 800cab6:	e7fe      	b.n	800cab6 <vPortEnterCritical+0x4e>
	}
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	20000048 	.word	0x20000048
 800cac8:	e000ed04 	.word	0xe000ed04

0800cacc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cad2:	4b12      	ldr	r3, [pc, #72]	; (800cb1c <vPortExitCritical+0x50>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10b      	bne.n	800caf2 <vPortExitCritical+0x26>
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	b672      	cpsid	i
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	b662      	cpsie	i
 800caee:	607b      	str	r3, [r7, #4]
 800caf0:	e7fe      	b.n	800caf0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800caf2:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <vPortExitCritical+0x50>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	4a08      	ldr	r2, [pc, #32]	; (800cb1c <vPortExitCritical+0x50>)
 800cafa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <vPortExitCritical+0x50>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d104      	bne.n	800cb0e <vPortExitCritical+0x42>
 800cb04:	2300      	movs	r3, #0
 800cb06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb0e:	bf00      	nop
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20000048 	.word	0x20000048

0800cb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb20:	f3ef 8009 	mrs	r0, PSP
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	4b15      	ldr	r3, [pc, #84]	; (800cb80 <pxCurrentTCBConst>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	f01e 0f10 	tst.w	lr, #16
 800cb30:	bf08      	it	eq
 800cb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	6010      	str	r0, [r2, #0]
 800cb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb44:	b672      	cpsid	i
 800cb46:	f380 8811 	msr	BASEPRI, r0
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	b662      	cpsie	i
 800cb54:	f7ff fa06 	bl	800bf64 <vTaskSwitchContext>
 800cb58:	f04f 0000 	mov.w	r0, #0
 800cb5c:	f380 8811 	msr	BASEPRI, r0
 800cb60:	bc09      	pop	{r0, r3}
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6a:	f01e 0f10 	tst.w	lr, #16
 800cb6e:	bf08      	it	eq
 800cb70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb74:	f380 8809 	msr	PSP, r0
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop

0800cb80 <pxCurrentTCBConst>:
 800cb80:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	b672      	cpsid	i
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	b662      	cpsie	i
 800cba2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cba4:	f7ff f924 	bl	800bdf0 <xTaskIncrementTick>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbae:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <SysTick_Handler+0x40>)
 800cbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	e000ed04 	.word	0xe000ed04

0800cbcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <vPortSetupTimerInterrupt+0x34>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <vPortSetupTimerInterrupt+0x38>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <vPortSetupTimerInterrupt+0x3c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <vPortSetupTimerInterrupt+0x40>)
 800cbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe6:	099b      	lsrs	r3, r3, #6
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <vPortSetupTimerInterrupt+0x44>)
 800cbea:	3b01      	subs	r3, #1
 800cbec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbee:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <vPortSetupTimerInterrupt+0x34>)
 800cbf0:	2207      	movs	r2, #7
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	e000e010 	.word	0xe000e010
 800cc04:	e000e018 	.word	0xe000e018
 800cc08:	2000003c 	.word	0x2000003c
 800cc0c:	10624dd3 	.word	0x10624dd3
 800cc10:	e000e014 	.word	0xe000e014

0800cc14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc24 <vPortEnableVFP+0x10>
 800cc18:	6801      	ldr	r1, [r0, #0]
 800cc1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc1e:	6001      	str	r1, [r0, #0]
 800cc20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc22:	bf00      	nop
 800cc24:	e000ed88 	.word	0xe000ed88

0800cc28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08a      	sub	sp, #40	; 0x28
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc34:	f7ff f820 	bl	800bc78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc38:	4b5a      	ldr	r3, [pc, #360]	; (800cda4 <pvPortMalloc+0x17c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc40:	f000 f916 	bl	800ce70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc44:	4b58      	ldr	r3, [pc, #352]	; (800cda8 <pvPortMalloc+0x180>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 8090 	bne.w	800cd72 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01e      	beq.n	800cc96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc58:	2208      	movs	r2, #8
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d015      	beq.n	800cc96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f023 0307 	bic.w	r3, r3, #7
 800cc70:	3308      	adds	r3, #8
 800cc72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00b      	beq.n	800cc96 <pvPortMalloc+0x6e>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	b672      	cpsid	i
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	b662      	cpsie	i
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	e7fe      	b.n	800cc94 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d06a      	beq.n	800cd72 <pvPortMalloc+0x14a>
 800cc9c:	4b43      	ldr	r3, [pc, #268]	; (800cdac <pvPortMalloc+0x184>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d865      	bhi.n	800cd72 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cca6:	4b42      	ldr	r3, [pc, #264]	; (800cdb0 <pvPortMalloc+0x188>)
 800cca8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ccaa:	4b41      	ldr	r3, [pc, #260]	; (800cdb0 <pvPortMalloc+0x188>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccb0:	e004      	b.n	800ccbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d903      	bls.n	800ccce <pvPortMalloc+0xa6>
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1f1      	bne.n	800ccb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccce:	4b35      	ldr	r3, [pc, #212]	; (800cda4 <pvPortMalloc+0x17c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d04c      	beq.n	800cd72 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccd8:	6a3b      	ldr	r3, [r7, #32]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2208      	movs	r2, #8
 800ccde:	4413      	add	r3, r2
 800cce0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	1ad2      	subs	r2, r2, r3
 800ccf2:	2308      	movs	r3, #8
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d920      	bls.n	800cd3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4413      	add	r3, r2
 800cd00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00b      	beq.n	800cd24 <pvPortMalloc+0xfc>
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	b672      	cpsid	i
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	b662      	cpsie	i
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	e7fe      	b.n	800cd22 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	1ad2      	subs	r2, r2, r3
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd36:	69b8      	ldr	r0, [r7, #24]
 800cd38:	f000 f8fc 	bl	800cf34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd3c:	4b1b      	ldr	r3, [pc, #108]	; (800cdac <pvPortMalloc+0x184>)
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	4a19      	ldr	r2, [pc, #100]	; (800cdac <pvPortMalloc+0x184>)
 800cd48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd4a:	4b18      	ldr	r3, [pc, #96]	; (800cdac <pvPortMalloc+0x184>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	4b19      	ldr	r3, [pc, #100]	; (800cdb4 <pvPortMalloc+0x18c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d203      	bcs.n	800cd5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd56:	4b15      	ldr	r3, [pc, #84]	; (800cdac <pvPortMalloc+0x184>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a16      	ldr	r2, [pc, #88]	; (800cdb4 <pvPortMalloc+0x18c>)
 800cd5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <pvPortMalloc+0x180>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	431a      	orrs	r2, r3
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	2200      	movs	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd72:	f7fe ff8f 	bl	800bc94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	f003 0307 	and.w	r3, r3, #7
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00b      	beq.n	800cd98 <pvPortMalloc+0x170>
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	b672      	cpsid	i
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	b662      	cpsie	i
 800cd94:	60fb      	str	r3, [r7, #12]
 800cd96:	e7fe      	b.n	800cd96 <pvPortMalloc+0x16e>
	return pvReturn;
 800cd98:	69fb      	ldr	r3, [r7, #28]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3728      	adds	r7, #40	; 0x28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20004284 	.word	0x20004284
 800cda8:	20004290 	.word	0x20004290
 800cdac:	20004288 	.word	0x20004288
 800cdb0:	2000427c 	.word	0x2000427c
 800cdb4:	2000428c 	.word	0x2000428c

0800cdb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d04a      	beq.n	800ce60 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdca:	2308      	movs	r3, #8
 800cdcc:	425b      	negs	r3, r3
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	4b22      	ldr	r3, [pc, #136]	; (800ce68 <vPortFree+0xb0>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4013      	ands	r3, r2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <vPortFree+0x46>
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	b672      	cpsid	i
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	b662      	cpsie	i
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	e7fe      	b.n	800cdfc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00b      	beq.n	800ce1e <vPortFree+0x66>
 800ce06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0a:	b672      	cpsid	i
 800ce0c:	f383 8811 	msr	BASEPRI, r3
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	b662      	cpsie	i
 800ce1a:	60bb      	str	r3, [r7, #8]
 800ce1c:	e7fe      	b.n	800ce1c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <vPortFree+0xb0>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4013      	ands	r3, r2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d019      	beq.n	800ce60 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d115      	bne.n	800ce60 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <vPortFree+0xb0>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	43db      	mvns	r3, r3
 800ce3e:	401a      	ands	r2, r3
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce44:	f7fe ff18 	bl	800bc78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <vPortFree+0xb4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4413      	add	r3, r2
 800ce52:	4a06      	ldr	r2, [pc, #24]	; (800ce6c <vPortFree+0xb4>)
 800ce54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce56:	6938      	ldr	r0, [r7, #16]
 800ce58:	f000 f86c 	bl	800cf34 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ce5c:	f7fe ff1a 	bl	800bc94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce60:	bf00      	nop
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20004290 	.word	0x20004290
 800ce6c:	20004288 	.word	0x20004288

0800ce70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce76:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce7c:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <prvHeapInit+0xac>)
 800ce7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00c      	beq.n	800cea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3307      	adds	r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f023 0307 	bic.w	r3, r3, #7
 800ce96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	4a1f      	ldr	r2, [pc, #124]	; (800cf1c <prvHeapInit+0xac>)
 800cea0:	4413      	add	r3, r2
 800cea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cea8:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <prvHeapInit+0xb0>)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ceae:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <prvHeapInit+0xb0>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	4413      	add	r3, r2
 800ceba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cebc:	2208      	movs	r2, #8
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f023 0307 	bic.w	r3, r3, #7
 800ceca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <prvHeapInit+0xb4>)
 800ced0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ced2:	4b14      	ldr	r3, [pc, #80]	; (800cf24 <prvHeapInit+0xb4>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2200      	movs	r2, #0
 800ced8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <prvHeapInit+0xb4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	1ad2      	subs	r2, r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cef0:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <prvHeapInit+0xb4>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4a0a      	ldr	r2, [pc, #40]	; (800cf28 <prvHeapInit+0xb8>)
 800cefe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	4a09      	ldr	r2, [pc, #36]	; (800cf2c <prvHeapInit+0xbc>)
 800cf06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf08:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <prvHeapInit+0xc0>)
 800cf0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf0e:	601a      	str	r2, [r3, #0]
}
 800cf10:	bf00      	nop
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	2000067c 	.word	0x2000067c
 800cf20:	2000427c 	.word	0x2000427c
 800cf24:	20004284 	.word	0x20004284
 800cf28:	2000428c 	.word	0x2000428c
 800cf2c:	20004288 	.word	0x20004288
 800cf30:	20004290 	.word	0x20004290

0800cf34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf3c:	4b28      	ldr	r3, [pc, #160]	; (800cfe0 <prvInsertBlockIntoFreeList+0xac>)
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e002      	b.n	800cf48 <prvInsertBlockIntoFreeList+0x14>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d8f7      	bhi.n	800cf42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d108      	bne.n	800cf76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	441a      	add	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d118      	bne.n	800cfbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d00d      	beq.n	800cfb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685a      	ldr	r2, [r3, #4]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	441a      	add	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	e008      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfb2:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	e003      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d002      	beq.n	800cfd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	2000427c 	.word	0x2000427c
 800cfe4:	20004284 	.word	0x20004284

0800cfe8 <__errno>:
 800cfe8:	4b01      	ldr	r3, [pc, #4]	; (800cff0 <__errno+0x8>)
 800cfea:	6818      	ldr	r0, [r3, #0]
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	2000004c 	.word	0x2000004c

0800cff4 <__libc_init_array>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	4e0d      	ldr	r6, [pc, #52]	; (800d02c <__libc_init_array+0x38>)
 800cff8:	4c0d      	ldr	r4, [pc, #52]	; (800d030 <__libc_init_array+0x3c>)
 800cffa:	1ba4      	subs	r4, r4, r6
 800cffc:	10a4      	asrs	r4, r4, #2
 800cffe:	2500      	movs	r5, #0
 800d000:	42a5      	cmp	r5, r4
 800d002:	d109      	bne.n	800d018 <__libc_init_array+0x24>
 800d004:	4e0b      	ldr	r6, [pc, #44]	; (800d034 <__libc_init_array+0x40>)
 800d006:	4c0c      	ldr	r4, [pc, #48]	; (800d038 <__libc_init_array+0x44>)
 800d008:	f000 fc28 	bl	800d85c <_init>
 800d00c:	1ba4      	subs	r4, r4, r6
 800d00e:	10a4      	asrs	r4, r4, #2
 800d010:	2500      	movs	r5, #0
 800d012:	42a5      	cmp	r5, r4
 800d014:	d105      	bne.n	800d022 <__libc_init_array+0x2e>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d01c:	4798      	blx	r3
 800d01e:	3501      	adds	r5, #1
 800d020:	e7ee      	b.n	800d000 <__libc_init_array+0xc>
 800d022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d026:	4798      	blx	r3
 800d028:	3501      	adds	r5, #1
 800d02a:	e7f2      	b.n	800d012 <__libc_init_array+0x1e>
 800d02c:	0800f8f4 	.word	0x0800f8f4
 800d030:	0800f8f4 	.word	0x0800f8f4
 800d034:	0800f8f4 	.word	0x0800f8f4
 800d038:	0800f8f8 	.word	0x0800f8f8

0800d03c <memcpy>:
 800d03c:	b510      	push	{r4, lr}
 800d03e:	1e43      	subs	r3, r0, #1
 800d040:	440a      	add	r2, r1
 800d042:	4291      	cmp	r1, r2
 800d044:	d100      	bne.n	800d048 <memcpy+0xc>
 800d046:	bd10      	pop	{r4, pc}
 800d048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d050:	e7f7      	b.n	800d042 <memcpy+0x6>

0800d052 <memset>:
 800d052:	4402      	add	r2, r0
 800d054:	4603      	mov	r3, r0
 800d056:	4293      	cmp	r3, r2
 800d058:	d100      	bne.n	800d05c <memset+0xa>
 800d05a:	4770      	bx	lr
 800d05c:	f803 1b01 	strb.w	r1, [r3], #1
 800d060:	e7f9      	b.n	800d056 <memset+0x4>
	...

0800d064 <siprintf>:
 800d064:	b40e      	push	{r1, r2, r3}
 800d066:	b500      	push	{lr}
 800d068:	b09c      	sub	sp, #112	; 0x70
 800d06a:	ab1d      	add	r3, sp, #116	; 0x74
 800d06c:	9002      	str	r0, [sp, #8]
 800d06e:	9006      	str	r0, [sp, #24]
 800d070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d074:	4809      	ldr	r0, [pc, #36]	; (800d09c <siprintf+0x38>)
 800d076:	9107      	str	r1, [sp, #28]
 800d078:	9104      	str	r1, [sp, #16]
 800d07a:	4909      	ldr	r1, [pc, #36]	; (800d0a0 <siprintf+0x3c>)
 800d07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d080:	9105      	str	r1, [sp, #20]
 800d082:	6800      	ldr	r0, [r0, #0]
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	a902      	add	r1, sp, #8
 800d088:	f000 f866 	bl	800d158 <_svfiprintf_r>
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	b01c      	add	sp, #112	; 0x70
 800d094:	f85d eb04 	ldr.w	lr, [sp], #4
 800d098:	b003      	add	sp, #12
 800d09a:	4770      	bx	lr
 800d09c:	2000004c 	.word	0x2000004c
 800d0a0:	ffff0208 	.word	0xffff0208

0800d0a4 <__ssputs_r>:
 800d0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a8:	688e      	ldr	r6, [r1, #8]
 800d0aa:	429e      	cmp	r6, r3
 800d0ac:	4682      	mov	sl, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	4690      	mov	r8, r2
 800d0b2:	4699      	mov	r9, r3
 800d0b4:	d837      	bhi.n	800d126 <__ssputs_r+0x82>
 800d0b6:	898a      	ldrh	r2, [r1, #12]
 800d0b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0bc:	d031      	beq.n	800d122 <__ssputs_r+0x7e>
 800d0be:	6825      	ldr	r5, [r4, #0]
 800d0c0:	6909      	ldr	r1, [r1, #16]
 800d0c2:	1a6f      	subs	r7, r5, r1
 800d0c4:	6965      	ldr	r5, [r4, #20]
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0d0:	f109 0301 	add.w	r3, r9, #1
 800d0d4:	443b      	add	r3, r7
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	bf38      	it	cc
 800d0da:	461d      	movcc	r5, r3
 800d0dc:	0553      	lsls	r3, r2, #21
 800d0de:	d530      	bpl.n	800d142 <__ssputs_r+0x9e>
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	f000 fb21 	bl	800d728 <_malloc_r>
 800d0e6:	4606      	mov	r6, r0
 800d0e8:	b950      	cbnz	r0, 800d100 <__ssputs_r+0x5c>
 800d0ea:	230c      	movs	r3, #12
 800d0ec:	f8ca 3000 	str.w	r3, [sl]
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f6:	81a3      	strh	r3, [r4, #12]
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d100:	463a      	mov	r2, r7
 800d102:	6921      	ldr	r1, [r4, #16]
 800d104:	f7ff ff9a 	bl	800d03c <memcpy>
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	6126      	str	r6, [r4, #16]
 800d116:	6165      	str	r5, [r4, #20]
 800d118:	443e      	add	r6, r7
 800d11a:	1bed      	subs	r5, r5, r7
 800d11c:	6026      	str	r6, [r4, #0]
 800d11e:	60a5      	str	r5, [r4, #8]
 800d120:	464e      	mov	r6, r9
 800d122:	454e      	cmp	r6, r9
 800d124:	d900      	bls.n	800d128 <__ssputs_r+0x84>
 800d126:	464e      	mov	r6, r9
 800d128:	4632      	mov	r2, r6
 800d12a:	4641      	mov	r1, r8
 800d12c:	6820      	ldr	r0, [r4, #0]
 800d12e:	f000 fa93 	bl	800d658 <memmove>
 800d132:	68a3      	ldr	r3, [r4, #8]
 800d134:	1b9b      	subs	r3, r3, r6
 800d136:	60a3      	str	r3, [r4, #8]
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	441e      	add	r6, r3
 800d13c:	6026      	str	r6, [r4, #0]
 800d13e:	2000      	movs	r0, #0
 800d140:	e7dc      	b.n	800d0fc <__ssputs_r+0x58>
 800d142:	462a      	mov	r2, r5
 800d144:	f000 fb4a 	bl	800d7dc <_realloc_r>
 800d148:	4606      	mov	r6, r0
 800d14a:	2800      	cmp	r0, #0
 800d14c:	d1e2      	bne.n	800d114 <__ssputs_r+0x70>
 800d14e:	6921      	ldr	r1, [r4, #16]
 800d150:	4650      	mov	r0, sl
 800d152:	f000 fa9b 	bl	800d68c <_free_r>
 800d156:	e7c8      	b.n	800d0ea <__ssputs_r+0x46>

0800d158 <_svfiprintf_r>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	461d      	mov	r5, r3
 800d15e:	898b      	ldrh	r3, [r1, #12]
 800d160:	061f      	lsls	r7, r3, #24
 800d162:	b09d      	sub	sp, #116	; 0x74
 800d164:	4680      	mov	r8, r0
 800d166:	460c      	mov	r4, r1
 800d168:	4616      	mov	r6, r2
 800d16a:	d50f      	bpl.n	800d18c <_svfiprintf_r+0x34>
 800d16c:	690b      	ldr	r3, [r1, #16]
 800d16e:	b96b      	cbnz	r3, 800d18c <_svfiprintf_r+0x34>
 800d170:	2140      	movs	r1, #64	; 0x40
 800d172:	f000 fad9 	bl	800d728 <_malloc_r>
 800d176:	6020      	str	r0, [r4, #0]
 800d178:	6120      	str	r0, [r4, #16]
 800d17a:	b928      	cbnz	r0, 800d188 <_svfiprintf_r+0x30>
 800d17c:	230c      	movs	r3, #12
 800d17e:	f8c8 3000 	str.w	r3, [r8]
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	e0c8      	b.n	800d31a <_svfiprintf_r+0x1c2>
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	6163      	str	r3, [r4, #20]
 800d18c:	2300      	movs	r3, #0
 800d18e:	9309      	str	r3, [sp, #36]	; 0x24
 800d190:	2320      	movs	r3, #32
 800d192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d196:	2330      	movs	r3, #48	; 0x30
 800d198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d19c:	9503      	str	r5, [sp, #12]
 800d19e:	f04f 0b01 	mov.w	fp, #1
 800d1a2:	4637      	mov	r7, r6
 800d1a4:	463d      	mov	r5, r7
 800d1a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1aa:	b10b      	cbz	r3, 800d1b0 <_svfiprintf_r+0x58>
 800d1ac:	2b25      	cmp	r3, #37	; 0x25
 800d1ae:	d13e      	bne.n	800d22e <_svfiprintf_r+0xd6>
 800d1b0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d1b4:	d00b      	beq.n	800d1ce <_svfiprintf_r+0x76>
 800d1b6:	4653      	mov	r3, sl
 800d1b8:	4632      	mov	r2, r6
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4640      	mov	r0, r8
 800d1be:	f7ff ff71 	bl	800d0a4 <__ssputs_r>
 800d1c2:	3001      	adds	r0, #1
 800d1c4:	f000 80a4 	beq.w	800d310 <_svfiprintf_r+0x1b8>
 800d1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ca:	4453      	add	r3, sl
 800d1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ce:	783b      	ldrb	r3, [r7, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 809d 	beq.w	800d310 <_svfiprintf_r+0x1b8>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	9307      	str	r3, [sp, #28]
 800d1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ea:	462f      	mov	r7, r5
 800d1ec:	2205      	movs	r2, #5
 800d1ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d1f2:	4850      	ldr	r0, [pc, #320]	; (800d334 <_svfiprintf_r+0x1dc>)
 800d1f4:	f7f3 f814 	bl	8000220 <memchr>
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	b9d0      	cbnz	r0, 800d232 <_svfiprintf_r+0xda>
 800d1fc:	06d9      	lsls	r1, r3, #27
 800d1fe:	bf44      	itt	mi
 800d200:	2220      	movmi	r2, #32
 800d202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d206:	071a      	lsls	r2, r3, #28
 800d208:	bf44      	itt	mi
 800d20a:	222b      	movmi	r2, #43	; 0x2b
 800d20c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d210:	782a      	ldrb	r2, [r5, #0]
 800d212:	2a2a      	cmp	r2, #42	; 0x2a
 800d214:	d015      	beq.n	800d242 <_svfiprintf_r+0xea>
 800d216:	9a07      	ldr	r2, [sp, #28]
 800d218:	462f      	mov	r7, r5
 800d21a:	2000      	movs	r0, #0
 800d21c:	250a      	movs	r5, #10
 800d21e:	4639      	mov	r1, r7
 800d220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d224:	3b30      	subs	r3, #48	; 0x30
 800d226:	2b09      	cmp	r3, #9
 800d228:	d94d      	bls.n	800d2c6 <_svfiprintf_r+0x16e>
 800d22a:	b1b8      	cbz	r0, 800d25c <_svfiprintf_r+0x104>
 800d22c:	e00f      	b.n	800d24e <_svfiprintf_r+0xf6>
 800d22e:	462f      	mov	r7, r5
 800d230:	e7b8      	b.n	800d1a4 <_svfiprintf_r+0x4c>
 800d232:	4a40      	ldr	r2, [pc, #256]	; (800d334 <_svfiprintf_r+0x1dc>)
 800d234:	1a80      	subs	r0, r0, r2
 800d236:	fa0b f000 	lsl.w	r0, fp, r0
 800d23a:	4318      	orrs	r0, r3
 800d23c:	9004      	str	r0, [sp, #16]
 800d23e:	463d      	mov	r5, r7
 800d240:	e7d3      	b.n	800d1ea <_svfiprintf_r+0x92>
 800d242:	9a03      	ldr	r2, [sp, #12]
 800d244:	1d11      	adds	r1, r2, #4
 800d246:	6812      	ldr	r2, [r2, #0]
 800d248:	9103      	str	r1, [sp, #12]
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	db01      	blt.n	800d252 <_svfiprintf_r+0xfa>
 800d24e:	9207      	str	r2, [sp, #28]
 800d250:	e004      	b.n	800d25c <_svfiprintf_r+0x104>
 800d252:	4252      	negs	r2, r2
 800d254:	f043 0302 	orr.w	r3, r3, #2
 800d258:	9207      	str	r2, [sp, #28]
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	783b      	ldrb	r3, [r7, #0]
 800d25e:	2b2e      	cmp	r3, #46	; 0x2e
 800d260:	d10c      	bne.n	800d27c <_svfiprintf_r+0x124>
 800d262:	787b      	ldrb	r3, [r7, #1]
 800d264:	2b2a      	cmp	r3, #42	; 0x2a
 800d266:	d133      	bne.n	800d2d0 <_svfiprintf_r+0x178>
 800d268:	9b03      	ldr	r3, [sp, #12]
 800d26a:	1d1a      	adds	r2, r3, #4
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	9203      	str	r2, [sp, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfb8      	it	lt
 800d274:	f04f 33ff 	movlt.w	r3, #4294967295
 800d278:	3702      	adds	r7, #2
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	4d2e      	ldr	r5, [pc, #184]	; (800d338 <_svfiprintf_r+0x1e0>)
 800d27e:	7839      	ldrb	r1, [r7, #0]
 800d280:	2203      	movs	r2, #3
 800d282:	4628      	mov	r0, r5
 800d284:	f7f2 ffcc 	bl	8000220 <memchr>
 800d288:	b138      	cbz	r0, 800d29a <_svfiprintf_r+0x142>
 800d28a:	2340      	movs	r3, #64	; 0x40
 800d28c:	1b40      	subs	r0, r0, r5
 800d28e:	fa03 f000 	lsl.w	r0, r3, r0
 800d292:	9b04      	ldr	r3, [sp, #16]
 800d294:	4303      	orrs	r3, r0
 800d296:	3701      	adds	r7, #1
 800d298:	9304      	str	r3, [sp, #16]
 800d29a:	7839      	ldrb	r1, [r7, #0]
 800d29c:	4827      	ldr	r0, [pc, #156]	; (800d33c <_svfiprintf_r+0x1e4>)
 800d29e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2a2:	2206      	movs	r2, #6
 800d2a4:	1c7e      	adds	r6, r7, #1
 800d2a6:	f7f2 ffbb 	bl	8000220 <memchr>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d038      	beq.n	800d320 <_svfiprintf_r+0x1c8>
 800d2ae:	4b24      	ldr	r3, [pc, #144]	; (800d340 <_svfiprintf_r+0x1e8>)
 800d2b0:	bb13      	cbnz	r3, 800d2f8 <_svfiprintf_r+0x1a0>
 800d2b2:	9b03      	ldr	r3, [sp, #12]
 800d2b4:	3307      	adds	r3, #7
 800d2b6:	f023 0307 	bic.w	r3, r3, #7
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	9303      	str	r3, [sp, #12]
 800d2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c0:	444b      	add	r3, r9
 800d2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c4:	e76d      	b.n	800d1a2 <_svfiprintf_r+0x4a>
 800d2c6:	fb05 3202 	mla	r2, r5, r2, r3
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	460f      	mov	r7, r1
 800d2ce:	e7a6      	b.n	800d21e <_svfiprintf_r+0xc6>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	3701      	adds	r7, #1
 800d2d4:	9305      	str	r3, [sp, #20]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	250a      	movs	r5, #10
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e0:	3a30      	subs	r2, #48	; 0x30
 800d2e2:	2a09      	cmp	r2, #9
 800d2e4:	d903      	bls.n	800d2ee <_svfiprintf_r+0x196>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0c8      	beq.n	800d27c <_svfiprintf_r+0x124>
 800d2ea:	9105      	str	r1, [sp, #20]
 800d2ec:	e7c6      	b.n	800d27c <_svfiprintf_r+0x124>
 800d2ee:	fb05 2101 	mla	r1, r5, r1, r2
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	e7f0      	b.n	800d2da <_svfiprintf_r+0x182>
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	4b11      	ldr	r3, [pc, #68]	; (800d344 <_svfiprintf_r+0x1ec>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4640      	mov	r0, r8
 800d304:	f3af 8000 	nop.w
 800d308:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d30c:	4681      	mov	r9, r0
 800d30e:	d1d6      	bne.n	800d2be <_svfiprintf_r+0x166>
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	065b      	lsls	r3, r3, #25
 800d314:	f53f af35 	bmi.w	800d182 <_svfiprintf_r+0x2a>
 800d318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d31a:	b01d      	add	sp, #116	; 0x74
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d320:	ab03      	add	r3, sp, #12
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4622      	mov	r2, r4
 800d326:	4b07      	ldr	r3, [pc, #28]	; (800d344 <_svfiprintf_r+0x1ec>)
 800d328:	a904      	add	r1, sp, #16
 800d32a:	4640      	mov	r0, r8
 800d32c:	f000 f882 	bl	800d434 <_printf_i>
 800d330:	e7ea      	b.n	800d308 <_svfiprintf_r+0x1b0>
 800d332:	bf00      	nop
 800d334:	0800f8b8 	.word	0x0800f8b8
 800d338:	0800f8be 	.word	0x0800f8be
 800d33c:	0800f8c2 	.word	0x0800f8c2
 800d340:	00000000 	.word	0x00000000
 800d344:	0800d0a5 	.word	0x0800d0a5

0800d348 <_printf_common>:
 800d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	4691      	mov	r9, r2
 800d34e:	461f      	mov	r7, r3
 800d350:	688a      	ldr	r2, [r1, #8]
 800d352:	690b      	ldr	r3, [r1, #16]
 800d354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d358:	4293      	cmp	r3, r2
 800d35a:	bfb8      	it	lt
 800d35c:	4613      	movlt	r3, r2
 800d35e:	f8c9 3000 	str.w	r3, [r9]
 800d362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d366:	4606      	mov	r6, r0
 800d368:	460c      	mov	r4, r1
 800d36a:	b112      	cbz	r2, 800d372 <_printf_common+0x2a>
 800d36c:	3301      	adds	r3, #1
 800d36e:	f8c9 3000 	str.w	r3, [r9]
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	0699      	lsls	r1, r3, #26
 800d376:	bf42      	ittt	mi
 800d378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d37c:	3302      	addmi	r3, #2
 800d37e:	f8c9 3000 	strmi.w	r3, [r9]
 800d382:	6825      	ldr	r5, [r4, #0]
 800d384:	f015 0506 	ands.w	r5, r5, #6
 800d388:	d107      	bne.n	800d39a <_printf_common+0x52>
 800d38a:	f104 0a19 	add.w	sl, r4, #25
 800d38e:	68e3      	ldr	r3, [r4, #12]
 800d390:	f8d9 2000 	ldr.w	r2, [r9]
 800d394:	1a9b      	subs	r3, r3, r2
 800d396:	42ab      	cmp	r3, r5
 800d398:	dc28      	bgt.n	800d3ec <_printf_common+0xa4>
 800d39a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	3300      	adds	r3, #0
 800d3a2:	bf18      	it	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	0692      	lsls	r2, r2, #26
 800d3a8:	d42d      	bmi.n	800d406 <_printf_common+0xbe>
 800d3aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3ae:	4639      	mov	r1, r7
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	47c0      	blx	r8
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d020      	beq.n	800d3fa <_printf_common+0xb2>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	68e5      	ldr	r5, [r4, #12]
 800d3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800d3c0:	f003 0306 	and.w	r3, r3, #6
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	bf08      	it	eq
 800d3c8:	1aad      	subeq	r5, r5, r2
 800d3ca:	68a3      	ldr	r3, [r4, #8]
 800d3cc:	6922      	ldr	r2, [r4, #16]
 800d3ce:	bf0c      	ite	eq
 800d3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3d4:	2500      	movne	r5, #0
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	bfc4      	itt	gt
 800d3da:	1a9b      	subgt	r3, r3, r2
 800d3dc:	18ed      	addgt	r5, r5, r3
 800d3de:	f04f 0900 	mov.w	r9, #0
 800d3e2:	341a      	adds	r4, #26
 800d3e4:	454d      	cmp	r5, r9
 800d3e6:	d11a      	bne.n	800d41e <_printf_common+0xd6>
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	e008      	b.n	800d3fe <_printf_common+0xb6>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4652      	mov	r2, sl
 800d3f0:	4639      	mov	r1, r7
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	47c0      	blx	r8
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d103      	bne.n	800d402 <_printf_common+0xba>
 800d3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d402:	3501      	adds	r5, #1
 800d404:	e7c3      	b.n	800d38e <_printf_common+0x46>
 800d406:	18e1      	adds	r1, r4, r3
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	2030      	movs	r0, #48	; 0x30
 800d40c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d410:	4422      	add	r2, r4
 800d412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d41a:	3302      	adds	r3, #2
 800d41c:	e7c5      	b.n	800d3aa <_printf_common+0x62>
 800d41e:	2301      	movs	r3, #1
 800d420:	4622      	mov	r2, r4
 800d422:	4639      	mov	r1, r7
 800d424:	4630      	mov	r0, r6
 800d426:	47c0      	blx	r8
 800d428:	3001      	adds	r0, #1
 800d42a:	d0e6      	beq.n	800d3fa <_printf_common+0xb2>
 800d42c:	f109 0901 	add.w	r9, r9, #1
 800d430:	e7d8      	b.n	800d3e4 <_printf_common+0x9c>
	...

0800d434 <_printf_i>:
 800d434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d43c:	460c      	mov	r4, r1
 800d43e:	7e09      	ldrb	r1, [r1, #24]
 800d440:	b085      	sub	sp, #20
 800d442:	296e      	cmp	r1, #110	; 0x6e
 800d444:	4617      	mov	r7, r2
 800d446:	4606      	mov	r6, r0
 800d448:	4698      	mov	r8, r3
 800d44a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d44c:	f000 80b3 	beq.w	800d5b6 <_printf_i+0x182>
 800d450:	d822      	bhi.n	800d498 <_printf_i+0x64>
 800d452:	2963      	cmp	r1, #99	; 0x63
 800d454:	d036      	beq.n	800d4c4 <_printf_i+0x90>
 800d456:	d80a      	bhi.n	800d46e <_printf_i+0x3a>
 800d458:	2900      	cmp	r1, #0
 800d45a:	f000 80b9 	beq.w	800d5d0 <_printf_i+0x19c>
 800d45e:	2958      	cmp	r1, #88	; 0x58
 800d460:	f000 8083 	beq.w	800d56a <_printf_i+0x136>
 800d464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d46c:	e032      	b.n	800d4d4 <_printf_i+0xa0>
 800d46e:	2964      	cmp	r1, #100	; 0x64
 800d470:	d001      	beq.n	800d476 <_printf_i+0x42>
 800d472:	2969      	cmp	r1, #105	; 0x69
 800d474:	d1f6      	bne.n	800d464 <_printf_i+0x30>
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	6813      	ldr	r3, [r2, #0]
 800d47a:	0605      	lsls	r5, r0, #24
 800d47c:	f103 0104 	add.w	r1, r3, #4
 800d480:	d52a      	bpl.n	800d4d8 <_printf_i+0xa4>
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6011      	str	r1, [r2, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	da03      	bge.n	800d492 <_printf_i+0x5e>
 800d48a:	222d      	movs	r2, #45	; 0x2d
 800d48c:	425b      	negs	r3, r3
 800d48e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d492:	486f      	ldr	r0, [pc, #444]	; (800d650 <_printf_i+0x21c>)
 800d494:	220a      	movs	r2, #10
 800d496:	e039      	b.n	800d50c <_printf_i+0xd8>
 800d498:	2973      	cmp	r1, #115	; 0x73
 800d49a:	f000 809d 	beq.w	800d5d8 <_printf_i+0x1a4>
 800d49e:	d808      	bhi.n	800d4b2 <_printf_i+0x7e>
 800d4a0:	296f      	cmp	r1, #111	; 0x6f
 800d4a2:	d020      	beq.n	800d4e6 <_printf_i+0xb2>
 800d4a4:	2970      	cmp	r1, #112	; 0x70
 800d4a6:	d1dd      	bne.n	800d464 <_printf_i+0x30>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	f043 0320 	orr.w	r3, r3, #32
 800d4ae:	6023      	str	r3, [r4, #0]
 800d4b0:	e003      	b.n	800d4ba <_printf_i+0x86>
 800d4b2:	2975      	cmp	r1, #117	; 0x75
 800d4b4:	d017      	beq.n	800d4e6 <_printf_i+0xb2>
 800d4b6:	2978      	cmp	r1, #120	; 0x78
 800d4b8:	d1d4      	bne.n	800d464 <_printf_i+0x30>
 800d4ba:	2378      	movs	r3, #120	; 0x78
 800d4bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4c0:	4864      	ldr	r0, [pc, #400]	; (800d654 <_printf_i+0x220>)
 800d4c2:	e055      	b.n	800d570 <_printf_i+0x13c>
 800d4c4:	6813      	ldr	r3, [r2, #0]
 800d4c6:	1d19      	adds	r1, r3, #4
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6011      	str	r1, [r2, #0]
 800d4cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e08c      	b.n	800d5f2 <_printf_i+0x1be>
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6011      	str	r1, [r2, #0]
 800d4dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4e0:	bf18      	it	ne
 800d4e2:	b21b      	sxthne	r3, r3
 800d4e4:	e7cf      	b.n	800d486 <_printf_i+0x52>
 800d4e6:	6813      	ldr	r3, [r2, #0]
 800d4e8:	6825      	ldr	r5, [r4, #0]
 800d4ea:	1d18      	adds	r0, r3, #4
 800d4ec:	6010      	str	r0, [r2, #0]
 800d4ee:	0628      	lsls	r0, r5, #24
 800d4f0:	d501      	bpl.n	800d4f6 <_printf_i+0xc2>
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	e002      	b.n	800d4fc <_printf_i+0xc8>
 800d4f6:	0668      	lsls	r0, r5, #25
 800d4f8:	d5fb      	bpl.n	800d4f2 <_printf_i+0xbe>
 800d4fa:	881b      	ldrh	r3, [r3, #0]
 800d4fc:	4854      	ldr	r0, [pc, #336]	; (800d650 <_printf_i+0x21c>)
 800d4fe:	296f      	cmp	r1, #111	; 0x6f
 800d500:	bf14      	ite	ne
 800d502:	220a      	movne	r2, #10
 800d504:	2208      	moveq	r2, #8
 800d506:	2100      	movs	r1, #0
 800d508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d50c:	6865      	ldr	r5, [r4, #4]
 800d50e:	60a5      	str	r5, [r4, #8]
 800d510:	2d00      	cmp	r5, #0
 800d512:	f2c0 8095 	blt.w	800d640 <_printf_i+0x20c>
 800d516:	6821      	ldr	r1, [r4, #0]
 800d518:	f021 0104 	bic.w	r1, r1, #4
 800d51c:	6021      	str	r1, [r4, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d13d      	bne.n	800d59e <_printf_i+0x16a>
 800d522:	2d00      	cmp	r5, #0
 800d524:	f040 808e 	bne.w	800d644 <_printf_i+0x210>
 800d528:	4665      	mov	r5, ip
 800d52a:	2a08      	cmp	r2, #8
 800d52c:	d10b      	bne.n	800d546 <_printf_i+0x112>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	07db      	lsls	r3, r3, #31
 800d532:	d508      	bpl.n	800d546 <_printf_i+0x112>
 800d534:	6923      	ldr	r3, [r4, #16]
 800d536:	6862      	ldr	r2, [r4, #4]
 800d538:	429a      	cmp	r2, r3
 800d53a:	bfde      	ittt	le
 800d53c:	2330      	movle	r3, #48	; 0x30
 800d53e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d542:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d546:	ebac 0305 	sub.w	r3, ip, r5
 800d54a:	6123      	str	r3, [r4, #16]
 800d54c:	f8cd 8000 	str.w	r8, [sp]
 800d550:	463b      	mov	r3, r7
 800d552:	aa03      	add	r2, sp, #12
 800d554:	4621      	mov	r1, r4
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff fef6 	bl	800d348 <_printf_common>
 800d55c:	3001      	adds	r0, #1
 800d55e:	d14d      	bne.n	800d5fc <_printf_i+0x1c8>
 800d560:	f04f 30ff 	mov.w	r0, #4294967295
 800d564:	b005      	add	sp, #20
 800d566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d56a:	4839      	ldr	r0, [pc, #228]	; (800d650 <_printf_i+0x21c>)
 800d56c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d570:	6813      	ldr	r3, [r2, #0]
 800d572:	6821      	ldr	r1, [r4, #0]
 800d574:	1d1d      	adds	r5, r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6015      	str	r5, [r2, #0]
 800d57a:	060a      	lsls	r2, r1, #24
 800d57c:	d50b      	bpl.n	800d596 <_printf_i+0x162>
 800d57e:	07ca      	lsls	r2, r1, #31
 800d580:	bf44      	itt	mi
 800d582:	f041 0120 	orrmi.w	r1, r1, #32
 800d586:	6021      	strmi	r1, [r4, #0]
 800d588:	b91b      	cbnz	r3, 800d592 <_printf_i+0x15e>
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	f022 0220 	bic.w	r2, r2, #32
 800d590:	6022      	str	r2, [r4, #0]
 800d592:	2210      	movs	r2, #16
 800d594:	e7b7      	b.n	800d506 <_printf_i+0xd2>
 800d596:	064d      	lsls	r5, r1, #25
 800d598:	bf48      	it	mi
 800d59a:	b29b      	uxthmi	r3, r3
 800d59c:	e7ef      	b.n	800d57e <_printf_i+0x14a>
 800d59e:	4665      	mov	r5, ip
 800d5a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a4:	fb02 3311 	mls	r3, r2, r1, r3
 800d5a8:	5cc3      	ldrb	r3, [r0, r3]
 800d5aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	d1f5      	bne.n	800d5a0 <_printf_i+0x16c>
 800d5b4:	e7b9      	b.n	800d52a <_printf_i+0xf6>
 800d5b6:	6813      	ldr	r3, [r2, #0]
 800d5b8:	6825      	ldr	r5, [r4, #0]
 800d5ba:	6961      	ldr	r1, [r4, #20]
 800d5bc:	1d18      	adds	r0, r3, #4
 800d5be:	6010      	str	r0, [r2, #0]
 800d5c0:	0628      	lsls	r0, r5, #24
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	d501      	bpl.n	800d5ca <_printf_i+0x196>
 800d5c6:	6019      	str	r1, [r3, #0]
 800d5c8:	e002      	b.n	800d5d0 <_printf_i+0x19c>
 800d5ca:	066a      	lsls	r2, r5, #25
 800d5cc:	d5fb      	bpl.n	800d5c6 <_printf_i+0x192>
 800d5ce:	8019      	strh	r1, [r3, #0]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6123      	str	r3, [r4, #16]
 800d5d4:	4665      	mov	r5, ip
 800d5d6:	e7b9      	b.n	800d54c <_printf_i+0x118>
 800d5d8:	6813      	ldr	r3, [r2, #0]
 800d5da:	1d19      	adds	r1, r3, #4
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	681d      	ldr	r5, [r3, #0]
 800d5e0:	6862      	ldr	r2, [r4, #4]
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f7f2 fe1b 	bl	8000220 <memchr>
 800d5ea:	b108      	cbz	r0, 800d5f0 <_printf_i+0x1bc>
 800d5ec:	1b40      	subs	r0, r0, r5
 800d5ee:	6060      	str	r0, [r4, #4]
 800d5f0:	6863      	ldr	r3, [r4, #4]
 800d5f2:	6123      	str	r3, [r4, #16]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5fa:	e7a7      	b.n	800d54c <_printf_i+0x118>
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	462a      	mov	r2, r5
 800d600:	4639      	mov	r1, r7
 800d602:	4630      	mov	r0, r6
 800d604:	47c0      	blx	r8
 800d606:	3001      	adds	r0, #1
 800d608:	d0aa      	beq.n	800d560 <_printf_i+0x12c>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	079b      	lsls	r3, r3, #30
 800d60e:	d413      	bmi.n	800d638 <_printf_i+0x204>
 800d610:	68e0      	ldr	r0, [r4, #12]
 800d612:	9b03      	ldr	r3, [sp, #12]
 800d614:	4298      	cmp	r0, r3
 800d616:	bfb8      	it	lt
 800d618:	4618      	movlt	r0, r3
 800d61a:	e7a3      	b.n	800d564 <_printf_i+0x130>
 800d61c:	2301      	movs	r3, #1
 800d61e:	464a      	mov	r2, r9
 800d620:	4639      	mov	r1, r7
 800d622:	4630      	mov	r0, r6
 800d624:	47c0      	blx	r8
 800d626:	3001      	adds	r0, #1
 800d628:	d09a      	beq.n	800d560 <_printf_i+0x12c>
 800d62a:	3501      	adds	r5, #1
 800d62c:	68e3      	ldr	r3, [r4, #12]
 800d62e:	9a03      	ldr	r2, [sp, #12]
 800d630:	1a9b      	subs	r3, r3, r2
 800d632:	42ab      	cmp	r3, r5
 800d634:	dcf2      	bgt.n	800d61c <_printf_i+0x1e8>
 800d636:	e7eb      	b.n	800d610 <_printf_i+0x1dc>
 800d638:	2500      	movs	r5, #0
 800d63a:	f104 0919 	add.w	r9, r4, #25
 800d63e:	e7f5      	b.n	800d62c <_printf_i+0x1f8>
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1ac      	bne.n	800d59e <_printf_i+0x16a>
 800d644:	7803      	ldrb	r3, [r0, #0]
 800d646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d64a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d64e:	e76c      	b.n	800d52a <_printf_i+0xf6>
 800d650:	0800f8c9 	.word	0x0800f8c9
 800d654:	0800f8da 	.word	0x0800f8da

0800d658 <memmove>:
 800d658:	4288      	cmp	r0, r1
 800d65a:	b510      	push	{r4, lr}
 800d65c:	eb01 0302 	add.w	r3, r1, r2
 800d660:	d807      	bhi.n	800d672 <memmove+0x1a>
 800d662:	1e42      	subs	r2, r0, #1
 800d664:	4299      	cmp	r1, r3
 800d666:	d00a      	beq.n	800d67e <memmove+0x26>
 800d668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d66c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d670:	e7f8      	b.n	800d664 <memmove+0xc>
 800d672:	4283      	cmp	r3, r0
 800d674:	d9f5      	bls.n	800d662 <memmove+0xa>
 800d676:	1881      	adds	r1, r0, r2
 800d678:	1ad2      	subs	r2, r2, r3
 800d67a:	42d3      	cmn	r3, r2
 800d67c:	d100      	bne.n	800d680 <memmove+0x28>
 800d67e:	bd10      	pop	{r4, pc}
 800d680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d684:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d688:	e7f7      	b.n	800d67a <memmove+0x22>
	...

0800d68c <_free_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4605      	mov	r5, r0
 800d690:	2900      	cmp	r1, #0
 800d692:	d045      	beq.n	800d720 <_free_r+0x94>
 800d694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d698:	1f0c      	subs	r4, r1, #4
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bfb8      	it	lt
 800d69e:	18e4      	addlt	r4, r4, r3
 800d6a0:	f000 f8d2 	bl	800d848 <__malloc_lock>
 800d6a4:	4a1f      	ldr	r2, [pc, #124]	; (800d724 <_free_r+0x98>)
 800d6a6:	6813      	ldr	r3, [r2, #0]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	b933      	cbnz	r3, 800d6ba <_free_r+0x2e>
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	6014      	str	r4, [r2, #0]
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6b6:	f000 b8c8 	b.w	800d84a <__malloc_unlock>
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	d90c      	bls.n	800d6d8 <_free_r+0x4c>
 800d6be:	6821      	ldr	r1, [r4, #0]
 800d6c0:	1862      	adds	r2, r4, r1
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	bf04      	itt	eq
 800d6c6:	681a      	ldreq	r2, [r3, #0]
 800d6c8:	685b      	ldreq	r3, [r3, #4]
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	bf04      	itt	eq
 800d6ce:	1852      	addeq	r2, r2, r1
 800d6d0:	6022      	streq	r2, [r4, #0]
 800d6d2:	6004      	str	r4, [r0, #0]
 800d6d4:	e7ec      	b.n	800d6b0 <_free_r+0x24>
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	b10a      	cbz	r2, 800d6e0 <_free_r+0x54>
 800d6dc:	42a2      	cmp	r2, r4
 800d6de:	d9fa      	bls.n	800d6d6 <_free_r+0x4a>
 800d6e0:	6819      	ldr	r1, [r3, #0]
 800d6e2:	1858      	adds	r0, r3, r1
 800d6e4:	42a0      	cmp	r0, r4
 800d6e6:	d10b      	bne.n	800d700 <_free_r+0x74>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	1858      	adds	r0, r3, r1
 800d6ee:	4282      	cmp	r2, r0
 800d6f0:	6019      	str	r1, [r3, #0]
 800d6f2:	d1dd      	bne.n	800d6b0 <_free_r+0x24>
 800d6f4:	6810      	ldr	r0, [r2, #0]
 800d6f6:	6852      	ldr	r2, [r2, #4]
 800d6f8:	605a      	str	r2, [r3, #4]
 800d6fa:	4401      	add	r1, r0
 800d6fc:	6019      	str	r1, [r3, #0]
 800d6fe:	e7d7      	b.n	800d6b0 <_free_r+0x24>
 800d700:	d902      	bls.n	800d708 <_free_r+0x7c>
 800d702:	230c      	movs	r3, #12
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	e7d3      	b.n	800d6b0 <_free_r+0x24>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	1821      	adds	r1, r4, r0
 800d70c:	428a      	cmp	r2, r1
 800d70e:	bf04      	itt	eq
 800d710:	6811      	ldreq	r1, [r2, #0]
 800d712:	6852      	ldreq	r2, [r2, #4]
 800d714:	6062      	str	r2, [r4, #4]
 800d716:	bf04      	itt	eq
 800d718:	1809      	addeq	r1, r1, r0
 800d71a:	6021      	streq	r1, [r4, #0]
 800d71c:	605c      	str	r4, [r3, #4]
 800d71e:	e7c7      	b.n	800d6b0 <_free_r+0x24>
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	20004294 	.word	0x20004294

0800d728 <_malloc_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	1ccd      	adds	r5, r1, #3
 800d72c:	f025 0503 	bic.w	r5, r5, #3
 800d730:	3508      	adds	r5, #8
 800d732:	2d0c      	cmp	r5, #12
 800d734:	bf38      	it	cc
 800d736:	250c      	movcc	r5, #12
 800d738:	2d00      	cmp	r5, #0
 800d73a:	4606      	mov	r6, r0
 800d73c:	db01      	blt.n	800d742 <_malloc_r+0x1a>
 800d73e:	42a9      	cmp	r1, r5
 800d740:	d903      	bls.n	800d74a <_malloc_r+0x22>
 800d742:	230c      	movs	r3, #12
 800d744:	6033      	str	r3, [r6, #0]
 800d746:	2000      	movs	r0, #0
 800d748:	bd70      	pop	{r4, r5, r6, pc}
 800d74a:	f000 f87d 	bl	800d848 <__malloc_lock>
 800d74e:	4a21      	ldr	r2, [pc, #132]	; (800d7d4 <_malloc_r+0xac>)
 800d750:	6814      	ldr	r4, [r2, #0]
 800d752:	4621      	mov	r1, r4
 800d754:	b991      	cbnz	r1, 800d77c <_malloc_r+0x54>
 800d756:	4c20      	ldr	r4, [pc, #128]	; (800d7d8 <_malloc_r+0xb0>)
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	b91b      	cbnz	r3, 800d764 <_malloc_r+0x3c>
 800d75c:	4630      	mov	r0, r6
 800d75e:	f000 f863 	bl	800d828 <_sbrk_r>
 800d762:	6020      	str	r0, [r4, #0]
 800d764:	4629      	mov	r1, r5
 800d766:	4630      	mov	r0, r6
 800d768:	f000 f85e 	bl	800d828 <_sbrk_r>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d124      	bne.n	800d7ba <_malloc_r+0x92>
 800d770:	230c      	movs	r3, #12
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	4630      	mov	r0, r6
 800d776:	f000 f868 	bl	800d84a <__malloc_unlock>
 800d77a:	e7e4      	b.n	800d746 <_malloc_r+0x1e>
 800d77c:	680b      	ldr	r3, [r1, #0]
 800d77e:	1b5b      	subs	r3, r3, r5
 800d780:	d418      	bmi.n	800d7b4 <_malloc_r+0x8c>
 800d782:	2b0b      	cmp	r3, #11
 800d784:	d90f      	bls.n	800d7a6 <_malloc_r+0x7e>
 800d786:	600b      	str	r3, [r1, #0]
 800d788:	50cd      	str	r5, [r1, r3]
 800d78a:	18cc      	adds	r4, r1, r3
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 f85c 	bl	800d84a <__malloc_unlock>
 800d792:	f104 000b 	add.w	r0, r4, #11
 800d796:	1d23      	adds	r3, r4, #4
 800d798:	f020 0007 	bic.w	r0, r0, #7
 800d79c:	1ac3      	subs	r3, r0, r3
 800d79e:	d0d3      	beq.n	800d748 <_malloc_r+0x20>
 800d7a0:	425a      	negs	r2, r3
 800d7a2:	50e2      	str	r2, [r4, r3]
 800d7a4:	e7d0      	b.n	800d748 <_malloc_r+0x20>
 800d7a6:	428c      	cmp	r4, r1
 800d7a8:	684b      	ldr	r3, [r1, #4]
 800d7aa:	bf16      	itet	ne
 800d7ac:	6063      	strne	r3, [r4, #4]
 800d7ae:	6013      	streq	r3, [r2, #0]
 800d7b0:	460c      	movne	r4, r1
 800d7b2:	e7eb      	b.n	800d78c <_malloc_r+0x64>
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	6849      	ldr	r1, [r1, #4]
 800d7b8:	e7cc      	b.n	800d754 <_malloc_r+0x2c>
 800d7ba:	1cc4      	adds	r4, r0, #3
 800d7bc:	f024 0403 	bic.w	r4, r4, #3
 800d7c0:	42a0      	cmp	r0, r4
 800d7c2:	d005      	beq.n	800d7d0 <_malloc_r+0xa8>
 800d7c4:	1a21      	subs	r1, r4, r0
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f000 f82e 	bl	800d828 <_sbrk_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d0cf      	beq.n	800d770 <_malloc_r+0x48>
 800d7d0:	6025      	str	r5, [r4, #0]
 800d7d2:	e7db      	b.n	800d78c <_malloc_r+0x64>
 800d7d4:	20004294 	.word	0x20004294
 800d7d8:	20004298 	.word	0x20004298

0800d7dc <_realloc_r>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	4607      	mov	r7, r0
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	460e      	mov	r6, r1
 800d7e4:	b921      	cbnz	r1, 800d7f0 <_realloc_r+0x14>
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7ec:	f7ff bf9c 	b.w	800d728 <_malloc_r>
 800d7f0:	b922      	cbnz	r2, 800d7fc <_realloc_r+0x20>
 800d7f2:	f7ff ff4b 	bl	800d68c <_free_r>
 800d7f6:	4625      	mov	r5, r4
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fc:	f000 f826 	bl	800d84c <_malloc_usable_size_r>
 800d800:	42a0      	cmp	r0, r4
 800d802:	d20f      	bcs.n	800d824 <_realloc_r+0x48>
 800d804:	4621      	mov	r1, r4
 800d806:	4638      	mov	r0, r7
 800d808:	f7ff ff8e 	bl	800d728 <_malloc_r>
 800d80c:	4605      	mov	r5, r0
 800d80e:	2800      	cmp	r0, #0
 800d810:	d0f2      	beq.n	800d7f8 <_realloc_r+0x1c>
 800d812:	4631      	mov	r1, r6
 800d814:	4622      	mov	r2, r4
 800d816:	f7ff fc11 	bl	800d03c <memcpy>
 800d81a:	4631      	mov	r1, r6
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ff35 	bl	800d68c <_free_r>
 800d822:	e7e9      	b.n	800d7f8 <_realloc_r+0x1c>
 800d824:	4635      	mov	r5, r6
 800d826:	e7e7      	b.n	800d7f8 <_realloc_r+0x1c>

0800d828 <_sbrk_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4c06      	ldr	r4, [pc, #24]	; (800d844 <_sbrk_r+0x1c>)
 800d82c:	2300      	movs	r3, #0
 800d82e:	4605      	mov	r5, r0
 800d830:	4608      	mov	r0, r1
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	f7f6 fd18 	bl	8004268 <_sbrk>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d102      	bne.n	800d842 <_sbrk_r+0x1a>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	b103      	cbz	r3, 800d842 <_sbrk_r+0x1a>
 800d840:	602b      	str	r3, [r5, #0]
 800d842:	bd38      	pop	{r3, r4, r5, pc}
 800d844:	2000496c 	.word	0x2000496c

0800d848 <__malloc_lock>:
 800d848:	4770      	bx	lr

0800d84a <__malloc_unlock>:
 800d84a:	4770      	bx	lr

0800d84c <_malloc_usable_size_r>:
 800d84c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d850:	1f18      	subs	r0, r3, #4
 800d852:	2b00      	cmp	r3, #0
 800d854:	bfbc      	itt	lt
 800d856:	580b      	ldrlt	r3, [r1, r0]
 800d858:	18c0      	addlt	r0, r0, r3
 800d85a:	4770      	bx	lr

0800d85c <_init>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

0800d868 <_fini>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr
