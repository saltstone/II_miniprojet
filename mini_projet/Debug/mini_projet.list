
mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002058  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801018c  0801018c  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801018c  0801018c  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010194  08010194  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010194  08010194  00020194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010198  08010198  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0801019c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ce8  200000c0  0801025c  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008da8  0801025c  00038da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c5a6  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005503  00000000  00000000  0005c696  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002598  00000000  00000000  00061ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002300  00000000  00000000  00064138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3da  00000000  00000000  00066438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f407  00000000  00000000  00094812  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114f72  00000000  00000000  000b3c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8b8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a200  00000000  00000000  001c8c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e11c 	.word	0x0800e11c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800e11c 	.word	0x0800e11c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000dc 	.word	0x200000dc
 80005e0:	20000130 	.word	0x20000130

080005e4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f002 fe5c 	bl	80032ac <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f4:	f000 f9b4 	bl	8000960 <ft5336_I2C_InitializeIfRequired>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000628:	2300      	movs	r3, #0
 800062a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800062c:	f000 f998 	bl	8000960 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e010      	b.n	8000658 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	21a8      	movs	r1, #168	; 0xa8
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fe17 	bl	8003270 <TS_IO_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b51      	cmp	r3, #81	; 0x51
 800064c:	d101      	bne.n	8000652 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d802      	bhi.n	8000664 <ft5336_ReadID+0x4e>
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0e8      	beq.n	8000636 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f97e 	bl	8000980 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f932 	bl	80008f0 <ft5336_TS_DisableIT>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fde1 	bl	8003270 <TS_IO_Read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	d901      	bls.n	80006ca <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b2db      	uxtb	r3, r3
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000330 	.word	0x20000330

080006e8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800070c:	789a      	ldrb	r2, [r3, #2]
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 8000710:	785b      	ldrb	r3, [r3, #1]
 8000712:	429a      	cmp	r2, r3
 8000714:	f080 80cf 	bcs.w	80008b6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000718:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	2b09      	cmp	r3, #9
 800071e:	d871      	bhi.n	8000804 <ft5336_TS_GetXY+0x11c>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <ft5336_TS_GetXY+0x40>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000751 	.word	0x08000751
 800072c:	08000763 	.word	0x08000763
 8000730:	08000775 	.word	0x08000775
 8000734:	08000787 	.word	0x08000787
 8000738:	08000799 	.word	0x08000799
 800073c:	080007ab 	.word	0x080007ab
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007cf 	.word	0x080007cf
 8000748:	080007e1 	.word	0x080007e1
 800074c:	080007f3 	.word	0x080007f3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000750:	2304      	movs	r3, #4
 8000752:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000754:	2303      	movs	r3, #3
 8000756:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000758:	2306      	movs	r3, #6
 800075a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800075c:	2305      	movs	r3, #5
 800075e:	753b      	strb	r3, [r7, #20]
      break;
 8000760:	e051      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000762:	230a      	movs	r3, #10
 8000764:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000766:	2309      	movs	r3, #9
 8000768:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076a:	230c      	movs	r3, #12
 800076c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800076e:	230b      	movs	r3, #11
 8000770:	753b      	strb	r3, [r7, #20]
      break;
 8000772:	e048      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000774:	2310      	movs	r3, #16
 8000776:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000778:	230f      	movs	r3, #15
 800077a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800077c:	2312      	movs	r3, #18
 800077e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000780:	2311      	movs	r3, #17
 8000782:	753b      	strb	r3, [r7, #20]
      break;
 8000784:	e03f      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000786:	2316      	movs	r3, #22
 8000788:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078a:	2315      	movs	r3, #21
 800078c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800078e:	2318      	movs	r3, #24
 8000790:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000792:	2317      	movs	r3, #23
 8000794:	753b      	strb	r3, [r7, #20]
      break;
 8000796:	e036      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000798:	231c      	movs	r3, #28
 800079a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800079c:	231b      	movs	r3, #27
 800079e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a0:	231e      	movs	r3, #30
 80007a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a4:	231d      	movs	r3, #29
 80007a6:	753b      	strb	r3, [r7, #20]
      break;
 80007a8:	e02d      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007aa:	2322      	movs	r3, #34	; 0x22
 80007ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b2:	2324      	movs	r3, #36	; 0x24
 80007b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007b6:	2323      	movs	r3, #35	; 0x23
 80007b8:	753b      	strb	r3, [r7, #20]
      break;
 80007ba:	e024      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c0:	2327      	movs	r3, #39	; 0x27
 80007c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c4:	232a      	movs	r3, #42	; 0x2a
 80007c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007c8:	2329      	movs	r3, #41	; 0x29
 80007ca:	753b      	strb	r3, [r7, #20]
      break;
 80007cc:	e01b      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007ce:	232e      	movs	r3, #46	; 0x2e
 80007d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d2:	232d      	movs	r3, #45	; 0x2d
 80007d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007d6:	2330      	movs	r3, #48	; 0x30
 80007d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007da:	232f      	movs	r3, #47	; 0x2f
 80007dc:	753b      	strb	r3, [r7, #20]
      break;
 80007de:	e012      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e4:	2333      	movs	r3, #51	; 0x33
 80007e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007e8:	2336      	movs	r3, #54	; 0x36
 80007ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007ec:	2335      	movs	r3, #53	; 0x35
 80007ee:	753b      	strb	r3, [r7, #20]
      break;
 80007f0:	e009      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f2:	233a      	movs	r3, #58	; 0x3a
 80007f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007f6:	2339      	movs	r3, #57	; 0x39
 80007f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fa:	233c      	movs	r3, #60	; 0x3c
 80007fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007fe:	233b      	movs	r3, #59	; 0x3b
 8000800:	753b      	strb	r3, [r7, #20]
      break;
 8000802:	e000      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000804:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	7dfa      	ldrb	r2, [r7, #23]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fd2e 	bl	8003270 <TS_IO_Read>
 8000814:	4603      	mov	r3, r0
 8000816:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000820:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	7dba      	ldrb	r2, [r7, #22]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fd20 	bl	8003270 <TS_IO_Read>
 8000830:	4603      	mov	r3, r0
 8000832:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800083e:	b21a      	sxth	r2, r3
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 800084e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	7d7a      	ldrb	r2, [r7, #21]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fd05 	bl	8003270 <TS_IO_Read>
 8000866:	4603      	mov	r3, r0
 8000868:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000872:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	7d3a      	ldrb	r2, [r7, #20]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fcf7 	bl	8003270 <TS_IO_Read>
 8000882:	4603      	mov	r3, r0
 8000884:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a0:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008b4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000330 	.word	0x20000330
 80008c4:	20000334 	.word	0x20000334

080008c8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	21a4      	movs	r1, #164	; 0xa4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fcaa 	bl	800323c <TS_IO_Write>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	21a4      	movs	r1, #164	; 0xa4
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fc96 	bl	800323c <TS_IO_Write>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800094e:	781b      	ldrb	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000330 	.word	0x20000330

08000960 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000964:	f7ff fff0 	bl	8000948 <ft5336_Get_I2C_InitializedStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800096e:	f002 fc5b 	bl	8003228 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000972:	4b02      	ldr	r3, [pc, #8]	; (800097c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
  }
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000330 	.word	0x20000330

08000980 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b0a6      	sub	sp, #152	; 0x98
 80009a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a2:	f004 fa22 	bl	8004dea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a6:	f000 f945 	bl	8000c34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009aa:	f000 ffe7 	bl	800197c <MX_GPIO_Init>
	MX_ADC3_Init();
 80009ae:	f000 fa43 	bl	8000e38 <MX_ADC3_Init>
	MX_I2C1_Init();
 80009b2:	f000 faef 	bl	8000f94 <MX_I2C1_Init>
	MX_I2C3_Init();
 80009b6:	f000 fb2d 	bl	8001014 <MX_I2C3_Init>
	MX_LTDC_Init();
 80009ba:	f000 fb6b 	bl	8001094 <MX_LTDC_Init>
	MX_RTC_Init();
 80009be:	f000 fbeb 	bl	8001198 <MX_RTC_Init>
	MX_SPI2_Init();
 80009c2:	f000 fc8f 	bl	80012e4 <MX_SPI2_Init>
	MX_TIM1_Init();
 80009c6:	f000 fccb 	bl	8001360 <MX_TIM1_Init>
	MX_TIM2_Init();
 80009ca:	f000 fd1d 	bl	8001408 <MX_TIM2_Init>
	MX_TIM3_Init();
 80009ce:	f000 fd69 	bl	80014a4 <MX_TIM3_Init>
	MX_TIM5_Init();
 80009d2:	f000 fdf5 	bl	80015c0 <MX_TIM5_Init>
	MX_TIM8_Init();
 80009d6:	f000 fe41 	bl	800165c <MX_TIM8_Init>
	MX_USART1_UART_Init();
 80009da:	f000 ff19 	bl	8001810 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80009de:	f000 ff4f 	bl	8001880 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 80009e2:	f000 f9d7 	bl	8000d94 <MX_ADC1_Init>
	MX_DAC_Init();
 80009e6:	f000 fa79 	bl	8000edc <MX_DAC_Init>
	MX_UART7_Init();
 80009ea:	f000 fee1 	bl	80017b0 <MX_UART7_Init>
	MX_FMC_Init();
 80009ee:	f000 ff77 	bl	80018e0 <MX_FMC_Init>
	MX_DMA2D_Init();
 80009f2:	f000 fa9d 	bl	8000f30 <MX_DMA2D_Init>
	/* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 80009f6:	f002 fc65 	bl	80032c4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80009fe:	2000      	movs	r0, #0
 8000a00:	f002 fcf8 	bl	80033f4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a04:	f002 fcce 	bl	80033a4 <BSP_LCD_GetXSize>
 8000a08:	4604      	mov	r4, r0
 8000a0a:	f002 fcdf 	bl	80033cc <BSP_LCD_GetYSize>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a14:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f002 fce9 	bl	80033f4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a22:	f002 ff95 	bl	8003950 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f002 fd44 	bl	80034b4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8000a2c:	4873      	ldr	r0, [pc, #460]	; (8000bfc <main+0x260>)
 8000a2e:	f002 fd9d 	bl	800356c <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8000a32:	4872      	ldr	r0, [pc, #456]	; (8000bfc <main+0x260>)
 8000a34:	f002 fd66 	bl	8003504 <BSP_LCD_SetBackColor>



	// ===============  creation des blocs ==================
	blocs[1] = 1 + (7 << 8) + (6 << 4);
 8000a38:	4b71      	ldr	r3, [pc, #452]	; (8000c00 <main+0x264>)
 8000a3a:	f240 7261 	movw	r2, #1889	; 0x761
 8000a3e:	805a      	strh	r2, [r3, #2]
	blocs[2] = 1 + (6 << 8) + (6 << 4);
 8000a40:	4b6f      	ldr	r3, [pc, #444]	; (8000c00 <main+0x264>)
 8000a42:	f240 6261 	movw	r2, #1633	; 0x661
 8000a46:	809a      	strh	r2, [r3, #4]
	blocs[3] = 1 + (5 << 8) + (6 << 4);
 8000a48:	4b6d      	ldr	r3, [pc, #436]	; (8000c00 <main+0x264>)
 8000a4a:	f240 5261 	movw	r2, #1377	; 0x561
 8000a4e:	80da      	strh	r2, [r3, #6]

	blocs[4] = 1 + (13 << 8) + (6 << 4);
 8000a50:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <main+0x264>)
 8000a52:	f640 5261 	movw	r2, #3425	; 0xd61
 8000a56:	811a      	strh	r2, [r3, #8]
	blocs[5] = 1 + (12 << 8) + (6 << 4);
 8000a58:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <main+0x264>)
 8000a5a:	f640 4261 	movw	r2, #3169	; 0xc61
 8000a5e:	815a      	strh	r2, [r3, #10]
	blocs[6] = 1 + (11 << 8) + (6 << 4);
 8000a60:	4b67      	ldr	r3, [pc, #412]	; (8000c00 <main+0x264>)
 8000a62:	f640 3261 	movw	r2, #2913	; 0xb61
 8000a66:	819a      	strh	r2, [r3, #12]

	blocs[7] = 1 + (10 << 8) + (3 << 4);
 8000a68:	4b65      	ldr	r3, [pc, #404]	; (8000c00 <main+0x264>)
 8000a6a:	f640 2231 	movw	r2, #2609	; 0xa31
 8000a6e:	81da      	strh	r2, [r3, #14]
	blocs[8] = 1 + (9 << 8) + (3 << 4);
 8000a70:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <main+0x264>)
 8000a72:	f640 1231 	movw	r2, #2353	; 0x931
 8000a76:	821a      	strh	r2, [r3, #16]
	blocs[9] = 1 + (8 << 8) + (3 << 4);
 8000a78:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <main+0x264>)
 8000a7a:	f640 0231 	movw	r2, #2097	; 0x831
 8000a7e:	825a      	strh	r2, [r3, #18]



	// ======== les pieces =========

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000a80:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000a84:	f002 fd26 	bl	80034d4 <BSP_LCD_SetTextColor>
	position_pieces[0] = 1 + (7 << 8) + (5 << 4);
 8000a88:	4b5e      	ldr	r3, [pc, #376]	; (8000c04 <main+0x268>)
 8000a8a:	f240 7251 	movw	r2, #1873	; 0x751
 8000a8e:	801a      	strh	r2, [r3, #0]
	position_pieces[1] = 1 + (6 << 8) + (5 << 4);
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <main+0x268>)
 8000a92:	f240 6251 	movw	r2, #1617	; 0x651
 8000a96:	805a      	strh	r2, [r3, #2]
	position_pieces[2] = 1 + (5 << 8) + (5 << 4);
 8000a98:	4b5a      	ldr	r3, [pc, #360]	; (8000c04 <main+0x268>)
 8000a9a:	f240 5251 	movw	r2, #1361	; 0x551
 8000a9e:	809a      	strh	r2, [r3, #4]

	position_pieces[3] = 1 + (8 << 8) + (2 << 4);
 8000aa0:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <main+0x268>)
 8000aa2:	f640 0221 	movw	r2, #2081	; 0x821
 8000aa6:	80da      	strh	r2, [r3, #6]
	position_pieces[4] = 1 + (9 << 8) + (2 << 4);
 8000aa8:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <main+0x268>)
 8000aaa:	f640 1221 	movw	r2, #2337	; 0x921
 8000aae:	811a      	strh	r2, [r3, #8]
	position_pieces[5] = 1 + (10 << 8) + (2 << 4);
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <main+0x268>)
 8000ab2:	f640 2221 	movw	r2, #2593	; 0xa21
 8000ab6:	815a      	strh	r2, [r3, #10]

	position_pieces[6] = 1 + (11 << 8) + (5 << 4);
 8000ab8:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <main+0x268>)
 8000aba:	f640 3251 	movw	r2, #2897	; 0xb51
 8000abe:	819a      	strh	r2, [r3, #12]
	position_pieces[7] = 1 + (12 << 8) + (5 << 4);
 8000ac0:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <main+0x268>)
 8000ac2:	f640 4251 	movw	r2, #3153	; 0xc51
 8000ac6:	81da      	strh	r2, [r3, #14]
	position_pieces[8] = 1 + (13 << 8) + (5 << 4);
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	; (8000c04 <main+0x268>)
 8000aca:	f640 5251 	movw	r2, #3409	; 0xd51
 8000ace:	821a      	strh	r2, [r3, #16]

	position_pieces[9] = 2 + (9 << 8) + (8 << 4);
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <main+0x268>)
 8000ad2:	f640 1282 	movw	r2, #2434	; 0x982
 8000ad6:	825a      	strh	r2, [r3, #18]
	position_pieces[10] = 1 + (17 << 8) + (8 << 4);
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <main+0x268>)
 8000ada:	f241 1281 	movw	r2, #4481	; 0x1181
 8000ade:	829a      	strh	r2, [r3, #20]
	position_pieces[11] = 1 + (15 << 8) + (8 << 4);
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <main+0x268>)
 8000ae2:	f640 7281 	movw	r2, #3969	; 0xf81
 8000ae6:	82da      	strh	r2, [r3, #22]


	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000ae8:	f002 fc5c 	bl	80033a4 <BSP_LCD_GetXSize>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29c      	uxth	r4, r3
 8000af0:	f002 fc6c 	bl	80033cc <BSP_LCD_GetYSize>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	4620      	mov	r0, r4
 8000afc:	f003 faf6 	bl	80040ec <BSP_TS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex01 */
	osMutexDef(myMutex01);
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000b0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00a fe32 	bl	800b77a <osMutexCreate>
 8000b16:	4602      	mov	r2, r0
 8000b18:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <main+0x26c>)
 8000b1a:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <main+0x270>)
 8000b1e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a fdbf 	bl	800b6ba <osThreadCreate>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <main+0x274>)
 8000b40:	601a      	str	r2, [r3, #0]

	/* definition and creation of Player */
	osThreadDef(Player, player, osPriorityNormal, 0, 1024);
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <main+0x278>)
 8000b44:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b48:	461d      	mov	r5, r3
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PlayerHandle = osThreadCreate(osThread(Player), NULL);
 8000b56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f00a fdac 	bl	800b6ba <osThreadCreate>
 8000b62:	4602      	mov	r2, r0
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <main+0x27c>)
 8000b66:	601a      	str	r2, [r3, #0]

	/* definition and creation of Game_over */
	osThreadDef(Game_over, game_over, osPriorityHigh, 0, 128);
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <main+0x280>)
 8000b6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b6e:	461d      	mov	r5, r3
 8000b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Game_overHandle = osThreadCreate(osThread(Game_over), NULL);
 8000b7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00a fd99 	bl	800b6ba <osThreadCreate>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <main+0x284>)
 8000b8c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Pieces */
	osThreadDef(Pieces, pieces, osPriorityNormal, 0, 1024);
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <main+0x288>)
 8000b90:	f107 0420 	add.w	r4, r7, #32
 8000b94:	461d      	mov	r5, r3
 8000b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PiecesHandle = osThreadCreate(osThread(Pieces), NULL);
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00a fd86 	bl	800b6ba <osThreadCreate>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <main+0x28c>)
 8000bb2:	601a      	str	r2, [r3, #0]

	/* definition and creation of BadGuy */
	osThreadDef(BadGuy, badguy, osPriorityNormal, 0, 1024);
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <main+0x290>)
 8000bb6:	1d3c      	adds	r4, r7, #4
 8000bb8:	461d      	mov	r5, r3
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BadGuyHandle = osThreadCreate(osThread(BadGuy), NULL);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00a fd75 	bl	800b6ba <osThreadCreate>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <main+0x294>)
 8000bd4:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	vTaskSuspend(BadGuyHandle);
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <main+0x294>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00b fc52 	bl	800c484 <vTaskSuspend>
	vTaskSuspend(PlayerHandle);
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <main+0x27c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00b fc4d 	bl	800c484 <vTaskSuspend>
	vTaskSuspend(PiecesHandle);
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <main+0x28c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b fc48 	bl	800c484 <vTaskSuspend>
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000bf4:	f00a fd5a 	bl	800b6ac <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x25c>
 8000bfa:	bf00      	nop
 8000bfc:	ff8080ff 	.word	0xff8080ff
 8000c00:	20000338 	.word	0x20000338
 8000c04:	20000384 	.word	0x20000384
 8000c08:	20008c7c 	.word	0x20008c7c
 8000c0c:	0800e140 	.word	0x0800e140
 8000c10:	200086d0 	.word	0x200086d0
 8000c14:	0800e164 	.word	0x0800e164
 8000c18:	20008c78 	.word	0x20008c78
 8000c1c:	0800e18c 	.word	0x0800e18c
 8000c20:	200088d0 	.word	0x200088d0
 8000c24:	0800e1b0 	.word	0x0800e1b0
 8000c28:	20008c80 	.word	0x20008c80
 8000c2c:	0800e1d4 	.word	0x0800e1d4
 8000c30:	20008c40 	.word	0x20008c40

08000c34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b4      	sub	sp, #208	; 0xd0
 8000c38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00c fe65 	bl	800d912 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	2284      	movs	r2, #132	; 0x84
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00c fe56 	bl	800d912 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000c66:	f006 ff11 	bl	8007a8c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <SystemClock_Config+0x154>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <SystemClock_Config+0x154>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <SystemClock_Config+0x154>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <SystemClock_Config+0x158>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a41      	ldr	r2, [pc, #260]	; (8000d8c <SystemClock_Config+0x158>)
 8000c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <SystemClock_Config+0x158>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000c9a:	2309      	movs	r3, #9
 8000c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000cbc:	2319      	movs	r3, #25
 8000cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cd0:	2309      	movs	r3, #9
 8000cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 ff36 	bl	8007b4c <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xb6>
		Error_Handler();
 8000ce6:	f002 f945 	bl	8002f74 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000cea:	f006 fedf 	bl	8007aac <HAL_PWREx_EnableOverDrive>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0xc4>
		Error_Handler();
 8000cf4:	f002 f93e 	bl	8002f74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000d1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d1e:	2106      	movs	r1, #6
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 f9b7 	bl	8008094 <HAL_RCC_ClockConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0xfc>
		Error_Handler();
 8000d2c:	f002 f922 	bl	8002f74 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <SystemClock_Config+0x15c>)
 8000d32:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART6
			| RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d38:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d42:	2303      	movs	r3, #3
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 fb94 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x14a>
		Error_Handler();
 8000d7a:	f002 f8fb 	bl	8002f74 <Error_Handler>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	37d0      	adds	r7, #208	; 0xd0
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	00015868 	.word	0x00015868

08000d94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_ADC1_Init+0x9c>)
 8000daa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xa0>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000df6:	f004 f847 	bl	8004e88 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e00:	f002 f8b8 	bl	8002f74 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000e16:	f004 f9cd 	bl	80051b4 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000e20:	f002 f8a8 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200089bc 	.word	0x200089bc
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_ADC3_Init+0x9c>)
 8000e4e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e56:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <MX_ADC3_Init+0xa0>)
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000e9a:	f003 fff5 	bl	8004e88 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000ea4:	f002 f866 	bl	8002f74 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_ADC3_Init+0x98>)
 8000eba:	f004 f97b 	bl	80051b4 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000ec4:	f002 f856 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20008a04 	.word	0x20008a04
 8000ed4:	40012200 	.word	0x40012200
 8000ed8:	0f000001 	.word	0x0f000001

08000edc <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_DAC_Init+0x4c>)
 8000eec:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <MX_DAC_Init+0x50>)
 8000eee:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_DAC_Init+0x4c>)
 8000ef2:	f004 fc85 	bl	8005800 <HAL_DAC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_DAC_Init+0x24>
		Error_Handler();
 8000efc:	f002 f83a 	bl	8002f74 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <MX_DAC_Init+0x4c>)
 8000f10:	f004 fcec 	bl	80058ec <HAL_DAC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_DAC_Init+0x42>
		Error_Handler();
 8000f1a:	f002 f82b 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20008acc 	.word	0x20008acc
 8000f2c:	40007400 	.word	0x40007400

08000f30 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <MX_DMA2D_Init+0x60>)
 8000f38:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f66:	f004 fef7 	bl	8005d58 <HAL_DMA2D_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000f70:	f002 f800 	bl	8002f74 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000f74:	2101      	movs	r1, #1
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_DMA2D_Init+0x5c>)
 8000f78:	f005 f84c 	bl	8006014 <HAL_DMA2D_ConfigLayer>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000f82:	f001 fff7 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20008bc0 	.word	0x20008bc0
 8000f90:	4002b000 	.word	0x4002b000

08000f94 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_I2C1_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_I2C1_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <MX_I2C1_Init+0x7c>)
 8000fa2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000fce:	480e      	ldr	r0, [pc, #56]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fd0:	f005 fc34 	bl	800683c <HAL_I2C_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000fda:	f001 ffcb 	bl	8002f74 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <MX_I2C1_Init+0x74>)
 8000fe2:	f006 f943 	bl	800726c <HAL_I2CEx_ConfigAnalogFilter>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000fec:	f001 ffc2 	bl	8002f74 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_I2C1_Init+0x74>)
 8000ff4:	f006 f985 	bl	8007302 <HAL_I2CEx_ConfigDigitalFilter>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000ffe:	f001 ffb9 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20008844 	.word	0x20008844
 800100c:	40005400 	.word	0x40005400
 8001010:	00c0eaff 	.word	0x00c0eaff

08001014 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C3_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C3_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C3_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C3_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C3_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C3_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C3_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C3_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C3_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C3_Init+0x74>)
 8001050:	f005 fbf4 	bl	800683c <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C3_Init+0x4a>
		Error_Handler();
 800105a:	f001 ff8b 	bl	8002f74 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C3_Init+0x74>)
 8001062:	f006 f903 	bl	800726c <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800106c:	f001 ff82 	bl	8002f74 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C3_Init+0x74>)
 8001074:	f006 f945 	bl	8007302 <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C3_Init+0x6e>
		Error_Handler();
 800107e:	f001 ff79 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200086d4 	.word	0x200086d4
 800108c:	40005c00 	.word	0x40005c00
 8001090:	00c0eaff 	.word	0x00c0eaff

08001094 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2234      	movs	r2, #52	; 0x34
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00c fc36 	bl	800d912 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80010a6:	4b3a      	ldr	r3, [pc, #232]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010a8:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <MX_LTDC_Init+0x100>)
 80010aa:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010c6:	2228      	movs	r2, #40	; 0x28
 80010c8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010cc:	2209      	movs	r2, #9
 80010ce:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010d2:	2235      	movs	r2, #53	; 0x35
 80010d4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010d8:	220b      	movs	r2, #11
 80010da:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010de:	f240 2215 	movw	r2, #533	; 0x215
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010e6:	f240 121b 	movw	r2, #283	; 0x11b
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010ee:	f240 2235 	movw	r2, #565	; 0x235
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010f6:	f240 121d 	movw	r2, #285	; 0x11d
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_LTDC_Init+0xfc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_LTDC_Init+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_LTDC_Init+0xfc>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001114:	481e      	ldr	r0, [pc, #120]	; (8001190 <MX_LTDC_Init+0xfc>)
 8001116:	f006 f941 	bl	800739c <HAL_LTDC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_LTDC_Init+0x90>
		Error_Handler();
 8001120:	f001 ff28 	bl	8002f74 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001128:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800112c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001132:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001136:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001144:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001148:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800114e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001154:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 800115a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_LTDC_Init+0xfc>)
 800117a:	f006 faa1 	bl	80076c0 <HAL_LTDC_ConfigLayer>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_LTDC_Init+0xf4>
		Error_Handler();
 8001184:	f001 fef6 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3738      	adds	r7, #56	; 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20008914 	.word	0x20008914
 8001194:	40016800 	.word	0x40016800

08001198 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	; 0x48
 800119c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800119e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = { 0 };
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = { 0 };
 80011b4:	463b      	mov	r3, r7
 80011b6:	222c      	movs	r2, #44	; 0x2c
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00c fba9 	bl	800d912 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <MX_RTC_Init+0x144>)
 80011c2:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <MX_RTC_Init+0x148>)
 80011c4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <MX_RTC_Init+0x144>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <MX_RTC_Init+0x144>)
 80011ce:	227f      	movs	r2, #127	; 0x7f
 80011d0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80011d2:	4b42      	ldr	r3, [pc, #264]	; (80012dc <MX_RTC_Init+0x144>)
 80011d4:	22ff      	movs	r2, #255	; 0xff
 80011d6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <MX_RTC_Init+0x144>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <MX_RTC_Init+0x144>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <MX_RTC_Init+0x144>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80011ea:	483c      	ldr	r0, [pc, #240]	; (80012dc <MX_RTC_Init+0x144>)
 80011ec:	f007 fd44 	bl	8008c78 <HAL_RTC_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_RTC_Init+0x62>
		Error_Handler();
 80011f6:	f001 febd 	bl	8002f74 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <MX_RTC_Init+0x144>)
 800121e:	f007 fda7 	bl	8008d70 <HAL_RTC_SetTime>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_RTC_Init+0x94>
		Error_Handler();
 8001228:	f001 fea4 	bl	8002f74 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001232:	2301      	movs	r3, #1
 8001234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001238:	2301      	movs	r3, #1
 800123a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_RTC_Init+0x144>)
 800124e:	f007 fe4d 	bl	8008eec <HAL_RTC_SetDate>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_RTC_Init+0xc4>
		Error_Handler();
 8001258:	f001 fe8c 	bl	8002f74 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800125c:	2300      	movs	r3, #0
 800125e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001260:	2300      	movs	r3, #0
 8001262:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001264:	2300      	movs	r3, #0
 8001266:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001280:	2301      	movs	r3, #1
 8001282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800128c:	463b      	mov	r3, r7
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <MX_RTC_Init+0x144>)
 8001294:	f007 fed2 	bl	800903c <HAL_RTC_SetAlarm>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_RTC_Init+0x10a>
		Error_Handler();
 800129e:	f001 fe69 	bl	8002f74 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80012a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80012a8:	463b      	mov	r3, r7
 80012aa:	2201      	movs	r2, #1
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <MX_RTC_Init+0x144>)
 80012b0:	f007 fec4 	bl	800903c <HAL_RTC_SetAlarm>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_RTC_Init+0x126>
		Error_Handler();
 80012ba:	f001 fe5b 	bl	8002f74 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 80012be:	2202      	movs	r2, #2
 80012c0:	2100      	movs	r1, #0
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_RTC_Init+0x144>)
 80012c4:	f008 f844 	bl	8009350 <HAL_RTCEx_SetTimeStamp>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_RTC_Init+0x13a>
	RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
		Error_Handler();
 80012ce:	f001 fe51 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3748      	adds	r7, #72	; 0x48
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20008ae0 	.word	0x20008ae0
 80012e0:	40002800 	.word	0x40002800

080012e4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_SPI2_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_SPI2_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_SPI2_Init+0x74>)
 80012f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_SPI2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI2_Init+0x74>)
 80012fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001302:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_SPI2_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI2_Init+0x74>)
 8001312:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001316:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI2_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_SPI2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI2_Init+0x74>)
 8001332:	2207      	movs	r2, #7
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_SPI2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI2_Init+0x74>)
 800133e:	2208      	movs	r2, #8
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_SPI2_Init+0x74>)
 8001344:	f008 f8d9 	bl	80094fa <HAL_SPI_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_SPI2_Init+0x6e>
		Error_Handler();
 800134e:	f001 fe11 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20008720 	.word	0x20008720
 800135c:	40003800 	.word	0x40003800

08001360 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_TIM1_Init+0xa0>)
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <MX_TIM1_Init+0xa4>)
 8001382:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_TIM1_Init+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM1_Init+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_TIM1_Init+0xa0>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_TIM1_Init+0xa0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM1_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_TIM1_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_TIM1_Init+0xa0>)
 80013ac:	f008 f937 	bl	800961e <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x5a>
		Error_Handler();
 80013b6:	f001 fddd 	bl	8002f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_TIM1_Init+0xa0>)
 80013c8:	f008 fbea 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80013d2:	f001 fdcf 	bl	8002f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_TIM1_Init+0xa0>)
 80013e8:	f009 f91e 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80013f2:	f001 fdbf 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20008b00 	.word	0x20008b00
 8001404:	40010000 	.word	0x40010000

08001408 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_TIM2_Init+0x98>)
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001450:	f008 f8e5 	bl	800961e <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x56>
		Error_Handler();
 800145a:	f001 fd8b 	bl	8002f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_TIM2_Init+0x98>)
 800146c:	f008 fb98 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x72>
		Error_Handler();
 8001476:	f001 fd7d 	bl	8002f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_TIM2_Init+0x98>)
 8001488:	f009 f8ce 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001492:	f001 fd6f 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20008c00 	.word	0x20008c00

080014a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	; 0x50
 80014a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80014b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014e6:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <MX_TIM3_Init+0x114>)
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <MX_TIM3_Init+0x118>)
 80014ea:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <MX_TIM3_Init+0x114>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <MX_TIM3_Init+0x114>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_TIM3_Init+0x114>)
 80014fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fe:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <MX_TIM3_Init+0x114>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_TIM3_Init+0x114>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800150c:	482a      	ldr	r0, [pc, #168]	; (80015b8 <MX_TIM3_Init+0x114>)
 800150e:	f008 f886 	bl	800961e <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM3_Init+0x78>
		Error_Handler();
 8001518:	f001 fd2c 	bl	8002f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001526:	4619      	mov	r1, r3
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <MX_TIM3_Init+0x114>)
 800152a:	f008 fb39 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001534:	f001 fd1e 	bl	8002f74 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <MX_TIM3_Init+0x114>)
 800153a:	f008 f8c5 	bl	80096c8 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0xa4>
		Error_Handler();
 8001544:	f001 fd16 	bl	8002f74 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_TIM3_Init+0x114>)
 8001558:	f008 fbdc 	bl	8009d14 <HAL_TIM_SlaveConfigSynchro>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0xc2>
		Error_Handler();
 8001562:	f001 fd07 	bl	8002f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	4619      	mov	r1, r3
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <MX_TIM3_Init+0x114>)
 8001576:	f009 f857 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001580:	f001 fcf8 	bl	8002f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	; 0x60
 8001586:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM3_Init+0x114>)
 800159c:	f008 f9e8 	bl	8009970 <HAL_TIM_PWM_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 80015a6:	f001 fce5 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM3_Init+0x114>)
 80015ac:	f003 f952 	bl	8004854 <HAL_TIM_MspPostInit>

}
 80015b0:	bf00      	nop
 80015b2:	3750      	adds	r7, #80	; 0x50
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200088d4 	.word	0x200088d4
 80015bc:	40000400 	.word	0x40000400

080015c0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_TIM5_Init+0x94>)
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <MX_TIM5_Init+0x98>)
 80015e2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM5_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_TIM5_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_TIM5_Init+0x94>)
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
 80015f6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_TIM5_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_TIM5_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_TIM5_Init+0x94>)
 8001606:	f008 f80a 	bl	800961e <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM5_Init+0x54>
		Error_Handler();
 8001610:	f001 fcb0 	bl	8002f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_TIM5_Init+0x94>)
 8001622:	f008 fabd 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM5_Init+0x70>
		Error_Handler();
 800162c:	f001 fca2 	bl	8002f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM5_Init+0x94>)
 800163e:	f008 fff3 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001648:	f001 fc94 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20008890 	.word	0x20008890
 8001658:	40000c00 	.word	0x40000c00

0800165c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b09a      	sub	sp, #104	; 0x68
 8001660:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800167c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	222c      	movs	r2, #44	; 0x2c
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00c f93b 	bl	800d912 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <MX_TIM8_Init+0x14c>)
 800169e:	4a43      	ldr	r2, [pc, #268]	; (80017ac <MX_TIM8_Init+0x150>)
 80016a0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80016bc:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80016c8:	4837      	ldr	r0, [pc, #220]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016ca:	f007 ffa8 	bl	800961e <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM8_Init+0x7c>
		Error_Handler();
 80016d4:	f001 fc4e 	bl	8002f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80016de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016e2:	4619      	mov	r1, r3
 80016e4:	4830      	ldr	r0, [pc, #192]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016e6:	f008 fa5b 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM8_Init+0x98>
		Error_Handler();
 80016f0:	f001 fc40 	bl	8002f74 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80016f4:	482c      	ldr	r0, [pc, #176]	; (80017a8 <MX_TIM8_Init+0x14c>)
 80016f6:	f007 ffe7 	bl	80096c8 <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM8_Init+0xa8>
		Error_Handler();
 8001700:	f001 fc38 	bl	8002f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001714:	4619      	mov	r1, r3
 8001716:	4824      	ldr	r0, [pc, #144]	; (80017a8 <MX_TIM8_Init+0x14c>)
 8001718:	f008 ff86 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001722:	f001 fc27 	bl	8002f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001726:	2360      	movs	r3, #96	; 0x60
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800173e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001742:	220c      	movs	r2, #12
 8001744:	4619      	mov	r1, r3
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <MX_TIM8_Init+0x14c>)
 8001748:	f008 f912 	bl	8009970 <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001752:	f001 fc0f 	bl	8002f74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_TIM8_Init+0x14c>)
 800178c:	f008 ffda 	bl	800a744 <HAL_TIMEx_ConfigBreakDeadTime>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM8_Init+0x13e>
			!= HAL_OK) {
		Error_Handler();
 8001796:	f001 fbed 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <MX_TIM8_Init+0x14c>)
 800179c:	f003 f85a 	bl	8004854 <HAL_TIM_MspPostInit>

}
 80017a0:	bf00      	nop
 80017a2:	3768      	adds	r7, #104	; 0x68
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20008804 	.word	0x20008804
 80017ac:	40010400 	.word	0x40010400

080017b0 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_UART7_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_UART7_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_UART7_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_UART7_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_UART7_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_UART7_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_UART7_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_UART7_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_UART7_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_UART7_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_UART7_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_UART7_Init+0x58>)
 80017f4:	f009 f842 	bl	800a87c <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_UART7_Init+0x52>
		Error_Handler();
 80017fe:	f001 fbb9 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20008784 	.word	0x20008784
 800180c:	40007800 	.word	0x40007800

08001810 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <MX_USART1_UART_Init+0x6c>)
 8001818:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_USART1_UART_Init+0x68>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART1_UART_Init+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART1_UART_Init+0x68>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_USART1_UART_Init+0x68>)
 800184e:	2230      	movs	r2, #48	; 0x30
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
			| UART_ADVFEATURE_DMADISABLEONERROR_INIT;
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001854:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
	huart1.AdvancedInit.DMADisableonRxError =
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <MX_USART1_UART_Init+0x68>)
 800185c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
	UART_ADVFEATURE_DMA_DISABLEONRXERROR;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART1_UART_Init+0x68>)
 8001864:	f009 f80a 	bl	800a87c <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x62>
		Error_Handler();
 800186e:	f001 fb81 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20008a4c 	.word	0x20008a4c
 800187c:	40011000 	.word	0x40011000

08001880 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <MX_USART6_UART_Init+0x5c>)
 8001888:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_USART6_UART_Init+0x58>)
 80018c4:	f008 ffda 	bl	800a87c <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART6_UART_Init+0x52>
		Error_Handler();
 80018ce:	f001 fb51 	bl	8002f74 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20008b40 	.word	0x20008b40
 80018dc:	40011400 	.word	0x40011400

080018e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_FMC_Init+0x94>)
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <MX_FMC_Init+0x98>)
 80018fc:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_FMC_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_FMC_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_FMC_Init+0x94>)
 800190c:	2204      	movs	r2, #4
 800190e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_FMC_Init+0x94>)
 8001912:	2210      	movs	r2, #16
 8001914:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_FMC_Init+0x94>)
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_FMC_Init+0x94>)
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_FMC_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_FMC_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_FMC_Init+0x94>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_FMC_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 800193a:	2310      	movs	r3, #16
 800193c:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 800193e:	2310      	movs	r3, #16
 8001940:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8001942:	2310      	movs	r3, #16
 8001944:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8001946:	2310      	movs	r3, #16
 8001948:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 800194a:	2310      	movs	r3, #16
 800194c:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 800194e:	2310      	movs	r3, #16
 8001950:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8001952:	2310      	movs	r3, #16
 8001954:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_FMC_Init+0x94>)
 800195c:	f007 fd4e 	bl	80093fc <HAL_SDRAM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_FMC_Init+0x8a>
		Error_Handler();
 8001966:	f001 fb05 	bl	8002f74 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20008c44 	.word	0x20008c44
 8001978:	a0000140 	.word	0xa0000140

0800197c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b090      	sub	sp, #64	; 0x40
 8001980:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001992:	4bb0      	ldr	r3, [pc, #704]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4aaf      	ldr	r2, [pc, #700]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4bad      	ldr	r3, [pc, #692]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4baa      	ldr	r3, [pc, #680]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4aa9      	ldr	r2, [pc, #676]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4ba7      	ldr	r3, [pc, #668]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4ba4      	ldr	r3, [pc, #656]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4aa3      	ldr	r2, [pc, #652]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4ba1      	ldr	r3, [pc, #644]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80019da:	4b9e      	ldr	r3, [pc, #632]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a9d      	ldr	r2, [pc, #628]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b9b      	ldr	r3, [pc, #620]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80019f2:	4b98      	ldr	r3, [pc, #608]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a97      	ldr	r2, [pc, #604]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 80019f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b95      	ldr	r3, [pc, #596]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a91      	ldr	r2, [pc, #580]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a8b      	ldr	r2, [pc, #556]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001a3a:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a85      	ldr	r2, [pc, #532]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a79      	ldr	r2, [pc, #484]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a73      	ldr	r2, [pc, #460]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <MX_GPIO_Init+0x2d8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2160      	movs	r1, #96	; 0x60
 8001a9e:	486e      	ldr	r0, [pc, #440]	; (8001c58 <MX_GPIO_Init+0x2dc>)
 8001aa0:	f004 feb2 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	486c      	ldr	r0, [pc, #432]	; (8001c5c <MX_GPIO_Init+0x2e0>)
 8001aaa:	f004 fead 	bl	8006808 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2108      	movs	r1, #8
 8001ab2:	486a      	ldr	r0, [pc, #424]	; (8001c5c <MX_GPIO_Init+0x2e0>)
 8001ab4:	f004 fea8 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2108      	movs	r1, #8
 8001abc:	4868      	ldr	r0, [pc, #416]	; (8001c60 <MX_GPIO_Init+0x2e4>)
 8001abe:	f004 fea3 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	4867      	ldr	r0, [pc, #412]	; (8001c64 <MX_GPIO_Init+0x2e8>)
 8001ac8:	f004 fe9e 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4863      	ldr	r0, [pc, #396]	; (8001c60 <MX_GPIO_Init+0x2e4>)
 8001ad4:	f004 fe98 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001ade:	4862      	ldr	r0, [pc, #392]	; (8001c68 <MX_GPIO_Init+0x2ec>)
 8001ae0:	f004 fe92 	bl	8006808 <HAL_GPIO_WritePin>
	LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin | LED18_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	4860      	ldr	r0, [pc, #384]	; (8001c6c <MX_GPIO_Init+0x2f0>)
 8001aea:	f004 fe8d 	bl	8006808 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aee:	2308      	movs	r3, #8
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4855      	ldr	r0, [pc, #340]	; (8001c58 <MX_GPIO_Init+0x2dc>)
 8001b02:	f004 fbb5 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
	 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D2_Pin
 8001b06:	f643 0323 	movw	r3, #14371	; 0x3823
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b18:	230a      	movs	r3, #10
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b20:	4619      	mov	r1, r3
 8001b22:	4853      	ldr	r0, [pc, #332]	; (8001c70 <MX_GPIO_Init+0x2f4>)
 8001b24:	f004 fba4 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP2_Pin BP1_Pin */
	GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin;
 8001b28:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	484d      	ldr	r0, [pc, #308]	; (8001c74 <MX_GPIO_Init+0x2f8>)
 8001b3e:	f004 fb97 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED14_Pin LED15_Pin */
	GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8001b42:	2360      	movs	r3, #96	; 0x60
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b56:	4619      	mov	r1, r3
 8001b58:	483f      	ldr	r0, [pc, #252]	; (8001c58 <MX_GPIO_Init+0x2dc>)
 8001b5a:	f004 fb89 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b70:	4619      	mov	r1, r3
 8001b72:	4841      	ldr	r0, [pc, #260]	; (8001c78 <MX_GPIO_Init+0x2fc>)
 8001b74:	f004 fb7c 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <MX_GPIO_Init+0x300>)
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4834      	ldr	r0, [pc, #208]	; (8001c5c <MX_GPIO_Init+0x2e0>)
 8001b8c:	f004 fb70 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8001b90:	2328      	movs	r3, #40	; 0x28
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482d      	ldr	r0, [pc, #180]	; (8001c5c <MX_GPIO_Init+0x2e0>)
 8001ba8:	f004 fb62 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LCD_DISP_Pin;
 8001bac:	f241 0308 	movw	r3, #4104	; 0x1008
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4826      	ldr	r0, [pc, #152]	; (8001c60 <MX_GPIO_Init+0x2e4>)
 8001bc6:	f004 fb53 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4828      	ldr	r0, [pc, #160]	; (8001c80 <MX_GPIO_Init+0x304>)
 8001be0:	f004 fb46 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001be4:	2308      	movs	r3, #8
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481a      	ldr	r0, [pc, #104]	; (8001c64 <MX_GPIO_Init+0x2e8>)
 8001bfc:	f004 fb38 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c00:	2310      	movs	r3, #16
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c10:	4619      	mov	r1, r3
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <MX_GPIO_Init+0x2e0>)
 8001c14:	f004 fb2c 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001c18:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_GPIO_Init+0x2ec>)
 8001c2e:	f004 fb1f 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
	 LED2_Pin LED18_Pin */
	GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8001c32:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
			| LED2_Pin | LED18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <MX_GPIO_Init+0x2ec>)
 8001c4c:	f004 fb10 	bl	8006270 <HAL_GPIO_Init>
 8001c50:	e018      	b.n	8001c84 <MX_GPIO_Init+0x308>
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40022800 	.word	0x40022800
 8001c68:	40021c00 	.word	0x40021c00
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40022400 	.word	0x40022400
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	40020800 	.word	0x40020800

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <MX_GPIO_Init+0x3c0>)
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4829      	ldr	r0, [pc, #164]	; (8001d40 <MX_GPIO_Init+0x3c4>)
 8001c9a:	f004 fae9 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cae:	230a      	movs	r3, #10
 8001cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4822      	ldr	r0, [pc, #136]	; (8001d44 <MX_GPIO_Init+0x3c8>)
 8001cba:	f004 fad9 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
	GPIO_InitStruct.Pin = BP_JOYSTICK_Pin | RMII_RXER_Pin;
 8001cbe:	2384      	movs	r3, #132	; 0x84
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481d      	ldr	r0, [pc, #116]	; (8001d48 <MX_GPIO_Init+0x3cc>)
 8001cd2:	f004 facd 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4816      	ldr	r0, [pc, #88]	; (8001d4c <MX_GPIO_Init+0x3d0>)
 8001cf2:	f004 fabd 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pin : EXT_RST_Pin */
	GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480e      	ldr	r0, [pc, #56]	; (8001d48 <MX_GPIO_Init+0x3cc>)
 8001d0e:	f004 faaf 	bl	8006270 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001d12:	2328      	movs	r3, #40	; 0x28
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d22:	230a      	movs	r3, #10
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4808      	ldr	r0, [pc, #32]	; (8001d50 <MX_GPIO_Init+0x3d4>)
 8001d2e:	f004 fa9f 	bl	8006270 <HAL_GPIO_Init>

}
 8001d32:	bf00      	nop
 8001d34:	3740      	adds	r7, #64	; 0x40
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	10120000 	.word	0x10120000
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021c00 	.word	0x40021c00
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020000 	.word	0x40020000

08001d54 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f009 fcf8 	bl	800b752 <osDelay>
 8001d62:	e7fb      	b.n	8001d5c <StartDefaultTask+0x8>

08001d64 <jump.12884>:
	int iterateur_blocs_collision = 0;
	int bloc_x;
	int bloc_y;
	char text[5];

	void jump(uint8_t etat_saut) {
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	4662      	mov	r2, ip
 8001d70:	f8c7 c000 	str.w	ip, [r7]
		if (etat_saut == 0) {
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <jump.12884+0x1a>
			joueur_dy = 10.5;
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <jump.12884+0x28>)
 8001d7c:	6013      	str	r3, [r2, #0]
		}
	}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	41280000 	.word	0x41280000

08001d90 <player>:
void player(void const *argument) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09a      	sub	sp, #104	; 0x68
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d9c:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 8001d9e:	2314      	movs	r3, #20
 8001da0:	653b      	str	r3, [r7, #80]	; 0x50
	xLastWakeTime = xTaskGetTickCount();
 8001da2:	f00a fda1 	bl	800c8e8 <xTaskGetTickCount>
 8001da6:	4603      	mov	r3, r0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
	uint8_t etat_saut = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t etat_bouton_saut = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t etat_bouton_saut_old = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	float joueur_dy = 0;
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
	float joueur_dx = 0;
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	64bb      	str	r3, [r7, #72]	; 0x48
	float joueur_dy_limite = -15;
 8001dde:	4b96      	ldr	r3, [pc, #600]	; (8002038 <player+0x2a8>)
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
	float gravite = 0.6;
 8001de2:	4b96      	ldr	r3, [pc, #600]	; (800203c <player+0x2ac>)
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
	float joueur_x = 0;
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	663b      	str	r3, [r7, #96]	; 0x60
	float joueur_y = HAUTEUR_SOL - joueur_height;
 8001dec:	4b94      	ldr	r3, [pc, #592]	; (8002040 <player+0x2b0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a94      	ldr	r2, [pc, #592]	; (8002044 <player+0x2b4>)
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float joueur_x_old = 0;
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	float joueur_y_old = HAUTEUR_SOL - joueur_height;
 8001e08:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <player+0x2b0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a8d      	ldr	r2, [pc, #564]	; (8002044 <player+0x2b4>)
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	uint16_t cooldown_counter = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t joystick_x = 2077;
 8001e24:	f640 031d 	movw	r3, #2077	; 0x81d
 8001e28:	86fb      	strh	r3, [r7, #54]	; 0x36
	int iterateur_blocs_collision = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Infinite loop */
	for (;;) {

		joueur_x_old = position_joueur[0];
 8001e2e:	4b86      	ldr	r3, [pc, #536]	; (8002048 <player+0x2b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		joueur_y_old = position_joueur[1];
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <player+0x2b8>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		joueur_x = position_joueur[0];
 8001e4e:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <player+0x2b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		joueur_y = position_joueur[1];
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <player+0x2b8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		etat_bouton_saut_old = etat_bouton_saut;
 8001e6e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001e72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		etat_bouton_saut = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e7a:	4874      	ldr	r0, [pc, #464]	; (800204c <player+0x2bc>)
 8001e7c:	f004 fcac 	bl	80067d8 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		if ((etat_bouton_saut == 0) && (etat_bouton_saut_old == 1)) {
 8001e86:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d110      	bne.n	8001eb0 <player+0x120>
 8001e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10c      	bne.n	8001eb0 <player+0x120>
			jump(etat_saut);
 8001e96:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	469c      	mov	ip, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7ff ff5f 	bl	8001d64 <jump.12884>
			etat_saut = etat_saut + 1;
 8001ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		//recuperation du joystick
		sConfig.Channel = ADC_CHANNEL_8;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	61bb      	str	r3, [r7, #24]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4865      	ldr	r0, [pc, #404]	; (8002050 <player+0x2c0>)
 8001ebc:	f003 f97a 	bl	80051b4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001ec0:	4863      	ldr	r0, [pc, #396]	; (8002050 <player+0x2c0>)
 8001ec2:	f003 f825 	bl	8004f10 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001ec6:	bf00      	nop
 8001ec8:	2164      	movs	r1, #100	; 0x64
 8001eca:	4861      	ldr	r0, [pc, #388]	; (8002050 <player+0x2c0>)
 8001ecc:	f003 f8e0 	bl	8005090 <HAL_ADC_PollForConversion>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f8      	bne.n	8001ec8 <player+0x138>
			;
		//joystick_y = HAL_ADC_GetValue(&hadc3);

		HAL_ADC_Start(&hadc1);
 8001ed6:	485f      	ldr	r0, [pc, #380]	; (8002054 <player+0x2c4>)
 8001ed8:	f003 f81a 	bl	8004f10 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001edc:	bf00      	nop
 8001ede:	2164      	movs	r1, #100	; 0x64
 8001ee0:	485c      	ldr	r0, [pc, #368]	; (8002054 <player+0x2c4>)
 8001ee2:	f003 f8d5 	bl	8005090 <HAL_ADC_PollForConversion>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f8      	bne.n	8001ede <player+0x14e>
			;
		joystick_x = HAL_ADC_GetValue(&hadc1);
 8001eec:	4859      	ldr	r0, [pc, #356]	; (8002054 <player+0x2c4>)
 8001eee:	f003 f953 	bl	8005198 <HAL_ADC_GetValue>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	86fb      	strh	r3, [r7, #54]	; 0x36

		// ========== maj coord player ================

		joueur_dx = -(joystick_x - 2077) * 20 * 270 / (1000 * 2077);
 8001ef6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ef8:	f640 031d 	movw	r3, #2077	; 0x81d
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	f241 5218 	movw	r2, #5400	; 0x1518
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	4a54      	ldr	r2, [pc, #336]	; (8002058 <player+0x2c8>)
 8001f08:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0c:	441a      	add	r2, r3
 8001f0e:	1512      	asrs	r2, r2, #20
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

		joueur_x = joueur_x + joueur_dx;
 8001f20:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		joueur_dy =
				(float) ((joueur_dy - gravite)
 8001f30:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (joueur_dy_limite < (joueur_dy - gravite))
 8001f3c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f44:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001f48:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001f4c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d502      	bpl.n	8001f5c <player+0x1cc>
 8001f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f5a:	e001      	b.n	8001f60 <player+0x1d0>
 8001f5c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800205c <player+0x2cc>
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ joueur_dy_limite
								* (joueur_dy_limite >= (joueur_dy - gravite)));
 8001f64:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f68:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f70:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001f74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	db02      	blt.n	8001f84 <player+0x1f4>
 8001f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f82:	e001      	b.n	8001f88 <player+0x1f8>
 8001f84:	eddf 6a35 	vldr	s13, [pc, #212]	; 800205c <player+0x2cc>
 8001f88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		joueur_dy =
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	edc7 7a02 	vstr	s15, [r7, #8]
		joueur_y = joueur_y - joueur_dy;
 8001f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		if (joueur_y >= HAUTEUR_SOL - joueur_height) {
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <player+0x2b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <player+0x2b4>)
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	db0d      	blt.n	8001fe4 <player+0x254>
			joueur_y = HAUTEUR_SOL - joueur_height;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <player+0x2b0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <player+0x2b4>)
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			etat_saut = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		// bounds of screen
		if (joueur_x <= 0)
 8001fe4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	d803      	bhi.n	8001ffa <player+0x26a>
			joueur_x = 0;
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff8:	e01a      	b.n	8002030 <player+0x2a0>
		else if (joueur_x + joueur_width >= 480)
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <player+0x2d0>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002006:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002064 <player+0x2d4>
 8002012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	db09      	blt.n	8002030 <player+0x2a0>
			joueur_x = 480 - joueur_width;
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <player+0x2d0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

		//================ collisions ============

		for (iterateur_blocs_collision = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	657b      	str	r3, [r7, #84]	; 0x54
 8002034:	e142      	b.n	80022bc <player+0x52c>
 8002036:	bf00      	nop
 8002038:	c1700000 	.word	0xc1700000
 800203c:	3f19999a 	.word	0x3f19999a
 8002040:	20000028 	.word	0x20000028
 8002044:	20000030 	.word	0x20000030
 8002048:	20000374 	.word	0x20000374
 800204c:	40020000 	.word	0x40020000
 8002050:	20008a04 	.word	0x20008a04
 8002054:	200089bc 	.word	0x200089bc
 8002058:	813dee19 	.word	0x813dee19
 800205c:	00000000 	.word	0x00000000
 8002060:	20000031 	.word	0x20000031
 8002064:	43f00000 	.word	0x43f00000
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
				iterateur_blocs_collision += 1) {
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 8002068:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <player+0x4d4>)
 800206a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2db      	uxtb	r3, r3
					* blocs_size;
 8002076:	4a7c      	ldr	r2, [pc, #496]	; (8002268 <player+0x4d8>)
 8002078:	6812      	ldr	r2, [r2, #0]
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 8002080:	4a78      	ldr	r2, [pc, #480]	; (8002264 <player+0x4d4>)
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	b29b      	uxth	r3, r3
 800208c:	f003 030f 	and.w	r3, r3, #15
					* blocs_size;
 8002090:	4a75      	ldr	r2, [pc, #468]	; (8002268 <player+0x4d8>)
 8002092:	6812      	ldr	r2, [r2, #0]
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (!((bloc_x >= joueur_x + joueur_width)
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a4:	4b71      	ldr	r3, [pc, #452]	; (800226c <player+0x4dc>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020b0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	bfac      	ite	ge
 80020c2:	2301      	movge	r3, #1
 80020c4:	2300      	movlt	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80f1 	beq.w	80022b6 <player+0x526>
					|| (bloc_x + blocs_size <= joueur_x)
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <player+0x4d8>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	4413      	add	r3, r2
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80020e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	bfac      	ite	ge
 80020f2:	2301      	movge	r3, #1
 80020f4:	2300      	movlt	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80d9 	beq.w	80022b6 <player+0x526>
					|| (bloc_y >= joueur_y + joueur_height)
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <player+0x4e0>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800211e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	bfac      	ite	ge
 800212c:	2301      	movge	r3, #1
 800212e:	2300      	movlt	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80bc 	beq.w	80022b6 <player+0x526>
					|| (bloc_y + blocs_size <= joueur_y))) {
 800213e:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <player+0x4d8>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	4413      	add	r3, r2
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	bfac      	ite	ge
 800215c:	2301      	movge	r3, #1
 800215e:	2300      	movlt	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
			if (!((bloc_x >= joueur_x + joueur_width)
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a4 	beq.w	80022b6 <player+0x526>

				if (joueur_y + joueur_height + joueur_dy - 2 < bloc_y) {
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <player+0x4e0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800217a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	ed97 7a02 	vldr	s14, [r7, #8]
 8002186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800218e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d511      	bpl.n	80021ca <player+0x43a>
					joueur_dy = 0;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y - joueur_height;
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <player+0x4e0>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
					etat_saut = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021c8:	e075      	b.n	80022b6 <player+0x526>
				} else if (joueur_y > bloc_y + blocs_size - joueur_dy) {
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <player+0x4d8>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	4413      	add	r3, r2
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021da:	edd7 7a02 	vldr	s15, [r7, #8]
 80021de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80021e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	dd0d      	ble.n	800220c <player+0x47c>
					joueur_dy = 0;
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y + blocs_size;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <player+0x4d8>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002206:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800220a:	e054      	b.n	80022b6 <player+0x526>
				} else if ((joueur_x + joueur_width - 8 < bloc_x)
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <player+0x4dc>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002218:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002224:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	d51b      	bpl.n	8002274 <player+0x4e4>
						&& (joueur_dx > 0)) {
 800223c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	dd14      	ble.n	8002274 <player+0x4e4>

					joueur_x = bloc_x - joueur_width;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <player+0x4dc>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8002260:	e029      	b.n	80022b6 <player+0x526>
 8002262:	bf00      	nop
 8002264:	20000338 	.word	0x20000338
 8002268:	2000002c 	.word	0x2000002c
 800226c:	20000031 	.word	0x20000031
 8002270:	20000030 	.word	0x20000030
				} else if ((joueur_x > bloc_x + blocs_size - 8)
 8002274:	4b74      	ldr	r3, [pc, #464]	; (8002448 <player+0x6b8>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	4413      	add	r3, r2
 800227c:	3b08      	subs	r3, #8
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002286:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800228a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd10      	ble.n	80022b6 <player+0x526>
						&& (joueur_dx < 0)) {
 8002294:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d509      	bpl.n	80022b6 <player+0x526>

					joueur_x = bloc_x + blocs_size;
 80022a2:	4b69      	ldr	r3, [pc, #420]	; (8002448 <player+0x6b8>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	4413      	add	r3, r2
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				iterateur_blocs_collision += 1) {
 80022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b8:	3301      	adds	r3, #1
 80022ba:	657b      	str	r3, [r7, #84]	; 0x54
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
 80022bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		for (iterateur_blocs_collision = 0;
 80022be:	2b1d      	cmp	r3, #29
 80022c0:	f67f aed2 	bls.w	8002068 <player+0x2d8>
			}
		}

		//=============== affichage

		sprintf(text, "x %d", vies);
 80022c4:	4b61      	ldr	r3, [pc, #388]	; (800244c <player+0x6bc>)
 80022c6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	495f      	ldr	r1, [pc, #380]	; (8002450 <player+0x6c0>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00b fb26 	bl	800d924 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80022d8:	485e      	ldr	r0, [pc, #376]	; (8002454 <player+0x6c4>)
 80022da:	f001 f8fb 	bl	80034d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(433, 5, blocs_size / 2, blocs_size / 2);
 80022de:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <player+0x6b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da00      	bge.n	80022e8 <player+0x558>
 80022e6:	3301      	adds	r3, #1
 80022e8:	105b      	asrs	r3, r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <player+0x6b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da00      	bge.n	80022f6 <player+0x566>
 80022f4:	3301      	adds	r3, #1
 80022f6:	105b      	asrs	r3, r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2105      	movs	r1, #5
 80022fc:	f240 10b1 	movw	r0, #433	; 0x1b1
 8002300:	f001 faac 	bl	800385c <BSP_LCD_FillRect>
		BSP_LCD_DisplayStringAt(450, 6, (uint8_t*) text, LEFT_MODE);
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	2303      	movs	r3, #3
 800230a:	2106      	movs	r1, #6
 800230c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002310:	f001 f998 	bl	8003644 <BSP_LCD_DisplayStringAt>

		taskENTER_CRITICAL();
 8002314:	f00b f808 	bl	800d328 <vPortEnterCritical>
		position_joueur[0] = (uint16_t) joueur_x;
 8002318:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800231c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002320:	ee17 3a90 	vmov	r3, s15
 8002324:	b29b      	uxth	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <player+0x6c8>)
 800232a:	601a      	str	r2, [r3, #0]
		position_joueur[1] = (uint16_t) joueur_y;
 800232c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002334:	ee17 3a90 	vmov	r3, s15
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <player+0x6c8>)
 800233e:	605a      	str	r2, [r3, #4]
		position_joueur[2] = (uint16_t) joueur_x_old;
 8002340:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002348:	ee17 3a90 	vmov	r3, s15
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <player+0x6c8>)
 8002352:	609a      	str	r2, [r3, #8]
		position_joueur[3] = (uint16_t) joueur_y_old;
 8002354:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235c:	ee17 3a90 	vmov	r3, s15
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <player+0x6c8>)
 8002366:	60da      	str	r2, [r3, #12]
		taskEXIT_CRITICAL();
 8002368:	f00b f810 	bl	800d38c <vPortExitCritical>

		BSP_LCD_SelectLayer(1);
 800236c:	2001      	movs	r0, #1
 800236e:	f001 f8a1 	bl	80034b4 <BSP_LCD_SelectLayer>
		taskENTER_CRITICAL();
 8002372:	f00a ffd9 	bl	800d328 <vPortEnterCritical>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8002376:	4839      	ldr	r0, [pc, #228]	; (800245c <player+0x6cc>)
 8002378:	f001 f8ac 	bl	80034d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) position_joueur[2],
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <player+0x6c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	b298      	uxth	r0, r3
				(uint16_t) position_joueur[3], joueur_width, joueur_height);
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <player+0x6c8>)
 8002384:	68db      	ldr	r3, [r3, #12]
		BSP_LCD_FillRect((uint16_t) position_joueur[2],
 8002386:	b299      	uxth	r1, r3
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <player+0x6d0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <player+0x6d4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	f001 fa62 	bl	800385c <BSP_LCD_FillRect>
		if (damage_cooldown == 1 && cooldown_counter % 2 == 0
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <player+0x6d8>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d113      	bne.n	80023c8 <player+0x638>
 80023a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <player+0x638>
				&& cooldown_counter < 100) {
 80023ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023b2:	2b63      	cmp	r3, #99	; 0x63
 80023b4:	d808      	bhi.n	80023c8 <player+0x638>
			BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 80023b6:	4829      	ldr	r0, [pc, #164]	; (800245c <player+0x6cc>)
 80023b8:	f001 f88c 	bl	80034d4 <BSP_LCD_SetTextColor>
			cooldown_counter += 1;
 80023bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023c0:	3301      	adds	r3, #1
 80023c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80023c6:	e028      	b.n	800241a <player+0x68a>
		} else if (damage_cooldown == 1 && cooldown_counter % 2 == 1
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <player+0x6d8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d113      	bne.n	80023f8 <player+0x668>
 80023d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <player+0x668>
				&& cooldown_counter < 100) {
 80023de:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023e2:	2b63      	cmp	r3, #99	; 0x63
 80023e4:	d808      	bhi.n	80023f8 <player+0x668>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80023e6:	481b      	ldr	r0, [pc, #108]	; (8002454 <player+0x6c4>)
 80023e8:	f001 f874 	bl	80034d4 <BSP_LCD_SetTextColor>
			cooldown_counter += 1;
 80023ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023f0:	3301      	adds	r3, #1
 80023f2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80023f6:	e010      	b.n	800241a <player+0x68a>
		} else if (damage_cooldown == 0 || cooldown_counter >= 100) {
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <player+0x6d8>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <player+0x678>
 8002400:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002404:	2b63      	cmp	r3, #99	; 0x63
 8002406:	d908      	bls.n	800241a <player+0x68a>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002408:	4812      	ldr	r0, [pc, #72]	; (8002454 <player+0x6c4>)
 800240a:	f001 f863 	bl	80034d4 <BSP_LCD_SetTextColor>
			cooldown_counter = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			damage_cooldown = 0;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <player+0x6d8>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		}
		BSP_LCD_FillRect((uint16_t) position_joueur[0],
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <player+0x6c8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b298      	uxth	r0, r3
				(uint16_t) position_joueur[1], joueur_width, joueur_height);
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <player+0x6c8>)
 8002422:	685b      	ldr	r3, [r3, #4]
		BSP_LCD_FillRect((uint16_t) position_joueur[0],
 8002424:	b299      	uxth	r1, r3
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <player+0x6d0>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <player+0x6d4>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	f001 fa13 	bl	800385c <BSP_LCD_FillRect>
		//BSP_LCD_DrawBitmap(position_joueur[0], position_joueur[1], mario_basic_bits);
		taskEXIT_CRITICAL();
 8002436:	f00a ffa9 	bl	800d38c <vPortExitCritical>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800243a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002440:	4618      	mov	r0, r3
 8002442:	f009 ff69 	bl	800c318 <vTaskDelayUntil>
		joueur_x_old = position_joueur[0];
 8002446:	e4f2      	b.n	8001e2e <player+0x9e>
 8002448:	2000002c 	.word	0x2000002c
 800244c:	20000034 	.word	0x20000034
 8002450:	0800e1f0 	.word	0x0800e1f0
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	20000374 	.word	0x20000374
 800245c:	ff8080ff 	.word	0xff8080ff
 8002460:	20000031 	.word	0x20000031
 8002464:	20000030 	.word	0x20000030
 8002468:	200003ac 	.word	0x200003ac

0800246c <game_over>:
 * @brief Function implementing the Game_over thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_game_over */
void game_over(void const *argument) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN game_over */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8002474:	2314      	movs	r3, #20
 8002476:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8002478:	f00a fa36 	bl	800c8e8 <xTaskGetTickCount>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]

	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8002480:	488b      	ldr	r0, [pc, #556]	; (80026b0 <game_over+0x244>)
 8002482:	f001 f873 	bl	800356c <BSP_LCD_Clear>

	/* Infinite loop */
	for (;;) {
		if(game_state == 0)
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <game_over+0x248>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d135      	bne.n	80024fa <game_over+0x8e>
		{
			vies = 3;
 800248e:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <game_over+0x24c>)
 8002490:	2203      	movs	r2, #3
 8002492:	701a      	strb	r2, [r3, #0]
			BSP_LCD_SetFont(&Font24);
 8002494:	4889      	ldr	r0, [pc, #548]	; (80026bc <game_over+0x250>)
 8002496:	f001 f84f 	bl	8003538 <BSP_LCD_SetFont>
			BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800249a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800249e:	f001 f819 	bl	80034d4 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(145, 130, (uint8_t*) "BP1 to Play", LEFT_MODE);
 80024a2:	2303      	movs	r3, #3
 80024a4:	4a86      	ldr	r2, [pc, #536]	; (80026c0 <game_over+0x254>)
 80024a6:	2182      	movs	r1, #130	; 0x82
 80024a8:	2091      	movs	r0, #145	; 0x91
 80024aa:	f001 f8cb 	bl	8003644 <BSP_LCD_DisplayStringAt>
			if(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin)==0){
 80024ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b2:	4884      	ldr	r0, [pc, #528]	; (80026c4 <game_over+0x258>)
 80024b4:	f004 f990 	bl	80067d8 <HAL_GPIO_ReadPin>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <game_over+0x8e>
				game_state = 1;
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <game_over+0x248>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
				BSP_LCD_SetFont(&Font12);
 80024c4:	4880      	ldr	r0, [pc, #512]	; (80026c8 <game_over+0x25c>)
 80024c6:	f001 f837 	bl	8003538 <BSP_LCD_SetFont>
				vTaskResume(BadGuyHandle);
 80024ca:	4b80      	ldr	r3, [pc, #512]	; (80026cc <game_over+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00a f89e 	bl	800c610 <vTaskResume>
				vTaskResume(PlayerHandle);
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <game_over+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f00a f899 	bl	800c610 <vTaskResume>
				vTaskResume(PiecesHandle);
 80024de:	4b7d      	ldr	r3, [pc, #500]	; (80026d4 <game_over+0x268>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f00a f894 	bl	800c610 <vTaskResume>
				BSP_LCD_SelectLayer(1);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f000 ffe3 	bl	80034b4 <BSP_LCD_SelectLayer>
				BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 80024ee:	4870      	ldr	r0, [pc, #448]	; (80026b0 <game_over+0x244>)
 80024f0:	f001 f83c 	bl	800356c <BSP_LCD_Clear>
				BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 80024f4:	486e      	ldr	r0, [pc, #440]	; (80026b0 <game_over+0x244>)
 80024f6:	f001 f805 	bl	8003504 <BSP_LCD_SetBackColor>
			}
		}
		if(game_state == 1)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <game_over+0x248>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 80ce 	bne.w	80026a0 <game_over+0x234>
		{
			// ============== affichage sol
				BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002504:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8002508:	f000 ffe4 	bl	80034d4 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(0, HAUTEUR_SOL, 480, 272 - HAUTEUR_SOL);
 800250c:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <game_over+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b299      	uxth	r1, r3
 8002512:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <game_over+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 800251c:	b29b      	uxth	r3, r3
 800251e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002522:	2000      	movs	r0, #0
 8002524:	f001 f99a 	bl	800385c <BSP_LCD_FillRect>
			// ===== affichage bloc
			BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8002528:	486c      	ldr	r0, [pc, #432]	; (80026dc <game_over+0x270>)
 800252a:	f000 ffd3 	bl	80034d4 <BSP_LCD_SetTextColor>
			int iterateur_blocs = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
			for (iterateur_blocs = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e02d      	b.n	8002594 <game_over+0x128>
					iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
					iterateur_blocs += 1) {
				if ((blocs[iterateur_blocs] & (15)) != 0) {
 8002538:	4a69      	ldr	r2, [pc, #420]	; (80026e0 <game_over+0x274>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	2b00      	cmp	r3, #0
 8002546:	d022      	beq.n	800258e <game_over+0x122>
					BSP_LCD_FillRect(
							((blocs[iterateur_blocs] >> 8) & (255)) * blocs_size,
 8002548:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <game_over+0x274>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					BSP_LCD_FillRect(
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <game_over+0x278>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	fb12 f303 	smulbb	r3, r2, r3
 800255e:	b298      	uxth	r0, r3
							blocs_size * ((blocs[iterateur_blocs] >> 4) & (15)),
 8002560:	4a5f      	ldr	r2, [pc, #380]	; (80026e0 <game_over+0x274>)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					BSP_LCD_FillRect(
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	b29b      	uxth	r3, r3
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b5c      	ldr	r3, [pc, #368]	; (80026e4 <game_over+0x278>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	fb12 f303 	smulbb	r3, r2, r3
 800257c:	b299      	uxth	r1, r3
 800257e:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <game_over+0x278>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <game_over+0x278>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	f001 f967 	bl	800385c <BSP_LCD_FillRect>
					iterateur_blocs += 1) {
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
					iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
 8002594:	697b      	ldr	r3, [r7, #20]
			for (iterateur_blocs = 0;
 8002596:	2b1d      	cmp	r3, #29
 8002598:	d9ce      	bls.n	8002538 <game_over+0xcc>
							blocs_size, blocs_size);
				}
			}
			//================affichage piece
			for (iterateur_blocs = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e05f      	b.n	8002660 <game_over+0x1f4>
					iterateur_blocs
							< sizeof(position_pieces) / sizeof(position_pieces[0]);
					iterateur_blocs += 1) {
				if ((position_pieces[iterateur_blocs] & (15)) != 0) {
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <game_over+0x27c>)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d054      	beq.n	800265a <game_over+0x1ee>
					if ((position_pieces[iterateur_blocs] & (15)) == 2)
 80025b0:	4a4d      	ldr	r2, [pc, #308]	; (80026e8 <game_over+0x27c>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d103      	bne.n	80025c8 <game_over+0x15c>
						BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80025c0:	484a      	ldr	r0, [pc, #296]	; (80026ec <game_over+0x280>)
 80025c2:	f000 ff87 	bl	80034d4 <BSP_LCD_SetTextColor>
 80025c6:	e00b      	b.n	80025e0 <game_over+0x174>
					else if ((position_pieces[iterateur_blocs] & (15)) == 1)
 80025c8:	4a47      	ldr	r2, [pc, #284]	; (80026e8 <game_over+0x27c>)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d103      	bne.n	80025e0 <game_over+0x174>
						BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80025d8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80025dc:	f000 ff7a 	bl	80034d4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(
							((position_pieces[iterateur_blocs] >> 8) & (255))
 80025e0:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <game_over+0x27c>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					BSP_LCD_FillRect(
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <game_over+0x278>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	fb12 f303 	smulbb	r3, r2, r3
 80025f6:	b29a      	uxth	r2, r3
									* (blocs_size) + blocs_size / 4,
 80025f8:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <game_over+0x278>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <game_over+0x196>
 8002600:	3303      	adds	r3, #3
 8002602:	109b      	asrs	r3, r3, #2
					BSP_LCD_FillRect(
 8002604:	b29b      	uxth	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b298      	uxth	r0, r3
							blocs_size
									* ((position_pieces[iterateur_blocs] >> 4) & (15))
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <game_over+0x27c>)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					BSP_LCD_FillRect(
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	b29b      	uxth	r3, r3
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	b29a      	uxth	r2, r3
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <game_over+0x278>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	fb12 f303 	smulbb	r3, r2, r3
 8002626:	b29a      	uxth	r2, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <game_over+0x278>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da00      	bge.n	8002632 <game_over+0x1c6>
 8002630:	3303      	adds	r3, #3
 8002632:	109b      	asrs	r3, r3, #2
					BSP_LCD_FillRect(
 8002634:	b29b      	uxth	r3, r3
 8002636:	4413      	add	r3, r2
 8002638:	b299      	uxth	r1, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <game_over+0x278>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	da00      	bge.n	8002644 <game_over+0x1d8>
 8002642:	3301      	adds	r3, #1
 8002644:	105b      	asrs	r3, r3, #1
					BSP_LCD_FillRect(
 8002646:	b29a      	uxth	r2, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <game_over+0x278>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	da00      	bge.n	8002652 <game_over+0x1e6>
 8002650:	3301      	adds	r3, #1
 8002652:	105b      	asrs	r3, r3, #1
					BSP_LCD_FillRect(
 8002654:	b29b      	uxth	r3, r3
 8002656:	f001 f901 	bl	800385c <BSP_LCD_FillRect>
					iterateur_blocs += 1) {
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
							< sizeof(position_pieces) / sizeof(position_pieces[0]);
 8002660:	697b      	ldr	r3, [r7, #20]
			for (iterateur_blocs = 0;
 8002662:	2b13      	cmp	r3, #19
 8002664:	d99c      	bls.n	80025a0 <game_over+0x134>
				}
			}

			if(vies < 0){
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <game_over+0x24c>)
 8002668:	f993 3000 	ldrsb.w	r3, [r3]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da17      	bge.n	80026a0 <game_over+0x234>

			vTaskSuspend(BadGuyHandle);
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <game_over+0x260>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f009 ff05 	bl	800c484 <vTaskSuspend>
			vTaskSuspend(PlayerHandle);
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <game_over+0x264>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f009 ff00 	bl	800c484 <vTaskSuspend>
			vTaskSuspend(PiecesHandle);
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <game_over+0x268>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f009 fefb 	bl	800c484 <vTaskSuspend>
			BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 800268e:	4808      	ldr	r0, [pc, #32]	; (80026b0 <game_over+0x244>)
 8002690:	f000 ff6c 	bl	800356c <BSP_LCD_Clear>
			BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <game_over+0x244>)
 8002696:	f000 ff69 	bl	800356c <BSP_LCD_Clear>
			game_state = 0;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <game_over+0x248>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		}}
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 fe36 	bl	800c318 <vTaskDelayUntil>
		if(game_state == 0)
 80026ac:	e6eb      	b.n	8002486 <game_over+0x1a>
 80026ae:	bf00      	nop
 80026b0:	ff8080ff 	.word	0xff8080ff
 80026b4:	200003ad 	.word	0x200003ad
 80026b8:	20000034 	.word	0x20000034
 80026bc:	20000038 	.word	0x20000038
 80026c0:	0800e1f8 	.word	0x0800e1f8
 80026c4:	40020000 	.word	0x40020000
 80026c8:	20000040 	.word	0x20000040
 80026cc:	20008c40 	.word	0x20008c40
 80026d0:	20008c78 	.word	0x20008c78
 80026d4:	20008c80 	.word	0x20008c80
 80026d8:	20000028 	.word	0x20000028
 80026dc:	ffffa500 	.word	0xffffa500
 80026e0:	20000338 	.word	0x20000338
 80026e4:	2000002c 	.word	0x2000002c
 80026e8:	20000384 	.word	0x20000384
 80026ec:	ffff0000 	.word	0xffff0000

080026f0 <pieces>:
 * @brief Function implementing the Pieces thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_pieces */
void pieces(void const *argument) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pieces */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 80026f8:	2314      	movs	r3, #20
 80026fa:	623b      	str	r3, [r7, #32]
	xLastWakeTime = xTaskGetTickCount();
 80026fc:	f00a f8f4 	bl	800c8e8 <xTaskGetTickCount>
 8002700:	4603      	mov	r3, r0
 8002702:	617b      	str	r3, [r7, #20]

	uint16_t iterateur_piece_collision = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t joueur_x = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	83fb      	strh	r3, [r7, #30]
	uint16_t joueur_y = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	83bb      	strh	r3, [r7, #28]
	uint16_t piece_x = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	837b      	strh	r3, [r7, #26]
	uint16_t piece_y = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	833b      	strh	r3, [r7, #24]

	uint8_t piece_compteur = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char text[12];

	/* Infinite loop */
	for (;;) {

		for (iterateur_piece_collision = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002722:	e0e0      	b.n	80028e6 <pieces+0x1f6>
				iterateur_piece_collision
						< sizeof(position_pieces) / sizeof(position_pieces[0]);
				iterateur_piece_collision += 1) {
			piece_x = ((position_pieces[iterateur_piece_collision] >> 8 & 255))
 8002724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002726:	4a97      	ldr	r2, [pc, #604]	; (8002984 <pieces+0x294>)
 8002728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					* blocs_size + blocs_size / 4;
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b95      	ldr	r3, [pc, #596]	; (8002988 <pieces+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	fb12 f303 	smulbb	r3, r2, r3
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <pieces+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	da00      	bge.n	8002746 <pieces+0x56>
 8002744:	3303      	adds	r3, #3
 8002746:	109b      	asrs	r3, r3, #2
 8002748:	b29b      	uxth	r3, r3
			piece_x = ((position_pieces[iterateur_piece_collision] >> 8 & 255))
 800274a:	4413      	add	r3, r2
 800274c:	837b      	strh	r3, [r7, #26]
			piece_y = ((position_pieces[iterateur_piece_collision] >> 4 & 15))
 800274e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002750:	4a8c      	ldr	r2, [pc, #560]	; (8002984 <pieces+0x294>)
 8002752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
					* blocs_size + blocs_size / 4;
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	b29b      	uxth	r3, r3
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b89      	ldr	r3, [pc, #548]	; (8002988 <pieces+0x298>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	fb12 f303 	smulbb	r3, r2, r3
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b86      	ldr	r3, [pc, #536]	; (8002988 <pieces+0x298>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da00      	bge.n	8002776 <pieces+0x86>
 8002774:	3303      	adds	r3, #3
 8002776:	109b      	asrs	r3, r3, #2
 8002778:	b29b      	uxth	r3, r3
			piece_y = ((position_pieces[iterateur_piece_collision] >> 4 & 15))
 800277a:	4413      	add	r3, r2
 800277c:	833b      	strh	r3, [r7, #24]
			joueur_x = position_joueur[0];
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <pieces+0x29c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	83fb      	strh	r3, [r7, #30]
			joueur_y = position_joueur[1];
 8002784:	4b81      	ldr	r3, [pc, #516]	; (800298c <pieces+0x29c>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	83bb      	strh	r3, [r7, #28]

			if ((!((piece_x >= joueur_x + joueur_width)
 800278a:	8b7a      	ldrh	r2, [r7, #26]
 800278c:	8bfb      	ldrh	r3, [r7, #30]
 800278e:	4980      	ldr	r1, [pc, #512]	; (8002990 <pieces+0x2a0>)
 8002790:	7809      	ldrb	r1, [r1, #0]
 8002792:	440b      	add	r3, r1
 8002794:	429a      	cmp	r2, r3
 8002796:	f280 80a3 	bge.w	80028e0 <pieces+0x1f0>
					|| (piece_x + blocs_size / 2 <= joueur_x)
 800279a:	8b7a      	ldrh	r2, [r7, #26]
 800279c:	4b7a      	ldr	r3, [pc, #488]	; (8002988 <pieces+0x298>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da00      	bge.n	80027a6 <pieces+0xb6>
 80027a4:	3301      	adds	r3, #1
 80027a6:	105b      	asrs	r3, r3, #1
 80027a8:	441a      	add	r2, r3
 80027aa:	8bfb      	ldrh	r3, [r7, #30]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f340 8097 	ble.w	80028e0 <pieces+0x1f0>
					|| (piece_y >= joueur_y + joueur_height)
 80027b2:	8b3a      	ldrh	r2, [r7, #24]
 80027b4:	8bbb      	ldrh	r3, [r7, #28]
 80027b6:	4977      	ldr	r1, [pc, #476]	; (8002994 <pieces+0x2a4>)
 80027b8:	7809      	ldrb	r1, [r1, #0]
 80027ba:	440b      	add	r3, r1
 80027bc:	429a      	cmp	r2, r3
 80027be:	f280 808f 	bge.w	80028e0 <pieces+0x1f0>
					|| (piece_y + blocs_size / 2 <= joueur_y)))
 80027c2:	8b3a      	ldrh	r2, [r7, #24]
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <pieces+0x298>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da00      	bge.n	80027ce <pieces+0xde>
 80027cc:	3301      	adds	r3, #1
 80027ce:	105b      	asrs	r3, r3, #1
 80027d0:	441a      	add	r2, r3
 80027d2:	8bbb      	ldrh	r3, [r7, #28]
			if ((!((piece_x >= joueur_x + joueur_width)
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f340 8083 	ble.w	80028e0 <pieces+0x1f0>
					&& ((position_pieces[iterateur_piece_collision] & 15) != 0)) {
 80027da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027dc:	4a69      	ldr	r2, [pc, #420]	; (8002984 <pieces+0x294>)
 80027de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d07a      	beq.n	80028e0 <pieces+0x1f0>

				if ((position_pieces[iterateur_piece_collision] & (15)) == 1)
 80027ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027ec:	4a65      	ldr	r2, [pc, #404]	; (8002984 <pieces+0x294>)
 80027ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <pieces+0x116>
					piece_compteur = piece_compteur + 1;
 80027fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027fe:	3301      	adds	r3, #1
 8002800:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002804:	e022      	b.n	800284c <pieces+0x15c>
				else if ((position_pieces[iterateur_piece_collision] & (15))
 8002806:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002808:	4a5e      	ldr	r2, [pc, #376]	; (8002984 <pieces+0x294>)
 800280a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2b02      	cmp	r3, #2
 8002814:	d11a      	bne.n	800284c <pieces+0x15c>
						== 2) {
					taskENTER_CRITICAL();
 8002816:	f00a fd87 	bl	800d328 <vPortEnterCritical>
					//etat_joueur = 2;
					joueur_height = 32;
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <pieces+0x2a4>)
 800281c:	2220      	movs	r2, #32
 800281e:	701a      	strb	r2, [r3, #0]
					position_joueur[1] -= 8;
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <pieces+0x29c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	3b08      	subs	r3, #8
 8002826:	4a59      	ldr	r2, [pc, #356]	; (800298c <pieces+0x29c>)
 8002828:	6053      	str	r3, [r2, #4]
					position_joueur[3] -= 8;
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <pieces+0x29c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	3b08      	subs	r3, #8
 8002830:	4a56      	ldr	r2, [pc, #344]	; (800298c <pieces+0x29c>)
 8002832:	60d3      	str	r3, [r2, #12]
					taskEXIT_CRITICAL();
 8002834:	f00a fdaa 	bl	800d38c <vPortExitCritical>
					position_pieces[iterateur_piece_collision] =
							position_pieces[iterateur_piece_collision] - 1;
 8002838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800283a:	4a52      	ldr	r2, [pc, #328]	; (8002984 <pieces+0x294>)
 800283c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
					position_pieces[iterateur_piece_collision] =
 8002840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
							position_pieces[iterateur_piece_collision] - 1;
 8002842:	3a01      	subs	r2, #1
 8002844:	b291      	uxth	r1, r2
					position_pieces[iterateur_piece_collision] =
 8002846:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <pieces+0x294>)
 8002848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				position_pieces[iterateur_piece_collision] =
						position_pieces[iterateur_piece_collision] - 1;
 800284c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <pieces+0x294>)
 8002850:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				position_pieces[iterateur_piece_collision] =
 8002854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
						position_pieces[iterateur_piece_collision] - 1;
 8002856:	3a01      	subs	r2, #1
 8002858:	b291      	uxth	r1, r2
				position_pieces[iterateur_piece_collision] =
 800285a:	4a4a      	ldr	r2, [pc, #296]	; (8002984 <pieces+0x294>)
 800285c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8002860:	484d      	ldr	r0, [pc, #308]	; (8002998 <pieces+0x2a8>)
 8002862:	f000 fe37 	bl	80034d4 <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(
						((position_pieces[iterateur_piece_collision] >> 8)
 8002866:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002868:	4a46      	ldr	r2, [pc, #280]	; (8002984 <pieces+0x294>)
 800286a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				BSP_LCD_FillRect(
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <pieces+0x298>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	fb12 f303 	smulbb	r3, r2, r3
 800287c:	b29a      	uxth	r2, r3
								& (255)) * (blocs_size) + blocs_size / 4,
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <pieces+0x298>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da00      	bge.n	8002888 <pieces+0x198>
 8002886:	3303      	adds	r3, #3
 8002888:	109b      	asrs	r3, r3, #2
				BSP_LCD_FillRect(
 800288a:	b29b      	uxth	r3, r3
 800288c:	4413      	add	r3, r2
 800288e:	b298      	uxth	r0, r3
						blocs_size
								* ((position_pieces[iterateur_piece_collision]
 8002890:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002892:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <pieces+0x294>)
 8002894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				BSP_LCD_FillRect(
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b29b      	uxth	r3, r3
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <pieces+0x298>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	fb12 f303 	smulbb	r3, r2, r3
 80028ac:	b29a      	uxth	r2, r3
										>> 4) & (15)) + blocs_size / 4,
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <pieces+0x298>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da00      	bge.n	80028b8 <pieces+0x1c8>
 80028b6:	3303      	adds	r3, #3
 80028b8:	109b      	asrs	r3, r3, #2
				BSP_LCD_FillRect(
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b299      	uxth	r1, r3
						blocs_size / 2, blocs_size / 2);
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <pieces+0x298>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da00      	bge.n	80028ca <pieces+0x1da>
 80028c8:	3301      	adds	r3, #1
 80028ca:	105b      	asrs	r3, r3, #1
				BSP_LCD_FillRect(
 80028cc:	b29a      	uxth	r2, r3
						blocs_size / 2, blocs_size / 2);
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <pieces+0x298>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da00      	bge.n	80028d8 <pieces+0x1e8>
 80028d6:	3301      	adds	r3, #1
 80028d8:	105b      	asrs	r3, r3, #1
				BSP_LCD_FillRect(
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f000 ffbe 	bl	800385c <BSP_LCD_FillRect>
				iterateur_piece_collision += 1) {
 80028e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028e2:	3301      	adds	r3, #1
 80028e4:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iterateur_piece_collision = 0;
 80028e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028e8:	2b13      	cmp	r3, #19
 80028ea:	f67f af1b 	bls.w	8002724 <pieces+0x34>
			}

		}
		taskENTER_CRITICAL();
 80028ee:	f00a fd1b 	bl	800d328 <vPortEnterCritical>
		if (piece_compteur >= 5) {
 80028f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d914      	bls.n	8002924 <pieces+0x234>
			piece_compteur = piece_compteur % 5;
 80028fa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <pieces+0x2ac>)
 8002900:	fba3 1302 	umull	r1, r3, r3, r2
 8002904:	0899      	lsrs	r1, r3, #2
 8002906:	460b      	mov	r3, r1
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			vies = vies + 1;
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <pieces+0x2b0>)
 8002914:	f993 3000 	ldrsb.w	r3, [r3]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	b25a      	sxtb	r2, r3
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <pieces+0x2b0>)
 8002922:	701a      	strb	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8002924:	f00a fd32 	bl	800d38c <vPortExitCritical>
		sprintf(text, "x %d", piece_compteur);
 8002928:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	491c      	ldr	r1, [pc, #112]	; (80029a4 <pieces+0x2b4>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00a fff6 	bl	800d924 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002938:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800293c:	f000 fdca 	bl	80034d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(5, 5, blocs_size / 2, blocs_size / 2);
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <pieces+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da00      	bge.n	800294a <pieces+0x25a>
 8002948:	3301      	adds	r3, #1
 800294a:	105b      	asrs	r3, r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <pieces+0x298>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da00      	bge.n	8002958 <pieces+0x268>
 8002956:	3301      	adds	r3, #1
 8002958:	105b      	asrs	r3, r3, #1
 800295a:	b29b      	uxth	r3, r3
 800295c:	2105      	movs	r1, #5
 800295e:	2005      	movs	r0, #5
 8002960:	f000 ff7c 	bl	800385c <BSP_LCD_FillRect>
		BSP_LCD_DisplayStringAt(blocs_size, 6, (uint8_t*) text, LEFT_MODE);
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <pieces+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b298      	uxth	r0, r3
 800296a:	f107 0208 	add.w	r2, r7, #8
 800296e:	2303      	movs	r3, #3
 8002970:	2106      	movs	r1, #6
 8002972:	f000 fe67 	bl	8003644 <BSP_LCD_DisplayStringAt>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	6a39      	ldr	r1, [r7, #32]
 800297c:	4618      	mov	r0, r3
 800297e:	f009 fccb 	bl	800c318 <vTaskDelayUntil>
		for (iterateur_piece_collision = 0;
 8002982:	e6cc      	b.n	800271e <pieces+0x2e>
 8002984:	20000384 	.word	0x20000384
 8002988:	2000002c 	.word	0x2000002c
 800298c:	20000374 	.word	0x20000374
 8002990:	20000031 	.word	0x20000031
 8002994:	20000030 	.word	0x20000030
 8002998:	ff8080ff 	.word	0xff8080ff
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	20000034 	.word	0x20000034
 80029a4:	0800e1f0 	.word	0x0800e1f0

080029a8 <badguy>:
 * @brief Function implementing the BadGuy thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_badguy */
void badguy(void const *argument) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b092      	sub	sp, #72	; 0x48
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN badguy */
	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 80029b0:	2314      	movs	r3, #20
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
	xLastWakeTime = xTaskGetTickCount();
 80029b4:	f009 ff98 	bl	800c8e8 <xTaskGetTickCount>
 80029b8:	4603      	mov	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]

	//initialisation des variables du mechant

	float mechant_dy = 0;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
	float mechant_dx = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	643b      	str	r3, [r7, #64]	; 0x40
	mechant_dx = -800 * 20 * 270 / (1000 * 2077);
 80029c8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
	float mechant_dy_limite = -15;
 80029ce:	4bc1      	ldr	r3, [pc, #772]	; (8002cd4 <badguy+0x32c>)
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float gravite = 0.6;
 80029d2:	4bc1      	ldr	r3, [pc, #772]	; (8002cd8 <badguy+0x330>)
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28

	float mechant_x = 300;
 80029d6:	4bc1      	ldr	r3, [pc, #772]	; (8002cdc <badguy+0x334>)
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	;
	float mechant_y = HAUTEUR_SOL - mechant_height;
 80029da:	4bc1      	ldr	r3, [pc, #772]	; (8002ce0 <badguy+0x338>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4ac1      	ldr	r2, [pc, #772]	; (8002ce4 <badguy+0x33c>)
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float mechant_x_old = 0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
	float mechant_y_old = HAUTEUR_SOL - mechant_height;
 80029f6:	4bba      	ldr	r3, [pc, #744]	; (8002ce0 <badguy+0x338>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4aba      	ldr	r2, [pc, #744]	; (8002ce4 <badguy+0x33c>)
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a08:	edc7 7a08 	vstr	s15, [r7, #32]

	int iterateur_blocs_collision = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
	char text[5];

	/* Infinite loop */
	for (;;) {

		mechant_x_old = mechant_x;
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
		mechant_y_old = mechant_y;
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	623b      	str	r3, [r7, #32]
		// ========== maj coord player ================

		mechant_x = mechant_x + mechant_dx;
 8002a18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002a1c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		mechant_dy = (float) ((mechant_dy - gravite)
 8002a28:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002a2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
				* (mechant_dy_limite < (mechant_dy - gravite))
 8002a34:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002a38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a3c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002a40:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	d502      	bpl.n	8002a54 <badguy+0xac>
 8002a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a52:	e001      	b.n	8002a58 <badguy+0xb0>
 8002a54:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002ce8 <badguy+0x340>
 8002a58:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ mechant_dy_limite
						* (mechant_dy_limite >= (mechant_dy - gravite)));
 8002a5c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002a60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	db02      	blt.n	8002a7c <badguy+0xd4>
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a7a:	e001      	b.n	8002a80 <badguy+0xd8>
 8002a7c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8002ce8 <badguy+0x340>
 8002a80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
		mechant_dy = (float) ((mechant_dy - gravite)
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		mechant_y = mechant_y - mechant_dy;
 8002a90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		if (mechant_y >= HAUTEUR_SOL - mechant_height) {
 8002aa0:	4b8f      	ldr	r3, [pc, #572]	; (8002ce0 <badguy+0x338>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8f      	ldr	r2, [pc, #572]	; (8002ce4 <badguy+0x33c>)
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	db0a      	blt.n	8002ad6 <badguy+0x12e>
			mechant_y = HAUTEUR_SOL - mechant_height;
 8002ac0:	4b87      	ldr	r3, [pc, #540]	; (8002ce0 <badguy+0x338>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a87      	ldr	r2, [pc, #540]	; (8002ce4 <badguy+0x33c>)
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		}

		// bounds of screen
		if (mechant_x <= 0) {
 8002ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	d806      	bhi.n	8002af2 <badguy+0x14a>
			mechant_x = 0;
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
			mechant_dx = 800 * 20 * 270 / (1000 * 2077);
 8002aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
 8002af0:	e01d      	b.n	8002b2e <badguy+0x186>
		} else if (mechant_x + mechant_width >= 480) {
 8002af2:	4b7e      	ldr	r3, [pc, #504]	; (8002cec <badguy+0x344>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002cf0 <badguy+0x348>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	db0c      	blt.n	8002b2e <badguy+0x186>
			mechant_x = 480 - mechant_width;
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <badguy+0x344>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			mechant_dx = -800 * 20 * 270 / (1000 * 2077);
 8002b28:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
		}

		//================ collisions ============

		for (iterateur_blocs_collision = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
 8002b32:	e132      	b.n	8002d9a <badguy+0x3f2>
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
				iterateur_blocs_collision += 1) {
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 8002b34:	4a6f      	ldr	r2, [pc, #444]	; (8002cf4 <badguy+0x34c>)
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
					* blocs_size;
 8002b42:	4a6d      	ldr	r2, [pc, #436]	; (8002cf8 <badguy+0x350>)
 8002b44:	6812      	ldr	r2, [r2, #0]
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <badguy+0x34c>)
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f003 030f 	and.w	r3, r3, #15
					* blocs_size;
 8002b5c:	4a66      	ldr	r2, [pc, #408]	; (8002cf8 <badguy+0x350>)
 8002b5e:	6812      	ldr	r2, [r2, #0]
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	61bb      	str	r3, [r7, #24]

			if (!((bloc_x >= mechant_x + mechant_width)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b70:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <badguy+0x344>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	bfac      	ite	ge
 8002b8e:	2301      	movge	r3, #1
 8002b90:	2300      	movlt	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f083 0301 	eor.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80fa 	beq.w	8002d94 <badguy+0x3ec>
					|| (bloc_x + blocs_size <= mechant_x)
 8002ba0:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <badguy+0x350>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	bfac      	ite	ge
 8002bbe:	2301      	movge	r3, #1
 8002bc0:	2300      	movlt	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80e2 	beq.w	8002d94 <badguy+0x3ec>
					|| (bloc_y >= mechant_y + mechant_height)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <badguy+0x33c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002be6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	bfac      	ite	ge
 8002bf8:	2301      	movge	r3, #1
 8002bfa:	2300      	movlt	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f083 0301 	eor.w	r3, r3, #1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80c5 	beq.w	8002d94 <badguy+0x3ec>
					|| (bloc_y + blocs_size <= mechant_y))) {
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <badguy+0x350>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4413      	add	r3, r2
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c26:	bfac      	ite	ge
 8002c28:	2301      	movge	r3, #1
 8002c2a:	2300      	movlt	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
			if (!((bloc_x >= mechant_x + mechant_width)
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80ad 	beq.w	8002d94 <badguy+0x3ec>

				if (mechant_y + mechant_height + mechant_dy - 2 < bloc_y) {
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <badguy+0x33c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c5a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c70:	d50e      	bpl.n	8002c90 <badguy+0x2e8>
					mechant_dy = 0;
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	647b      	str	r3, [r7, #68]	; 0x44
					mechant_y = bloc_y - mechant_height;
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <badguy+0x33c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8002c8e:	e081      	b.n	8002d94 <badguy+0x3ec>
				} else if (mechant_y > bloc_y + blocs_size - mechant_dy) {
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <badguy+0x350>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	dd22      	ble.n	8002cfc <badguy+0x354>
					mechant_dy = 0;
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
					mechant_y = bloc_y + blocs_size;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <badguy+0x350>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8002cd0:	e060      	b.n	8002d94 <badguy+0x3ec>
 8002cd2:	bf00      	nop
 8002cd4:	c1700000 	.word	0xc1700000
 8002cd8:	3f19999a 	.word	0x3f19999a
 8002cdc:	43960000 	.word	0x43960000
 8002ce0:	20000028 	.word	0x20000028
 8002ce4:	20000032 	.word	0x20000032
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	20000033 	.word	0x20000033
 8002cf0:	43f00000 	.word	0x43f00000
 8002cf4:	20000338 	.word	0x20000338
 8002cf8:	2000002c 	.word	0x2000002c
				} else if ((mechant_x + mechant_width - 8 < bloc_x)
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <badguy+0x580>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002d14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	d512      	bpl.n	8002d52 <badguy+0x3aa>
						&& (mechant_dx > 0)) {
 8002d2c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	dd0b      	ble.n	8002d52 <badguy+0x3aa>

					mechant_x = bloc_x - mechant_width;
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <badguy+0x580>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002d50:	e020      	b.n	8002d94 <badguy+0x3ec>
				} else if ((mechant_x > bloc_x + blocs_size - 8)
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <badguy+0x584>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b08      	subs	r3, #8
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d64:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	dd10      	ble.n	8002d94 <badguy+0x3ec>
						&& (mechant_dx < 0)) {
 8002d72:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d509      	bpl.n	8002d94 <badguy+0x3ec>

					mechant_x = bloc_x + blocs_size;
 8002d80:	4b6a      	ldr	r3, [pc, #424]	; (8002f2c <badguy+0x584>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				iterateur_blocs_collision += 1) {
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	3301      	adds	r3, #1
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		for (iterateur_blocs_collision = 0;
 8002d9c:	2b1d      	cmp	r3, #29
 8002d9e:	f67f aec9 	bls.w	8002b34 <badguy+0x18c>
			}
		}

		//=============== affichage

		BSP_LCD_SelectLayer(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f000 fb86 	bl	80034b4 <BSP_LCD_SelectLayer>
		taskENTER_CRITICAL();
 8002da8:	f00a fabe 	bl	800d328 <vPortEnterCritical>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8002dac:	4860      	ldr	r0, [pc, #384]	; (8002f30 <badguy+0x588>)
 8002dae:	f000 fb91 	bl	80034d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) mechant_x_old, (uint16_t) mechant_y_old,
 8002db2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dba:	ee17 3a90 	vmov	r3, s15
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc8:	ee17 3a90 	vmov	r3, s15
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <badguy+0x580>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	4b57      	ldr	r3, [pc, #348]	; (8002f34 <badguy+0x58c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f000 fd3f 	bl	800385c <BSP_LCD_FillRect>
				mechant_width, mechant_height);
		BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002dde:	4856      	ldr	r0, [pc, #344]	; (8002f38 <badguy+0x590>)
 8002de0:	f000 fb78 	bl	80034d4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) mechant_x, (uint16_t) mechant_y,
 8002de4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dec:	ee17 3a90 	vmov	r3, s15
 8002df0:	b298      	uxth	r0, r3
 8002df2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	b299      	uxth	r1, r3
 8002e00:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <badguy+0x580>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <badguy+0x58c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f000 fd26 	bl	800385c <BSP_LCD_FillRect>
				mechant_width, mechant_height);
		if (!((position_joueur[0] >= mechant_x + mechant_width)
 8002e10:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <badguy+0x594>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <badguy+0x580>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	bfac      	ite	ge
 8002e3a:	2301      	movge	r3, #1
 8002e3c:	2300      	movlt	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d064      	beq.n	8002f14 <badguy+0x56c>
				|| (position_joueur[0] + joueur_width <= mechant_x)
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <badguy+0x594>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a3c      	ldr	r2, [pc, #240]	; (8002f40 <badguy+0x598>)
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	bfac      	ite	ge
 8002e6a:	2301      	movge	r3, #1
 8002e6c:	2300      	movlt	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f083 0301 	eor.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04c      	beq.n	8002f14 <badguy+0x56c>
				|| (position_joueur[1] >= mechant_y + mechant_height)
 8002e7a:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <badguy+0x594>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <badguy+0x58c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea2:	bfac      	ite	ge
 8002ea4:	2301      	movge	r3, #1
 8002ea6:	2300      	movlt	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02f      	beq.n	8002f14 <badguy+0x56c>
				|| (position_joueur[1] + joueur_height <= mechant_y))) {
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <badguy+0x594>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <badguy+0x59c>)
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	bfac      	ite	ge
 8002ed4:	2301      	movge	r3, #1
 8002ed6:	2300      	movlt	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f083 0301 	eor.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
		if (!((position_joueur[0] >= mechant_x + mechant_width)
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <badguy+0x56c>
			if (damage_cooldown == 0) {
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <badguy+0x5a0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d113      	bne.n	8002f14 <badguy+0x56c>
				if (joueur_height == 32)
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <badguy+0x59c>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d103      	bne.n	8002efc <badguy+0x554>
				{
					joueur_height = 24;
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <badguy+0x59c>)
 8002ef6:	2218      	movs	r2, #24
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e008      	b.n	8002f0e <badguy+0x566>
				}
				else
					vies = vies - 1;
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <badguy+0x5a4>)
 8002efe:	f993 3000 	ldrsb.w	r3, [r3]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	b25a      	sxtb	r2, r3
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <badguy+0x5a4>)
 8002f0c:	701a      	strb	r2, [r3, #0]
				damage_cooldown = 1;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <badguy+0x5a0>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
			}
		}

		taskEXIT_CRITICAL();
 8002f14:	f00a fa3a 	bl	800d38c <vPortExitCritical>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f009 f9fa 	bl	800c318 <vTaskDelayUntil>
		mechant_x_old = mechant_x;
 8002f24:	e574      	b.n	8002a10 <badguy+0x68>
 8002f26:	bf00      	nop
 8002f28:	20000033 	.word	0x20000033
 8002f2c:	2000002c 	.word	0x2000002c
 8002f30:	ff8080ff 	.word	0xff8080ff
 8002f34:	20000032 	.word	0x20000032
 8002f38:	ffa52a2a 	.word	0xffa52a2a
 8002f3c:	20000374 	.word	0x20000374
 8002f40:	20000031 	.word	0x20000031
 8002f44:	20000030 	.word	0x20000030
 8002f48:	200003ac 	.word	0x200003ac
 8002f4c:	20000034 	.word	0x20000034

08002f50 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002f62:	f001 ff4f 	bl	8004e04 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40001000 	.word	0x40001000

08002f74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f78:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f7a:	e7fe      	b.n	8002f7a <Error_Handler+0x6>

08002f7c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a51      	ldr	r2, [pc, #324]	; (80030cc <I2Cx_MspInit+0x150>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d14d      	bne.n	8003028 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a4f      	ldr	r2, [pc, #316]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002fa8:	2312      	movs	r3, #18
 8002faa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4845      	ldr	r0, [pc, #276]	; (80030d4 <I2Cx_MspInit+0x158>)
 8002fc0:	f003 f956 	bl	8006270 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4840      	ldr	r0, [pc, #256]	; (80030d4 <I2Cx_MspInit+0x158>)
 8002fd2:	f003 f94d 	bl	8006270 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a3d      	ldr	r2, [pc, #244]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002fdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a37      	ldr	r2, [pc, #220]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002ff4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ff8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <I2Cx_MspInit+0x154>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <I2Cx_MspInit+0x154>)
 8003000:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003004:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	210f      	movs	r1, #15
 800300a:	2048      	movs	r0, #72	; 0x48
 800300c:	f002 fbce 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003010:	2048      	movs	r0, #72	; 0x48
 8003012:	f002 fbe7 	bl	80057e4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	210f      	movs	r1, #15
 800301a:	2049      	movs	r0, #73	; 0x49
 800301c:	f002 fbc6 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003020:	2049      	movs	r0, #73	; 0x49
 8003022:	f002 fbdf 	bl	80057e4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003026:	e04d      	b.n	80030c4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <I2Cx_MspInit+0x154>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <I2Cx_MspInit+0x154>)
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	6313      	str	r3, [r2, #48]	; 0x30
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <I2Cx_MspInit+0x154>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003044:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003046:	2312      	movs	r3, #18
 8003048:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003052:	2304      	movs	r3, #4
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4619      	mov	r1, r3
 800305c:	481e      	ldr	r0, [pc, #120]	; (80030d8 <I2Cx_MspInit+0x15c>)
 800305e:	f003 f907 	bl	8006270 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	4619      	mov	r1, r3
 800306e:	481a      	ldr	r0, [pc, #104]	; (80030d8 <I2Cx_MspInit+0x15c>)
 8003070:	f003 f8fe 	bl	8006270 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <I2Cx_MspInit+0x154>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <I2Cx_MspInit+0x154>)
 800307a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <I2Cx_MspInit+0x154>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <I2Cx_MspInit+0x154>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <I2Cx_MspInit+0x154>)
 8003092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003096:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <I2Cx_MspInit+0x154>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <I2Cx_MspInit+0x154>)
 800309e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	210f      	movs	r1, #15
 80030a8:	201f      	movs	r0, #31
 80030aa:	f002 fb7f 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80030ae:	201f      	movs	r0, #31
 80030b0:	f002 fb98 	bl	80057e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	210f      	movs	r1, #15
 80030b8:	2020      	movs	r0, #32
 80030ba:	f002 fb77 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80030be:	2020      	movs	r0, #32
 80030c0:	f002 fb90 	bl	80057e4 <HAL_NVIC_EnableIRQ>
}
 80030c4:	bf00      	nop
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200003b0 	.word	0x200003b0
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40021c00 	.word	0x40021c00
 80030d8:	40020400 	.word	0x40020400

080030dc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f003 fe97 	bl	8006e18 <HAL_I2C_GetState>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d125      	bne.n	800313c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <I2Cx_Init+0x68>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d103      	bne.n	8003100 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <I2Cx_Init+0x6c>)
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e002      	b.n	8003106 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <I2Cx_Init+0x70>)
 8003104:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <I2Cx_Init+0x74>)
 800310a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff23 	bl	8002f7c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f003 fb80 	bl	800683c <HAL_I2C_Init>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200003b0 	.word	0x200003b0
 8003148:	40005c00 	.word	0x40005c00
 800314c:	40005400 	.word	0x40005400
 8003150:	40912732 	.word	0x40912732

08003154 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af04      	add	r7, sp, #16
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	72fb      	strb	r3, [r7, #11]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003172:	7afb      	ldrb	r3, [r7, #11]
 8003174:	b299      	uxth	r1, r3
 8003176:	88f8      	ldrh	r0, [r7, #6]
 8003178:	893a      	ldrh	r2, [r7, #8]
 800317a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317e:	9302      	str	r3, [sp, #8]
 8003180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f003 fd2a 	bl	8006be4 <HAL_I2C_Mem_Read>
 8003190:	4603      	mov	r3, r0
 8003192:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	4619      	mov	r1, r3
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f832 	bl	8003208 <I2Cx_Error>
  }
  return status;    
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08a      	sub	sp, #40	; 0x28
 80031b2:	af04      	add	r7, sp, #16
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	4608      	mov	r0, r1
 80031b8:	4611      	mov	r1, r2
 80031ba:	461a      	mov	r2, r3
 80031bc:	4603      	mov	r3, r0
 80031be:	72fb      	strb	r3, [r7, #11]
 80031c0:	460b      	mov	r3, r1
 80031c2:	813b      	strh	r3, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80031cc:	7afb      	ldrb	r3, [r7, #11]
 80031ce:	b299      	uxth	r1, r3
 80031d0:	88f8      	ldrh	r0, [r7, #6]
 80031d2:	893a      	ldrh	r2, [r7, #8]
 80031d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4603      	mov	r3, r0
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f003 fbe9 	bl	80069bc <HAL_I2C_Mem_Write>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d004      	beq.n	80031fe <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	4619      	mov	r1, r3
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f805 	bl	8003208 <I2Cx_Error>
  }
  return status;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f003 fba1 	bl	800695c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff5e 	bl	80030dc <I2Cx_Init>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <TS_IO_Init+0x10>)
 800322e:	f7ff ff55 	bl	80030dc <I2Cx_Init>
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200003b0 	.word	0x200003b0

0800323c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af02      	add	r7, sp, #8
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
 8003246:	460b      	mov	r3, r1
 8003248:	71bb      	strb	r3, [r7, #6]
 800324a:	4613      	mov	r3, r2
 800324c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800324e:	79bb      	ldrb	r3, [r7, #6]
 8003250:	b29a      	uxth	r2, r3
 8003252:	79f9      	ldrb	r1, [r7, #7]
 8003254:	2301      	movs	r3, #1
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	1d7b      	adds	r3, r7, #5
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2301      	movs	r3, #1
 800325e:	4803      	ldr	r0, [pc, #12]	; (800326c <TS_IO_Write+0x30>)
 8003260:	f7ff ffa5 	bl	80031ae <I2Cx_WriteMultiple>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	200003b0 	.word	0x200003b0

08003270 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af02      	add	r7, sp, #8
 8003276:	4603      	mov	r3, r0
 8003278:	460a      	mov	r2, r1
 800327a:	71fb      	strb	r3, [r7, #7]
 800327c:	4613      	mov	r3, r2
 800327e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003284:	79bb      	ldrb	r3, [r7, #6]
 8003286:	b29a      	uxth	r2, r3
 8003288:	79f9      	ldrb	r1, [r7, #7]
 800328a:	2301      	movs	r3, #1
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	f107 030f 	add.w	r3, r7, #15
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2301      	movs	r3, #1
 8003296:	4804      	ldr	r0, [pc, #16]	; (80032a8 <TS_IO_Read+0x38>)
 8003298:	f7ff ff5c 	bl	8003154 <I2Cx_ReadMultiple>

  return read_value;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200003b0 	.word	0x200003b0

080032ac <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f001 fdc5 	bl	8004e44 <HAL_Delay>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032ca:	2228      	movs	r2, #40	; 0x28
 80032cc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032d0:	2209      	movs	r2, #9
 80032d2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032d6:	2235      	movs	r2, #53	; 0x35
 80032d8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032dc:	220b      	movs	r2, #11
 80032de:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032e2:	f240 121b 	movw	r2, #283	; 0x11b
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032ea:	f240 2215 	movw	r2, #533	; 0x215
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032f2:	f240 121d 	movw	r2, #285	; 0x11d
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <BSP_LCD_Init+0xcc>)
 80032fa:	f240 2235 	movw	r2, #565	; 0x235
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003300:	2100      	movs	r1, #0
 8003302:	4823      	ldr	r0, [pc, #140]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003304:	f000 fc1c 	bl	8003b40 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <BSP_LCD_Init+0xcc>)
 800330a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800330e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003312:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003316:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <BSP_LCD_Init+0xcc>)
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <BSP_LCD_Init+0xcc>)
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <BSP_LCD_Init+0xcc>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <BSP_LCD_Init+0xcc>)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <BSP_LCD_Init+0xd0>)
 800334c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800334e:	4810      	ldr	r0, [pc, #64]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003350:	f004 f9f4 	bl	800773c <HAL_LTDC_GetState>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800335a:	2100      	movs	r1, #0
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <BSP_LCD_Init+0xcc>)
 800335e:	f000 fb15 	bl	800398c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003362:	480b      	ldr	r0, [pc, #44]	; (8003390 <BSP_LCD_Init+0xcc>)
 8003364:	f004 f81a 	bl	800739c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003368:	2201      	movs	r2, #1
 800336a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800336e:	480a      	ldr	r0, [pc, #40]	; (8003398 <BSP_LCD_Init+0xd4>)
 8003370:	f003 fa4a 	bl	8006808 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2108      	movs	r1, #8
 8003378:	4808      	ldr	r0, [pc, #32]	; (800339c <BSP_LCD_Init+0xd8>)
 800337a:	f003 fa45 	bl	8006808 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800337e:	f000 fcff 	bl	8003d80 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <BSP_LCD_Init+0xdc>)
 8003384:	f000 f8d8 	bl	8003538 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20008c84 	.word	0x20008c84
 8003394:	40016800 	.word	0x40016800
 8003398:	40022000 	.word	0x40022000
 800339c:	40022800 	.word	0x40022800
 80033a0:	20000038 	.word	0x20000038

080033a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <BSP_LCD_GetXSize+0x20>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <BSP_LCD_GetXSize+0x24>)
 80033ae:	2134      	movs	r1, #52	; 0x34
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	681b      	ldr	r3, [r3, #0]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	2000043c 	.word	0x2000043c
 80033c8:	20008c84 	.word	0x20008c84

080033cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <BSP_LCD_GetYSize+0x20>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <BSP_LCD_GetYSize+0x24>)
 80033d6:	2134      	movs	r1, #52	; 0x34
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3364      	adds	r3, #100	; 0x64
 80033e0:	681b      	ldr	r3, [r3, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000043c 	.word	0x2000043c
 80033f0:	20008c84 	.word	0x20008c84

080033f4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b090      	sub	sp, #64	; 0x40
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003404:	f7ff ffce 	bl	80033a4 <BSP_LCD_GetXSize>
 8003408:	4603      	mov	r3, r0
 800340a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003410:	f7ff ffdc 	bl	80033cc <BSP_LCD_GetYSize>
 8003414:	4603      	mov	r3, r0
 8003416:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003420:	23ff      	movs	r3, #255	; 0xff
 8003422:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800343a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003440:	2307      	movs	r3, #7
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003444:	f7ff ffae 	bl	80033a4 <BSP_LCD_GetXSize>
 8003448:	4603      	mov	r3, r0
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800344c:	f7ff ffbe 	bl	80033cc <BSP_LCD_GetYSize>
 8003450:	4603      	mov	r3, r0
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003454:	88fa      	ldrh	r2, [r7, #6]
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	4619      	mov	r1, r3
 800345c:	4812      	ldr	r0, [pc, #72]	; (80034a8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800345e:	f004 f92f 	bl	80076c0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	4911      	ldr	r1, [pc, #68]	; (80034ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	3304      	adds	r3, #4
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	490c      	ldr	r1, [pc, #48]	; (80034ac <BSP_LCD_LayerDefaultInit+0xb8>)
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3308      	adds	r3, #8
 8003488:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800348a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800348c:	88fa      	ldrh	r2, [r7, #6]
 800348e:	4907      	ldr	r1, [pc, #28]	; (80034ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	3740      	adds	r7, #64	; 0x40
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20008c84 	.word	0x20008c84
 80034ac:	20000440 	.word	0x20000440
 80034b0:	20000038 	.word	0x20000038

080034b4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <BSP_LCD_SelectLayer+0x1c>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
} 
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000043c 	.word	0x2000043c

080034d4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <BSP_LCD_SetTextColor+0x28>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4907      	ldr	r1, [pc, #28]	; (8003500 <BSP_LCD_SetTextColor+0x2c>)
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	601a      	str	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	2000043c 	.word	0x2000043c
 8003500:	20000440 	.word	0x20000440

08003504 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <BSP_LCD_SetBackColor+0x2c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4908      	ldr	r1, [pc, #32]	; (8003534 <BSP_LCD_SetBackColor+0x30>)
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3304      	adds	r3, #4
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000043c 	.word	0x2000043c
 8003534:	20000440 	.word	0x20000440

08003538 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <BSP_LCD_SetFont+0x2c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4908      	ldr	r1, [pc, #32]	; (8003568 <BSP_LCD_SetFont+0x30>)
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3308      	adds	r3, #8
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	2000043c 	.word	0x2000043c
 8003568:	20000440 	.word	0x20000440

0800356c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356e:	b085      	sub	sp, #20
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <BSP_LCD_Clear+0x48>)
 8003576:	681c      	ldr	r4, [r3, #0]
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <BSP_LCD_Clear+0x48>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0e      	ldr	r2, [pc, #56]	; (80035b8 <BSP_LCD_Clear+0x4c>)
 800357e:	2134      	movs	r1, #52	; 0x34
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	335c      	adds	r3, #92	; 0x5c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461d      	mov	r5, r3
 800358c:	f7ff ff0a 	bl	80033a4 <BSP_LCD_GetXSize>
 8003590:	4606      	mov	r6, r0
 8003592:	f7ff ff1b 	bl	80033cc <BSP_LCD_GetYSize>
 8003596:	4602      	mov	r2, r0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	4632      	mov	r2, r6
 80035a4:	4629      	mov	r1, r5
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 fb9e 	bl	8003ce8 <LL_FillBuffer>
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b4:	2000043c 	.word	0x2000043c
 80035b8:	20008c84 	.word	0x20008c84

080035bc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
 80035c6:	460b      	mov	r3, r1
 80035c8:	80bb      	strh	r3, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3308      	adds	r3, #8
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4c14      	ldr	r4, [pc, #80]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4423      	add	r3, r4
 80035fa:	3308      	adds	r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003600:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4423      	add	r3, r4
 8003614:	3308      	adds	r3, #8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	889b      	ldrh	r3, [r3, #4]
 800361a:	3307      	adds	r3, #7
 800361c:	2b00      	cmp	r3, #0
 800361e:	da00      	bge.n	8003622 <BSP_LCD_DisplayChar+0x66>
 8003620:	3307      	adds	r3, #7
 8003622:	10db      	asrs	r3, r3, #3
 8003624:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003628:	18ca      	adds	r2, r1, r3
 800362a:	88b9      	ldrh	r1, [r7, #4]
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 faa2 	bl	8003b78 <DrawChar>
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	2000043c 	.word	0x2000043c
 8003640:	20000440 	.word	0x20000440

08003644 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60ba      	str	r2, [r7, #8]
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	81fb      	strh	r3, [r7, #14]
 8003652:	460b      	mov	r3, r1
 8003654:	81bb      	strh	r3, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800365a:	2301      	movs	r3, #1
 800365c:	83fb      	strh	r3, [r7, #30]
 800365e:	2300      	movs	r3, #0
 8003660:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800366e:	e002      	b.n	8003676 <BSP_LCD_DisplayStringAt+0x32>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	617a      	str	r2, [r7, #20]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f6      	bne.n	8003670 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003682:	f7ff fe8f 	bl	80033a4 <BSP_LCD_GetXSize>
 8003686:	4b4f      	ldr	r3, [pc, #316]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	494f      	ldr	r1, [pc, #316]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3308      	adds	r3, #8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	889b      	ldrh	r3, [r3, #4]
 800369c:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d01c      	beq.n	80036e2 <BSP_LCD_DisplayStringAt+0x9e>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d017      	beq.n	80036dc <BSP_LCD_DisplayStringAt+0x98>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d12e      	bne.n	800370e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad1      	subs	r1, r2, r3
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4843      	ldr	r0, [pc, #268]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	3308      	adds	r3, #8
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	889b      	ldrh	r3, [r3, #4]
 80036cc:	fb03 f301 	mul.w	r3, r3, r1
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	89fb      	ldrh	r3, [r7, #14]
 80036d6:	4413      	add	r3, r2
 80036d8:	83fb      	strh	r3, [r7, #30]
      break;
 80036da:	e01b      	b.n	8003714 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	83fb      	strh	r3, [r7, #30]
      break;
 80036e0:	e018      	b.n	8003714 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	b299      	uxth	r1, r3
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4836      	ldr	r0, [pc, #216]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4403      	add	r3, r0
 80036fa:	3308      	adds	r3, #8
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	889b      	ldrh	r3, [r3, #4]
 8003700:	fb11 f303 	smulbb	r3, r1, r3
 8003704:	b29a      	uxth	r2, r3
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	83fb      	strh	r3, [r7, #30]
      break;
 800370c:	e002      	b.n	8003714 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	83fb      	strh	r3, [r7, #30]
      break;
 8003712:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003714:	8bfb      	ldrh	r3, [r7, #30]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <BSP_LCD_DisplayStringAt+0xde>
 800371a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800371e:	2b00      	cmp	r3, #0
 8003720:	da1d      	bge.n	800375e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003726:	e01a      	b.n	800375e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	89b9      	ldrh	r1, [r7, #12]
 800372e:	8bfb      	ldrh	r3, [r7, #30]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff43 	bl	80035bc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4923      	ldr	r1, [pc, #140]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3308      	adds	r3, #8
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	889a      	ldrh	r2, [r3, #4]
 800374c:	8bfb      	ldrh	r3, [r7, #30]
 800374e:	4413      	add	r3, r2
 8003750:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
    i++;
 8003758:	8bbb      	ldrh	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2dc      	uxtb	r4, r3
 800376c:	f7ff fe1a 	bl	80033a4 <BSP_LCD_GetXSize>
 8003770:	4605      	mov	r5, r0
 8003772:	8bb9      	ldrh	r1, [r7, #28]
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4813      	ldr	r0, [pc, #76]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	3308      	adds	r3, #8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	889b      	ldrh	r3, [r3, #4]
 800378a:	fb03 f301 	mul.w	r3, r3, r1
 800378e:	1aeb      	subs	r3, r5, r3
 8003790:	b299      	uxth	r1, r3
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <BSP_LCD_DisplayStringAt+0x180>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	480c      	ldr	r0, [pc, #48]	; (80037c8 <BSP_LCD_DisplayStringAt+0x184>)
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4403      	add	r3, r0
 80037a2:	3308      	adds	r3, #8
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	889b      	ldrh	r3, [r3, #4]
 80037a8:	4299      	cmp	r1, r3
 80037aa:	bf2c      	ite	cs
 80037ac:	2301      	movcs	r3, #1
 80037ae:	2300      	movcc	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4023      	ands	r3, r4
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1b6      	bne.n	8003728 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80037ba:	bf00      	nop
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bdb0      	pop	{r4, r5, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	2000043c 	.word	0x2000043c
 80037c8:	20000440 	.word	0x20000440

080037cc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	603a      	str	r2, [r7, #0]
 80037d6:	80fb      	strh	r3, [r7, #6]
 80037d8:	460b      	mov	r3, r1
 80037da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <BSP_LCD_DrawPixel+0x88>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <BSP_LCD_DrawPixel+0x8c>)
 80037e2:	2134      	movs	r1, #52	; 0x34
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	3348      	adds	r3, #72	; 0x48
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d116      	bne.n	8003820 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <BSP_LCD_DrawPixel+0x88>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <BSP_LCD_DrawPixel+0x8c>)
 80037f8:	2134      	movs	r1, #52	; 0x34
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	335c      	adds	r3, #92	; 0x5c
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	88bd      	ldrh	r5, [r7, #4]
 8003806:	f7ff fdcd 	bl	80033a4 <BSP_LCD_GetXSize>
 800380a:	4603      	mov	r3, r0
 800380c:	fb03 f205 	mul.w	r2, r3, r5
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	4413      	add	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4423      	add	r3, r4
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b292      	uxth	r2, r2
 800381c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800381e:	e015      	b.n	800384c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <BSP_LCD_DrawPixel+0x88>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <BSP_LCD_DrawPixel+0x8c>)
 8003826:	2134      	movs	r1, #52	; 0x34
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	335c      	adds	r3, #92	; 0x5c
 8003830:	681c      	ldr	r4, [r3, #0]
 8003832:	88bd      	ldrh	r5, [r7, #4]
 8003834:	f7ff fdb6 	bl	80033a4 <BSP_LCD_GetXSize>
 8003838:	4603      	mov	r3, r0
 800383a:	fb03 f205 	mul.w	r2, r3, r5
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4423      	add	r3, r4
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}
 8003854:	2000043c 	.word	0x2000043c
 8003858:	20008c84 	.word	0x20008c84

0800385c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af02      	add	r7, sp, #8
 8003864:	4604      	mov	r4, r0
 8003866:	4608      	mov	r0, r1
 8003868:	4611      	mov	r1, r2
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	80fb      	strh	r3, [r7, #6]
 8003870:	4603      	mov	r3, r0
 8003872:	80bb      	strh	r3, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4930      	ldr	r1, [pc, #192]	; (8003948 <BSP_LCD_FillRect+0xec>)
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fe1e 	bl	80034d4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003898:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <BSP_LCD_FillRect+0xf0>)
 800389e:	2134      	movs	r1, #52	; 0x34
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3348      	adds	r3, #72	; 0x48
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d114      	bne.n	80038d8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <BSP_LCD_FillRect+0xf0>)
 80038b4:	2134      	movs	r1, #52	; 0x34
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	335c      	adds	r3, #92	; 0x5c
 80038be:	681c      	ldr	r4, [r3, #0]
 80038c0:	f7ff fd70 	bl	80033a4 <BSP_LCD_GetXSize>
 80038c4:	4602      	mov	r2, r0
 80038c6:	88bb      	ldrh	r3, [r7, #4]
 80038c8:	fb03 f202 	mul.w	r2, r3, r2
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	4413      	add	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4423      	add	r3, r4
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e013      	b.n	8003900 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <BSP_LCD_FillRect+0xf0>)
 80038de:	2134      	movs	r1, #52	; 0x34
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	335c      	adds	r3, #92	; 0x5c
 80038e8:	681c      	ldr	r4, [r3, #0]
 80038ea:	f7ff fd5b 	bl	80033a4 <BSP_LCD_GetXSize>
 80038ee:	4602      	mov	r2, r0
 80038f0:	88bb      	ldrh	r3, [r7, #4]
 80038f2:	fb03 f202 	mul.w	r2, r3, r2
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4423      	add	r3, r4
 80038fe:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 8003902:	681c      	ldr	r4, [r3, #0]
 8003904:	68fd      	ldr	r5, [r7, #12]
 8003906:	887e      	ldrh	r6, [r7, #2]
 8003908:	f8b7 8000 	ldrh.w	r8, [r7]
 800390c:	f7ff fd4a 	bl	80033a4 <BSP_LCD_GetXSize>
 8003910:	4602      	mov	r2, r0
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	1ad1      	subs	r1, r2, r3
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <BSP_LCD_FillRect+0xe8>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	480b      	ldr	r0, [pc, #44]	; (8003948 <BSP_LCD_FillRect+0xec>)
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9100      	str	r1, [sp, #0]
 800392c:	4643      	mov	r3, r8
 800392e:	4632      	mov	r2, r6
 8003930:	4629      	mov	r1, r5
 8003932:	4620      	mov	r0, r4
 8003934:	f000 f9d8 	bl	8003ce8 <LL_FillBuffer>
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003942:	bf00      	nop
 8003944:	2000043c 	.word	0x2000043c
 8003948:	20000440 	.word	0x20000440
 800394c:	20008c84 	.word	0x20008c84

08003950 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <BSP_LCD_DisplayOn+0x30>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <BSP_LCD_DisplayOn+0x30>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <BSP_LCD_DisplayOn+0x34>)
 800396c:	f002 ff4c 	bl	8006808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003970:	2201      	movs	r2, #1
 8003972:	2108      	movs	r1, #8
 8003974:	4804      	ldr	r0, [pc, #16]	; (8003988 <BSP_LCD_DisplayOn+0x38>)
 8003976:	f002 ff47 	bl	8006808 <HAL_GPIO_WritePin>
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20008c84 	.word	0x20008c84
 8003984:	40022000 	.word	0x40022000
 8003988:	40022800 	.word	0x40022800

0800398c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003996:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 800399c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039c6:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a57      	ldr	r2, [pc, #348]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039cc:	f043 0310 	orr.w	r3, r3, #16
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039de:	4b52      	ldr	r3, [pc, #328]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a51      	ldr	r2, [pc, #324]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a45      	ldr	r2, [pc, #276]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1a:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <BSP_LCD_MspInit+0x19c>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003a6e:	2310      	movs	r3, #16
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003a7e:	230e      	movs	r3, #14
 8003a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	4828      	ldr	r0, [pc, #160]	; (8003b2c <BSP_LCD_MspInit+0x1a0>)
 8003a8a:	f002 fbf1 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003a98:	2309      	movs	r3, #9
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4823      	ldr	r0, [pc, #140]	; (8003b30 <BSP_LCD_MspInit+0x1a4>)
 8003aa4:	f002 fbe4 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003aa8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003ab2:	230e      	movs	r3, #14
 8003ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aba:	4619      	mov	r1, r3
 8003abc:	481d      	ldr	r0, [pc, #116]	; (8003b34 <BSP_LCD_MspInit+0x1a8>)
 8003abe:	f002 fbd7 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003ac2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003acc:	230e      	movs	r3, #14
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4818      	ldr	r0, [pc, #96]	; (8003b38 <BSP_LCD_MspInit+0x1ac>)
 8003ad8:	f002 fbca 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003adc:	23f7      	movs	r3, #247	; 0xf7
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003ae4:	230e      	movs	r3, #14
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aec:	4619      	mov	r1, r3
 8003aee:	4813      	ldr	r0, [pc, #76]	; (8003b3c <BSP_LCD_MspInit+0x1b0>)
 8003af0:	f002 fbbe 	bl	8006270 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003afa:	2301      	movs	r3, #1
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b02:	4619      	mov	r1, r3
 8003b04:	480b      	ldr	r0, [pc, #44]	; (8003b34 <BSP_LCD_MspInit+0x1a8>)
 8003b06:	f002 fbb3 	bl	8006270 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b16:	4619      	mov	r1, r3
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <BSP_LCD_MspInit+0x1b0>)
 8003b1a:	f002 fba9 	bl	8006270 <HAL_GPIO_Init>
}
 8003b1e:	bf00      	nop
 8003b20:	3740      	adds	r7, #64	; 0x40
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40021800 	.word	0x40021800
 8003b34:	40022000 	.word	0x40022000
 8003b38:	40022400 	.word	0x40022400
 8003b3c:	40022800 	.word	0x40022800

08003b40 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <BSP_LCD_ClockConfig+0x34>)
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <BSP_LCD_ClockConfig+0x34>)
 8003b52:	22c0      	movs	r2, #192	; 0xc0
 8003b54:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <BSP_LCD_ClockConfig+0x34>)
 8003b58:	2205      	movs	r2, #5
 8003b5a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <BSP_LCD_ClockConfig+0x34>)
 8003b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <BSP_LCD_ClockConfig+0x34>)
 8003b66:	f004 fc99 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000458 	.word	0x20000458

08003b78 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	603a      	str	r2, [r7, #0]
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	460b      	mov	r3, r1
 8003b86:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003b90:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <DrawChar+0x168>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4953      	ldr	r1, [pc, #332]	; (8003ce4 <DrawChar+0x16c>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	88db      	ldrh	r3, [r3, #6]
 8003ba6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003ba8:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <DrawChar+0x168>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	494d      	ldr	r1, [pc, #308]	; (8003ce4 <DrawChar+0x16c>)
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3308      	adds	r3, #8
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	889b      	ldrh	r3, [r3, #4]
 8003bbe:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003bc0:	8a3b      	ldrh	r3, [r7, #16]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	da00      	bge.n	8003bca <DrawChar+0x52>
 8003bc8:	3307      	adds	r3, #7
 8003bca:	10db      	asrs	r3, r3, #3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	8a3b      	ldrh	r3, [r7, #16]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e076      	b.n	8003cce <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003be0:	8a3b      	ldrh	r3, [r7, #16]
 8003be2:	3307      	adds	r3, #7
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	da00      	bge.n	8003bea <DrawChar+0x72>
 8003be8:	3307      	adds	r3, #7
 8003bea:	10db      	asrs	r3, r3, #3
 8003bec:	461a      	mov	r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fb03 f302 	mul.w	r3, r3, r2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003bfa:	8a3b      	ldrh	r3, [r7, #16]
 8003bfc:	3307      	adds	r3, #7
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da00      	bge.n	8003c04 <DrawChar+0x8c>
 8003c02:	3307      	adds	r3, #7
 8003c04:	10db      	asrs	r3, r3, #3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d002      	beq.n	8003c10 <DrawChar+0x98>
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d004      	beq.n	8003c18 <DrawChar+0xa0>
 8003c0e:	e00c      	b.n	8003c2a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
      break;
 8003c16:	e016      	b.n	8003c46 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	3201      	adds	r2, #1
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
      break;
 8003c28:	e00d      	b.n	8003c46 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	041a      	lsls	r2, r3, #16
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3301      	adds	r3, #1
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	3202      	adds	r2, #2
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
      break;
 8003c44:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e036      	b.n	8003cba <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003c4c:	8a3a      	ldrh	r2, [r7, #16]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	4413      	add	r3, r2
 8003c56:	3b01      	subs	r3, #1
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4413      	add	r3, r2
 8003c70:	b298      	uxth	r0, r3
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <DrawChar+0x168>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	491b      	ldr	r1, [pc, #108]	; (8003ce4 <DrawChar+0x16c>)
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	4619      	mov	r1, r3
 8003c88:	f7ff fda0 	bl	80037cc <BSP_LCD_DrawPixel>
 8003c8c:	e012      	b.n	8003cb4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	4413      	add	r3, r2
 8003c96:	b298      	uxth	r0, r3
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <DrawChar+0x168>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4911      	ldr	r1, [pc, #68]	; (8003ce4 <DrawChar+0x16c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3304      	adds	r3, #4
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7ff fd8c 	bl	80037cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	8a3b      	ldrh	r3, [r7, #16]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3c4      	bcc.n	8003c4c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003cc2:	88bb      	ldrh	r3, [r7, #4]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	8a7b      	ldrh	r3, [r7, #18]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d384      	bcc.n	8003be0 <DrawChar+0x68>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000043c 	.word	0x2000043c
 8003ce4:	20000440 	.word	0x20000440

08003ce8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <LL_FillBuffer+0x88>)
 8003cf8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cfc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <LL_FillBuffer+0x8c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <LL_FillBuffer+0x90>)
 8003d04:	2134      	movs	r1, #52	; 0x34
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3348      	adds	r3, #72	; 0x48
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d103      	bne.n	8003d1c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d16:	2202      	movs	r2, #2
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	e002      	b.n	8003d22 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003d22:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <LL_FillBuffer+0x94>)
 8003d2c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003d2e:	4810      	ldr	r0, [pc, #64]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d30:	f002 f812 	bl	8005d58 <HAL_DMA2D_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	480c      	ldr	r0, [pc, #48]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d3e:	f002 f969 	bl	8006014 <HAL_DMA2D_ConfigLayer>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10e      	bne.n	8003d66 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69f9      	ldr	r1, [r7, #28]
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d54:	f002 f84a 	bl	8005dec <HAL_DMA2D_Start>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003d5e:	210a      	movs	r1, #10
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <LL_FillBuffer+0x88>)
 8003d62:	f002 f86e 	bl	8005e42 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200003fc 	.word	0x200003fc
 8003d74:	2000043c 	.word	0x2000043c
 8003d78:	20008c84 	.word	0x20008c84
 8003d7c:	4002b000 	.word	0x4002b000

08003d80 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <BSP_SDRAM_Init+0xb0>)
 8003d88:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003d92:	2207      	movs	r2, #7
 8003d94:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003d98:	2204      	movs	r2, #4
 8003d9a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003d9e:	2207      	movs	r2, #7
 8003da0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003da4:	2202      	movs	r2, #2
 8003da6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003da8:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003daa:	2202      	movs	r2, #2
 8003dac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003db0:	2202      	movs	r2, #2
 8003db2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dc8:	2210      	movs	r2, #16
 8003dca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003df6:	2100      	movs	r1, #0
 8003df8:	480c      	ldr	r0, [pc, #48]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003dfa:	f000 f87f 	bl	8003efc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003dfe:	490d      	ldr	r1, [pc, #52]	; (8003e34 <BSP_SDRAM_Init+0xb4>)
 8003e00:	480a      	ldr	r0, [pc, #40]	; (8003e2c <BSP_SDRAM_Init+0xac>)
 8003e02:	f005 fafb 	bl	80093fc <HAL_SDRAM_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <BSP_SDRAM_Init+0xb8>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e002      	b.n	8003e1a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <BSP_SDRAM_Init+0xb8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003e1a:	f240 6003 	movw	r0, #1539	; 0x603
 8003e1e:	f000 f80d 	bl	8003e3c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <BSP_SDRAM_Init+0xb8>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20008d2c 	.word	0x20008d2c
 8003e30:	a0000140 	.word	0xa0000140
 8003e34:	200004dc 	.word	0x200004dc
 8003e38:	20000048 	.word	0x20000048

08003e3c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e50:	2210      	movs	r2, #16
 8003e52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e64:	4923      	ldr	r1, [pc, #140]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e66:	4824      	ldr	r0, [pc, #144]	; (8003ef8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e68:	f005 fafc 	bl	8009464 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f000 ffe9 	bl	8004e44 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003e72:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e74:	2202      	movs	r2, #2
 8003e76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	4919      	ldr	r1, [pc, #100]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e90:	4819      	ldr	r0, [pc, #100]	; (8003ef8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e92:	f005 fae7 	bl	8009464 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e98:	2203      	movs	r2, #3
 8003e9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e9c:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ea8:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb2:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb4:	4810      	ldr	r0, [pc, #64]	; (8003ef8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003eb6:	f005 fad5 	bl	8009464 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003eba:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ebe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ec8:	2210      	movs	r2, #16
 8003eca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ed6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003edc:	4905      	ldr	r1, [pc, #20]	; (8003ef4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ede:	4806      	ldr	r0, [pc, #24]	; (8003ef8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ee0:	f005 fac0 	bl	8009464 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4804      	ldr	r0, [pc, #16]	; (8003ef8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ee8:	f005 fae7 	bl	80094ba <HAL_SDRAM_ProgramRefreshRate>
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200004f8 	.word	0x200004f8
 8003ef8:	20008d2c 	.word	0x20008d2c

08003efc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b090      	sub	sp, #64	; 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4a6f      	ldr	r2, [pc, #444]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6393      	str	r3, [r2, #56]	; 0x38
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a69      	ldr	r2, [pc, #420]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f36:	4b64      	ldr	r3, [pc, #400]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4a63      	ldr	r2, [pc, #396]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	6313      	str	r3, [r2, #48]	; 0x30
 8003f42:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f4e:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f66:	4b58      	ldr	r3, [pc, #352]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a57      	ldr	r2, [pc, #348]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f6c:	f043 0310 	orr.w	r3, r3, #16
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b55      	ldr	r3, [pc, #340]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a51      	ldr	r2, [pc, #324]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f84:	f043 0320 	orr.w	r3, r3, #32
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f96:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa2:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fae:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a45      	ldr	r2, [pc, #276]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <BSP_SDRAM_MspInit+0x1cc>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fde:	4619      	mov	r1, r3
 8003fe0:	483a      	ldr	r0, [pc, #232]	; (80040cc <BSP_SDRAM_MspInit+0x1d0>)
 8003fe2:	f002 f945 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003fe6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4837      	ldr	r0, [pc, #220]	; (80040d0 <BSP_SDRAM_MspInit+0x1d4>)
 8003ff4:	f002 f93c 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003ff8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004002:	4619      	mov	r1, r3
 8004004:	4833      	ldr	r0, [pc, #204]	; (80040d4 <BSP_SDRAM_MspInit+0x1d8>)
 8004006:	f002 f933 	bl	8006270 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800400a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004014:	4619      	mov	r1, r3
 8004016:	4830      	ldr	r0, [pc, #192]	; (80040d8 <BSP_SDRAM_MspInit+0x1dc>)
 8004018:	f002 f92a 	bl	8006270 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800401c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004026:	4619      	mov	r1, r3
 8004028:	482c      	ldr	r0, [pc, #176]	; (80040dc <BSP_SDRAM_MspInit+0x1e0>)
 800402a:	f002 f921 	bl	8006270 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800402e:	2328      	movs	r3, #40	; 0x28
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004036:	4619      	mov	r1, r3
 8004038:	4829      	ldr	r0, [pc, #164]	; (80040e0 <BSP_SDRAM_MspInit+0x1e4>)
 800403a:	f002 f919 	bl	8006270 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800404c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004050:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004058:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800405c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004060:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004068:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800406c:	2200      	movs	r2, #0
 800406e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004072:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004076:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800407e:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004080:	2203      	movs	r2, #3
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004086:	2200      	movs	r2, #0
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <BSP_SDRAM_MspInit+0x1ec>)
 8004094:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80040a2:	4810      	ldr	r0, [pc, #64]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 80040a4:	f001 fd28 	bl	8005af8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80040a8:	480e      	ldr	r0, [pc, #56]	; (80040e4 <BSP_SDRAM_MspInit+0x1e8>)
 80040aa:	f001 fc77 	bl	800599c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	210f      	movs	r1, #15
 80040b2:	2038      	movs	r0, #56	; 0x38
 80040b4:	f001 fb7a 	bl	80057ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80040b8:	2038      	movs	r0, #56	; 0x38
 80040ba:	f001 fb93 	bl	80057e4 <HAL_NVIC_EnableIRQ>
}
 80040be:	bf00      	nop
 80040c0:	3740      	adds	r7, #64	; 0x40
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40020800 	.word	0x40020800
 80040d0:	40020c00 	.word	0x40020c00
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40021400 	.word	0x40021400
 80040dc:	40021800 	.word	0x40021800
 80040e0:	40021c00 	.word	0x40021c00
 80040e4:	20000508 	.word	0x20000508
 80040e8:	40026410 	.word	0x40026410

080040ec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	460a      	mov	r2, r1
 80040f6:	80fb      	strh	r3, [r7, #6]
 80040f8:	4613      	mov	r3, r2
 80040fa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <BSP_TS_Init+0x68>)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004106:	4a14      	ldr	r2, [pc, #80]	; (8004158 <BSP_TS_Init+0x6c>)
 8004108:	88bb      	ldrh	r3, [r7, #4]
 800410a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <BSP_TS_Init+0x70>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2070      	movs	r0, #112	; 0x70
 8004112:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <BSP_TS_Init+0x70>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2070      	movs	r0, #112	; 0x70
 800411a:	4798      	blx	r3
 800411c:	4603      	mov	r3, r0
 800411e:	2b51      	cmp	r3, #81	; 0x51
 8004120:	d111      	bne.n	8004146 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <BSP_TS_Init+0x74>)
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <BSP_TS_Init+0x70>)
 8004126:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <BSP_TS_Init+0x78>)
 800412a:	2270      	movs	r2, #112	; 0x70
 800412c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <BSP_TS_Init+0x7c>)
 8004130:	2208      	movs	r2, #8
 8004132:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <BSP_TS_Init+0x74>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <BSP_TS_Init+0x78>)
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	b292      	uxth	r2, r2
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
 8004144:	e001      	b.n	800414a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004146:	2303      	movs	r3, #3
 8004148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000056c 	.word	0x2000056c
 8004158:	2000056e 	.word	0x2000056e
 800415c:	20000000 	.word	0x20000000
 8004160:	20000568 	.word	0x20000568
 8004164:	20000571 	.word	0x20000571
 8004168:	20000570 	.word	0x20000570

0800416c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_MspInit+0x4c>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_MspInit+0x4c>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_MspInit+0x4c>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_MspInit+0x4c>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_MspInit+0x4c>)
 8004190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004194:	6453      	str	r3, [r2, #68]	; 0x44
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_MspInit+0x4c>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	210f      	movs	r1, #15
 80041a6:	f06f 0001 	mvn.w	r0, #1
 80041aa:	f001 faff 	bl	80057ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800

080041bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 031c 	add.w	r3, r7, #28
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_ADC_MspInit+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d124      	bne.n	8004228 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6453      	str	r3, [r2, #68]	; 0x44
 80041ea:	4b27      	ldr	r3, [pc, #156]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a23      	ldr	r2, [pc, #140]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6313      	str	r3, [r2, #48]	; 0x30
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800420e:	2301      	movs	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004212:	2303      	movs	r3, #3
 8004214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421a:	f107 031c 	add.w	r3, r7, #28
 800421e:	4619      	mov	r1, r3
 8004220:	481a      	ldr	r0, [pc, #104]	; (800428c <HAL_ADC_MspInit+0xd0>)
 8004222:	f002 f825 	bl	8006270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004226:	e029      	b.n	800427c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_ADC_MspInit+0xd4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d124      	bne.n	800427c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423c:	6453      	str	r3, [r2, #68]	; 0x44
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004250:	f043 0320 	orr.w	r3, r3, #32
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_ADC_MspInit+0xcc>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004262:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004268:	2303      	movs	r3, #3
 800426a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004270:	f107 031c 	add.w	r3, r7, #28
 8004274:	4619      	mov	r1, r3
 8004276:	4807      	ldr	r0, [pc, #28]	; (8004294 <HAL_ADC_MspInit+0xd8>)
 8004278:	f001 fffa 	bl	8006270 <HAL_GPIO_Init>
}
 800427c:	bf00      	nop
 800427e:	3730      	adds	r7, #48	; 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40012000 	.word	0x40012000
 8004288:	40023800 	.word	0x40023800
 800428c:	40020000 	.word	0x40020000
 8004290:	40012200 	.word	0x40012200
 8004294:	40021400 	.word	0x40021400

08004298 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_DAC_MspInit+0x84>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d12b      	bne.n	8004312 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_DAC_MspInit+0x88>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042ea:	2310      	movs	r3, #16
 80042ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ee:	2303      	movs	r3, #3
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	4619      	mov	r1, r3
 80042fc:	4809      	ldr	r0, [pc, #36]	; (8004324 <HAL_DAC_MspInit+0x8c>)
 80042fe:	f001 ffb7 	bl	8006270 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2100      	movs	r1, #0
 8004306:	2036      	movs	r0, #54	; 0x36
 8004308:	f001 fa50 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800430c:	2036      	movs	r0, #54	; 0x36
 800430e:	f001 fa69 	bl	80057e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004312:	bf00      	nop
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40007400 	.word	0x40007400
 8004320:	40023800 	.word	0x40023800
 8004324:	40020000 	.word	0x40020000

08004328 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_DMA2D_MspInit+0x38>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10b      	bne.n	8004352 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_DMA2D_MspInit+0x3c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <HAL_DMA2D_MspInit+0x3c>)
 8004340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004344:	6313      	str	r3, [r2, #48]	; 0x30
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_DMA2D_MspInit+0x3c>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	4002b000 	.word	0x4002b000
 8004364:	40023800 	.word	0x40023800

08004368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	; 0x30
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	f107 031c 	add.w	r3, r7, #28
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <HAL_I2C_MspInit+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d129      	bne.n	80043de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800438a:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a2e      	ldr	r2, [pc, #184]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b2c      	ldr	r3, [pc, #176]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80043a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043a8:	2312      	movs	r3, #18
 80043aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ac:	2301      	movs	r3, #1
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043b4:	2304      	movs	r3, #4
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b8:	f107 031c 	add.w	r3, r7, #28
 80043bc:	4619      	mov	r1, r3
 80043be:	4823      	ldr	r0, [pc, #140]	; (800444c <HAL_I2C_MspInit+0xe4>)
 80043c0:	f001 ff56 	bl	8006270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043ce:	6413      	str	r3, [r2, #64]	; 0x40
 80043d0:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80043dc:	e02d      	b.n	800443a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_I2C_MspInit+0xe8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d128      	bne.n	800443a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	6313      	str	r3, [r2, #48]	; 0x30
 80043f4:	4b14      	ldr	r3, [pc, #80]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004400:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004406:	2312      	movs	r3, #18
 8004408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800440a:	2301      	movs	r3, #1
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440e:	2303      	movs	r3, #3
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004412:	2304      	movs	r3, #4
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	4619      	mov	r1, r3
 800441c:	480d      	ldr	r0, [pc, #52]	; (8004454 <HAL_I2C_MspInit+0xec>)
 800441e:	f001 ff27 	bl	8006270 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 8004428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_I2C_MspInit+0xe0>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
}
 800443a:	bf00      	nop
 800443c:	3730      	adds	r7, #48	; 0x30
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40005400 	.word	0x40005400
 8004448:	40023800 	.word	0x40023800
 800444c:	40020400 	.word	0x40020400
 8004450:	40005c00 	.word	0x40005c00
 8004454:	40021c00 	.word	0x40021c00

08004458 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_I2C_MspDeInit+0x64>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d110      	bne.n	800448c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_I2C_MspDeInit+0x68>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_I2C_MspDeInit+0x68>)
 8004470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8004476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800447a:	4812      	ldr	r0, [pc, #72]	; (80044c4 <HAL_I2C_MspDeInit+0x6c>)
 800447c:	f002 f8a2 	bl	80065c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8004480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004484:	480f      	ldr	r0, [pc, #60]	; (80044c4 <HAL_I2C_MspDeInit+0x6c>)
 8004486:	f002 f89d 	bl	80065c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800448a:	e013      	b.n	80044b4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <HAL_I2C_MspDeInit+0x70>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10e      	bne.n	80044b4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <HAL_I2C_MspDeInit+0x68>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_I2C_MspDeInit+0x68>)
 800449c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	4809      	ldr	r0, [pc, #36]	; (80044cc <HAL_I2C_MspDeInit+0x74>)
 80044a6:	f002 f88d 	bl	80065c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80044aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044ae:	4807      	ldr	r0, [pc, #28]	; (80044cc <HAL_I2C_MspDeInit+0x74>)
 80044b0:	f002 f888 	bl	80065c4 <HAL_GPIO_DeInit>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40005400 	.word	0x40005400
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40020400 	.word	0x40020400
 80044c8:	40005c00 	.word	0x40005c00
 80044cc:	40021c00 	.word	0x40021c00

080044d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_LTDC_MspInit+0x174>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	f040 80a3 	bne.w	800463a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80044f4:	4b54      	ldr	r3, [pc, #336]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	4a53      	ldr	r2, [pc, #332]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 80044fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044fe:	6453      	str	r3, [r2, #68]	; 0x44
 8004500:	4b51      	ldr	r3, [pc, #324]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800450c:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a4d      	ldr	r2, [pc, #308]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004512:	f043 0310 	orr.w	r3, r3, #16
 8004516:	6313      	str	r3, [r2, #48]	; 0x30
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004524:	4b48      	ldr	r3, [pc, #288]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a47      	ldr	r2, [pc, #284]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800452a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800452e:	6313      	str	r3, [r2, #48]	; 0x30
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800453c:	4b42      	ldr	r3, [pc, #264]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	4a41      	ldr	r2, [pc, #260]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004546:	6313      	str	r3, [r2, #48]	; 0x30
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800455a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455e:	6313      	str	r3, [r2, #48]	; 0x30
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	4a35      	ldr	r2, [pc, #212]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6313      	str	r3, [r2, #48]	; 0x30
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_LTDC_MspInit+0x178>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004584:	2310      	movs	r3, #16
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004590:	2300      	movs	r3, #0
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004594:	230e      	movs	r3, #14
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459c:	4619      	mov	r1, r3
 800459e:	482b      	ldr	r0, [pc, #172]	; (800464c <HAL_LTDC_MspInit+0x17c>)
 80045a0:	f001 fe66 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80045a4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045b6:	230e      	movs	r3, #14
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80045ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045be:	4619      	mov	r1, r3
 80045c0:	4823      	ldr	r0, [pc, #140]	; (8004650 <HAL_LTDC_MspInit+0x180>)
 80045c2:	f001 fe55 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80045c6:	23f7      	movs	r3, #247	; 0xf7
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ca:	2302      	movs	r3, #2
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80045d6:	230e      	movs	r3, #14
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80045da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045de:	4619      	mov	r1, r3
 80045e0:	481c      	ldr	r0, [pc, #112]	; (8004654 <HAL_LTDC_MspInit+0x184>)
 80045e2:	f001 fe45 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80045e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	2300      	movs	r3, #0
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80045f8:	2309      	movs	r3, #9
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80045fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004600:	4619      	mov	r1, r3
 8004602:	4815      	ldr	r0, [pc, #84]	; (8004658 <HAL_LTDC_MspInit+0x188>)
 8004604:	f001 fe34 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004608:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460e:	2302      	movs	r3, #2
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	2300      	movs	r3, #0
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800461a:	230e      	movs	r3, #14
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800461e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004622:	4619      	mov	r1, r3
 8004624:	480d      	ldr	r0, [pc, #52]	; (800465c <HAL_LTDC_MspInit+0x18c>)
 8004626:	f001 fe23 	bl	8006270 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800462a:	2200      	movs	r2, #0
 800462c:	2105      	movs	r1, #5
 800462e:	2058      	movs	r0, #88	; 0x58
 8004630:	f001 f8bc 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004634:	2058      	movs	r0, #88	; 0x58
 8004636:	f001 f8d5 	bl	80057e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800463a:	bf00      	nop
 800463c:	3738      	adds	r7, #56	; 0x38
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40016800 	.word	0x40016800
 8004648:	40023800 	.word	0x40023800
 800464c:	40021000 	.word	0x40021000
 8004650:	40022400 	.word	0x40022400
 8004654:	40022800 	.word	0x40022800
 8004658:	40021800 	.word	0x40021800
 800465c:	40022000 	.word	0x40022000

08004660 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <HAL_RTC_MspInit+0x2c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d105      	bne.n	800467e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RTC_MspInit+0x30>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_RTC_MspInit+0x30>)
 8004678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40002800 	.word	0x40002800
 8004690:	40023800 	.word	0x40023800

08004694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_SPI_MspInit+0xd4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d154      	bne.n	8004760 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046b6:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a2c      	ldr	r2, [pc, #176]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b2a      	ldr	r3, [pc, #168]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80046ce:	4b27      	ldr	r3, [pc, #156]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4a26      	ldr	r2, [pc, #152]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6313      	str	r3, [r2, #48]	; 0x30
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a20      	ldr	r2, [pc, #128]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_SPI_MspInit+0xd8>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80046fe:	2302      	movs	r3, #2
 8004700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004702:	2302      	movs	r3, #2
 8004704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470a:	2300      	movs	r3, #0
 800470c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800470e:	2305      	movs	r3, #5
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	4815      	ldr	r0, [pc, #84]	; (8004770 <HAL_SPI_MspInit+0xdc>)
 800471a:	f001 fda9 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800471e:	2301      	movs	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004722:	2302      	movs	r3, #2
 8004724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472a:	2303      	movs	r3, #3
 800472c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800472e:	2305      	movs	r3, #5
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	4619      	mov	r1, r3
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <HAL_SPI_MspInit+0xdc>)
 800473a:	f001 fd99 	bl	8006270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800473e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004750:	2305      	movs	r3, #5
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	4806      	ldr	r0, [pc, #24]	; (8004774 <HAL_SPI_MspInit+0xe0>)
 800475c:	f001 fd88 	bl	8006270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40003800 	.word	0x40003800
 800476c:	40023800 	.word	0x40023800
 8004770:	40022000 	.word	0x40022000
 8004774:	40020400 	.word	0x40020400

08004778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2e      	ldr	r2, [pc, #184]	; (8004840 <HAL_TIM_Base_MspInit+0xc8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10c      	bne.n	80047a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6453      	str	r3, [r2, #68]	; 0x44
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80047a2:	e046      	b.n	8004832 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ae:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	4a24      	ldr	r2, [pc, #144]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	69bb      	ldr	r3, [r7, #24]
}
 80047c6:	e034      	b.n	8004832 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <HAL_TIM_Base_MspInit+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10c      	bne.n	80047ec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	e022      	b.n	8004832 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <HAL_TIM_Base_MspInit+0xd4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10c      	bne.n	8004810 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a12      	ldr	r2, [pc, #72]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 80047fc:	f043 0308 	orr.w	r3, r3, #8
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
}
 800480e:	e010      	b.n	8004832 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <HAL_TIM_Base_MspInit+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10b      	bne.n	8004832 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a09      	ldr	r2, [pc, #36]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_TIM_Base_MspInit+0xcc>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	bf00      	nop
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40023800 	.word	0x40023800
 8004848:	40000400 	.word	0x40000400
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40010400 	.word	0x40010400

08004854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	605a      	str	r2, [r3, #4]
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <HAL_TIM_MspPostInit+0xa8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d11c      	bne.n	80048b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800488e:	2310      	movs	r3, #16
 8004890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800489e:	2302      	movs	r3, #2
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a2:	f107 0314 	add.w	r3, r7, #20
 80048a6:	4619      	mov	r1, r3
 80048a8:	4816      	ldr	r0, [pc, #88]	; (8004904 <HAL_TIM_MspPostInit+0xb0>)
 80048aa:	f001 fce1 	bl	8006270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80048ae:	e020      	b.n	80048f2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <HAL_TIM_MspPostInit+0xb4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d11b      	bne.n	80048f2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a10      	ldr	r2, [pc, #64]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6313      	str	r3, [r2, #48]	; 0x30
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_TIM_MspPostInit+0xac>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048d2:	2304      	movs	r3, #4
 80048d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d6:	2302      	movs	r3, #2
 80048d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80048e2:	2303      	movs	r3, #3
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048e6:	f107 0314 	add.w	r3, r7, #20
 80048ea:	4619      	mov	r1, r3
 80048ec:	4807      	ldr	r0, [pc, #28]	; (800490c <HAL_TIM_MspPostInit+0xb8>)
 80048ee:	f001 fcbf 	bl	8006270 <HAL_GPIO_Init>
}
 80048f2:	bf00      	nop
 80048f4:	3728      	adds	r7, #40	; 0x28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40000400 	.word	0x40000400
 8004900:	40023800 	.word	0x40023800
 8004904:	40020400 	.word	0x40020400
 8004908:	40010400 	.word	0x40010400
 800490c:	40022000 	.word	0x40022000

08004910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a57      	ldr	r2, [pc, #348]	; (8004a8c <HAL_UART_MspInit+0x17c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d128      	bne.n	8004984 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004932:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	4a56      	ldr	r2, [pc, #344]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800493c:	6413      	str	r3, [r2, #64]	; 0x40
 800493e:	4b54      	ldr	r3, [pc, #336]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <HAL_UART_MspInit+0x180>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004950:	f043 0320 	orr.w	r3, r3, #32
 8004954:	6313      	str	r3, [r2, #48]	; 0x30
 8004956:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004962:	23c0      	movs	r3, #192	; 0xc0
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004972:	2308      	movs	r3, #8
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4619      	mov	r1, r3
 800497c:	4845      	ldr	r0, [pc, #276]	; (8004a94 <HAL_UART_MspInit+0x184>)
 800497e:	f001 fc77 	bl	8006270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004982:	e07f      	b.n	8004a84 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a43      	ldr	r2, [pc, #268]	; (8004a98 <HAL_UART_MspInit+0x188>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d14d      	bne.n	8004a2a <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800498e:	4b40      	ldr	r3, [pc, #256]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	4a3f      	ldr	r2, [pc, #252]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004994:	f043 0310 	orr.w	r3, r3, #16
 8004998:	6453      	str	r3, [r2, #68]	; 0x44
 800499a:	4b3d      	ldr	r3, [pc, #244]	; (8004a90 <HAL_UART_MspInit+0x180>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a6:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a39      	ldr	r2, [pc, #228]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ca:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <HAL_UART_MspInit+0x180>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e2:	2300      	movs	r3, #0
 80049e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049e6:	2307      	movs	r3, #7
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80049ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ee:	4619      	mov	r1, r3
 80049f0:	482a      	ldr	r0, [pc, #168]	; (8004a9c <HAL_UART_MspInit+0x18c>)
 80049f2:	f001 fc3d 	bl	8006270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80049f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fc:	2302      	movs	r3, #2
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a04:	2300      	movs	r3, #0
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a08:	2307      	movs	r3, #7
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a10:	4619      	mov	r1, r3
 8004a12:	4823      	ldr	r0, [pc, #140]	; (8004aa0 <HAL_UART_MspInit+0x190>)
 8004a14:	f001 fc2c 	bl	8006270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2107      	movs	r1, #7
 8004a1c:	2025      	movs	r0, #37	; 0x25
 8004a1e:	f000 fec5 	bl	80057ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a22:	2025      	movs	r0, #37	; 0x25
 8004a24:	f000 fede 	bl	80057e4 <HAL_NVIC_EnableIRQ>
}
 8004a28:	e02c      	b.n	8004a84 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_UART_MspInit+0x194>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d127      	bne.n	8004a84 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a3a:	f043 0320 	orr.w	r3, r3, #32
 8004a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6313      	str	r3, [r2, #48]	; 0x30
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <HAL_UART_MspInit+0x180>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004a64:	23c0      	movs	r3, #192	; 0xc0
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a70:	2303      	movs	r3, #3
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a74:	2308      	movs	r3, #8
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	480a      	ldr	r0, [pc, #40]	; (8004aa8 <HAL_UART_MspInit+0x198>)
 8004a80:	f001 fbf6 	bl	8006270 <HAL_GPIO_Init>
}
 8004a84:	bf00      	nop
 8004a86:	3738      	adds	r7, #56	; 0x38
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40007800 	.word	0x40007800
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40021400 	.word	0x40021400
 8004a98:	40011000 	.word	0x40011000
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	40020800 	.word	0x40020800

08004aac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004ac0:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_FMC_MspInit+0x100>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d16d      	bne.n	8004ba4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004ac8:	4b38      	ldr	r3, [pc, #224]	; (8004bac <HAL_FMC_MspInit+0x100>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004ace:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <HAL_FMC_MspInit+0x104>)
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	4a37      	ldr	r2, [pc, #220]	; (8004bb0 <HAL_FMC_MspInit+0x104>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6393      	str	r3, [r2, #56]	; 0x38
 8004ada:	4b35      	ldr	r3, [pc, #212]	; (8004bb0 <HAL_FMC_MspInit+0x104>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004ae6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004aea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004af8:	230c      	movs	r3, #12
 8004afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	482c      	ldr	r0, [pc, #176]	; (8004bb4 <HAL_FMC_MspInit+0x108>)
 8004b02:	f001 fbb5 	bl	8006270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004b06:	f248 1333 	movw	r3, #33075	; 0x8133
 8004b0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b14:	2303      	movs	r3, #3
 8004b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b18:	230c      	movs	r3, #12
 8004b1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4825      	ldr	r0, [pc, #148]	; (8004bb8 <HAL_FMC_MspInit+0x10c>)
 8004b22:	f001 fba5 	bl	8006270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004b26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004b2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b34:	2303      	movs	r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b38:	230c      	movs	r3, #12
 8004b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	4619      	mov	r1, r3
 8004b40:	481e      	ldr	r0, [pc, #120]	; (8004bbc <HAL_FMC_MspInit+0x110>)
 8004b42:	f001 fb95 	bl	8006270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004b46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004b4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b54:	2303      	movs	r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b58:	230c      	movs	r3, #12
 8004b5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4817      	ldr	r0, [pc, #92]	; (8004bc0 <HAL_FMC_MspInit+0x114>)
 8004b62:	f001 fb85 	bl	8006270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004b66:	2328      	movs	r3, #40	; 0x28
 8004b68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b76:	230c      	movs	r3, #12
 8004b78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4811      	ldr	r0, [pc, #68]	; (8004bc4 <HAL_FMC_MspInit+0x118>)
 8004b80:	f001 fb76 	bl	8006270 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004b84:	2308      	movs	r3, #8
 8004b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b90:	2303      	movs	r3, #3
 8004b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b94:	230c      	movs	r3, #12
 8004b96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	480a      	ldr	r0, [pc, #40]	; (8004bc8 <HAL_FMC_MspInit+0x11c>)
 8004b9e:	f001 fb67 	bl	8006270 <HAL_GPIO_Init>
 8004ba2:	e000      	b.n	8004ba6 <HAL_FMC_MspInit+0xfa>
    return;
 8004ba4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000574 	.word	0x20000574
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40021800 	.word	0x40021800
 8004bbc:	40020c00 	.word	0x40020c00
 8004bc0:	40021400 	.word	0x40021400
 8004bc4:	40021c00 	.word	0x40021c00
 8004bc8:	40020800 	.word	0x40020800

08004bcc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004bd4:	f7ff ff6a 	bl	8004aac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	2036      	movs	r0, #54	; 0x36
 8004bf6:	f000 fdd9 	bl	80057ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bfa:	2036      	movs	r0, #54	; 0x36
 8004bfc:	f000 fdf2 	bl	80057e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c00:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <HAL_InitTick+0xa0>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <HAL_InitTick+0xa0>)
 8004c06:	f043 0310 	orr.w	r3, r3, #16
 8004c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <HAL_InitTick+0xa0>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c18:	f107 0210 	add.w	r2, r7, #16
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f003 fc08 	bl	8008438 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004c28:	f003 fbde 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <HAL_InitTick+0xa4>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	0c9b      	lsrs	r3, r3, #18
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <HAL_InitTick+0xac>)
 8004c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c62:	f004 fcdc 	bl	800961e <HAL_TIM_Base_Init>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004c6c:	4806      	ldr	r0, [pc, #24]	; (8004c88 <HAL_InitTick+0xa8>)
 8004c6e:	f004 fd01 	bl	8009674 <HAL_TIM_Base_Start_IT>
 8004c72:	4603      	mov	r3, r0
 8004c74:	e000      	b.n	8004c78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3730      	adds	r7, #48	; 0x30
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	431bde83 	.word	0x431bde83
 8004c88:	20008d60 	.word	0x20008d60
 8004c8c:	40001000 	.word	0x40001000

08004c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c94:	e7fe      	b.n	8004c94 <NMI_Handler+0x4>

08004c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c9a:	e7fe      	b.n	8004c9a <HardFault_Handler+0x4>

08004c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ca0:	e7fe      	b.n	8004ca0 <MemManage_Handler+0x4>

08004ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ca6:	e7fe      	b.n	8004ca6 <BusFault_Handler+0x4>

08004ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cac:	e7fe      	b.n	8004cac <UsageFault_Handler+0x4>

08004cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cc0:	4802      	ldr	r0, [pc, #8]	; (8004ccc <USART1_IRQHandler+0x10>)
 8004cc2:	f005 fe29 	bl	800a918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20008a4c 	.word	0x20008a4c

08004cd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004cd4:	4803      	ldr	r0, [pc, #12]	; (8004ce4 <TIM6_DAC_IRQHandler+0x14>)
 8004cd6:	f000 fdb5 	bl	8005844 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004cda:	4803      	ldr	r0, [pc, #12]	; (8004ce8 <TIM6_DAC_IRQHandler+0x18>)
 8004cdc:	f004 fd29 	bl	8009732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ce0:	bf00      	nop
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20008acc 	.word	0x20008acc
 8004ce8:	20008d60 	.word	0x20008d60

08004cec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004cf0:	4802      	ldr	r0, [pc, #8]	; (8004cfc <LTDC_IRQHandler+0x10>)
 8004cf2:	f002 fc23 	bl	800753c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20008914 	.word	0x20008914

08004d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <_sbrk+0x5c>)
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <_sbrk+0x60>)
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <_sbrk+0x64>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <_sbrk+0x64>)
 8004d1e:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <_sbrk+0x68>)
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <_sbrk+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d207      	bcs.n	8004d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d30:	f008 fdba 	bl	800d8a8 <__errno>
 8004d34:	4602      	mov	r2, r0
 8004d36:	230c      	movs	r3, #12
 8004d38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	e009      	b.n	8004d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <_sbrk+0x64>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <_sbrk+0x64>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <_sbrk+0x64>)
 8004d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20050000 	.word	0x20050000
 8004d60:	00000400 	.word	0x00000400
 8004d64:	20000578 	.word	0x20000578
 8004d68:	20008da8 	.word	0x20008da8

08004d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d70:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <SystemInit+0x28>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	4a07      	ldr	r2, [pc, #28]	; (8004d94 <SystemInit+0x28>)
 8004d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <SystemInit+0x28>)
 8004d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d86:	609a      	str	r2, [r3, #8]
#endif
 }
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d9e:	e003      	b.n	8004da8 <LoopCopyDataInit>

08004da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004da6:	3104      	adds	r1, #4

08004da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004da8:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004db0:	d3f6      	bcc.n	8004da0 <CopyDataInit>
  ldr  r2, =_sbss
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004db4:	e002      	b.n	8004dbc <LoopFillZerobss>

08004db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004db8:	f842 3b04 	str.w	r3, [r2], #4

08004dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dc0:	d3f9      	bcc.n	8004db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dc2:	f7ff ffd3 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dc6:	f008 fd75 	bl	800d8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dca:	f7fb fde7 	bl	800099c <main>
  bx  lr    
 8004dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dd0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004dd4:	0801019c 	.word	0x0801019c
  ldr  r0, =_sdata
 8004dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ddc:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8004de0:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8004de4:	20008da8 	.word	0x20008da8

08004de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004de8:	e7fe      	b.n	8004de8 <ADC_IRQHandler>

08004dea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dee:	2003      	movs	r0, #3
 8004df0:	f000 fcd1 	bl	8005796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7ff fef3 	bl	8004be0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004dfa:	f7ff f9b7 	bl	800416c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_IncTick+0x20>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_IncTick+0x24>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4413      	add	r3, r2
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_IncTick+0x24>)
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000054 	.word	0x20000054
 8004e28:	20008da0 	.word	0x20008da0

08004e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_GetTick+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20008da0 	.word	0x20008da0

08004e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e4c:	f7ff ffee 	bl	8004e2c <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d005      	beq.n	8004e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_Delay+0x40>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e6a:	bf00      	nop
 8004e6c:	f7ff ffde 	bl	8004e2c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d8f7      	bhi.n	8004e6c <HAL_Delay+0x28>
  {
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000054 	.word	0x20000054

08004e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e031      	b.n	8004f02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff f988 	bl	80041bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d116      	bne.n	8004ef4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <HAL_ADC_Init+0x84>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	f043 0202 	orr.w	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fab6 	bl	8005448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ef2:	e001      	b.n	8004ef8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	ffffeefd 	.word	0xffffeefd

08004f10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_Start+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0a0      	b.n	800506c <HAL_ADC_Start+0x15c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d018      	beq.n	8004f72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <HAL_ADC_Start+0x168>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a49      	ldr	r2, [pc, #292]	; (800507c <HAL_ADC_Start+0x16c>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0c9a      	lsrs	r2, r3, #18
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004f64:	e002      	b.n	8004f6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f9      	bne.n	8004f66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d174      	bne.n	800506a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f84:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <HAL_ADC_Start+0x170>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fba:	d106      	bne.n	8004fca <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	f023 0206 	bic.w	r2, r3, #6
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8004fc8:	e002      	b.n	8004fd0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004fe0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004fe2:	4b28      	ldr	r3, [pc, #160]	; (8005084 <HAL_ADC_Start+0x174>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d136      	bne.n	800506a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	e02d      	b.n	800506a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_ADC_Start+0x178>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d10e      	bne.n	8005036 <HAL_ADC_Start+0x126>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005034:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <HAL_ADC_Start+0x174>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d113      	bne.n	800506a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a11      	ldr	r2, [pc, #68]	; (800508c <HAL_ADC_Start+0x17c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10e      	bne.n	800506a <HAL_ADC_Start+0x15a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005068:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	2000004c 	.word	0x2000004c
 800507c:	431bde83 	.word	0x431bde83
 8005080:	fffff8fe 	.word	0xfffff8fe
 8005084:	40012300 	.word	0x40012300
 8005088:	40012000 	.word	0x40012000
 800508c:	40012200 	.word	0x40012200

08005090 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d113      	bne.n	80050d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80050b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050bc:	d10b      	bne.n	80050d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e05c      	b.n	8005190 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050d6:	f7ff fea9 	bl	8004e2c <HAL_GetTick>
 80050da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050dc:	e01a      	b.n	8005114 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d016      	beq.n	8005114 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_ADC_PollForConversion+0x6c>
 80050ec:	f7ff fe9e 	bl	8004e2c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d20b      	bcs.n	8005114 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03d      	b.n	8005190 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d1dd      	bne.n	80050de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0212 	mvn.w	r2, #18
 800512a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d123      	bne.n	800518e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11f      	bne.n	800518e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005166:	2b00      	cmp	r3, #0
 8005168:	d111      	bne.n	800518e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x1c>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e12a      	b.n	8005426 <HAL_ADC_ConfigChannel+0x272>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b09      	cmp	r3, #9
 80051de:	d93a      	bls.n	8005256 <HAL_ADC_ConfigChannel+0xa2>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e8:	d035      	beq.n	8005256 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68d9      	ldr	r1, [r3, #12]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	3b1e      	subs	r3, #30
 8005200:	2207      	movs	r2, #7
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43da      	mvns	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	400a      	ands	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a87      	ldr	r2, [pc, #540]	; (8005434 <HAL_ADC_ConfigChannel+0x280>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10a      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800522e:	e035      	b.n	800529c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68d9      	ldr	r1, [r3, #12]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	4618      	mov	r0, r3
 8005242:	4603      	mov	r3, r0
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4403      	add	r3, r0
 8005248:	3b1e      	subs	r3, #30
 800524a:	409a      	lsls	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005254:	e022      	b.n	800529c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6919      	ldr	r1, [r3, #16]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	2207      	movs	r2, #7
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	43da      	mvns	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	400a      	ands	r2, r1
 8005278:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6919      	ldr	r1, [r3, #16]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	4618      	mov	r0, r3
 800528c:	4603      	mov	r3, r0
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4403      	add	r3, r0
 8005292:	409a      	lsls	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d824      	bhi.n	80052ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	3b05      	subs	r3, #5
 80052b6:	221f      	movs	r2, #31
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43da      	mvns	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	400a      	ands	r2, r1
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	3b05      	subs	r3, #5
 80052e0:	fa00 f203 	lsl.w	r2, r0, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	635a      	str	r2, [r3, #52]	; 0x34
 80052ec:	e04c      	b.n	8005388 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d824      	bhi.n	8005340 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	3b23      	subs	r3, #35	; 0x23
 8005308:	221f      	movs	r2, #31
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43da      	mvns	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	400a      	ands	r2, r1
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	4618      	mov	r0, r3
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	3b23      	subs	r3, #35	; 0x23
 8005332:	fa00 f203 	lsl.w	r2, r0, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
 800533e:	e023      	b.n	8005388 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	3b41      	subs	r3, #65	; 0x41
 8005352:	221f      	movs	r2, #31
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43da      	mvns	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	400a      	ands	r2, r1
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	4618      	mov	r0, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	3b41      	subs	r3, #65	; 0x41
 800537c:	fa00 f203 	lsl.w	r2, r0, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <HAL_ADC_ConfigChannel+0x284>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10a      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x1f4>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d105      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800539c:	4b27      	ldr	r3, [pc, #156]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a26      	ldr	r2, [pc, #152]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 80053a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_ADC_ConfigChannel+0x284>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d109      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x212>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b12      	cmp	r3, #18
 80053b8:	d105      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80053ba:	4b20      	ldr	r3, [pc, #128]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 80053c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_ADC_ConfigChannel+0x284>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d125      	bne.n	800541c <HAL_ADC_ConfigChannel+0x268>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_ADC_ConfigChannel+0x280>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <HAL_ADC_ConfigChannel+0x22e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b11      	cmp	r3, #17
 80053e0:	d11c      	bne.n	800541c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_ADC_ConfigChannel+0x288>)
 80053e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <HAL_ADC_ConfigChannel+0x280>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_ADC_ConfigChannel+0x28c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a11      	ldr	r2, [pc, #68]	; (8005444 <HAL_ADC_ConfigChannel+0x290>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0c9a      	lsrs	r2, r3, #18
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800540e:	e002      	b.n	8005416 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3b01      	subs	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f9      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	10000012 	.word	0x10000012
 8005438:	40012000 	.word	0x40012000
 800543c:	40012300 	.word	0x40012300
 8005440:	2000004c 	.word	0x2000004c
 8005444:	431bde83 	.word	0x431bde83

08005448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005450:	4b78      	ldr	r3, [pc, #480]	; (8005634 <ADC_Init+0x1ec>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4a77      	ldr	r2, [pc, #476]	; (8005634 <ADC_Init+0x1ec>)
 8005456:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800545a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800545c:	4b75      	ldr	r3, [pc, #468]	; (8005634 <ADC_Init+0x1ec>)
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4973      	ldr	r1, [pc, #460]	; (8005634 <ADC_Init+0x1ec>)
 8005466:	4313      	orrs	r3, r2
 8005468:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800549c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6859      	ldr	r1, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6899      	ldr	r1, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	4a58      	ldr	r2, [pc, #352]	; (8005638 <ADC_Init+0x1f0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6899      	ldr	r1, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800550c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	e00f      	b.n	8005542 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005540:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0202 	bic.w	r2, r2, #2
 8005550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6899      	ldr	r1, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	005a      	lsls	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800558e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	3b01      	subs	r3, #1
 800559c:	035a      	lsls	r2, r3, #13
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	e007      	b.n	80055b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	051a      	lsls	r2, r3, #20
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6899      	ldr	r1, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055fa:	025a      	lsls	r2, r3, #9
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	029a      	lsls	r2, r3, #10
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012300 	.word	0x40012300
 8005638:	0f000001 	.word	0x0f000001

0800563c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <__NVIC_SetPriorityGrouping+0x40>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <__NVIC_SetPriorityGrouping+0x44>)
 8005666:	4313      	orrs	r3, r2
 8005668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <__NVIC_SetPriorityGrouping+0x40>)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	60d3      	str	r3, [r2, #12]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000ed00 	.word	0xe000ed00
 8005680:	05fa0000 	.word	0x05fa0000

08005684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <__NVIC_GetPriorityGrouping+0x18>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	f003 0307 	and.w	r3, r3, #7
}
 8005692:	4618      	mov	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	db0b      	blt.n	80056ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	f003 021f 	and.w	r2, r3, #31
 80056b8:	4907      	ldr	r1, [pc, #28]	; (80056d8 <__NVIC_EnableIRQ+0x38>)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2001      	movs	r0, #1
 80056c2:	fa00 f202 	lsl.w	r2, r0, r2
 80056c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	e000e100 	.word	0xe000e100

080056dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	db0a      	blt.n	8005706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	490c      	ldr	r1, [pc, #48]	; (8005728 <__NVIC_SetPriority+0x4c>)
 80056f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	440b      	add	r3, r1
 8005700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005704:	e00a      	b.n	800571c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	4908      	ldr	r1, [pc, #32]	; (800572c <__NVIC_SetPriority+0x50>)
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	3b04      	subs	r3, #4
 8005714:	0112      	lsls	r2, r2, #4
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	440b      	add	r3, r1
 800571a:	761a      	strb	r2, [r3, #24]
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	e000e100 	.word	0xe000e100
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f1c3 0307 	rsb	r3, r3, #7
 800574a:	2b04      	cmp	r3, #4
 800574c:	bf28      	it	cs
 800574e:	2304      	movcs	r3, #4
 8005750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3304      	adds	r3, #4
 8005756:	2b06      	cmp	r3, #6
 8005758:	d902      	bls.n	8005760 <NVIC_EncodePriority+0x30>
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	3b03      	subs	r3, #3
 800575e:	e000      	b.n	8005762 <NVIC_EncodePriority+0x32>
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43da      	mvns	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	401a      	ands	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005778:	f04f 31ff 	mov.w	r1, #4294967295
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	fa01 f303 	lsl.w	r3, r1, r3
 8005782:	43d9      	mvns	r1, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	4313      	orrs	r3, r2
         );
}
 800578a:	4618      	mov	r0, r3
 800578c:	3724      	adds	r7, #36	; 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ff4c 	bl	800563c <__NVIC_SetPriorityGrouping>
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057be:	f7ff ff61 	bl	8005684 <__NVIC_GetPriorityGrouping>
 80057c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	6978      	ldr	r0, [r7, #20]
 80057ca:	f7ff ffb1 	bl	8005730 <NVIC_EncodePriority>
 80057ce:	4602      	mov	r2, r0
 80057d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff80 	bl	80056dc <__NVIC_SetPriority>
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ff54 	bl	80056a0 <__NVIC_EnableIRQ>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e014      	b.n	800583c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe fd38 	bl	8004298 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585a:	d118      	bne.n	800588e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005876:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005886:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f825 	bl	80058d8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800589c:	d118      	bne.n	80058d0 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2204      	movs	r2, #4
 80058a2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f043 0202 	orr.w	r2, r3, #2
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f85b 	bl	8005986 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	795b      	ldrb	r3, [r3, #5]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_DAC_ConfigChannel+0x20>
 8005908:	2302      	movs	r3, #2
 800590a:	e036      	b.n	800597a <HAL_DAC_ConfigChannel+0x8e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2202      	movs	r2, #2
 8005916:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005920:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4013      	ands	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	22c0      	movs	r2, #192	; 0xc0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	400a      	ands	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059a8:	f7ff fa40 	bl	8004e2c <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e099      	b.n	8005aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d8:	e00f      	b.n	80059fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059da:	f7ff fa27 	bl	8004e2c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b05      	cmp	r3, #5
 80059e6:	d908      	bls.n	80059fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2203      	movs	r2, #3
 80059f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e078      	b.n	8005aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e8      	bne.n	80059da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_DMA_Init+0x158>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0307 	bic.w	r3, r3, #7
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d117      	bne.n	8005abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8df 	bl	8005c64 <DMA_CheckFifoParam>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005aba:	2301      	movs	r3, #1
 8005abc:	e016      	b.n	8005aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f896 	bl	8005bf8 <DMA_CalcBaseAndBitshift>
 8005acc:	4603      	mov	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad4:	223f      	movs	r2, #63	; 0x3f
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	f010803f 	.word	0xf010803f

08005af8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e050      	b.n	8005bac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d101      	bne.n	8005b1a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e048      	b.n	8005bac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2221      	movs	r2, #33	; 0x21
 8005b58:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f84c 	bl	8005bf8 <DMA_CalcBaseAndBitshift>
 8005b60:	4603      	mov	r3, r0
 8005b62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b68:	223f      	movs	r2, #63	; 0x3f
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2280      	movs	r2, #128	; 0x80
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e00c      	b.n	8005bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	3b10      	subs	r3, #16
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <DMA_CalcBaseAndBitshift+0x60>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <DMA_CalcBaseAndBitshift+0x64>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d908      	bls.n	8005c38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <DMA_CalcBaseAndBitshift+0x68>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	1d1a      	adds	r2, r3, #4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	659a      	str	r2, [r3, #88]	; 0x58
 8005c36:	e006      	b.n	8005c46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b08      	ldr	r3, [pc, #32]	; (8005c60 <DMA_CalcBaseAndBitshift+0x68>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	aaaaaaab 	.word	0xaaaaaaab
 8005c5c:	08010150 	.word	0x08010150
 8005c60:	fffffc00 	.word	0xfffffc00

08005c64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11f      	bne.n	8005cbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d855      	bhi.n	8005d30 <DMA_CheckFifoParam+0xcc>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <DMA_CheckFifoParam+0x28>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005c9d 	.word	0x08005c9d
 8005c90:	08005caf 	.word	0x08005caf
 8005c94:	08005c9d 	.word	0x08005c9d
 8005c98:	08005d31 	.word	0x08005d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d045      	beq.n	8005d34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cac:	e042      	b.n	8005d34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cb6:	d13f      	bne.n	8005d38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cbc:	e03c      	b.n	8005d38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc6:	d121      	bne.n	8005d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d836      	bhi.n	8005d3c <DMA_CheckFifoParam+0xd8>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <DMA_CheckFifoParam+0x70>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005ceb 	.word	0x08005ceb
 8005cdc:	08005ce5 	.word	0x08005ce5
 8005ce0:	08005cfd 	.word	0x08005cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce8:	e02f      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d024      	beq.n	8005d40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cfa:	e021      	b.n	8005d40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d04:	d11e      	bne.n	8005d44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d0a:	e01b      	b.n	8005d44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d902      	bls.n	8005d18 <DMA_CheckFifoParam+0xb4>
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d003      	beq.n	8005d1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d16:	e018      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e015      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d2e:	e00b      	b.n	8005d48 <DMA_CheckFifoParam+0xe4>
      break;
 8005d30:	bf00      	nop
 8005d32:	e00a      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;
 8005d34:	bf00      	nop
 8005d36:	e008      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e006      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;
 8005d3c:	bf00      	nop
 8005d3e:	e004      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;
 8005d40:	bf00      	nop
 8005d42:	e002      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;   
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <DMA_CheckFifoParam+0xe6>
      break;
 8005d48:	bf00      	nop
    }
  } 
  
  return status; 
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e039      	b.n	8005dde <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fe fad2 	bl	8004328 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da8:	f023 0107 	bic.w	r1, r3, #7
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <HAL_DMA2D_Init+0x90>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68d1      	ldr	r1, [r2, #12]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	ffffc000 	.word	0xffffc000

08005dec <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA2D_Start+0x1c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e018      	b.n	8005e3a <HAL_DMA2D_Start+0x4e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f988 	bl	8006138 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b086      	sub	sp, #24
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d056      	beq.n	8005f0c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005e5e:	f7fe ffe5 	bl	8004e2c <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005e64:	e04b      	b.n	8005efe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d023      	beq.n	8005ec0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9c:	f043 0201 	orr.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0a5      	b.n	800600c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d01a      	beq.n	8005efe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005ec8:	f7fe ffb0 	bl	8004e2c <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <HAL_DMA2D_PollForTransfer+0x9c>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2203      	movs	r2, #3
 8005eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e086      	b.n	800600c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ac      	beq.n	8005e66 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d061      	beq.n	8005ff2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f2e:	f7fe ff7d 	bl	8004e2c <HAL_GetTick>
 8005f32:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f34:	e056      	b.n	8005fe4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02e      	beq.n	8005fa6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	f043 0202 	orr.w	r2, r3, #2
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2229      	movs	r2, #41	; 0x29
 8005f90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e032      	b.n	800600c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d01a      	beq.n	8005fe4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005fae:	f7fe ff3d 	bl	8004e2c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <HAL_DMA2D_PollForTransfer+0x182>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10f      	bne.n	8005fe4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e013      	b.n	800600c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0a1      	beq.n	8005f36 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2212      	movs	r2, #18
 8005ff8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_DMA2D_ConfigLayer+0x20>
 8006030:	2302      	movs	r3, #2
 8006032:	e079      	b.n	8006128 <HAL_DMA2D_ConfigLayer+0x114>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	3318      	adds	r3, #24
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800605e:	4b35      	ldr	r3, [pc, #212]	; (8006134 <HAL_DMA2D_ConfigLayer+0x120>)
 8006060:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b0a      	cmp	r3, #10
 8006068:	d003      	beq.n	8006072 <HAL_DMA2D_ConfigLayer+0x5e>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b09      	cmp	r3, #9
 8006070:	d107      	bne.n	8006082 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e005      	b.n	800608e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	061b      	lsls	r3, r3, #24
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d120      	bne.n	80060d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	43db      	mvns	r3, r3
 800609e:	ea02 0103 	and.w	r1, r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b0a      	cmp	r3, #10
 80060bc:	d003      	beq.n	80060c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d127      	bne.n	8006116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
 80060d4:	e01f      	b.n	8006116 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	43db      	mvns	r3, r3
 80060e0:	ea02 0103 	and.w	r1, r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b0a      	cmp	r3, #10
 80060fe:	d003      	beq.n	8006108 <HAL_DMA2D_ConfigLayer+0xf4>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b09      	cmp	r3, #9
 8006106:	d106      	bne.n	8006116 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006114:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	ff03000f 	.word	0xff03000f

08006138 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006138:	b480      	push	{r7}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	041a      	lsls	r2, r3, #16
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	431a      	orrs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006170:	d174      	bne.n	800625c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006178:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006180:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006188:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	431a      	orrs	r2, r3
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
 80061a8:	e053      	b.n	8006252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d106      	bne.n	80061c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e048      	b.n	8006252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d111      	bne.n	80061ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	0cdb      	lsrs	r3, r3, #19
 80061cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	0a9b      	lsrs	r3, r3, #10
 80061d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	02db      	lsls	r3, r3, #11
 80061e2:	4313      	orrs	r3, r2
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	e032      	b.n	8006252 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d117      	bne.n	8006224 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	0fdb      	lsrs	r3, r3, #31
 80061f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	0cdb      	lsrs	r3, r3, #19
 80061fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	0adb      	lsrs	r3, r3, #11
 8006204:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	08db      	lsrs	r3, r3, #3
 800620a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	029b      	lsls	r3, r3, #10
 8006214:	431a      	orrs	r2, r3
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	03db      	lsls	r3, r3, #15
 800621a:	4313      	orrs	r3, r2
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
 8006222:	e016      	b.n	8006252 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	0f1b      	lsrs	r3, r3, #28
 8006228:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	0d1b      	lsrs	r3, r3, #20
 800622e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	0b1b      	lsrs	r3, r3, #12
 8006234:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	011a      	lsls	r2, r3, #4
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	431a      	orrs	r2, r3
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	4313      	orrs	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800625a:	e003      	b.n	8006264 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	60da      	str	r2, [r3, #12]
}
 8006264:	bf00      	nop
 8006266:	372c      	adds	r7, #44	; 0x2c
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006270:	b480      	push	{r7}
 8006272:	b089      	sub	sp, #36	; 0x24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800627e:	2300      	movs	r3, #0
 8006280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006286:	2300      	movs	r3, #0
 8006288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	e175      	b.n	800657c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006290:	2201      	movs	r2, #1
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4013      	ands	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	f040 8164 	bne.w	8006576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d00b      	beq.n	80062ce <HAL_GPIO_Init+0x5e>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d007      	beq.n	80062ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062c2:	2b11      	cmp	r3, #17
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b12      	cmp	r3, #18
 80062cc:	d130      	bne.n	8006330 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	2203      	movs	r2, #3
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006304:	2201      	movs	r2, #1
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 0201 	and.w	r2, r3, #1
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	2203      	movs	r2, #3
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x100>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b12      	cmp	r3, #18
 800636e:	d123      	bne.n	80063b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	08da      	lsrs	r2, r3, #3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3208      	adds	r2, #8
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	220f      	movs	r2, #15
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	08da      	lsrs	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3208      	adds	r2, #8
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	2203      	movs	r2, #3
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	43db      	mvns	r3, r3
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	4013      	ands	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0203 	and.w	r2, r3, #3
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80be 	beq.w	8006576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063fa:	4b65      	ldr	r3, [pc, #404]	; (8006590 <HAL_GPIO_Init+0x320>)
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	4a64      	ldr	r2, [pc, #400]	; (8006590 <HAL_GPIO_Init+0x320>)
 8006400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006404:	6453      	str	r3, [r2, #68]	; 0x44
 8006406:	4b62      	ldr	r3, [pc, #392]	; (8006590 <HAL_GPIO_Init+0x320>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006412:	4a60      	ldr	r2, [pc, #384]	; (8006594 <HAL_GPIO_Init+0x324>)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	089b      	lsrs	r3, r3, #2
 8006418:	3302      	adds	r3, #2
 800641a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	220f      	movs	r2, #15
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a57      	ldr	r2, [pc, #348]	; (8006598 <HAL_GPIO_Init+0x328>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d037      	beq.n	80064ae <HAL_GPIO_Init+0x23e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a56      	ldr	r2, [pc, #344]	; (800659c <HAL_GPIO_Init+0x32c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_GPIO_Init+0x23a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a55      	ldr	r2, [pc, #340]	; (80065a0 <HAL_GPIO_Init+0x330>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d02b      	beq.n	80064a6 <HAL_GPIO_Init+0x236>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a54      	ldr	r2, [pc, #336]	; (80065a4 <HAL_GPIO_Init+0x334>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d025      	beq.n	80064a2 <HAL_GPIO_Init+0x232>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a53      	ldr	r2, [pc, #332]	; (80065a8 <HAL_GPIO_Init+0x338>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01f      	beq.n	800649e <HAL_GPIO_Init+0x22e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a52      	ldr	r2, [pc, #328]	; (80065ac <HAL_GPIO_Init+0x33c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d019      	beq.n	800649a <HAL_GPIO_Init+0x22a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a51      	ldr	r2, [pc, #324]	; (80065b0 <HAL_GPIO_Init+0x340>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_GPIO_Init+0x226>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a50      	ldr	r2, [pc, #320]	; (80065b4 <HAL_GPIO_Init+0x344>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00d      	beq.n	8006492 <HAL_GPIO_Init+0x222>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a4f      	ldr	r2, [pc, #316]	; (80065b8 <HAL_GPIO_Init+0x348>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <HAL_GPIO_Init+0x21e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_GPIO_Init+0x34c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_GPIO_Init+0x21a>
 8006486:	2309      	movs	r3, #9
 8006488:	e012      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 800648a:	230a      	movs	r3, #10
 800648c:	e010      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 800648e:	2308      	movs	r3, #8
 8006490:	e00e      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 8006492:	2307      	movs	r3, #7
 8006494:	e00c      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 8006496:	2306      	movs	r3, #6
 8006498:	e00a      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 800649a:	2305      	movs	r3, #5
 800649c:	e008      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 800649e:	2304      	movs	r3, #4
 80064a0:	e006      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 80064a2:	2303      	movs	r3, #3
 80064a4:	e004      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e002      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_GPIO_Init+0x240>
 80064ae:	2300      	movs	r3, #0
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	f002 0203 	and.w	r2, r2, #3
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	4093      	lsls	r3, r2
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064c0:	4934      	ldr	r1, [pc, #208]	; (8006594 <HAL_GPIO_Init+0x324>)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	3302      	adds	r3, #2
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064ce:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064f2:	4a33      	ldr	r2, [pc, #204]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	43db      	mvns	r3, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4013      	ands	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800651c:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <HAL_GPIO_Init+0x350>)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006522:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	43db      	mvns	r3, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <HAL_GPIO_Init+0x350>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006570:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	f67f ae86 	bls.w	8006290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006584:	bf00      	nop
 8006586:	3724      	adds	r7, #36	; 0x24
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40023800 	.word	0x40023800
 8006594:	40013800 	.word	0x40013800
 8006598:	40020000 	.word	0x40020000
 800659c:	40020400 	.word	0x40020400
 80065a0:	40020800 	.word	0x40020800
 80065a4:	40020c00 	.word	0x40020c00
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40021400 	.word	0x40021400
 80065b0:	40021800 	.word	0x40021800
 80065b4:	40021c00 	.word	0x40021c00
 80065b8:	40022000 	.word	0x40022000
 80065bc:	40022400 	.word	0x40022400
 80065c0:	40013c00 	.word	0x40013c00

080065c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e0d9      	b.n	8006794 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065e0:	2201      	movs	r2, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f040 80c9 	bne.w	800678e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80065fc:	4a6a      	ldr	r2, [pc, #424]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	089b      	lsrs	r3, r3, #2
 8006602:	3302      	adds	r3, #2
 8006604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006608:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	220f      	movs	r2, #15
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a62      	ldr	r2, [pc, #392]	; (80067ac <HAL_GPIO_DeInit+0x1e8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d037      	beq.n	8006696 <HAL_GPIO_DeInit+0xd2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a61      	ldr	r2, [pc, #388]	; (80067b0 <HAL_GPIO_DeInit+0x1ec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d031      	beq.n	8006692 <HAL_GPIO_DeInit+0xce>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a60      	ldr	r2, [pc, #384]	; (80067b4 <HAL_GPIO_DeInit+0x1f0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <HAL_GPIO_DeInit+0xca>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <HAL_GPIO_DeInit+0x1f4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d025      	beq.n	800668a <HAL_GPIO_DeInit+0xc6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a5e      	ldr	r2, [pc, #376]	; (80067bc <HAL_GPIO_DeInit+0x1f8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01f      	beq.n	8006686 <HAL_GPIO_DeInit+0xc2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a5d      	ldr	r2, [pc, #372]	; (80067c0 <HAL_GPIO_DeInit+0x1fc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d019      	beq.n	8006682 <HAL_GPIO_DeInit+0xbe>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a5c      	ldr	r2, [pc, #368]	; (80067c4 <HAL_GPIO_DeInit+0x200>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_GPIO_DeInit+0xba>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_GPIO_DeInit+0x204>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00d      	beq.n	800667a <HAL_GPIO_DeInit+0xb6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a5a      	ldr	r2, [pc, #360]	; (80067cc <HAL_GPIO_DeInit+0x208>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <HAL_GPIO_DeInit+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a59      	ldr	r2, [pc, #356]	; (80067d0 <HAL_GPIO_DeInit+0x20c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_GPIO_DeInit+0xae>
 800666e:	2309      	movs	r3, #9
 8006670:	e012      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006672:	230a      	movs	r3, #10
 8006674:	e010      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006676:	2308      	movs	r3, #8
 8006678:	e00e      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800667a:	2307      	movs	r3, #7
 800667c:	e00c      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800667e:	2306      	movs	r3, #6
 8006680:	e00a      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006682:	2305      	movs	r3, #5
 8006684:	e008      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006686:	2304      	movs	r3, #4
 8006688:	e006      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800668a:	2303      	movs	r3, #3
 800668c:	e004      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800668e:	2302      	movs	r3, #2
 8006690:	e002      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006696:	2300      	movs	r3, #0
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	f002 0203 	and.w	r2, r2, #3
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	4093      	lsls	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d132      	bne.n	800670e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80066a8:	4b4a      	ldr	r3, [pc, #296]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	43db      	mvns	r3, r3
 80066b0:	4948      	ldr	r1, [pc, #288]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80066b6:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	43db      	mvns	r3, r3
 80066be:	4945      	ldr	r1, [pc, #276]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066c4:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	43db      	mvns	r3, r3
 80066cc:	4941      	ldr	r1, [pc, #260]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80066d2:	4b40      	ldr	r3, [pc, #256]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	43db      	mvns	r3, r3
 80066da:	493e      	ldr	r1, [pc, #248]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 80066dc:	4013      	ands	r3, r2
 80066de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	220f      	movs	r2, #15
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80066f0:	4a2d      	ldr	r2, [pc, #180]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	3302      	adds	r3, #2
 80066f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	43da      	mvns	r2, r3
 8006700:	4829      	ldr	r0, [pc, #164]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	400a      	ands	r2, r1
 8006708:	3302      	adds	r3, #2
 800670a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2103      	movs	r1, #3
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	220f      	movs	r2, #15
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	08d2      	lsrs	r2, r2, #3
 8006744:	4019      	ands	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3208      	adds	r2, #8
 800674a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	2103      	movs	r1, #3
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	401a      	ands	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	2101      	movs	r1, #1
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	fa01 f303 	lsl.w	r3, r1, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2103      	movs	r1, #3
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	401a      	ands	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3301      	adds	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	f67f af22 	bls.w	80065e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40013800 	.word	0x40013800
 80067ac:	40020000 	.word	0x40020000
 80067b0:	40020400 	.word	0x40020400
 80067b4:	40020800 	.word	0x40020800
 80067b8:	40020c00 	.word	0x40020c00
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40021400 	.word	0x40021400
 80067c4:	40021800 	.word	0x40021800
 80067c8:	40021c00 	.word	0x40021c00
 80067cc:	40022000 	.word	0x40022000
 80067d0:	40022400 	.word	0x40022400
 80067d4:	40013c00 	.word	0x40013c00

080067d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	887b      	ldrh	r3, [r7, #2]
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e001      	b.n	80067fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
 8006814:	4613      	mov	r3, r2
 8006816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006818:	787b      	ldrb	r3, [r7, #1]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006824:	e003      	b.n	800682e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	041a      	lsls	r2, r3, #16
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e07f      	b.n	800694e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fd fd80 	bl	8004368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0201 	bic.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800688c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800689c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d107      	bne.n	80068b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	e006      	b.n	80068c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80068c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d104      	bne.n	80068d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <HAL_I2C_Init+0x11c>)
 80068e2:	430b      	orrs	r3, r1
 80068e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	ea42 0103 	orr.w	r1, r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69d9      	ldr	r1, [r3, #28]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	02008000 	.word	0x02008000

0800695c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e021      	b.n	80069b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2224      	movs	r2, #36	; 0x24
 8006972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fd fd66 	bl	8004458 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	817b      	strh	r3, [r7, #10]
 80069ce:	460b      	mov	r3, r1
 80069d0:	813b      	strh	r3, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b20      	cmp	r3, #32
 80069e0:	f040 80f9 	bne.w	8006bd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_I2C_Mem_Write+0x34>
 80069ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0ed      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_I2C_Mem_Write+0x4e>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e0e6      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a12:	f7fe fa0b 	bl	8004e2c <HAL_GetTick>
 8006a16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2319      	movs	r3, #25
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fad1 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0d1      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2221      	movs	r2, #33	; 0x21
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2240      	movs	r2, #64	; 0x40
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a3a      	ldr	r2, [r7, #32]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a5c:	88f8      	ldrh	r0, [r7, #6]
 8006a5e:	893a      	ldrh	r2, [r7, #8]
 8006a60:	8979      	ldrh	r1, [r7, #10]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f9e1 	bl	8006e34 <I2C_RequestMemoryWrite>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d005      	beq.n	8006a84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0a9      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2bff      	cmp	r3, #255	; 0xff
 8006a8c:	d90e      	bls.n	8006aac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	8979      	ldrh	r1, [r7, #10]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fbb3 	bl	8007210 <I2C_TransferConfig>
 8006aaa:	e00f      	b.n	8006acc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	8979      	ldrh	r1, [r7, #10]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 fba2 	bl	8007210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fabb 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e07b      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d034      	beq.n	8006b84 <HAL_I2C_Mem_Write+0x1c8>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d130      	bne.n	8006b84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fa4d 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e04d      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2bff      	cmp	r3, #255	; 0xff
 8006b44:	d90e      	bls.n	8006b64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	22ff      	movs	r2, #255	; 0xff
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	2300      	movs	r3, #0
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fb57 	bl	8007210 <I2C_TransferConfig>
 8006b62:	e00f      	b.n	8006b84 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	8979      	ldrh	r1, [r7, #10]
 8006b76:	2300      	movs	r3, #0
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fb46 	bl	8007210 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d19e      	bne.n	8006acc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fa9a 	bl	80070cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e01a      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6859      	ldr	r1, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <HAL_I2C_Mem_Write+0x224>)
 8006bb6:	400b      	ands	r3, r1
 8006bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	fe00e800 	.word	0xfe00e800

08006be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	813b      	strh	r3, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	f040 80fd 	bne.w	8006e06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_I2C_Mem_Read+0x34>
 8006c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0f1      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_Mem_Read+0x4e>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e0ea      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c3a:	f7fe f8f7 	bl	8004e2c <HAL_GetTick>
 8006c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2319      	movs	r3, #25
 8006c46:	2201      	movs	r2, #1
 8006c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f9bd 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0d5      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2222      	movs	r2, #34	; 0x22
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a3a      	ldr	r2, [r7, #32]
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c84:	88f8      	ldrh	r0, [r7, #6]
 8006c86:	893a      	ldrh	r2, [r7, #8]
 8006c88:	8979      	ldrh	r1, [r7, #10]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	4603      	mov	r3, r0
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f921 	bl	8006edc <I2C_RequestMemoryRead>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0ad      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2bff      	cmp	r3, #255	; 0xff
 8006cb4:	d90e      	bls.n	8006cd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	22ff      	movs	r2, #255	; 0xff
 8006cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	8979      	ldrh	r1, [r7, #10]
 8006cc4:	4b52      	ldr	r3, [pc, #328]	; (8006e10 <HAL_I2C_Mem_Read+0x22c>)
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fa9f 	bl	8007210 <I2C_TransferConfig>
 8006cd2:	e00f      	b.n	8006cf4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	8979      	ldrh	r1, [r7, #10]
 8006ce6:	4b4a      	ldr	r3, [pc, #296]	; (8006e10 <HAL_I2C_Mem_Read+0x22c>)
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fa8e 	bl	8007210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2104      	movs	r1, #4
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f964 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e07c      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d034      	beq.n	8006db4 <HAL_I2C_Mem_Read+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d130      	bne.n	8006db4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f935 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e04d      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d90e      	bls.n	8006d94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	8979      	ldrh	r1, [r7, #10]
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fa3f 	bl	8007210 <I2C_TransferConfig>
 8006d92:	e00f      	b.n	8006db4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	8979      	ldrh	r1, [r7, #10]
 8006da6:	2300      	movs	r3, #0
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fa2e 	bl	8007210 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d19a      	bne.n	8006cf4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f982 	bl	80070cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e01a      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6859      	ldr	r1, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_I2C_Mem_Read+0x230>)
 8006de6:	400b      	ands	r3, r1
 8006de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e000      	b.n	8006e08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e06:	2302      	movs	r3, #2
  }
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	80002400 	.word	0x80002400
 8006e14:	fe00e800 	.word	0xfe00e800

08006e18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e26:	b2db      	uxtb	r3, r3
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	817b      	strh	r3, [r7, #10]
 8006e46:	460b      	mov	r3, r1
 8006e48:	813b      	strh	r3, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	8979      	ldrh	r1, [r7, #10]
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <I2C_RequestMemoryWrite+0xa4>)
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f9d7 	bl	8007210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	69b9      	ldr	r1, [r7, #24]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f8f0 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e02c      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d105      	bne.n	8006e88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e7c:	893b      	ldrh	r3, [r7, #8]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28
 8006e86:	e015      	b.n	8006eb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f8d6 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e012      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eaa:	893b      	ldrh	r3, [r7, #8]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f884 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	80002000 	.word	0x80002000

08006edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	813b      	strh	r3, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	8979      	ldrh	r1, [r7, #10]
 8006efc:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <I2C_RequestMemoryRead+0xa4>)
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f984 	bl	8007210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f89d 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e02c      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d105      	bne.n	8006f2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f22:	893b      	ldrh	r3, [r7, #8]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f2c:	e015      	b.n	8006f5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f2e:	893b      	ldrh	r3, [r7, #8]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	69b9      	ldr	r1, [r7, #24]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f883 	bl	800704c <I2C_WaitOnTXISFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e012      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2140      	movs	r1, #64	; 0x40
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f831 	bl	8006fcc <I2C_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	80002000 	.word	0x80002000

08006f84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d103      	bne.n	8006fa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d007      	beq.n	8006fc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	619a      	str	r2, [r3, #24]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fdc:	e022      	b.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d01e      	beq.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fd ff21 	bl	8004e2c <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d113      	bne.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e00f      	b.n	8007044 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	429a      	cmp	r2, r3
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	d0cd      	beq.n	8006fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007058:	e02c      	b.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f870 	bl	8007144 <I2C_IsAcknowledgeFailed>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e02a      	b.n	80070c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d01e      	beq.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007076:	f7fd fed9 	bl	8004e2c <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d113      	bne.n	80070b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e007      	b.n	80070c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d1cb      	bne.n	800705a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d8:	e028      	b.n	800712c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f830 	bl	8007144 <I2C_IsAcknowledgeFailed>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e026      	b.n	800713c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fd fe9d 	bl	8004e2c <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d113      	bne.n	800712c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e007      	b.n	800713c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b20      	cmp	r3, #32
 8007138:	d1cf      	bne.n	80070da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f003 0310 	and.w	r3, r3, #16
 800715a:	2b10      	cmp	r3, #16
 800715c:	d151      	bne.n	8007202 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800715e:	e022      	b.n	80071a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d01e      	beq.n	80071a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007168:	f7fd fe60 	bl	8004e2c <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	429a      	cmp	r2, r3
 8007176:	d302      	bcc.n	800717e <I2C_IsAcknowledgeFailed+0x3a>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d113      	bne.n	80071a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e02e      	b.n	8007204 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	d1d5      	bne.n	8007160 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2210      	movs	r2, #16
 80071ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2220      	movs	r2, #32
 80071c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7ff fedd 	bl	8006f84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <I2C_IsAcknowledgeFailed+0xc8>)
 80071d6:	400b      	ands	r3, r1
 80071d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	f043 0204 	orr.w	r2, r3, #4
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	fe00e800 	.word	0xfe00e800

08007210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	817b      	strh	r3, [r7, #10]
 800721e:	4613      	mov	r3, r2
 8007220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	0d5b      	lsrs	r3, r3, #21
 800722c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <I2C_TransferConfig+0x58>)
 8007232:	430b      	orrs	r3, r1
 8007234:	43db      	mvns	r3, r3
 8007236:	ea02 0103 	and.w	r1, r2, r3
 800723a:	897b      	ldrh	r3, [r7, #10]
 800723c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007240:	7a7b      	ldrb	r3, [r7, #9]
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	431a      	orrs	r2, r3
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	03ff63ff 	.word	0x03ff63ff

0800726c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b20      	cmp	r3, #32
 8007280:	d138      	bne.n	80072f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800728c:	2302      	movs	r3, #2
 800728e:	e032      	b.n	80072f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2224      	movs	r2, #36	; 0x24
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6819      	ldr	r1, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0201 	orr.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e000      	b.n	80072f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b20      	cmp	r3, #32
 8007316:	d139      	bne.n	800738c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007322:	2302      	movs	r3, #2
 8007324:	e033      	b.n	800738e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2224      	movs	r2, #36	; 0x24
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	021b      	lsls	r3, r3, #8
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0bf      	b.n	800752e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fd f884 	bl	80044d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80073de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6999      	ldr	r1, [r3, #24]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6899      	ldr	r1, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b4a      	ldr	r3, [pc, #296]	; (8007538 <HAL_LTDC_Init+0x19c>)
 8007410:	400b      	ands	r3, r1
 8007412:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6899      	ldr	r1, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68d9      	ldr	r1, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b3e      	ldr	r3, [pc, #248]	; (8007538 <HAL_LTDC_Init+0x19c>)
 800743e:	400b      	ands	r3, r1
 8007440:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68d9      	ldr	r1, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1a      	ldr	r2, [r3, #32]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6919      	ldr	r1, [r3, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b33      	ldr	r3, [pc, #204]	; (8007538 <HAL_LTDC_Init+0x19c>)
 800746c:	400b      	ands	r3, r1
 800746e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6919      	ldr	r1, [r3, #16]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6959      	ldr	r1, [r3, #20]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	4b27      	ldr	r3, [pc, #156]	; (8007538 <HAL_LTDC_Init+0x19c>)
 800749a:	400b      	ands	r3, r1
 800749c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6959      	ldr	r1, [r3, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0206 	orr.w	r2, r2, #6
 800750a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	f000f800 	.word	0xf000f800

0800753c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d023      	beq.n	80075a6 <HAL_LTDC_IRQHandler+0x6a>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2204      	movs	r2, #4
 800757e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007586:	f043 0201 	orr.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f86f 	bl	8007684 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d023      	beq.n	80075f8 <HAL_LTDC_IRQHandler+0xbc>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01e      	beq.n	80075f8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0202 	bic.w	r2, r2, #2
 80075c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2202      	movs	r2, #2
 80075d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075d8:	f043 0202 	orr.w	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f846 	bl	8007684 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01b      	beq.n	800763a <HAL_LTDC_IRQHandler+0xfe>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d016      	beq.n	800763a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f82f 	bl	8007698 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01b      	beq.n	800767c <HAL_LTDC_IRQHandler+0x140>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0208 	bic.w	r2, r2, #8
 800765c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2208      	movs	r2, #8
 8007664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f818 	bl	80076ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800767c:	bf00      	nop
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_LTDC_ConfigLayer+0x1a>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e02c      	b.n	8007734 <HAL_LTDC_ConfigLayer+0x74>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2134      	movs	r1, #52	; 0x34
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4614      	mov	r4, r2
 80076fe:	461d      	mov	r5, r3
 8007700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800770a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f81f 	bl	8007758 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2201      	movs	r2, #1
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bdb0      	pop	{r4, r5, r7, pc}

0800773c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800774a:	b2db      	uxtb	r3, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007758:	b480      	push	{r7}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	0c1b      	lsrs	r3, r3, #16
 8007770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007774:	4413      	add	r3, r2
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	01db      	lsls	r3, r3, #7
 8007784:	4413      	add	r3, r2
 8007786:	3384      	adds	r3, #132	; 0x84
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	6812      	ldr	r2, [r2, #0]
 800778e:	4611      	mov	r1, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	01d2      	lsls	r2, r2, #7
 8007794:	440a      	add	r2, r1
 8007796:	3284      	adds	r2, #132	; 0x84
 8007798:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800779c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ae:	4413      	add	r3, r2
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4619      	mov	r1, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	01db      	lsls	r3, r3, #7
 80077bc:	440b      	add	r3, r1
 80077be:	3384      	adds	r3, #132	; 0x84
 80077c0:	4619      	mov	r1, r3
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077d6:	4413      	add	r3, r2
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	01db      	lsls	r3, r3, #7
 80077e6:	4413      	add	r3, r2
 80077e8:	3384      	adds	r3, #132	; 0x84
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	4611      	mov	r1, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	01d2      	lsls	r2, r2, #7
 80077f6:	440a      	add	r2, r1
 80077f8:	3284      	adds	r2, #132	; 0x84
 80077fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80077fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800780e:	4413      	add	r3, r2
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	01db      	lsls	r3, r3, #7
 800781c:	440b      	add	r3, r1
 800781e:	3384      	adds	r3, #132	; 0x84
 8007820:	4619      	mov	r1, r3
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4313      	orrs	r3, r2
 8007826:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	4413      	add	r3, r2
 8007834:	3384      	adds	r3, #132	; 0x84
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	4611      	mov	r1, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	01d2      	lsls	r2, r2, #7
 8007842:	440a      	add	r2, r1
 8007844:	3284      	adds	r2, #132	; 0x84
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	01db      	lsls	r3, r3, #7
 8007856:	4413      	add	r3, r2
 8007858:	3384      	adds	r3, #132	; 0x84
 800785a:	461a      	mov	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007872:	041b      	lsls	r3, r3, #16
 8007874:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	01db      	lsls	r3, r3, #7
 8007888:	4413      	add	r3, r2
 800788a:	3384      	adds	r3, #132	; 0x84
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	4413      	add	r3, r2
 800789a:	3384      	adds	r3, #132	; 0x84
 800789c:	461a      	mov	r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078a8:	461a      	mov	r2, r3
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	431a      	orrs	r2, r3
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	01db      	lsls	r3, r3, #7
 80078bc:	440b      	add	r3, r1
 80078be:	3384      	adds	r3, #132	; 0x84
 80078c0:	4619      	mov	r1, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	01db      	lsls	r3, r3, #7
 80078d2:	4413      	add	r3, r2
 80078d4:	3384      	adds	r3, #132	; 0x84
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	4611      	mov	r1, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	01d2      	lsls	r2, r2, #7
 80078e2:	440a      	add	r2, r1
 80078e4:	3284      	adds	r2, #132	; 0x84
 80078e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	01db      	lsls	r3, r3, #7
 80078f6:	4413      	add	r3, r2
 80078f8:	3384      	adds	r3, #132	; 0x84
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	01db      	lsls	r3, r3, #7
 800790c:	4413      	add	r3, r2
 800790e:	3384      	adds	r3, #132	; 0x84
 8007910:	69da      	ldr	r2, [r3, #28]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4619      	mov	r1, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	01db      	lsls	r3, r3, #7
 800791c:	440b      	add	r3, r1
 800791e:	3384      	adds	r3, #132	; 0x84
 8007920:	4619      	mov	r1, r3
 8007922:	4b58      	ldr	r3, [pc, #352]	; (8007a84 <LTDC_SetConfig+0x32c>)
 8007924:	4013      	ands	r3, r2
 8007926:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	68f9      	ldr	r1, [r7, #12]
 8007932:	6809      	ldr	r1, [r1, #0]
 8007934:	4608      	mov	r0, r1
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	01c9      	lsls	r1, r1, #7
 800793a:	4401      	add	r1, r0
 800793c:	3184      	adds	r1, #132	; 0x84
 800793e:	4313      	orrs	r3, r2
 8007940:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	01db      	lsls	r3, r3, #7
 800794c:	4413      	add	r3, r2
 800794e:	3384      	adds	r3, #132	; 0x84
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	01db      	lsls	r3, r3, #7
 800795c:	4413      	add	r3, r2
 800795e:	3384      	adds	r3, #132	; 0x84
 8007960:	461a      	mov	r2, r3
 8007962:	2300      	movs	r3, #0
 8007964:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	01db      	lsls	r3, r3, #7
 8007970:	4413      	add	r3, r2
 8007972:	3384      	adds	r3, #132	; 0x84
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007984:	2304      	movs	r3, #4
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e01b      	b.n	80079c2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d102      	bne.n	8007998 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007992:	2303      	movs	r3, #3
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	e014      	b.n	80079c2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b04      	cmp	r3, #4
 800799e:	d00b      	beq.n	80079b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d007      	beq.n	80079b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d003      	beq.n	80079b8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80079b4:	2b07      	cmp	r3, #7
 80079b6:	d102      	bne.n	80079be <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80079b8:	2302      	movs	r3, #2
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e001      	b.n	80079c2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80079be:	2301      	movs	r3, #1
 80079c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	01db      	lsls	r3, r3, #7
 80079cc:	4413      	add	r3, r2
 80079ce:	3384      	adds	r3, #132	; 0x84
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	4611      	mov	r1, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	01d2      	lsls	r2, r2, #7
 80079dc:	440a      	add	r2, r1
 80079de:	3284      	adds	r2, #132	; 0x84
 80079e0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	041a      	lsls	r2, r3, #16
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	fb01 f303 	mul.w	r3, r1, r3
 8007a02:	3303      	adds	r3, #3
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	6809      	ldr	r1, [r1, #0]
 8007a08:	4608      	mov	r0, r1
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	01c9      	lsls	r1, r1, #7
 8007a0e:	4401      	add	r1, r0
 8007a10:	3184      	adds	r1, #132	; 0x84
 8007a12:	4313      	orrs	r3, r2
 8007a14:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	01db      	lsls	r3, r3, #7
 8007a20:	4413      	add	r3, r2
 8007a22:	3384      	adds	r3, #132	; 0x84
 8007a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	01db      	lsls	r3, r3, #7
 8007a30:	440b      	add	r3, r1
 8007a32:	3384      	adds	r3, #132	; 0x84
 8007a34:	4619      	mov	r1, r3
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <LTDC_SetConfig+0x330>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	01db      	lsls	r3, r3, #7
 8007a46:	4413      	add	r3, r2
 8007a48:	3384      	adds	r3, #132	; 0x84
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3384      	adds	r3, #132	; 0x84
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	4611      	mov	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	01d2      	lsls	r2, r2, #7
 8007a6c:	440a      	add	r2, r1
 8007a6e:	3284      	adds	r2, #132	; 0x84
 8007a70:	f043 0301 	orr.w	r3, r3, #1
 8007a74:	6013      	str	r3, [r2, #0]
}
 8007a76:	bf00      	nop
 8007a78:	3724      	adds	r7, #36	; 0x24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	fffff8f8 	.word	0xfffff8f8
 8007a88:	fffff800 	.word	0xfffff800

08007a8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a90:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a04      	ldr	r2, [pc, #16]	; (8007aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40007000 	.word	0x40007000

08007aac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007ab6:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8007abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac2:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ace:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ada:	f7fd f9a7 	bl	8004e2c <HAL_GetTick>
 8007ade:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ae0:	e009      	b.n	8007af6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ae2:	f7fd f9a3 	bl	8004e2c <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af0:	d901      	bls.n	8007af6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e022      	b.n	8007b3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b02:	d1ee      	bne.n	8007ae2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b04:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a0f      	ldr	r2, [pc, #60]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b10:	f7fd f98c 	bl	8004e2c <HAL_GetTick>
 8007b14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b16:	e009      	b.n	8007b2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b18:	f7fd f988 	bl	8004e2c <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b26:	d901      	bls.n	8007b2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e007      	b.n	8007b3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b38:	d1ee      	bne.n	8007b18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40007000 	.word	0x40007000

08007b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e291      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8087 	beq.w	8007c7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b70:	4b96      	ldr	r3, [pc, #600]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 030c 	and.w	r3, r3, #12
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d00c      	beq.n	8007b96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b7c:	4b93      	ldr	r3, [pc, #588]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 030c 	and.w	r3, r3, #12
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d112      	bne.n	8007bae <HAL_RCC_OscConfig+0x62>
 8007b88:	4b90      	ldr	r3, [pc, #576]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b94:	d10b      	bne.n	8007bae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b96:	4b8d      	ldr	r3, [pc, #564]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d06c      	beq.n	8007c7c <HAL_RCC_OscConfig+0x130>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d168      	bne.n	8007c7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e26b      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb6:	d106      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x7a>
 8007bb8:	4b84      	ldr	r3, [pc, #528]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a83      	ldr	r2, [pc, #524]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	e02e      	b.n	8007c24 <HAL_RCC_OscConfig+0xd8>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10c      	bne.n	8007be8 <HAL_RCC_OscConfig+0x9c>
 8007bce:	4b7f      	ldr	r3, [pc, #508]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a7e      	ldr	r2, [pc, #504]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4b7c      	ldr	r3, [pc, #496]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a7b      	ldr	r2, [pc, #492]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e01d      	b.n	8007c24 <HAL_RCC_OscConfig+0xd8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bf0:	d10c      	bne.n	8007c0c <HAL_RCC_OscConfig+0xc0>
 8007bf2:	4b76      	ldr	r3, [pc, #472]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a75      	ldr	r2, [pc, #468]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	4b73      	ldr	r3, [pc, #460]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a72      	ldr	r2, [pc, #456]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	e00b      	b.n	8007c24 <HAL_RCC_OscConfig+0xd8>
 8007c0c:	4b6f      	ldr	r3, [pc, #444]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a6e      	ldr	r2, [pc, #440]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	4b6c      	ldr	r3, [pc, #432]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a6b      	ldr	r2, [pc, #428]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d013      	beq.n	8007c54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2c:	f7fd f8fe 	bl	8004e2c <HAL_GetTick>
 8007c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c32:	e008      	b.n	8007c46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c34:	f7fd f8fa 	bl	8004e2c <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b64      	cmp	r3, #100	; 0x64
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e21f      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c46:	4b61      	ldr	r3, [pc, #388]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0f0      	beq.n	8007c34 <HAL_RCC_OscConfig+0xe8>
 8007c52:	e014      	b.n	8007c7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7fd f8ea 	bl	8004e2c <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c5c:	f7fd f8e6 	bl	8004e2c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b64      	cmp	r3, #100	; 0x64
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e20b      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6e:	4b57      	ldr	r3, [pc, #348]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x110>
 8007c7a:	e000      	b.n	8007c7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d069      	beq.n	8007d5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c8a:	4b50      	ldr	r3, [pc, #320]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 030c 	and.w	r3, r3, #12
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c96:	4b4d      	ldr	r3, [pc, #308]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 030c 	and.w	r3, r3, #12
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d11c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x190>
 8007ca2:	4b4a      	ldr	r3, [pc, #296]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d116      	bne.n	8007cdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cae:	4b47      	ldr	r3, [pc, #284]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x17a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e1df      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc6:	4b41      	ldr	r3, [pc, #260]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	493d      	ldr	r1, [pc, #244]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cda:	e040      	b.n	8007d5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d023      	beq.n	8007d2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ce4:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a38      	ldr	r2, [pc, #224]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fd f89c 	bl	8004e2c <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf8:	f7fd f898 	bl	8004e2c <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e1bd      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d0a:	4b30      	ldr	r3, [pc, #192]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d16:	4b2d      	ldr	r3, [pc, #180]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	4929      	ldr	r1, [pc, #164]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	600b      	str	r3, [r1, #0]
 8007d2a:	e018      	b.n	8007d5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d38:	f7fd f878 	bl	8004e2c <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d40:	f7fd f874 	bl	8004e2c <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e199      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d52:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1f0      	bne.n	8007d40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d038      	beq.n	8007ddc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d019      	beq.n	8007da6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d72:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d76:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7e:	f7fd f855 	bl	8004e2c <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d86:	f7fd f851 	bl	8004e2c <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e176      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCC_OscConfig+0x23a>
 8007da4:	e01a      	b.n	8007ddc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007daa:	4a08      	ldr	r2, [pc, #32]	; (8007dcc <HAL_RCC_OscConfig+0x280>)
 8007dac:	f023 0301 	bic.w	r3, r3, #1
 8007db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db2:	f7fd f83b 	bl	8004e2c <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007db8:	e00a      	b.n	8007dd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dba:	f7fd f837 	bl	8004e2c <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d903      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e15c      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
 8007dcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dd0:	4b91      	ldr	r3, [pc, #580]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ee      	bne.n	8007dba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80a4 	beq.w	8007f32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dea:	4b8b      	ldr	r3, [pc, #556]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10d      	bne.n	8007e12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007df6:	4b88      	ldr	r3, [pc, #544]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	4a87      	ldr	r2, [pc, #540]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e00:	6413      	str	r3, [r2, #64]	; 0x40
 8007e02:	4b85      	ldr	r3, [pc, #532]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0a:	60bb      	str	r3, [r7, #8]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e12:	4b82      	ldr	r3, [pc, #520]	; (800801c <HAL_RCC_OscConfig+0x4d0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d118      	bne.n	8007e50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e1e:	4b7f      	ldr	r3, [pc, #508]	; (800801c <HAL_RCC_OscConfig+0x4d0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a7e      	ldr	r2, [pc, #504]	; (800801c <HAL_RCC_OscConfig+0x4d0>)
 8007e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e2a:	f7fc ffff 	bl	8004e2c <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e32:	f7fc fffb 	bl	8004e2c <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b64      	cmp	r3, #100	; 0x64
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e120      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e44:	4b75      	ldr	r3, [pc, #468]	; (800801c <HAL_RCC_OscConfig+0x4d0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0f0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d106      	bne.n	8007e66 <HAL_RCC_OscConfig+0x31a>
 8007e58:	4b6f      	ldr	r3, [pc, #444]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	4a6e      	ldr	r2, [pc, #440]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6713      	str	r3, [r2, #112]	; 0x70
 8007e64:	e02d      	b.n	8007ec2 <HAL_RCC_OscConfig+0x376>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10c      	bne.n	8007e88 <HAL_RCC_OscConfig+0x33c>
 8007e6e:	4b6a      	ldr	r3, [pc, #424]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e72:	4a69      	ldr	r2, [pc, #420]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	6713      	str	r3, [r2, #112]	; 0x70
 8007e7a:	4b67      	ldr	r3, [pc, #412]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	4a66      	ldr	r2, [pc, #408]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e80:	f023 0304 	bic.w	r3, r3, #4
 8007e84:	6713      	str	r3, [r2, #112]	; 0x70
 8007e86:	e01c      	b.n	8007ec2 <HAL_RCC_OscConfig+0x376>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b05      	cmp	r3, #5
 8007e8e:	d10c      	bne.n	8007eaa <HAL_RCC_OscConfig+0x35e>
 8007e90:	4b61      	ldr	r3, [pc, #388]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	4a60      	ldr	r2, [pc, #384]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e96:	f043 0304 	orr.w	r3, r3, #4
 8007e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9c:	4b5e      	ldr	r3, [pc, #376]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4a5d      	ldr	r2, [pc, #372]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea8:	e00b      	b.n	8007ec2 <HAL_RCC_OscConfig+0x376>
 8007eaa:	4b5b      	ldr	r3, [pc, #364]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eae:	4a5a      	ldr	r2, [pc, #360]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb6:	4b58      	ldr	r3, [pc, #352]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	4a57      	ldr	r2, [pc, #348]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007ebc:	f023 0304 	bic.w	r3, r3, #4
 8007ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d015      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eca:	f7fc ffaf 	bl	8004e2c <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed2:	f7fc ffab 	bl	8004e2c <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e0ce      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0ee      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x386>
 8007ef4:	e014      	b.n	8007f20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef6:	f7fc ff99 	bl	8004e2c <HAL_GetTick>
 8007efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007efc:	e00a      	b.n	8007f14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007efe:	f7fc ff95 	bl	8004e2c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e0b8      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f14:	4b40      	ldr	r3, [pc, #256]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1ee      	bne.n	8007efe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f26:	4b3c      	ldr	r3, [pc, #240]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	4a3b      	ldr	r2, [pc, #236]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a4 	beq.w	8008084 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 030c 	and.w	r3, r3, #12
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d06b      	beq.n	8008020 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d149      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f50:	4b31      	ldr	r3, [pc, #196]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a30      	ldr	r2, [pc, #192]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5c:	f7fc ff66 	bl	8004e2c <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f64:	f7fc ff62 	bl	8004e2c <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e087      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f76:	4b28      	ldr	r3, [pc, #160]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f0      	bne.n	8007f64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	69da      	ldr	r2, [r3, #28]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	019b      	lsls	r3, r3, #6
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fb0:	4b19      	ldr	r3, [pc, #100]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a18      	ldr	r2, [pc, #96]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fbc:	f7fc ff36 	bl	8004e2c <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc4:	f7fc ff32 	bl	8004e2c <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e057      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x478>
 8007fe2:	e04f      	b.n	8008084 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a0b      	ldr	r2, [pc, #44]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 8007fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff0:	f7fc ff1c 	bl	8004e2c <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff8:	f7fc ff18 	bl	8004e2c <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e03d      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <HAL_RCC_OscConfig+0x4cc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x4ac>
 8008016:	e035      	b.n	8008084 <HAL_RCC_OscConfig+0x538>
 8008018:	40023800 	.word	0x40023800
 800801c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008020:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <HAL_RCC_OscConfig+0x544>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d028      	beq.n	8008080 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008038:	429a      	cmp	r2, r3
 800803a:	d121      	bne.n	8008080 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008046:	429a      	cmp	r2, r3
 8008048:	d11a      	bne.n	8008080 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008050:	4013      	ands	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008056:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008058:	4293      	cmp	r3, r2
 800805a:	d111      	bne.n	8008080 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	3b01      	subs	r3, #1
 800806a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800806c:	429a      	cmp	r2, r3
 800806e:	d107      	bne.n	8008080 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d001      	beq.n	8008084 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	40023800 	.word	0x40023800

08008094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e0d0      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080ac:	4b6a      	ldr	r3, [pc, #424]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d910      	bls.n	80080dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ba:	4b67      	ldr	r3, [pc, #412]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 020f 	bic.w	r2, r3, #15
 80080c2:	4965      	ldr	r1, [pc, #404]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ca:	4b63      	ldr	r3, [pc, #396]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d001      	beq.n	80080dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e0b8      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d020      	beq.n	800812a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080f4:	4b59      	ldr	r3, [pc, #356]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4a58      	ldr	r2, [pc, #352]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 80080fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800810c:	4b53      	ldr	r3, [pc, #332]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4a52      	ldr	r2, [pc, #328]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008116:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008118:	4b50      	ldr	r3, [pc, #320]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	494d      	ldr	r1, [pc, #308]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008126:	4313      	orrs	r3, r2
 8008128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d040      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800813e:	4b47      	ldr	r3, [pc, #284]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d115      	bne.n	8008176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e07f      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d107      	bne.n	8008166 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e073      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008166:	4b3d      	ldr	r3, [pc, #244]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e06b      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008176:	4b39      	ldr	r3, [pc, #228]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f023 0203 	bic.w	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	4936      	ldr	r1, [pc, #216]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008184:	4313      	orrs	r3, r2
 8008186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008188:	f7fc fe50 	bl	8004e2c <HAL_GetTick>
 800818c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818e:	e00a      	b.n	80081a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008190:	f7fc fe4c 	bl	8004e2c <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f241 3288 	movw	r2, #5000	; 0x1388
 800819e:	4293      	cmp	r3, r2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e053      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a6:	4b2d      	ldr	r3, [pc, #180]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 020c 	and.w	r2, r3, #12
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d1eb      	bne.n	8008190 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d210      	bcs.n	80081e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f023 020f 	bic.w	r2, r3, #15
 80081ce:	4922      	ldr	r1, [pc, #136]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <HAL_RCC_ClockConfig+0x1c4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 030f 	and.w	r3, r3, #15
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d001      	beq.n	80081e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e032      	b.n	800824e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d008      	beq.n	8008206 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081f4:	4b19      	ldr	r3, [pc, #100]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4916      	ldr	r1, [pc, #88]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008202:	4313      	orrs	r3, r2
 8008204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	490e      	ldr	r1, [pc, #56]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 8008222:	4313      	orrs	r3, r2
 8008224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008226:	f000 f821 	bl	800826c <HAL_RCC_GetSysClockFreq>
 800822a:	4601      	mov	r1, r0
 800822c:	4b0b      	ldr	r3, [pc, #44]	; (800825c <HAL_RCC_ClockConfig+0x1c8>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	091b      	lsrs	r3, r3, #4
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	4a0a      	ldr	r2, [pc, #40]	; (8008260 <HAL_RCC_ClockConfig+0x1cc>)
 8008238:	5cd3      	ldrb	r3, [r2, r3]
 800823a:	fa21 f303 	lsr.w	r3, r1, r3
 800823e:	4a09      	ldr	r2, [pc, #36]	; (8008264 <HAL_RCC_ClockConfig+0x1d0>)
 8008240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <HAL_RCC_ClockConfig+0x1d4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f7fc fcca 	bl	8004be0 <HAL_InitTick>

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	40023c00 	.word	0x40023c00
 800825c:	40023800 	.word	0x40023800
 8008260:	08010138 	.word	0x08010138
 8008264:	2000004c 	.word	0x2000004c
 8008268:	20000050 	.word	0x20000050

0800826c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	2300      	movs	r3, #0
 800827c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008282:	4b50      	ldr	r3, [pc, #320]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 030c 	and.w	r3, r3, #12
 800828a:	2b04      	cmp	r3, #4
 800828c:	d007      	beq.n	800829e <HAL_RCC_GetSysClockFreq+0x32>
 800828e:	2b08      	cmp	r3, #8
 8008290:	d008      	beq.n	80082a4 <HAL_RCC_GetSysClockFreq+0x38>
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 808d 	bne.w	80083b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008298:	4b4b      	ldr	r3, [pc, #300]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800829a:	60bb      	str	r3, [r7, #8]
      break;
 800829c:	e08c      	b.n	80083b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800829e:	4b4b      	ldr	r3, [pc, #300]	; (80083cc <HAL_RCC_GetSysClockFreq+0x160>)
 80082a0:	60bb      	str	r3, [r7, #8]
      break;
 80082a2:	e089      	b.n	80083b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082a4:	4b47      	ldr	r3, [pc, #284]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80082ae:	4b45      	ldr	r3, [pc, #276]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d023      	beq.n	8008302 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082ba:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	099b      	lsrs	r3, r3, #6
 80082c0:	f04f 0400 	mov.w	r4, #0
 80082c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	ea03 0501 	and.w	r5, r3, r1
 80082d0:	ea04 0602 	and.w	r6, r4, r2
 80082d4:	4a3d      	ldr	r2, [pc, #244]	; (80083cc <HAL_RCC_GetSysClockFreq+0x160>)
 80082d6:	fb02 f106 	mul.w	r1, r2, r6
 80082da:	2200      	movs	r2, #0
 80082dc:	fb02 f205 	mul.w	r2, r2, r5
 80082e0:	440a      	add	r2, r1
 80082e2:	493a      	ldr	r1, [pc, #232]	; (80083cc <HAL_RCC_GetSysClockFreq+0x160>)
 80082e4:	fba5 0101 	umull	r0, r1, r5, r1
 80082e8:	1853      	adds	r3, r2, r1
 80082ea:	4619      	mov	r1, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f04f 0400 	mov.w	r4, #0
 80082f2:	461a      	mov	r2, r3
 80082f4:	4623      	mov	r3, r4
 80082f6:	f7f7 ffdb 	bl	80002b0 <__aeabi_uldivmod>
 80082fa:	4603      	mov	r3, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e049      	b.n	8008396 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008302:	4b30      	ldr	r3, [pc, #192]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	f04f 0400 	mov.w	r4, #0
 800830c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	ea03 0501 	and.w	r5, r3, r1
 8008318:	ea04 0602 	and.w	r6, r4, r2
 800831c:	4629      	mov	r1, r5
 800831e:	4632      	mov	r2, r6
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	f04f 0400 	mov.w	r4, #0
 8008328:	0154      	lsls	r4, r2, #5
 800832a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800832e:	014b      	lsls	r3, r1, #5
 8008330:	4619      	mov	r1, r3
 8008332:	4622      	mov	r2, r4
 8008334:	1b49      	subs	r1, r1, r5
 8008336:	eb62 0206 	sbc.w	r2, r2, r6
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	f04f 0400 	mov.w	r4, #0
 8008342:	0194      	lsls	r4, r2, #6
 8008344:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008348:	018b      	lsls	r3, r1, #6
 800834a:	1a5b      	subs	r3, r3, r1
 800834c:	eb64 0402 	sbc.w	r4, r4, r2
 8008350:	f04f 0100 	mov.w	r1, #0
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	00e2      	lsls	r2, r4, #3
 800835a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800835e:	00d9      	lsls	r1, r3, #3
 8008360:	460b      	mov	r3, r1
 8008362:	4614      	mov	r4, r2
 8008364:	195b      	adds	r3, r3, r5
 8008366:	eb44 0406 	adc.w	r4, r4, r6
 800836a:	f04f 0100 	mov.w	r1, #0
 800836e:	f04f 0200 	mov.w	r2, #0
 8008372:	02a2      	lsls	r2, r4, #10
 8008374:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008378:	0299      	lsls	r1, r3, #10
 800837a:	460b      	mov	r3, r1
 800837c:	4614      	mov	r4, r2
 800837e:	4618      	mov	r0, r3
 8008380:	4621      	mov	r1, r4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f04f 0400 	mov.w	r4, #0
 8008388:	461a      	mov	r2, r3
 800838a:	4623      	mov	r3, r4
 800838c:	f7f7 ff90 	bl	80002b0 <__aeabi_uldivmod>
 8008390:	4603      	mov	r3, r0
 8008392:	460c      	mov	r4, r1
 8008394:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	3301      	adds	r3, #1
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	60bb      	str	r3, [r7, #8]
      break;
 80083b0:	e002      	b.n	80083b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80083b4:	60bb      	str	r3, [r7, #8]
      break;
 80083b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083b8:	68bb      	ldr	r3, [r7, #8]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40023800 	.word	0x40023800
 80083c8:	00f42400 	.word	0x00f42400
 80083cc:	017d7840 	.word	0x017d7840

080083d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	2000004c 	.word	0x2000004c

080083e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083ec:	f7ff fff0 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 80083f0:	4601      	mov	r1, r0
 80083f2:	4b05      	ldr	r3, [pc, #20]	; (8008408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	0a9b      	lsrs	r3, r3, #10
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	4a03      	ldr	r2, [pc, #12]	; (800840c <HAL_RCC_GetPCLK1Freq+0x24>)
 80083fe:	5cd3      	ldrb	r3, [r2, r3]
 8008400:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40023800 	.word	0x40023800
 800840c:	08010148 	.word	0x08010148

08008410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008414:	f7ff ffdc 	bl	80083d0 <HAL_RCC_GetHCLKFreq>
 8008418:	4601      	mov	r1, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	0b5b      	lsrs	r3, r3, #13
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	4a03      	ldr	r2, [pc, #12]	; (8008434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800842c:	4618      	mov	r0, r3
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40023800 	.word	0x40023800
 8008434:	08010148 	.word	0x08010148

08008438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220f      	movs	r2, #15
 8008446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0203 	and.w	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	08db      	lsrs	r3, r3, #3
 8008472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <HAL_RCC_GetClockConfig+0x60>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 020f 	and.w	r2, r3, #15
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40023c00 	.word	0x40023c00

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d012      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80084c4:	4b69      	ldr	r3, [pc, #420]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	4a68      	ldr	r2, [pc, #416]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084ce:	6093      	str	r3, [r2, #8]
 80084d0:	4b66      	ldr	r3, [pc, #408]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d8:	4964      	ldr	r1, [pc, #400]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d017      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084f6:	4b5d      	ldr	r3, [pc, #372]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008504:	4959      	ldr	r1, [pc, #356]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008514:	d101      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008516:	2301      	movs	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008522:	2301      	movs	r3, #1
 8008524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d017      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008532:	4b4e      	ldr	r3, [pc, #312]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	494a      	ldr	r1, [pc, #296]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008550:	d101      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008552:	2301      	movs	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800855e:	2301      	movs	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800856e:	2301      	movs	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 808b 	beq.w	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008580:	4b3a      	ldr	r3, [pc, #232]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	4a39      	ldr	r2, [pc, #228]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800858a:	6413      	str	r3, [r2, #64]	; 0x40
 800858c:	4b37      	ldr	r3, [pc, #220]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008598:	4b35      	ldr	r3, [pc, #212]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a34      	ldr	r2, [pc, #208]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800859e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a4:	f7fc fc42 	bl	8004e2c <HAL_GetTick>
 80085a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ac:	f7fc fc3e 	bl	8004e2c <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b64      	cmp	r3, #100	; 0x64
 80085b8:	d901      	bls.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e355      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80085be:	4b2c      	ldr	r3, [pc, #176]	; (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0f0      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085ca:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d035      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d02e      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085e8:	4b20      	ldr	r3, [pc, #128]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085f2:	4b1e      	ldr	r3, [pc, #120]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4a1d      	ldr	r2, [pc, #116]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	4a1a      	ldr	r2, [pc, #104]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008610:	4b16      	ldr	r3, [pc, #88]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d114      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fc fc06 	bl	8004e2c <HAL_GetTick>
 8008620:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008622:	e00a      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7fc fc02 	bl	8004e2c <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e317      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800863a:	4b0c      	ldr	r3, [pc, #48]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0ee      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008652:	d111      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008662:	400b      	ands	r3, r1
 8008664:	4901      	ldr	r1, [pc, #4]	; (800866c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008666:	4313      	orrs	r3, r2
 8008668:	608b      	str	r3, [r1, #8]
 800866a:	e00b      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800866c:	40023800 	.word	0x40023800
 8008670:	40007000 	.word	0x40007000
 8008674:	0ffffcff 	.word	0x0ffffcff
 8008678:	4bb0      	ldr	r3, [pc, #704]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	4aaf      	ldr	r2, [pc, #700]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800867e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008682:	6093      	str	r3, [r2, #8]
 8008684:	4bad      	ldr	r3, [pc, #692]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008690:	49aa      	ldr	r1, [pc, #680]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008692:	4313      	orrs	r3, r2
 8008694:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086a2:	4ba6      	ldr	r3, [pc, #664]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a8:	4aa4      	ldr	r2, [pc, #656]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80086b2:	4ba2      	ldr	r3, [pc, #648]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	499f      	ldr	r1, [pc, #636]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086d0:	4b9a      	ldr	r3, [pc, #616]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086de:	4997      	ldr	r1, [pc, #604]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086f2:	4b92      	ldr	r3, [pc, #584]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008700:	498e      	ldr	r1, [pc, #568]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008714:	4b89      	ldr	r3, [pc, #548]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008722:	4986      	ldr	r1, [pc, #536]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008724:	4313      	orrs	r3, r2
 8008726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008736:	4b81      	ldr	r3, [pc, #516]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008744:	497d      	ldr	r1, [pc, #500]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008746:	4313      	orrs	r3, r2
 8008748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008758:	4b78      	ldr	r3, [pc, #480]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875e:	f023 0203 	bic.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	4975      	ldr	r1, [pc, #468]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800877a:	4b70      	ldr	r3, [pc, #448]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800877c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008780:	f023 020c 	bic.w	r2, r3, #12
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008788:	496c      	ldr	r1, [pc, #432]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800879c:	4b67      	ldr	r3, [pc, #412]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087aa:	4964      	ldr	r1, [pc, #400]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087be:	4b5f      	ldr	r3, [pc, #380]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	495b      	ldr	r1, [pc, #364]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087e0:	4b56      	ldr	r3, [pc, #344]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	4953      	ldr	r1, [pc, #332]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008802:	4b4e      	ldr	r3, [pc, #312]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008810:	494a      	ldr	r1, [pc, #296]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008824:	4b45      	ldr	r3, [pc, #276]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008832:	4942      	ldr	r1, [pc, #264]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008846:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008854:	4939      	ldr	r1, [pc, #228]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008868:	4b34      	ldr	r3, [pc, #208]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008876:	4931      	ldr	r1, [pc, #196]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d011      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800888a:	4b2c      	ldr	r3, [pc, #176]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008898:	4928      	ldr	r1, [pc, #160]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a8:	d101      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80088aa:	2301      	movs	r3, #1
 80088ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80088ba:	2301      	movs	r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ca:	4b1c      	ldr	r3, [pc, #112]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d8:	4918      	ldr	r1, [pc, #96]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088fc:	490f      	ldr	r1, [pc, #60]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d005      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008912:	f040 80d8 	bne.w	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a08      	ldr	r2, [pc, #32]	; (800893c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800891c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008922:	f7fc fa83 	bl	8004e2c <HAL_GetTick>
 8008926:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008928:	e00a      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800892a:	f7fc fa7f 	bl	8004e2c <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b64      	cmp	r3, #100	; 0x64
 8008936:	d903      	bls.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e196      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800893c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008940:	4b6c      	ldr	r3, [pc, #432]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1ee      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d021      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11d      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008960:	4b64      	ldr	r3, [pc, #400]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800896e:	4b61      	ldr	r3, [pc, #388]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008974:	0e1b      	lsrs	r3, r3, #24
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	019a      	lsls	r2, r3, #6
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	431a      	orrs	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	071b      	lsls	r3, r3, #28
 8008994:	4957      	ldr	r1, [pc, #348]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b0:	d00a      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d02e      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089c6:	d129      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80089c8:	4b4a      	ldr	r3, [pc, #296]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089d6:	4b47      	ldr	r3, [pc, #284]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089dc:	0f1b      	lsrs	r3, r3, #28
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	019a      	lsls	r2, r3, #6
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	041b      	lsls	r3, r3, #16
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	071b      	lsls	r3, r3, #28
 80089fc:	493d      	ldr	r1, [pc, #244]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008a04:	4b3b      	ldr	r3, [pc, #236]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0a:	f023 021f 	bic.w	r2, r3, #31
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	3b01      	subs	r3, #1
 8008a14:	4937      	ldr	r1, [pc, #220]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01d      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a28:	4b32      	ldr	r3, [pc, #200]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a2e:	0e1b      	lsrs	r3, r3, #24
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a36:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a3c:	0f1b      	lsrs	r3, r3, #28
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	019a      	lsls	r2, r3, #6
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	431a      	orrs	r2, r3
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	061b      	lsls	r3, r3, #24
 8008a56:	431a      	orrs	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	071b      	lsls	r3, r3, #28
 8008a5c:	4925      	ldr	r1, [pc, #148]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d011      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	019a      	lsls	r2, r3, #6
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	071b      	lsls	r3, r3, #28
 8008a8c:	4919      	ldr	r1, [pc, #100]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a16      	ldr	r2, [pc, #88]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa0:	f7fc f9c4 	bl	8004e2c <HAL_GetTick>
 8008aa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008aa6:	e008      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008aa8:	f7fc f9c0 	bl	8004e2c <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b64      	cmp	r3, #100	; 0x64
 8008ab4:	d901      	bls.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e0d7      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008aba:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0f0      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	f040 80cd 	bne.w	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ada:	f7fc f9a7 	bl	8004e2c <HAL_GetTick>
 8008ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ae0:	e00a      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ae2:	f7fc f9a3 	bl	8004e2c <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b64      	cmp	r3, #100	; 0x64
 8008aee:	d903      	bls.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e0ba      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008af4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008af8:	4b5e      	ldr	r3, [pc, #376]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b04:	d0ed      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d02e      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d12a      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b2e:	4b51      	ldr	r3, [pc, #324]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b34:	0c1b      	lsrs	r3, r3, #16
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b3c:	4b4d      	ldr	r3, [pc, #308]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b42:	0f1b      	lsrs	r3, r3, #28
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	019a      	lsls	r2, r3, #6
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	061b      	lsls	r3, r3, #24
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	071b      	lsls	r3, r3, #28
 8008b62:	4944      	ldr	r1, [pc, #272]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b6a:	4b42      	ldr	r3, [pc, #264]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	493d      	ldr	r1, [pc, #244]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d022      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b98:	d11d      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b9a:	4b36      	ldr	r3, [pc, #216]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba0:	0e1b      	lsrs	r3, r3, #24
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ba8:	4b32      	ldr	r3, [pc, #200]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bae:	0f1b      	lsrs	r3, r3, #28
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	019a      	lsls	r2, r3, #6
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	071b      	lsls	r3, r3, #28
 8008bce:	4929      	ldr	r1, [pc, #164]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0308 	and.w	r3, r3, #8
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d028      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008be2:	4b24      	ldr	r3, [pc, #144]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bf0:	4b20      	ldr	r3, [pc, #128]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf6:	0c1b      	lsrs	r3, r3, #16
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	019a      	lsls	r2, r3, #6
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	041b      	lsls	r3, r3, #16
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	061b      	lsls	r3, r3, #24
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	071b      	lsls	r3, r3, #28
 8008c16:	4917      	ldr	r1, [pc, #92]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008c1e:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4911      	ldr	r1, [pc, #68]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a0e      	ldr	r2, [pc, #56]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c40:	f7fc f8f4 	bl	8004e2c <HAL_GetTick>
 8008c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c48:	f7fc f8f0 	bl	8004e2c <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	; 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e007      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c66:	d1ef      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	40023800 	.word	0x40023800

08008c78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e06b      	b.n	8008d62 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7f5b      	ldrb	r3, [r3, #29]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fb fce0 	bl	8004660 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	22ca      	movs	r2, #202	; 0xca
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2253      	movs	r2, #83	; 0x53
 8008cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb00 	bl	80092bc <RTC_EnterInitMode>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	22ff      	movs	r2, #255	; 0xff
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2204      	movs	r2, #4
 8008cce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e046      	b.n	8008d62 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6899      	ldr	r1, [r3, #8]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b23      	ldr	r3, [pc, #140]	; (8008d6c <HAL_RTC_Init+0xf4>)
 8008ce0:	400b      	ands	r3, r1
 8008ce2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6899      	ldr	r1, [r3, #8]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68d2      	ldr	r2, [r2, #12]
 8008d0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6919      	ldr	r1, [r3, #16]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	041a      	lsls	r2, r3, #16
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d2e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0208 	bic.w	r2, r2, #8
 8008d3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	22ff      	movs	r2, #255	; 0xff
 8008d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008d60:	2300      	movs	r3, #0
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	ff8fffbf 	.word	0xff8fffbf

08008d70 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	7f1b      	ldrb	r3, [r3, #28]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_RTC_SetTime+0x1c>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e0a8      	b.n	8008ede <HAL_RTC_SetTime+0x16e>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2202      	movs	r2, #2
 8008d96:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d126      	bne.n	8008dec <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 faac 	bl	8009314 <RTC_ByteToBcd2>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 faa5 	bl	8009314 <RTC_ByteToBcd2>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008dce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	789b      	ldrb	r3, [r3, #2]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fa9d 	bl	8009314 <RTC_ByteToBcd2>
 8008dda:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ddc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7b1b      	ldrb	r3, [r3, #12]
 8008de4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e018      	b.n	8008e1e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e0c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008e12:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	7b1b      	ldrb	r3, [r3, #12]
 8008e18:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	22ca      	movs	r2, #202	; 0xca
 8008e24:	625a      	str	r2, [r3, #36]	; 0x24
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2253      	movs	r2, #83	; 0x53
 8008e2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 fa44 	bl	80092bc <RTC_EnterInitMode>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00b      	beq.n	8008e52 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	22ff      	movs	r2, #255	; 0xff
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2204      	movs	r2, #4
 8008e46:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e045      	b.n	8008ede <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	6979      	ldr	r1, [r7, #20]
 8008e58:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <HAL_RTC_SetTime+0x178>)
 8008e5a:	400b      	ands	r3, r1
 8008e5c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6899      	ldr	r1, [r3, #8]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691a      	ldr	r2, [r3, #16]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e94:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d111      	bne.n	8008ec8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f9e1 	bl	800926c <HAL_RTC_WaitForSynchro>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2204      	movs	r2, #4
 8008ebc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e00a      	b.n	8008ede <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	22ff      	movs	r2, #255	; 0xff
 8008ece:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008edc:	2300      	movs	r3, #0
  }
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	007f7f7f 	.word	0x007f7f7f

08008eec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	7f1b      	ldrb	r3, [r3, #28]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d101      	bne.n	8008f08 <HAL_RTC_SetDate+0x1c>
 8008f04:	2302      	movs	r3, #2
 8008f06:	e092      	b.n	800902e <HAL_RTC_SetDate+0x142>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2202      	movs	r2, #2
 8008f12:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10e      	bne.n	8008f38 <HAL_RTC_SetDate+0x4c>
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	f003 0310 	and.w	r3, r3, #16
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d008      	beq.n	8008f38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	f023 0310 	bic.w	r3, r3, #16
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	330a      	adds	r3, #10
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d11c      	bne.n	8008f78 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	78db      	ldrb	r3, [r3, #3]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f9e6 	bl	8009314 <RTC_ByteToBcd2>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	785b      	ldrb	r3, [r3, #1]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f9df 	bl	8009314 <RTC_ByteToBcd2>
 8008f56:	4603      	mov	r3, r0
 8008f58:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f5a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	789b      	ldrb	r3, [r3, #2]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f9d7 	bl	8009314 <RTC_ByteToBcd2>
 8008f66:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f68:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e00e      	b.n	8008f96 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	78db      	ldrb	r3, [r3, #3]
 8008f7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f84:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008f8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	22ca      	movs	r2, #202	; 0xca
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2253      	movs	r2, #83	; 0x53
 8008fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f988 	bl	80092bc <RTC_EnterInitMode>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	22ff      	movs	r2, #255	; 0xff
 8008fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e031      	b.n	800902e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	4b19      	ldr	r3, [pc, #100]	; (8009038 <HAL_RTC_SetDate+0x14c>)
 8008fd2:	400b      	ands	r3, r1
 8008fd4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fe4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d111      	bne.n	8009018 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f939 	bl	800926c <HAL_RTC_WaitForSynchro>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2204      	movs	r2, #4
 800900c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e00a      	b.n	800902e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	22ff      	movs	r2, #255	; 0xff
 800901e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800902c:	2300      	movs	r3, #0
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	bd90      	pop	{r4, r7, pc}
 8009036:	bf00      	nop
 8009038:	00ffff3f 	.word	0x00ffff3f

0800903c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	7f1b      	ldrb	r3, [r3, #28]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_RTC_SetAlarm+0x24>
 800905c:	2302      	movs	r3, #2
 800905e:	e101      	b.n	8009264 <HAL_RTC_SetAlarm+0x228>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2202      	movs	r2, #2
 800906a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d137      	bne.n	80090e2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f942 	bl	8009314 <RTC_ByteToBcd2>
 8009090:	4603      	mov	r3, r0
 8009092:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f93b 	bl	8009314 <RTC_ByteToBcd2>
 800909e:	4603      	mov	r3, r0
 80090a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80090a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	789b      	ldrb	r3, [r3, #2]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f933 	bl	8009314 <RTC_ByteToBcd2>
 80090ae:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80090b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	7b1b      	ldrb	r3, [r3, #12]
 80090b8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80090ba:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f925 	bl	8009314 <RTC_ByteToBcd2>
 80090ca:	4603      	mov	r3, r0
 80090cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80090d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80090dc:	4313      	orrs	r3, r2
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e023      	b.n	800912a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009102:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009108:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	7b1b      	ldrb	r3, [r3, #12]
 800910e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009110:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009118:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800911a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009120:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009126:	4313      	orrs	r3, r2
 8009128:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	4313      	orrs	r3, r2
 8009134:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22ca      	movs	r2, #202	; 0xca
 800913c:	625a      	str	r2, [r3, #36]	; 0x24
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2253      	movs	r2, #83	; 0x53
 8009144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914e:	d13f      	bne.n	80091d0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800915e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800916e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009170:	f7fb fe5c 	bl	8004e2c <HAL_GetTick>
 8009174:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009176:	e013      	b.n	80091a0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009178:	f7fb fe58 	bl	8004e2c <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009186:	d90b      	bls.n	80091a0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2203      	movs	r2, #3
 8009194:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e061      	b.n	8009264 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0e4      	beq.n	8009178 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091cc:	609a      	str	r2, [r3, #8]
 80091ce:	e03e      	b.n	800924e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80091de:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ee:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091f0:	f7fb fe1c 	bl	8004e2c <HAL_GetTick>
 80091f4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80091f6:	e013      	b.n	8009220 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091f8:	f7fb fe18 	bl	8004e2c <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009206:	d90b      	bls.n	8009220 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	22ff      	movs	r2, #255	; 0xff
 800920e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2203      	movs	r2, #3
 8009214:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e021      	b.n	8009264 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0e4      	beq.n	80091f8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800924c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	22ff      	movs	r2, #255	; 0xff
 8009254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3724      	adds	r7, #36	; 0x24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd90      	pop	{r4, r7, pc}

0800926c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009286:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009288:	f7fb fdd0 	bl	8004e2c <HAL_GetTick>
 800928c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800928e:	e009      	b.n	80092a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009290:	f7fb fdcc 	bl	8004e2c <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800929e:	d901      	bls.n	80092a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e007      	b.n	80092b4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0ee      	beq.n	8009290 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d119      	bne.n	800930a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f04f 32ff 	mov.w	r2, #4294967295
 80092de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092e0:	f7fb fda4 	bl	8004e2c <HAL_GetTick>
 80092e4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092e6:	e009      	b.n	80092fc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092e8:	f7fb fda0 	bl	8004e2c <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f6:	d901      	bls.n	80092fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e007      	b.n	800930c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0ee      	beq.n	80092e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009322:	e005      	b.n	8009330 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	3b0a      	subs	r3, #10
 800932e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b09      	cmp	r3, #9
 8009334:	d8f6      	bhi.n	8009324 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	011b      	lsls	r3, r3, #4
 800933c:	b2da      	uxtb	r2, r3
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	4313      	orrs	r3, r2
 8009342:	b2db      	uxtb	r3, r3
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	7f1b      	ldrb	r3, [r3, #28]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009368:	2302      	movs	r3, #2
 800936a:	e03e      	b.n	80093ea <HAL_RTCEx_SetTimeStamp+0x9a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2202      	movs	r2, #2
 8009376:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009380:	4013      	ands	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4313      	orrs	r3, r2
 800938a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	22ca      	movs	r2, #202	; 0xca
 8009392:	625a      	str	r2, [r3, #36]	; 0x24
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2253      	movs	r2, #83	; 0x53
 800939a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0206 	bic.w	r2, r2, #6
 80093aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093d2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	fffff7f7 	.word	0xfffff7f7

080093fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e025      	b.n	800945c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fb fbd1 	bl	8004bcc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f001 fff7 	bl	800b430 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	461a      	mov	r2, r3
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	f002 f861 	bl	800b514 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d101      	bne.n	8009480 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800947c:	2302      	movs	r3, #2
 800947e:	e018      	b.n	80094b2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	4618      	mov	r0, r3
 8009492:	f002 f8bf 	bl	800b614 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b02      	cmp	r3, #2
 800949c:	d104      	bne.n	80094a8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2205      	movs	r2, #5
 80094a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80094a6:	e003      	b.n	80094b0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d101      	bne.n	80094d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80094d0:	2302      	movs	r3, #2
 80094d2:	e00e      	b.n	80094f2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 f8b7 	bl	800b656 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e084      	b.n	8009616 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7fb f8b4 	bl	8004694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800954c:	d902      	bls.n	8009554 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e002      	b.n	800955a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009558:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009562:	d007      	beq.n	8009574 <HAL_SPI_Init+0x7a>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800956c:	d002      	beq.n	8009574 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009584:	d903      	bls.n	800958e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
 800958c:	e002      	b.n	8009594 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	ea42 0103 	orr.w	r1, r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	f003 0204 	and.w	r2, r3, #4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	431a      	orrs	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	ea42 0103 	orr.w	r1, r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009604:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e01d      	b.n	800966c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d106      	bne.n	800964a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7fb f897 	bl	8004778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2202      	movs	r2, #2
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3304      	adds	r3, #4
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f000 fbc3 	bl	8009de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <HAL_TIM_Base_Start_IT+0x50>)
 8009694:	4013      	ands	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b06      	cmp	r3, #6
 800969c:	d00b      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0x42>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a4:	d007      	beq.n	80096b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f042 0201 	orr.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	00010007 	.word	0x00010007

080096c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e01d      	b.n	8009716 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f815 	bl	800971e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f000 fb6e 	bl	8009de8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b02      	cmp	r3, #2
 8009746:	d122      	bne.n	800978e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b02      	cmp	r3, #2
 8009754:	d11b      	bne.n	800978e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f06f 0202 	mvn.w	r2, #2
 800975e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fb19 	bl	8009dac <HAL_TIM_IC_CaptureCallback>
 800977a:	e005      	b.n	8009788 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fb0b 	bl	8009d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fb1c 	bl	8009dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b04      	cmp	r3, #4
 800979a:	d122      	bne.n	80097e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d11b      	bne.n	80097e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f06f 0204 	mvn.w	r2, #4
 80097b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 faef 	bl	8009dac <HAL_TIM_IC_CaptureCallback>
 80097ce:	e005      	b.n	80097dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fae1 	bl	8009d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 faf2 	bl	8009dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d122      	bne.n	8009836 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	d11b      	bne.n	8009836 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f06f 0208 	mvn.w	r2, #8
 8009806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2204      	movs	r2, #4
 800980c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fac5 	bl	8009dac <HAL_TIM_IC_CaptureCallback>
 8009822:	e005      	b.n	8009830 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fab7 	bl	8009d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fac8 	bl	8009dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	2b10      	cmp	r3, #16
 8009842:	d122      	bne.n	800988a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	2b10      	cmp	r3, #16
 8009850:	d11b      	bne.n	800988a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0210 	mvn.w	r2, #16
 800985a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2208      	movs	r2, #8
 8009860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fa9b 	bl	8009dac <HAL_TIM_IC_CaptureCallback>
 8009876:	e005      	b.n	8009884 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fa8d 	bl	8009d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa9e 	bl	8009dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b01      	cmp	r3, #1
 8009896:	d10e      	bne.n	80098b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d107      	bne.n	80098b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f06f 0201 	mvn.w	r2, #1
 80098ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7f9 fb4d 	bl	8002f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c0:	2b80      	cmp	r3, #128	; 0x80
 80098c2:	d10e      	bne.n	80098e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ce:	2b80      	cmp	r3, #128	; 0x80
 80098d0:	d107      	bne.n	80098e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 ffb9 	bl	800a854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f0:	d10e      	bne.n	8009910 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fc:	2b80      	cmp	r3, #128	; 0x80
 80098fe:	d107      	bne.n	8009910 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 ffac 	bl	800a868 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	d10e      	bne.n	800993c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009928:	2b40      	cmp	r3, #64	; 0x40
 800992a:	d107      	bne.n	800993c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa4c 	bl	8009dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0320 	and.w	r3, r3, #32
 8009946:	2b20      	cmp	r3, #32
 8009948:	d10e      	bne.n	8009968 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f003 0320 	and.w	r3, r3, #32
 8009954:	2b20      	cmp	r3, #32
 8009956:	d107      	bne.n	8009968 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0220 	mvn.w	r2, #32
 8009960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 ff6c 	bl	800a840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009982:	2b01      	cmp	r3, #1
 8009984:	d101      	bne.n	800998a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009986:	2302      	movs	r3, #2
 8009988:	e105      	b.n	8009b96 <HAL_TIM_PWM_ConfigChannel+0x226>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b14      	cmp	r3, #20
 800999e:	f200 80f0 	bhi.w	8009b82 <HAL_TIM_PWM_ConfigChannel+0x212>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099fd 	.word	0x080099fd
 80099ac:	08009b83 	.word	0x08009b83
 80099b0:	08009b83 	.word	0x08009b83
 80099b4:	08009b83 	.word	0x08009b83
 80099b8:	08009a3d 	.word	0x08009a3d
 80099bc:	08009b83 	.word	0x08009b83
 80099c0:	08009b83 	.word	0x08009b83
 80099c4:	08009b83 	.word	0x08009b83
 80099c8:	08009a7f 	.word	0x08009a7f
 80099cc:	08009b83 	.word	0x08009b83
 80099d0:	08009b83 	.word	0x08009b83
 80099d4:	08009b83 	.word	0x08009b83
 80099d8:	08009abf 	.word	0x08009abf
 80099dc:	08009b83 	.word	0x08009b83
 80099e0:	08009b83 	.word	0x08009b83
 80099e4:	08009b83 	.word	0x08009b83
 80099e8:	08009b01 	.word	0x08009b01
 80099ec:	08009b83 	.word	0x08009b83
 80099f0:	08009b83 	.word	0x08009b83
 80099f4:	08009b83 	.word	0x08009b83
 80099f8:	08009b41 	.word	0x08009b41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fa90 	bl	8009f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0208 	orr.w	r2, r2, #8
 8009a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0204 	bic.w	r2, r2, #4
 8009a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6999      	ldr	r1, [r3, #24]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	619a      	str	r2, [r3, #24]
      break;
 8009a3a:	e0a3      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68b9      	ldr	r1, [r7, #8]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 fae2 	bl	800a00c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699a      	ldr	r2, [r3, #24]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6999      	ldr	r1, [r3, #24]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	021a      	lsls	r2, r3, #8
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	619a      	str	r2, [r3, #24]
      break;
 8009a7c:	e082      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fb39 	bl	800a0fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69da      	ldr	r2, [r3, #28]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0208 	orr.w	r2, r2, #8
 8009a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69da      	ldr	r2, [r3, #28]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0204 	bic.w	r2, r2, #4
 8009aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69d9      	ldr	r1, [r3, #28]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	61da      	str	r2, [r3, #28]
      break;
 8009abc:	e062      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fb8f 	bl	800a1e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69da      	ldr	r2, [r3, #28]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69d9      	ldr	r1, [r3, #28]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	021a      	lsls	r2, r3, #8
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	430a      	orrs	r2, r1
 8009afc:	61da      	str	r2, [r3, #28]
      break;
 8009afe:	e041      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fbc6 	bl	800a298 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0208 	orr.w	r2, r2, #8
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0204 	bic.w	r2, r2, #4
 8009b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b3e:	e021      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fbf8 	bl	800a33c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	021a      	lsls	r2, r3, #8
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	430a      	orrs	r2, r1
 8009b7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b80:	e000      	b.n	8009b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b82:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_TIM_ConfigClockSource+0x18>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e0a6      	b.n	8009d06 <HAL_TIM_ConfigClockSource+0x166>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4b4f      	ldr	r3, [pc, #316]	; (8009d10 <HAL_TIM_ConfigClockSource+0x170>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d067      	beq.n	8009cc0 <HAL_TIM_ConfigClockSource+0x120>
 8009bf0:	2b40      	cmp	r3, #64	; 0x40
 8009bf2:	d80b      	bhi.n	8009c0c <HAL_TIM_ConfigClockSource+0x6c>
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d073      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0x140>
 8009bf8:	2b10      	cmp	r3, #16
 8009bfa:	d802      	bhi.n	8009c02 <HAL_TIM_ConfigClockSource+0x62>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d06f      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c00:	e078      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d06c      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0x140>
 8009c06:	2b30      	cmp	r3, #48	; 0x30
 8009c08:	d06a      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c0a:	e073      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c0c:	2b70      	cmp	r3, #112	; 0x70
 8009c0e:	d00d      	beq.n	8009c2c <HAL_TIM_ConfigClockSource+0x8c>
 8009c10:	2b70      	cmp	r3, #112	; 0x70
 8009c12:	d804      	bhi.n	8009c1e <HAL_TIM_ConfigClockSource+0x7e>
 8009c14:	2b50      	cmp	r3, #80	; 0x50
 8009c16:	d033      	beq.n	8009c80 <HAL_TIM_ConfigClockSource+0xe0>
 8009c18:	2b60      	cmp	r3, #96	; 0x60
 8009c1a:	d041      	beq.n	8009ca0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c1c:	e06a      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c22:	d066      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0x152>
 8009c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c28:	d017      	beq.n	8009c5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009c2a:	e063      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	6899      	ldr	r1, [r3, #8]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f000 fcd4 	bl	800a5e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	609a      	str	r2, [r3, #8]
      break;
 8009c58:	e04c      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6899      	ldr	r1, [r3, #8]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f000 fcbd 	bl	800a5e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689a      	ldr	r2, [r3, #8]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c7c:	609a      	str	r2, [r3, #8]
      break;
 8009c7e:	e039      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	6859      	ldr	r1, [r3, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f000 fc31 	bl	800a4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2150      	movs	r1, #80	; 0x50
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fc8a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 8009c9e:	e029      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	6859      	ldr	r1, [r3, #4]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	461a      	mov	r2, r3
 8009cae:	f000 fc50 	bl	800a552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2160      	movs	r1, #96	; 0x60
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fc7a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 8009cbe:	e019      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	6859      	ldr	r1, [r3, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f000 fc11 	bl	800a4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2140      	movs	r1, #64	; 0x40
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fc6a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 8009cde:	e009      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f000 fc61 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 8009cf0:	e000      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	fffeff88 	.word	0xfffeff88

08009d14 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_TIM_SlaveConfigSynchro+0x18>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e031      	b.n	8009d90 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fb50 	bl	800a3e4 <TIM_SlaveTimer_SetConfig>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e018      	b.n	8009d90 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d6c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d7c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a40      	ldr	r2, [pc, #256]	; (8009efc <TIM_Base_SetConfig+0x114>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d013      	beq.n	8009e28 <TIM_Base_SetConfig+0x40>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e06:	d00f      	beq.n	8009e28 <TIM_Base_SetConfig+0x40>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a3d      	ldr	r2, [pc, #244]	; (8009f00 <TIM_Base_SetConfig+0x118>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00b      	beq.n	8009e28 <TIM_Base_SetConfig+0x40>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a3c      	ldr	r2, [pc, #240]	; (8009f04 <TIM_Base_SetConfig+0x11c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d007      	beq.n	8009e28 <TIM_Base_SetConfig+0x40>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a3b      	ldr	r2, [pc, #236]	; (8009f08 <TIM_Base_SetConfig+0x120>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d003      	beq.n	8009e28 <TIM_Base_SetConfig+0x40>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a3a      	ldr	r2, [pc, #232]	; (8009f0c <TIM_Base_SetConfig+0x124>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d108      	bne.n	8009e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a2f      	ldr	r2, [pc, #188]	; (8009efc <TIM_Base_SetConfig+0x114>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d02b      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e48:	d027      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a2c      	ldr	r2, [pc, #176]	; (8009f00 <TIM_Base_SetConfig+0x118>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d023      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a2b      	ldr	r2, [pc, #172]	; (8009f04 <TIM_Base_SetConfig+0x11c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d01f      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a2a      	ldr	r2, [pc, #168]	; (8009f08 <TIM_Base_SetConfig+0x120>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d01b      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a29      	ldr	r2, [pc, #164]	; (8009f0c <TIM_Base_SetConfig+0x124>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d017      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a28      	ldr	r2, [pc, #160]	; (8009f10 <TIM_Base_SetConfig+0x128>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <TIM_Base_SetConfig+0x12c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d00f      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a26      	ldr	r2, [pc, #152]	; (8009f18 <TIM_Base_SetConfig+0x130>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00b      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a25      	ldr	r2, [pc, #148]	; (8009f1c <TIM_Base_SetConfig+0x134>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d007      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <TIM_Base_SetConfig+0x138>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d003      	beq.n	8009e9a <TIM_Base_SetConfig+0xb2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a23      	ldr	r2, [pc, #140]	; (8009f24 <TIM_Base_SetConfig+0x13c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d108      	bne.n	8009eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <TIM_Base_SetConfig+0x114>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_Base_SetConfig+0xf8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <TIM_Base_SetConfig+0x124>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d103      	bne.n	8009ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	691a      	ldr	r2, [r3, #16]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	615a      	str	r2, [r3, #20]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40010000 	.word	0x40010000
 8009f00:	40000400 	.word	0x40000400
 8009f04:	40000800 	.word	0x40000800
 8009f08:	40000c00 	.word	0x40000c00
 8009f0c:	40010400 	.word	0x40010400
 8009f10:	40014000 	.word	0x40014000
 8009f14:	40014400 	.word	0x40014400
 8009f18:	40014800 	.word	0x40014800
 8009f1c:	40001800 	.word	0x40001800
 8009f20:	40001c00 	.word	0x40001c00
 8009f24:	40002000 	.word	0x40002000

08009f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	f023 0201 	bic.w	r2, r3, #1
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4b2b      	ldr	r3, [pc, #172]	; (800a000 <TIM_OC1_SetConfig+0xd8>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0303 	bic.w	r3, r3, #3
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f023 0302 	bic.w	r3, r3, #2
 8009f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a21      	ldr	r2, [pc, #132]	; (800a004 <TIM_OC1_SetConfig+0xdc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <TIM_OC1_SetConfig+0x64>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a20      	ldr	r2, [pc, #128]	; (800a008 <TIM_OC1_SetConfig+0xe0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d10c      	bne.n	8009fa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f023 0308 	bic.w	r3, r3, #8
 8009f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f023 0304 	bic.w	r3, r3, #4
 8009fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a16      	ldr	r2, [pc, #88]	; (800a004 <TIM_OC1_SetConfig+0xdc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d003      	beq.n	8009fb6 <TIM_OC1_SetConfig+0x8e>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a15      	ldr	r2, [pc, #84]	; (800a008 <TIM_OC1_SetConfig+0xe0>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d111      	bne.n	8009fda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	621a      	str	r2, [r3, #32]
}
 8009ff4:	bf00      	nop
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	fffeff8f 	.word	0xfffeff8f
 800a004:	40010000 	.word	0x40010000
 800a008:	40010400 	.word	0x40010400

0800a00c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	f023 0210 	bic.w	r2, r3, #16
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <TIM_OC2_SetConfig+0xe4>)
 800a038:	4013      	ands	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0320 	bic.w	r3, r3, #32
 800a056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a23      	ldr	r2, [pc, #140]	; (800a0f4 <TIM_OC2_SetConfig+0xe8>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d003      	beq.n	800a074 <TIM_OC2_SetConfig+0x68>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a22      	ldr	r2, [pc, #136]	; (800a0f8 <TIM_OC2_SetConfig+0xec>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d10d      	bne.n	800a090 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	011b      	lsls	r3, r3, #4
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a08e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a18      	ldr	r2, [pc, #96]	; (800a0f4 <TIM_OC2_SetConfig+0xe8>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d003      	beq.n	800a0a0 <TIM_OC2_SetConfig+0x94>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <TIM_OC2_SetConfig+0xec>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d113      	bne.n	800a0c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	621a      	str	r2, [r3, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	feff8fff 	.word	0xfeff8fff
 800a0f4:	40010000 	.word	0x40010000
 800a0f8:	40010400 	.word	0x40010400

0800a0fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <TIM_OC3_SetConfig+0xe0>)
 800a128:	4013      	ands	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a22      	ldr	r2, [pc, #136]	; (800a1e0 <TIM_OC3_SetConfig+0xe4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d003      	beq.n	800a162 <TIM_OC3_SetConfig+0x66>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <TIM_OC3_SetConfig+0xe8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d10d      	bne.n	800a17e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	4313      	orrs	r3, r2
 800a174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a17c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a17      	ldr	r2, [pc, #92]	; (800a1e0 <TIM_OC3_SetConfig+0xe4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d003      	beq.n	800a18e <TIM_OC3_SetConfig+0x92>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a16      	ldr	r2, [pc, #88]	; (800a1e4 <TIM_OC3_SetConfig+0xe8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d113      	bne.n	800a1b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	621a      	str	r2, [r3, #32]
}
 800a1d0:	bf00      	nop
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	fffeff8f 	.word	0xfffeff8f
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40010400 	.word	0x40010400

0800a1e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4b1e      	ldr	r3, [pc, #120]	; (800a28c <TIM_OC4_SetConfig+0xa4>)
 800a214:	4013      	ands	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4313      	orrs	r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	031b      	lsls	r3, r3, #12
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a13      	ldr	r2, [pc, #76]	; (800a290 <TIM_OC4_SetConfig+0xa8>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d003      	beq.n	800a250 <TIM_OC4_SetConfig+0x68>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a12      	ldr	r2, [pc, #72]	; (800a294 <TIM_OC4_SetConfig+0xac>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d109      	bne.n	800a264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	019b      	lsls	r3, r3, #6
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4313      	orrs	r3, r2
 800a262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	621a      	str	r2, [r3, #32]
}
 800a27e:	bf00      	nop
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	feff8fff 	.word	0xfeff8fff
 800a290:	40010000 	.word	0x40010000
 800a294:	40010400 	.word	0x40010400

0800a298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <TIM_OC5_SetConfig+0x98>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	041b      	lsls	r3, r3, #16
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a12      	ldr	r2, [pc, #72]	; (800a334 <TIM_OC5_SetConfig+0x9c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d003      	beq.n	800a2f6 <TIM_OC5_SetConfig+0x5e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a11      	ldr	r2, [pc, #68]	; (800a338 <TIM_OC5_SetConfig+0xa0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d109      	bne.n	800a30a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	4313      	orrs	r3, r2
 800a308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	621a      	str	r2, [r3, #32]
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	fffeff8f 	.word	0xfffeff8f
 800a334:	40010000 	.word	0x40010000
 800a338:	40010400 	.word	0x40010400

0800a33c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <TIM_OC6_SetConfig+0x9c>)
 800a368:	4013      	ands	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a37e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	051b      	lsls	r3, r3, #20
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	4313      	orrs	r3, r2
 800a38a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a13      	ldr	r2, [pc, #76]	; (800a3dc <TIM_OC6_SetConfig+0xa0>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d003      	beq.n	800a39c <TIM_OC6_SetConfig+0x60>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a12      	ldr	r2, [pc, #72]	; (800a3e0 <TIM_OC6_SetConfig+0xa4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d109      	bne.n	800a3b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	029b      	lsls	r3, r3, #10
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	621a      	str	r2, [r3, #32]
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	feff8fff 	.word	0xfeff8fff
 800a3dc:	40010000 	.word	0x40010000
 800a3e0:	40010400 	.word	0x40010400

0800a3e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	4313      	orrs	r3, r2
 800a406:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	4b39      	ldr	r3, [pc, #228]	; (800a4f0 <TIM_SlaveTimer_SetConfig+0x10c>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2b30      	cmp	r3, #48	; 0x30
 800a428:	d05c      	beq.n	800a4e4 <TIM_SlaveTimer_SetConfig+0x100>
 800a42a:	2b30      	cmp	r3, #48	; 0x30
 800a42c:	d806      	bhi.n	800a43c <TIM_SlaveTimer_SetConfig+0x58>
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d058      	beq.n	800a4e4 <TIM_SlaveTimer_SetConfig+0x100>
 800a432:	2b20      	cmp	r3, #32
 800a434:	d056      	beq.n	800a4e4 <TIM_SlaveTimer_SetConfig+0x100>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d054      	beq.n	800a4e4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a43a:	e054      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a43c:	2b50      	cmp	r3, #80	; 0x50
 800a43e:	d03d      	beq.n	800a4bc <TIM_SlaveTimer_SetConfig+0xd8>
 800a440:	2b50      	cmp	r3, #80	; 0x50
 800a442:	d802      	bhi.n	800a44a <TIM_SlaveTimer_SetConfig+0x66>
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	d010      	beq.n	800a46a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a448:	e04d      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a44a:	2b60      	cmp	r3, #96	; 0x60
 800a44c:	d040      	beq.n	800a4d0 <TIM_SlaveTimer_SetConfig+0xec>
 800a44e:	2b70      	cmp	r3, #112	; 0x70
 800a450:	d000      	beq.n	800a454 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a452:	e048      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6818      	ldr	r0, [r3, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	68d9      	ldr	r1, [r3, #12]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f000 f8c0 	bl	800a5e8 <TIM_ETR_SetConfig>
      break;
 800a468:	e03d      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d101      	bne.n	800a476 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e038      	b.n	800a4e8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6a1a      	ldr	r2, [r3, #32]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 0201 	bic.w	r2, r2, #1
 800a48c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a49c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	621a      	str	r2, [r3, #32]
      break;
 800a4ba:	e014      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	6899      	ldr	r1, [r3, #8]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f000 f813 	bl	800a4f4 <TIM_TI1_ConfigInputStage>
      break;
 800a4ce:	e00a      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	6899      	ldr	r1, [r3, #8]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	f000 f838 	bl	800a552 <TIM_TI2_ConfigInputStage>
      break;
 800a4e2:	e000      	b.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a4e4:	bf00      	nop
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	fffefff8 	.word	0xfffefff8

0800a4f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	f023 0201 	bic.w	r2, r3, #1
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a51e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f023 030a 	bic.w	r3, r3, #10
 800a530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	621a      	str	r2, [r3, #32]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a552:	b480      	push	{r7}
 800a554:	b087      	sub	sp, #28
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	f023 0210 	bic.w	r2, r3, #16
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a57c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	031b      	lsls	r3, r3, #12
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	4313      	orrs	r3, r2
 800a586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a58e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	621a      	str	r2, [r3, #32]
}
 800a5a6:	bf00      	nop
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f043 0307 	orr.w	r3, r3, #7
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	609a      	str	r2, [r3, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	021a      	lsls	r2, r3, #8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	431a      	orrs	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4313      	orrs	r3, r2
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	609a      	str	r2, [r3, #8]
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e06d      	b.n	800a71c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a30      	ldr	r2, [pc, #192]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d004      	beq.n	800a674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2f      	ldr	r2, [pc, #188]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d108      	bne.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a67a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a20      	ldr	r2, [pc, #128]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d022      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b2:	d01d      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1d      	ldr	r2, [pc, #116]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d018      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1c      	ldr	r2, [pc, #112]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d013      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1a      	ldr	r2, [pc, #104]	; (800a738 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00e      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a15      	ldr	r2, [pc, #84]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d009      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10c      	bne.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	40010000 	.word	0x40010000
 800a72c:	40010400 	.word	0x40010400
 800a730:	40000400 	.word	0x40000400
 800a734:	40000800 	.word	0x40000800
 800a738:	40000c00 	.word	0x40000c00
 800a73c:	40014000 	.word	0x40014000
 800a740:	40001800 	.word	0x40001800

0800a744 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e065      	b.n	800a82c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	4313      	orrs	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	041b      	lsls	r3, r3, #16
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a16      	ldr	r2, [pc, #88]	; (800a838 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a14      	ldr	r2, [pc, #80]	; (800a83c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d115      	bne.n	800a81a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	051b      	lsls	r3, r3, #20
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	40010000 	.word	0x40010000
 800a83c:	40010400 	.word	0x40010400

0800a840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e040      	b.n	800a910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7fa f836 	bl	8004910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2224      	movs	r2, #36	; 0x24
 800a8a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0201 	bic.w	r2, r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f972 	bl	800aba4 <UART_SetConfig>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e022      	b.n	800a910 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fc10 	bl	800b0f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fc97 	bl	800b23c <UART_CheckIdleState>
 800a90e:	4603      	mov	r3, r0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a93e:	4013      	ands	r3, r2
 800a940:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d113      	bne.n	800a970 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00e      	beq.n	800a970 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 8100 	beq.w	800ab66 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4798      	blx	r3
      }
      return;
 800a96e:	e0fa      	b.n	800ab66 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 80d5 	beq.w	800ab22 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d105      	bne.n	800a98e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80ca 	beq.w	800ab22 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00e      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x9e>
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ae:	f043 0201 	orr.w	r2, r3, #1
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	f003 0302 	and.w	r3, r3, #2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00e      	beq.n	800a9de <HAL_UART_IRQHandler+0xc6>
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d6:	f043 0204 	orr.w	r2, r3, #4
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <HAL_UART_IRQHandler+0xee>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9fe:	f043 0202 	orr.w	r2, r3, #2
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d013      	beq.n	800aa38 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d104      	bne.n	800aa24 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2208      	movs	r2, #8
 800aa2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa30:	f043 0208 	orr.w	r2, r3, #8
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <HAL_UART_IRQHandler+0x14a>
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d07f      	beq.n	800ab6a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00c      	beq.n	800aa8e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa92:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d004      	beq.n	800aaac <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d031      	beq.n	800ab10 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fc6f 	bl	800b390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	2b40      	cmp	r3, #64	; 0x40
 800aabe:	d123      	bne.n	800ab08 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aace:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d013      	beq.n	800ab00 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aadc:	4a26      	ldr	r2, [pc, #152]	; (800ab78 <HAL_UART_IRQHandler+0x260>)
 800aade:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fb f865 	bl	8005bb4 <HAL_DMA_Abort_IT>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d016      	beq.n	800ab1e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aafa:	4610      	mov	r0, r2
 800aafc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafe:	e00e      	b.n	800ab1e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f845 	bl	800ab90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab06:	e00a      	b.n	800ab1e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f841 	bl	800ab90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab0e:	e006      	b.n	800ab1e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f83d 	bl	800ab90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ab1c:	e025      	b.n	800ab6a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab1e:	bf00      	nop
    return;
 800ab20:	e023      	b.n	800ab6a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d008      	beq.n	800ab48 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d017      	beq.n	800ab6e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
    }
    return;
 800ab46:	e012      	b.n	800ab6e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00e      	beq.n	800ab70 <HAL_UART_IRQHandler+0x258>
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d009      	beq.n	800ab70 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fc4d 	bl	800b3fc <UART_EndTransmit_IT>
    return;
 800ab62:	bf00      	nop
 800ab64:	e004      	b.n	800ab70 <HAL_UART_IRQHandler+0x258>
      return;
 800ab66:	bf00      	nop
 800ab68:	e002      	b.n	800ab70 <HAL_UART_IRQHandler+0x258>
    return;
 800ab6a:	bf00      	nop
 800ab6c:	e000      	b.n	800ab70 <HAL_UART_IRQHandler+0x258>
    return;
 800ab6e:	bf00      	nop
  }

}
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	0800b3d1 	.word	0x0800b3d1

0800ab7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	431a      	orrs	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	431a      	orrs	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	4313      	orrs	r3, r2
 800abca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	4bb1      	ldr	r3, [pc, #708]	; (800ae98 <UART_SetConfig+0x2f4>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	6939      	ldr	r1, [r7, #16]
 800abdc:	430b      	orrs	r3, r1
 800abde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a9f      	ldr	r2, [pc, #636]	; (800ae9c <UART_SetConfig+0x2f8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d121      	bne.n	800ac68 <UART_SetConfig+0xc4>
 800ac24:	4b9e      	ldr	r3, [pc, #632]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ac26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d816      	bhi.n	800ac60 <UART_SetConfig+0xbc>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <UART_SetConfig+0x94>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac55 	.word	0x0800ac55
 800ac40:	0800ac4f 	.word	0x0800ac4f
 800ac44:	0800ac5b 	.word	0x0800ac5b
 800ac48:	2301      	movs	r3, #1
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	e151      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	77fb      	strb	r3, [r7, #31]
 800ac52:	e14e      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ac54:	2304      	movs	r3, #4
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	e14b      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	77fb      	strb	r3, [r7, #31]
 800ac5e:	e148      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ac60:	2310      	movs	r3, #16
 800ac62:	77fb      	strb	r3, [r7, #31]
 800ac64:	bf00      	nop
 800ac66:	e144      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a8d      	ldr	r2, [pc, #564]	; (800aea4 <UART_SetConfig+0x300>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d134      	bne.n	800acdc <UART_SetConfig+0x138>
 800ac72:	4b8b      	ldr	r3, [pc, #556]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ac74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac78:	f003 030c 	and.w	r3, r3, #12
 800ac7c:	2b0c      	cmp	r3, #12
 800ac7e:	d829      	bhi.n	800acd4 <UART_SetConfig+0x130>
 800ac80:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <UART_SetConfig+0xe4>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800acbd 	.word	0x0800acbd
 800ac8c:	0800acd5 	.word	0x0800acd5
 800ac90:	0800acd5 	.word	0x0800acd5
 800ac94:	0800acd5 	.word	0x0800acd5
 800ac98:	0800acc9 	.word	0x0800acc9
 800ac9c:	0800acd5 	.word	0x0800acd5
 800aca0:	0800acd5 	.word	0x0800acd5
 800aca4:	0800acd5 	.word	0x0800acd5
 800aca8:	0800acc3 	.word	0x0800acc3
 800acac:	0800acd5 	.word	0x0800acd5
 800acb0:	0800acd5 	.word	0x0800acd5
 800acb4:	0800acd5 	.word	0x0800acd5
 800acb8:	0800accf 	.word	0x0800accf
 800acbc:	2300      	movs	r3, #0
 800acbe:	77fb      	strb	r3, [r7, #31]
 800acc0:	e117      	b.n	800aef2 <UART_SetConfig+0x34e>
 800acc2:	2302      	movs	r3, #2
 800acc4:	77fb      	strb	r3, [r7, #31]
 800acc6:	e114      	b.n	800aef2 <UART_SetConfig+0x34e>
 800acc8:	2304      	movs	r3, #4
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e111      	b.n	800aef2 <UART_SetConfig+0x34e>
 800acce:	2308      	movs	r3, #8
 800acd0:	77fb      	strb	r3, [r7, #31]
 800acd2:	e10e      	b.n	800aef2 <UART_SetConfig+0x34e>
 800acd4:	2310      	movs	r3, #16
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	bf00      	nop
 800acda:	e10a      	b.n	800aef2 <UART_SetConfig+0x34e>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a71      	ldr	r2, [pc, #452]	; (800aea8 <UART_SetConfig+0x304>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d120      	bne.n	800ad28 <UART_SetConfig+0x184>
 800ace6:	4b6e      	ldr	r3, [pc, #440]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d00f      	beq.n	800ad14 <UART_SetConfig+0x170>
 800acf4:	2b10      	cmp	r3, #16
 800acf6:	d802      	bhi.n	800acfe <UART_SetConfig+0x15a>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <UART_SetConfig+0x164>
 800acfc:	e010      	b.n	800ad20 <UART_SetConfig+0x17c>
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d005      	beq.n	800ad0e <UART_SetConfig+0x16a>
 800ad02:	2b30      	cmp	r3, #48	; 0x30
 800ad04:	d009      	beq.n	800ad1a <UART_SetConfig+0x176>
 800ad06:	e00b      	b.n	800ad20 <UART_SetConfig+0x17c>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e0f1      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad0e:	2302      	movs	r3, #2
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e0ee      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad14:	2304      	movs	r3, #4
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e0eb      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	77fb      	strb	r3, [r7, #31]
 800ad1e:	e0e8      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad20:	2310      	movs	r3, #16
 800ad22:	77fb      	strb	r3, [r7, #31]
 800ad24:	bf00      	nop
 800ad26:	e0e4      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a5f      	ldr	r2, [pc, #380]	; (800aeac <UART_SetConfig+0x308>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d120      	bne.n	800ad74 <UART_SetConfig+0x1d0>
 800ad32:	4b5b      	ldr	r3, [pc, #364]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ad34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad3c:	2b40      	cmp	r3, #64	; 0x40
 800ad3e:	d00f      	beq.n	800ad60 <UART_SetConfig+0x1bc>
 800ad40:	2b40      	cmp	r3, #64	; 0x40
 800ad42:	d802      	bhi.n	800ad4a <UART_SetConfig+0x1a6>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <UART_SetConfig+0x1b0>
 800ad48:	e010      	b.n	800ad6c <UART_SetConfig+0x1c8>
 800ad4a:	2b80      	cmp	r3, #128	; 0x80
 800ad4c:	d005      	beq.n	800ad5a <UART_SetConfig+0x1b6>
 800ad4e:	2bc0      	cmp	r3, #192	; 0xc0
 800ad50:	d009      	beq.n	800ad66 <UART_SetConfig+0x1c2>
 800ad52:	e00b      	b.n	800ad6c <UART_SetConfig+0x1c8>
 800ad54:	2300      	movs	r3, #0
 800ad56:	77fb      	strb	r3, [r7, #31]
 800ad58:	e0cb      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	77fb      	strb	r3, [r7, #31]
 800ad5e:	e0c8      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad60:	2304      	movs	r3, #4
 800ad62:	77fb      	strb	r3, [r7, #31]
 800ad64:	e0c5      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad66:	2308      	movs	r3, #8
 800ad68:	77fb      	strb	r3, [r7, #31]
 800ad6a:	e0c2      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	77fb      	strb	r3, [r7, #31]
 800ad70:	bf00      	nop
 800ad72:	e0be      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a4d      	ldr	r2, [pc, #308]	; (800aeb0 <UART_SetConfig+0x30c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d124      	bne.n	800adc8 <UART_SetConfig+0x224>
 800ad7e:	4b48      	ldr	r3, [pc, #288]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ad80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8c:	d012      	beq.n	800adb4 <UART_SetConfig+0x210>
 800ad8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad92:	d802      	bhi.n	800ad9a <UART_SetConfig+0x1f6>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <UART_SetConfig+0x204>
 800ad98:	e012      	b.n	800adc0 <UART_SetConfig+0x21c>
 800ad9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad9e:	d006      	beq.n	800adae <UART_SetConfig+0x20a>
 800ada0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ada4:	d009      	beq.n	800adba <UART_SetConfig+0x216>
 800ada6:	e00b      	b.n	800adc0 <UART_SetConfig+0x21c>
 800ada8:	2300      	movs	r3, #0
 800adaa:	77fb      	strb	r3, [r7, #31]
 800adac:	e0a1      	b.n	800aef2 <UART_SetConfig+0x34e>
 800adae:	2302      	movs	r3, #2
 800adb0:	77fb      	strb	r3, [r7, #31]
 800adb2:	e09e      	b.n	800aef2 <UART_SetConfig+0x34e>
 800adb4:	2304      	movs	r3, #4
 800adb6:	77fb      	strb	r3, [r7, #31]
 800adb8:	e09b      	b.n	800aef2 <UART_SetConfig+0x34e>
 800adba:	2308      	movs	r3, #8
 800adbc:	77fb      	strb	r3, [r7, #31]
 800adbe:	e098      	b.n	800aef2 <UART_SetConfig+0x34e>
 800adc0:	2310      	movs	r3, #16
 800adc2:	77fb      	strb	r3, [r7, #31]
 800adc4:	bf00      	nop
 800adc6:	e094      	b.n	800aef2 <UART_SetConfig+0x34e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a39      	ldr	r2, [pc, #228]	; (800aeb4 <UART_SetConfig+0x310>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d124      	bne.n	800ae1c <UART_SetConfig+0x278>
 800add2:	4b33      	ldr	r3, [pc, #204]	; (800aea0 <UART_SetConfig+0x2fc>)
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800addc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade0:	d012      	beq.n	800ae08 <UART_SetConfig+0x264>
 800ade2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade6:	d802      	bhi.n	800adee <UART_SetConfig+0x24a>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d007      	beq.n	800adfc <UART_SetConfig+0x258>
 800adec:	e012      	b.n	800ae14 <UART_SetConfig+0x270>
 800adee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adf2:	d006      	beq.n	800ae02 <UART_SetConfig+0x25e>
 800adf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adf8:	d009      	beq.n	800ae0e <UART_SetConfig+0x26a>
 800adfa:	e00b      	b.n	800ae14 <UART_SetConfig+0x270>
 800adfc:	2301      	movs	r3, #1
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e077      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae02:	2302      	movs	r3, #2
 800ae04:	77fb      	strb	r3, [r7, #31]
 800ae06:	e074      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae08:	2304      	movs	r3, #4
 800ae0a:	77fb      	strb	r3, [r7, #31]
 800ae0c:	e071      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae0e:	2308      	movs	r3, #8
 800ae10:	77fb      	strb	r3, [r7, #31]
 800ae12:	e06e      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae14:	2310      	movs	r3, #16
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	bf00      	nop
 800ae1a:	e06a      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a25      	ldr	r2, [pc, #148]	; (800aeb8 <UART_SetConfig+0x314>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d124      	bne.n	800ae70 <UART_SetConfig+0x2cc>
 800ae26:	4b1e      	ldr	r3, [pc, #120]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ae28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae34:	d012      	beq.n	800ae5c <UART_SetConfig+0x2b8>
 800ae36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3a:	d802      	bhi.n	800ae42 <UART_SetConfig+0x29e>
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d007      	beq.n	800ae50 <UART_SetConfig+0x2ac>
 800ae40:	e012      	b.n	800ae68 <UART_SetConfig+0x2c4>
 800ae42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae46:	d006      	beq.n	800ae56 <UART_SetConfig+0x2b2>
 800ae48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae4c:	d009      	beq.n	800ae62 <UART_SetConfig+0x2be>
 800ae4e:	e00b      	b.n	800ae68 <UART_SetConfig+0x2c4>
 800ae50:	2300      	movs	r3, #0
 800ae52:	77fb      	strb	r3, [r7, #31]
 800ae54:	e04d      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae56:	2302      	movs	r3, #2
 800ae58:	77fb      	strb	r3, [r7, #31]
 800ae5a:	e04a      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e047      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae62:	2308      	movs	r3, #8
 800ae64:	77fb      	strb	r3, [r7, #31]
 800ae66:	e044      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae68:	2310      	movs	r3, #16
 800ae6a:	77fb      	strb	r3, [r7, #31]
 800ae6c:	bf00      	nop
 800ae6e:	e040      	b.n	800aef2 <UART_SetConfig+0x34e>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a11      	ldr	r2, [pc, #68]	; (800aebc <UART_SetConfig+0x318>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d139      	bne.n	800aeee <UART_SetConfig+0x34a>
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <UART_SetConfig+0x2fc>)
 800ae7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae88:	d027      	beq.n	800aeda <UART_SetConfig+0x336>
 800ae8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae8e:	d817      	bhi.n	800aec0 <UART_SetConfig+0x31c>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01c      	beq.n	800aece <UART_SetConfig+0x32a>
 800ae94:	e027      	b.n	800aee6 <UART_SetConfig+0x342>
 800ae96:	bf00      	nop
 800ae98:	efff69f3 	.word	0xefff69f3
 800ae9c:	40011000 	.word	0x40011000
 800aea0:	40023800 	.word	0x40023800
 800aea4:	40004400 	.word	0x40004400
 800aea8:	40004800 	.word	0x40004800
 800aeac:	40004c00 	.word	0x40004c00
 800aeb0:	40005000 	.word	0x40005000
 800aeb4:	40011400 	.word	0x40011400
 800aeb8:	40007800 	.word	0x40007800
 800aebc:	40007c00 	.word	0x40007c00
 800aec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec4:	d006      	beq.n	800aed4 <UART_SetConfig+0x330>
 800aec6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeca:	d009      	beq.n	800aee0 <UART_SetConfig+0x33c>
 800aecc:	e00b      	b.n	800aee6 <UART_SetConfig+0x342>
 800aece:	2300      	movs	r3, #0
 800aed0:	77fb      	strb	r3, [r7, #31]
 800aed2:	e00e      	b.n	800aef2 <UART_SetConfig+0x34e>
 800aed4:	2302      	movs	r3, #2
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e00b      	b.n	800aef2 <UART_SetConfig+0x34e>
 800aeda:	2304      	movs	r3, #4
 800aedc:	77fb      	strb	r3, [r7, #31]
 800aede:	e008      	b.n	800aef2 <UART_SetConfig+0x34e>
 800aee0:	2308      	movs	r3, #8
 800aee2:	77fb      	strb	r3, [r7, #31]
 800aee4:	e005      	b.n	800aef2 <UART_SetConfig+0x34e>
 800aee6:	2310      	movs	r3, #16
 800aee8:	77fb      	strb	r3, [r7, #31]
 800aeea:	bf00      	nop
 800aeec:	e001      	b.n	800aef2 <UART_SetConfig+0x34e>
 800aeee:	2310      	movs	r3, #16
 800aef0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aefa:	d17f      	bne.n	800affc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aefc:	7ffb      	ldrb	r3, [r7, #31]
 800aefe:	2b08      	cmp	r3, #8
 800af00:	d85c      	bhi.n	800afbc <UART_SetConfig+0x418>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <UART_SetConfig+0x364>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af4d 	.word	0x0800af4d
 800af10:	0800af6d 	.word	0x0800af6d
 800af14:	0800afbd 	.word	0x0800afbd
 800af18:	0800af85 	.word	0x0800af85
 800af1c:	0800afbd 	.word	0x0800afbd
 800af20:	0800afbd 	.word	0x0800afbd
 800af24:	0800afbd 	.word	0x0800afbd
 800af28:	0800afa5 	.word	0x0800afa5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af2c:	f7fd fa5c 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800af30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	005a      	lsls	r2, r3, #1
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	441a      	add	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	fbb2 f3f3 	udiv	r3, r2, r3
 800af46:	b29b      	uxth	r3, r3
 800af48:	61bb      	str	r3, [r7, #24]
        break;
 800af4a:	e03a      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af4c:	f7fd fa60 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800af50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	005a      	lsls	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	441a      	add	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	61bb      	str	r3, [r7, #24]
        break;
 800af6a:	e02a      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	085a      	lsrs	r2, r3, #1
 800af72:	4b5f      	ldr	r3, [pc, #380]	; (800b0f0 <UART_SetConfig+0x54c>)
 800af74:	4413      	add	r3, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	6852      	ldr	r2, [r2, #4]
 800af7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800af7e:	b29b      	uxth	r3, r3
 800af80:	61bb      	str	r3, [r7, #24]
        break;
 800af82:	e01e      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af84:	f7fd f972 	bl	800826c <HAL_RCC_GetSysClockFreq>
 800af88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	005a      	lsls	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	085b      	lsrs	r3, r3, #1
 800af94:	441a      	add	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	61bb      	str	r3, [r7, #24]
        break;
 800afa2:	e00e      	b.n	800afc2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	085b      	lsrs	r3, r3, #1
 800afaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	61bb      	str	r3, [r7, #24]
        break;
 800afba:	e002      	b.n	800afc2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	75fb      	strb	r3, [r7, #23]
        break;
 800afc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b0f      	cmp	r3, #15
 800afc6:	d916      	bls.n	800aff6 <UART_SetConfig+0x452>
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afce:	d212      	bcs.n	800aff6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f023 030f 	bic.w	r3, r3, #15
 800afd8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	085b      	lsrs	r3, r3, #1
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	897b      	ldrh	r3, [r7, #10]
 800afe8:	4313      	orrs	r3, r2
 800afea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	897a      	ldrh	r2, [r7, #10]
 800aff2:	60da      	str	r2, [r3, #12]
 800aff4:	e070      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
 800affa:	e06d      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800affc:	7ffb      	ldrb	r3, [r7, #31]
 800affe:	2b08      	cmp	r3, #8
 800b000:	d859      	bhi.n	800b0b6 <UART_SetConfig+0x512>
 800b002:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <UART_SetConfig+0x464>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b02d 	.word	0x0800b02d
 800b00c:	0800b04b 	.word	0x0800b04b
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b0b7 	.word	0x0800b0b7
 800b018:	0800b081 	.word	0x0800b081
 800b01c:	0800b0b7 	.word	0x0800b0b7
 800b020:	0800b0b7 	.word	0x0800b0b7
 800b024:	0800b0b7 	.word	0x0800b0b7
 800b028:	0800b09f 	.word	0x0800b09f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b02c:	f7fd f9dc 	bl	80083e8 <HAL_RCC_GetPCLK1Freq>
 800b030:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	085a      	lsrs	r2, r3, #1
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	441a      	add	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	fbb2 f3f3 	udiv	r3, r2, r3
 800b044:	b29b      	uxth	r3, r3
 800b046:	61bb      	str	r3, [r7, #24]
        break;
 800b048:	e038      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b04a:	f7fd f9e1 	bl	8008410 <HAL_RCC_GetPCLK2Freq>
 800b04e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	085a      	lsrs	r2, r3, #1
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	441a      	add	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b062:	b29b      	uxth	r3, r3
 800b064:	61bb      	str	r3, [r7, #24]
        break;
 800b066:	e029      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	085a      	lsrs	r2, r3, #1
 800b06e:	4b21      	ldr	r3, [pc, #132]	; (800b0f4 <UART_SetConfig+0x550>)
 800b070:	4413      	add	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6852      	ldr	r2, [r2, #4]
 800b076:	fbb3 f3f2 	udiv	r3, r3, r2
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	61bb      	str	r3, [r7, #24]
        break;
 800b07e:	e01d      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b080:	f7fd f8f4 	bl	800826c <HAL_RCC_GetSysClockFreq>
 800b084:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	085a      	lsrs	r2, r3, #1
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	441a      	add	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	fbb2 f3f3 	udiv	r3, r2, r3
 800b098:	b29b      	uxth	r3, r3
 800b09a:	61bb      	str	r3, [r7, #24]
        break;
 800b09c:	e00e      	b.n	800b0bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	085b      	lsrs	r3, r3, #1
 800b0a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	61bb      	str	r3, [r7, #24]
        break;
 800b0b4:	e002      	b.n	800b0bc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	75fb      	strb	r3, [r7, #23]
        break;
 800b0ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	2b0f      	cmp	r3, #15
 800b0c0:	d908      	bls.n	800b0d4 <UART_SetConfig+0x530>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c8:	d204      	bcs.n	800b0d4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	60da      	str	r2, [r3, #12]
 800b0d2:	e001      	b.n	800b0d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3720      	adds	r7, #32
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	01e84800 	.word	0x01e84800
 800b0f4:	00f42400 	.word	0x00f42400

0800b0f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00a      	beq.n	800b122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	430a      	orrs	r2, r1
 800b120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00a      	beq.n	800b1aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d01a      	beq.n	800b20e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1f6:	d10a      	bne.n	800b20e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	605a      	str	r2, [r3, #4]
  }
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b24a:	f7f9 fdef 	bl	8004e2c <HAL_GetTick>
 800b24e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0308 	and.w	r3, r3, #8
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d10e      	bne.n	800b27c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b25e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f814 	bl	800b29a <UART_WaitOnFlagUntilTimeout>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e00a      	b.n	800b292 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2220      	movs	r2, #32
 800b280:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2220      	movs	r2, #32
 800b286:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	603b      	str	r3, [r7, #0]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2aa:	e05d      	b.n	800b368 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b2:	d059      	beq.n	800b368 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b4:	f7f9 fdba 	bl	8004e2c <HAL_GetTick>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d302      	bcc.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x30>
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d11b      	bne.n	800b302 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 0201 	bic.w	r2, r2, #1
 800b2e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e042      	b.n	800b388 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d02b      	beq.n	800b368 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b31e:	d123      	bne.n	800b368 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b328:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b338:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f022 0201 	bic.w	r2, r2, #1
 800b348:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2220      	movs	r2, #32
 800b34e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2220      	movs	r2, #32
 800b354:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e00f      	b.n	800b388 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69da      	ldr	r2, [r3, #28]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4013      	ands	r3, r2
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	429a      	cmp	r2, r3
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	461a      	mov	r2, r3
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	429a      	cmp	r2, r3
 800b384:	d092      	beq.n	800b2ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b3a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f022 0201 	bic.w	r2, r2, #1
 800b3b6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2220      	movs	r2, #32
 800b3bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fbce 	bl	800ab90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b412:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2220      	movs	r2, #32
 800b418:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff fbab 	bl	800ab7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d027      	beq.n	800b49a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4b2f      	ldr	r3, [pc, #188]	; (800b510 <FMC_SDRAM_Init+0xe0>)
 800b454:	4013      	ands	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b460:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b466:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b46c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b472:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b478:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b47e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b484:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b48a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4313      	orrs	r3, r2
 800b490:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	e032      	b.n	800b500 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4a6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4b0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b4b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <FMC_SDRAM_Init+0xe0>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4d4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b4da:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b4e0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b4e6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b4ec:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	ffff8000 	.word	0xffff8000

0800b514 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b514:	b480      	push	{r7}
 800b516:	b087      	sub	sp, #28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d02e      	beq.n	800b58c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b53a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	3b01      	subs	r3, #1
 800b548:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b54a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	3b01      	subs	r3, #1
 800b552:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b554:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b55e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	3b01      	subs	r3, #1
 800b566:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b568:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	3b01      	subs	r3, #1
 800b570:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b572:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	3b01      	subs	r3, #1
 800b57a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b57c:	4313      	orrs	r3, r2
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	609a      	str	r2, [r3, #8]
 800b58a:	e039      	b.n	800b600 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4b1e      	ldr	r3, [pc, #120]	; (800b610 <FMC_SDRAM_Timing_Init+0xfc>)
 800b596:	4013      	ands	r3, r2
 800b598:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b5be:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5ce:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b5d8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b5e2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	ff0f0fff 	.word	0xff0f0fff

0800b614 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b614:	b480      	push	{r7}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b62c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	3b01      	subs	r3, #1
 800b634:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b636:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b63e:	4313      	orrs	r3, r2
 800b640:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	431a      	orrs	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b68a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b68e:	2b84      	cmp	r3, #132	; 0x84
 800b690:	d005      	beq.n	800b69e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b692:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4413      	add	r3, r2
 800b69a:	3303      	adds	r3, #3
 800b69c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b6b0:	f001 f80c 	bl	800c6cc <vTaskStartScheduler>
  
  return osOK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6bc:	b089      	sub	sp, #36	; 0x24
 800b6be:	af04      	add	r7, sp, #16
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d020      	beq.n	800b70e <osThreadCreate+0x54>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01c      	beq.n	800b70e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685c      	ldr	r4, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681d      	ldr	r5, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691e      	ldr	r6, [r3, #16]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff ffc8 	bl	800b67c <makeFreeRtosPriority>
 800b6ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6f6:	9202      	str	r2, [sp, #8]
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	9100      	str	r1, [sp, #0]
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	4632      	mov	r2, r6
 800b700:	4629      	mov	r1, r5
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fc70 	bl	800bfe8 <xTaskCreateStatic>
 800b708:	4603      	mov	r3, r0
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e01c      	b.n	800b748 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685c      	ldr	r4, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b71a:	b29e      	uxth	r6, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ffaa 	bl	800b67c <makeFreeRtosPriority>
 800b728:	4602      	mov	r2, r0
 800b72a:	f107 030c 	add.w	r3, r7, #12
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	9200      	str	r2, [sp, #0]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	4632      	mov	r2, r6
 800b736:	4629      	mov	r1, r5
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 fcb5 	bl	800c0a8 <xTaskCreate>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b01      	cmp	r3, #1
 800b742:	d001      	beq.n	800b748 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b744:	2300      	movs	r3, #0
 800b746:	e000      	b.n	800b74a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b748:	68fb      	ldr	r3, [r7, #12]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b752 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <osDelay+0x16>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	e000      	b.n	800b76a <osDelay+0x18>
 800b768:	2301      	movs	r3, #1
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fe54 	bl	800c418 <vTaskDelay>
  
  return osOK;
 800b770:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d007      	beq.n	800b79a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	2001      	movs	r0, #1
 800b792:	f000 fa38 	bl	800bc06 <xQueueCreateMutexStatic>
 800b796:	4603      	mov	r3, r0
 800b798:	e003      	b.n	800b7a2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b79a:	2001      	movs	r0, #1
 800b79c:	f000 fa1b 	bl	800bbd6 <xQueueCreateMutex>
 800b7a0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f103 0208 	add.w	r2, r3, #8
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f103 0208 	add.w	r2, r3, #8
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f103 0208 	add.w	r2, r3, #8
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7de:	bf00      	nop
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b862:	d103      	bne.n	800b86c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	e00c      	b.n	800b886 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3308      	adds	r3, #8
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	e002      	b.n	800b87a <vListInsert+0x2e>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	d2f6      	bcs.n	800b874 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	6892      	ldr	r2, [r2, #8]
 800b8d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6852      	ldr	r2, [r2, #4]
 800b8de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d103      	bne.n	800b8f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	1e5a      	subs	r2, r3, #1
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
	...

0800b914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10b      	bne.n	800b940 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	b672      	cpsid	i
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	b662      	cpsie	i
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	e7fe      	b.n	800b93e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b940:	f001 fcf2 	bl	800d328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94c:	68f9      	ldr	r1, [r7, #12]
 800b94e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b950:	fb01 f303 	mul.w	r3, r1, r3
 800b954:	441a      	add	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b970:	3b01      	subs	r3, #1
 800b972:	68f9      	ldr	r1, [r7, #12]
 800b974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b976:	fb01 f303 	mul.w	r3, r1, r3
 800b97a:	441a      	add	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	22ff      	movs	r2, #255	; 0xff
 800b984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	22ff      	movs	r2, #255	; 0xff
 800b98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d114      	bne.n	800b9c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d01a      	beq.n	800b9d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3310      	adds	r3, #16
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f001 f8ec 	bl	800cb80 <xTaskRemoveFromEventList>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d012      	beq.n	800b9d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <xQueueGenericReset+0xd0>)
 800b9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	e009      	b.n	800b9d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3310      	adds	r3, #16
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fef0 	bl	800b7aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3324      	adds	r3, #36	; 0x24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff feeb 	bl	800b7aa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9d4:	f001 fcda 	bl	800d38c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9d8:	2301      	movs	r3, #1
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	e000ed04 	.word	0xe000ed04

0800b9e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b08e      	sub	sp, #56	; 0x38
 800b9ec:	af02      	add	r7, sp, #8
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <xQueueGenericCreateStatic+0x2c>
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	b672      	cpsid	i
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	b662      	cpsie	i
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba12:	e7fe      	b.n	800ba12 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10b      	bne.n	800ba32 <xQueueGenericCreateStatic+0x4a>
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	b672      	cpsid	i
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	b662      	cpsie	i
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba30:	e7fe      	b.n	800ba30 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <xQueueGenericCreateStatic+0x56>
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <xQueueGenericCreateStatic+0x5a>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <xQueueGenericCreateStatic+0x5c>
 800ba42:	2300      	movs	r3, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10b      	bne.n	800ba60 <xQueueGenericCreateStatic+0x78>
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	b672      	cpsid	i
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	b662      	cpsie	i
 800ba5c:	623b      	str	r3, [r7, #32]
 800ba5e:	e7fe      	b.n	800ba5e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <xQueueGenericCreateStatic+0x84>
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <xQueueGenericCreateStatic+0x88>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e000      	b.n	800ba72 <xQueueGenericCreateStatic+0x8a>
 800ba70:	2300      	movs	r3, #0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10b      	bne.n	800ba8e <xQueueGenericCreateStatic+0xa6>
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	b672      	cpsid	i
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	b662      	cpsie	i
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	e7fe      	b.n	800ba8c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba8e:	2348      	movs	r3, #72	; 0x48
 800ba90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2b48      	cmp	r3, #72	; 0x48
 800ba96:	d00b      	beq.n	800bab0 <xQueueGenericCreateStatic+0xc8>
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	b672      	cpsid	i
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	b662      	cpsie	i
 800baac:	61bb      	str	r3, [r7, #24]
 800baae:	e7fe      	b.n	800baae <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bab0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00d      	beq.n	800bad8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bac4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	4613      	mov	r3, r2
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	68b9      	ldr	r1, [r7, #8]
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f846 	bl	800bb64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bada:	4618      	mov	r0, r3
 800badc:	3730      	adds	r7, #48	; 0x30
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b08a      	sub	sp, #40	; 0x28
 800bae6:	af02      	add	r7, sp, #8
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	4613      	mov	r3, r2
 800baee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10b      	bne.n	800bb0e <xQueueGenericCreate+0x2c>
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	b672      	cpsid	i
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	b662      	cpsie	i
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	e7fe      	b.n	800bb0c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e004      	b.n	800bb24 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
 800bb22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	3348      	adds	r3, #72	; 0x48
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f001 fcdd 	bl	800d4e8 <pvPortMalloc>
 800bb2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d011      	beq.n	800bb5a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	3348      	adds	r3, #72	; 0x48
 800bb3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb48:	79fa      	ldrb	r2, [r7, #7]
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 f805 	bl	800bb64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
	}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3720      	adds	r7, #32
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	69ba      	ldr	r2, [r7, #24]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb92:	2101      	movs	r1, #1
 800bb94:	69b8      	ldr	r0, [r7, #24]
 800bb96:	f7ff febd 	bl	800b914 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00e      	beq.n	800bbce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f837 	bl	800bc3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bbce:	bf00      	nop
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b086      	sub	sp, #24
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	4603      	mov	r3, r0
 800bbde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	461a      	mov	r2, r3
 800bbec:	6939      	ldr	r1, [r7, #16]
 800bbee:	6978      	ldr	r0, [r7, #20]
 800bbf0:	f7ff ff77 	bl	800bae2 <xQueueGenericCreate>
 800bbf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff ffd3 	bl	800bba2 <prvInitialiseMutex>

		return xNewQueue;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
	}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b088      	sub	sp, #32
 800bc0a:	af02      	add	r7, sp, #8
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	6039      	str	r1, [r7, #0]
 800bc10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc12:	2301      	movs	r3, #1
 800bc14:	617b      	str	r3, [r7, #20]
 800bc16:	2300      	movs	r3, #0
 800bc18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bc1a:	79fb      	ldrb	r3, [r7, #7]
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2200      	movs	r2, #0
 800bc22:	6939      	ldr	r1, [r7, #16]
 800bc24:	6978      	ldr	r0, [r7, #20]
 800bc26:	f7ff fedf 	bl	800b9e8 <xQueueGenericCreateStatic>
 800bc2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7ff ffb8 	bl	800bba2 <prvInitialiseMutex>

		return xNewQueue;
 800bc32:	68fb      	ldr	r3, [r7, #12]
	}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08e      	sub	sp, #56	; 0x38
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10b      	bne.n	800bc70 <xQueueGenericSend+0x34>
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	b672      	cpsid	i
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	b662      	cpsie	i
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc6e:	e7fe      	b.n	800bc6e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d103      	bne.n	800bc7e <xQueueGenericSend+0x42>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <xQueueGenericSend+0x46>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueGenericSend+0x48>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10b      	bne.n	800bca0 <xQueueGenericSend+0x64>
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	b672      	cpsid	i
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	b662      	cpsie	i
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9e:	e7fe      	b.n	800bc9e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d103      	bne.n	800bcae <xQueueGenericSend+0x72>
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <xQueueGenericSend+0x76>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e000      	b.n	800bcb4 <xQueueGenericSend+0x78>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10b      	bne.n	800bcd0 <xQueueGenericSend+0x94>
 800bcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbc:	b672      	cpsid	i
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	b662      	cpsie	i
 800bccc:	623b      	str	r3, [r7, #32]
 800bcce:	e7fe      	b.n	800bcce <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcd0:	f001 f914 	bl	800cefc <xTaskGetSchedulerState>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <xQueueGenericSend+0xa4>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <xQueueGenericSend+0xa8>
 800bce0:	2301      	movs	r3, #1
 800bce2:	e000      	b.n	800bce6 <xQueueGenericSend+0xaa>
 800bce4:	2300      	movs	r3, #0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10b      	bne.n	800bd02 <xQueueGenericSend+0xc6>
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	b672      	cpsid	i
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	b662      	cpsie	i
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	e7fe      	b.n	800bd00 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd02:	f001 fb11 	bl	800d328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d302      	bcc.n	800bd18 <xQueueGenericSend+0xdc>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d129      	bne.n	800bd6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd1e:	f000 f88f 	bl	800be40 <prvCopyDataToQueue>
 800bd22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d010      	beq.n	800bd4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	3324      	adds	r3, #36	; 0x24
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 ff25 	bl	800cb80 <xTaskRemoveFromEventList>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d013      	beq.n	800bd64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd3c:	4b3f      	ldr	r3, [pc, #252]	; (800be3c <xQueueGenericSend+0x200>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	e00a      	b.n	800bd64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d007      	beq.n	800bd64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd54:	4b39      	ldr	r3, [pc, #228]	; (800be3c <xQueueGenericSend+0x200>)
 800bd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd64:	f001 fb12 	bl	800d38c <vPortExitCritical>
				return pdPASS;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e063      	b.n	800be34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d103      	bne.n	800bd7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd72:	f001 fb0b 	bl	800d38c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e05c      	b.n	800be34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d106      	bne.n	800bd8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd80:	f107 0314 	add.w	r3, r7, #20
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 ff5f 	bl	800cc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd8e:	f001 fafd 	bl	800d38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd92:	f000 fcfd 	bl	800c790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd96:	f001 fac7 	bl	800d328 <vPortEnterCritical>
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda0:	b25b      	sxtb	r3, r3
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda6:	d103      	bne.n	800bdb0 <xQueueGenericSend+0x174>
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb6:	b25b      	sxtb	r3, r3
 800bdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbc:	d103      	bne.n	800bdc6 <xQueueGenericSend+0x18a>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdc6:	f001 fae1 	bl	800d38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdca:	1d3a      	adds	r2, r7, #4
 800bdcc:	f107 0314 	add.w	r3, r7, #20
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 ff4e 	bl	800cc74 <xTaskCheckForTimeOut>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d124      	bne.n	800be28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bde0:	f000 f8ea 	bl	800bfb8 <prvIsQueueFull>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d018      	beq.n	800be1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	3310      	adds	r3, #16
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fe9e 	bl	800cb34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfa:	f000 f88b 	bl	800bf14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdfe:	f000 fcd5 	bl	800c7ac <xTaskResumeAll>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	f47f af7c 	bne.w	800bd02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <xQueueGenericSend+0x200>)
 800be0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	e772      	b.n	800bd02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be1e:	f000 f879 	bl	800bf14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be22:	f000 fcc3 	bl	800c7ac <xTaskResumeAll>
 800be26:	e76c      	b.n	800bd02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2a:	f000 f873 	bl	800bf14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be2e:	f000 fcbd 	bl	800c7ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be34:	4618      	mov	r0, r3
 800be36:	3738      	adds	r7, #56	; 0x38
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	e000ed04 	.word	0xe000ed04

0800be40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10d      	bne.n	800be7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d14d      	bne.n	800bf02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 f864 	bl	800cf38 <xTaskPriorityDisinherit>
 800be70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	e043      	b.n	800bf02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d119      	bne.n	800beb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6858      	ldr	r0, [r3, #4]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be88:	461a      	mov	r2, r3
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	f001 fd36 	bl	800d8fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	441a      	add	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d32b      	bcc.n	800bf02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	605a      	str	r2, [r3, #4]
 800beb2:	e026      	b.n	800bf02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68d8      	ldr	r0, [r3, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	461a      	mov	r2, r3
 800bebe:	68b9      	ldr	r1, [r7, #8]
 800bec0:	f001 fd1c 	bl	800d8fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800becc:	425b      	negs	r3, r3
 800bece:	441a      	add	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d207      	bcs.n	800bef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee8:	425b      	negs	r3, r3
 800beea:	441a      	add	r2, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d105      	bne.n	800bf02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	3b01      	subs	r3, #1
 800bf00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf0a:	697b      	ldr	r3, [r7, #20]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf1c:	f001 fa04 	bl	800d328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf28:	e011      	b.n	800bf4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d012      	beq.n	800bf58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3324      	adds	r3, #36	; 0x24
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fe22 	bl	800cb80 <xTaskRemoveFromEventList>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf42:	f000 fefb 	bl	800cd3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dce9      	bgt.n	800bf2a <prvUnlockQueue+0x16>
 800bf56:	e000      	b.n	800bf5a <prvUnlockQueue+0x46>
					break;
 800bf58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	22ff      	movs	r2, #255	; 0xff
 800bf5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf62:	f001 fa13 	bl	800d38c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf66:	f001 f9df 	bl	800d328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf72:	e011      	b.n	800bf98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d012      	beq.n	800bfa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3310      	adds	r3, #16
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fdfd 	bl	800cb80 <xTaskRemoveFromEventList>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf8c:	f000 fed6 	bl	800cd3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	3b01      	subs	r3, #1
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dce9      	bgt.n	800bf74 <prvUnlockQueue+0x60>
 800bfa0:	e000      	b.n	800bfa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bfa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	22ff      	movs	r2, #255	; 0xff
 800bfa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bfac:	f001 f9ee 	bl	800d38c <vPortExitCritical>
}
 800bfb0:	bf00      	nop
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfc0:	f001 f9b2 	bl	800d328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d102      	bne.n	800bfd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e001      	b.n	800bfda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfda:	f001 f9d7 	bl	800d38c <vPortExitCritical>

	return xReturn;
 800bfde:	68fb      	ldr	r3, [r7, #12]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08e      	sub	sp, #56	; 0x38
 800bfec:	af04      	add	r7, sp, #16
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10b      	bne.n	800c014 <xTaskCreateStatic+0x2c>
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	b672      	cpsid	i
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	b662      	cpsie	i
 800c010:	623b      	str	r3, [r7, #32]
 800c012:	e7fe      	b.n	800c012 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10b      	bne.n	800c032 <xTaskCreateStatic+0x4a>
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	b672      	cpsid	i
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	b662      	cpsie	i
 800c02e:	61fb      	str	r3, [r7, #28]
 800c030:	e7fe      	b.n	800c030 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c032:	2354      	movs	r3, #84	; 0x54
 800c034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b54      	cmp	r3, #84	; 0x54
 800c03a:	d00b      	beq.n	800c054 <xTaskCreateStatic+0x6c>
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	b672      	cpsid	i
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	b662      	cpsie	i
 800c050:	61bb      	str	r3, [r7, #24]
 800c052:	e7fe      	b.n	800c052 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c054:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d01e      	beq.n	800c09a <xTaskCreateStatic+0xb2>
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d01b      	beq.n	800c09a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c06a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	2202      	movs	r2, #2
 800c070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c074:	2300      	movs	r3, #0
 800c076:	9303      	str	r3, [sp, #12]
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	9302      	str	r3, [sp, #8]
 800c07c:	f107 0314 	add.w	r3, r7, #20
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 f850 	bl	800c132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c094:	f000 f8d6 	bl	800c244 <prvAddNewTaskToReadyList>
 800c098:	e001      	b.n	800c09e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c09e:	697b      	ldr	r3, [r7, #20]
	}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3728      	adds	r7, #40	; 0x28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08c      	sub	sp, #48	; 0x30
 800c0ac:	af04      	add	r7, sp, #16
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0b8:	88fb      	ldrh	r3, [r7, #6]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f001 fa13 	bl	800d4e8 <pvPortMalloc>
 800c0c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00e      	beq.n	800c0e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0ca:	2054      	movs	r0, #84	; 0x54
 800c0cc:	f001 fa0c 	bl	800d4e8 <pvPortMalloc>
 800c0d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	631a      	str	r2, [r3, #48]	; 0x30
 800c0de:	e005      	b.n	800c0ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0e0:	6978      	ldr	r0, [r7, #20]
 800c0e2:	f001 fac9 	bl	800d678 <vPortFree>
 800c0e6:	e001      	b.n	800c0ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d017      	beq.n	800c122 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0fa:	88fa      	ldrh	r2, [r7, #6]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9303      	str	r3, [sp, #12]
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f000 f80e 	bl	800c132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c116:	69f8      	ldr	r0, [r7, #28]
 800c118:	f000 f894 	bl	800c244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c11c:	2301      	movs	r3, #1
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	e002      	b.n	800c128 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c122:	f04f 33ff 	mov.w	r3, #4294967295
 800c126:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c128:	69bb      	ldr	r3, [r7, #24]
	}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3720      	adds	r7, #32
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b088      	sub	sp, #32
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c14a:	440b      	add	r3, r1
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	f023 0307 	bic.w	r3, r3, #7
 800c158:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	f003 0307 	and.w	r3, r3, #7
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <prvInitialiseNewTask+0x4a>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	b672      	cpsid	i
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	b662      	cpsie	i
 800c178:	617b      	str	r3, [r7, #20]
 800c17a:	e7fe      	b.n	800c17a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d01f      	beq.n	800c1c2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c182:	2300      	movs	r3, #0
 800c184:	61fb      	str	r3, [r7, #28]
 800c186:	e012      	b.n	800c1ae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	4413      	add	r3, r2
 800c18e:	7819      	ldrb	r1, [r3, #0]
 800c190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	4413      	add	r3, r2
 800c196:	3334      	adds	r3, #52	; 0x34
 800c198:	460a      	mov	r2, r1
 800c19a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d006      	beq.n	800c1b6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	61fb      	str	r3, [r7, #28]
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	2b0f      	cmp	r3, #15
 800c1b2:	d9e9      	bls.n	800c188 <prvInitialiseNewTask+0x56>
 800c1b4:	e000      	b.n	800c1b8 <prvInitialiseNewTask+0x86>
			{
				break;
 800c1b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c1c0:	e003      	b.n	800c1ca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	2b06      	cmp	r3, #6
 800c1ce:	d901      	bls.n	800c1d4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1d0:	2306      	movs	r3, #6
 800c1d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fafd 	bl	800b7ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	3318      	adds	r3, #24
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff faf8 	bl	800b7ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	f1c3 0207 	rsb	r2, r3, #7
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c20e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	2200      	movs	r2, #0
 800c214:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	68f9      	ldr	r1, [r7, #12]
 800c222:	69b8      	ldr	r0, [r7, #24]
 800c224:	f000 ff76 	bl	800d114 <pxPortInitialiseStack>
 800c228:	4602      	mov	r2, r0
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c23a:	bf00      	nop
 800c23c:	3720      	adds	r7, #32
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c24c:	f001 f86c 	bl	800d328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c250:	4b2a      	ldr	r3, [pc, #168]	; (800c2fc <prvAddNewTaskToReadyList+0xb8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a29      	ldr	r2, [pc, #164]	; (800c2fc <prvAddNewTaskToReadyList+0xb8>)
 800c258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c25a:	4b29      	ldr	r3, [pc, #164]	; (800c300 <prvAddNewTaskToReadyList+0xbc>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d109      	bne.n	800c276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c262:	4a27      	ldr	r2, [pc, #156]	; (800c300 <prvAddNewTaskToReadyList+0xbc>)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c268:	4b24      	ldr	r3, [pc, #144]	; (800c2fc <prvAddNewTaskToReadyList+0xb8>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d110      	bne.n	800c292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c270:	f000 fd88 	bl	800cd84 <prvInitialiseTaskLists>
 800c274:	e00d      	b.n	800c292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c276:	4b23      	ldr	r3, [pc, #140]	; (800c304 <prvAddNewTaskToReadyList+0xc0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c27e:	4b20      	ldr	r3, [pc, #128]	; (800c300 <prvAddNewTaskToReadyList+0xbc>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	429a      	cmp	r2, r3
 800c28a:	d802      	bhi.n	800c292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c28c:	4a1c      	ldr	r2, [pc, #112]	; (800c300 <prvAddNewTaskToReadyList+0xbc>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c292:	4b1d      	ldr	r3, [pc, #116]	; (800c308 <prvAddNewTaskToReadyList+0xc4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3301      	adds	r3, #1
 800c298:	4a1b      	ldr	r2, [pc, #108]	; (800c308 <prvAddNewTaskToReadyList+0xc4>)
 800c29a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	409a      	lsls	r2, r3
 800c2a4:	4b19      	ldr	r3, [pc, #100]	; (800c30c <prvAddNewTaskToReadyList+0xc8>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	4a18      	ldr	r2, [pc, #96]	; (800c30c <prvAddNewTaskToReadyList+0xc8>)
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4a15      	ldr	r2, [pc, #84]	; (800c310 <prvAddNewTaskToReadyList+0xcc>)
 800c2bc:	441a      	add	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f7ff fa9d 	bl	800b804 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2ca:	f001 f85f 	bl	800d38c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <prvAddNewTaskToReadyList+0xc0>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00e      	beq.n	800c2f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2d6:	4b0a      	ldr	r3, [pc, #40]	; (800c300 <prvAddNewTaskToReadyList+0xbc>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d207      	bcs.n	800c2f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2e4:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <prvAddNewTaskToReadyList+0xd0>)
 800c2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	2000067c 	.word	0x2000067c
 800c300:	2000057c 	.word	0x2000057c
 800c304:	20000688 	.word	0x20000688
 800c308:	20000698 	.word	0x20000698
 800c30c:	20000684 	.word	0x20000684
 800c310:	20000580 	.word	0x20000580
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c322:	2300      	movs	r3, #0
 800c324:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10b      	bne.n	800c344 <vTaskDelayUntil+0x2c>
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	b672      	cpsid	i
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	b662      	cpsie	i
 800c340:	617b      	str	r3, [r7, #20]
 800c342:	e7fe      	b.n	800c342 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <vTaskDelayUntil+0x4a>
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	b672      	cpsid	i
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	b662      	cpsie	i
 800c35e:	613b      	str	r3, [r7, #16]
 800c360:	e7fe      	b.n	800c360 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c362:	4b2a      	ldr	r3, [pc, #168]	; (800c40c <vTaskDelayUntil+0xf4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <vTaskDelayUntil+0x6a>
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	b672      	cpsid	i
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	b662      	cpsie	i
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e7fe      	b.n	800c380 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c382:	f000 fa05 	bl	800c790 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c386:	4b22      	ldr	r3, [pc, #136]	; (800c410 <vTaskDelayUntil+0xf8>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	4413      	add	r3, r2
 800c394:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6a3a      	ldr	r2, [r7, #32]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d20b      	bcs.n	800c3b8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d211      	bcs.n	800c3ce <vTaskDelayUntil+0xb6>
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d90d      	bls.n	800c3ce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c3b6:	e00a      	b.n	800c3ce <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69fa      	ldr	r2, [r7, #28]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d303      	bcc.n	800c3ca <vTaskDelayUntil+0xb2>
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d901      	bls.n	800c3ce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	69fa      	ldr	r2, [r7, #28]
 800c3d2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d006      	beq.n	800c3e8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fe30 	bl	800d048 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c3e8:	f000 f9e0 	bl	800c7ac <xTaskResumeAll>
 800c3ec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d107      	bne.n	800c404 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c3f4:	4b07      	ldr	r3, [pc, #28]	; (800c414 <vTaskDelayUntil+0xfc>)
 800c3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c404:	bf00      	nop
 800c406:	3728      	adds	r7, #40	; 0x28
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	200006a4 	.word	0x200006a4
 800c410:	20000680 	.word	0x20000680
 800c414:	e000ed04 	.word	0xe000ed04

0800c418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c420:	2300      	movs	r3, #0
 800c422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d018      	beq.n	800c45c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c42a:	4b14      	ldr	r3, [pc, #80]	; (800c47c <vTaskDelay+0x64>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00b      	beq.n	800c44a <vTaskDelay+0x32>
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	b672      	cpsid	i
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	b662      	cpsie	i
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	e7fe      	b.n	800c448 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c44a:	f000 f9a1 	bl	800c790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c44e:	2100      	movs	r1, #0
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fdf9 	bl	800d048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c456:	f000 f9a9 	bl	800c7ac <xTaskResumeAll>
 800c45a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d107      	bne.n	800c472 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c462:	4b07      	ldr	r3, [pc, #28]	; (800c480 <vTaskDelay+0x68>)
 800c464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c472:	bf00      	nop
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	200006a4 	.word	0x200006a4
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c48c:	f000 ff4c 	bl	800d328 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d102      	bne.n	800c49c <vTaskSuspend+0x18>
 800c496:	4b3d      	ldr	r3, [pc, #244]	; (800c58c <vTaskSuspend+0x108>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	e000      	b.n	800c49e <vTaskSuspend+0x1a>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7ff fa0a 	bl	800b8be <uxListRemove>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d115      	bne.n	800c4dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b4:	4936      	ldr	r1, [pc, #216]	; (800c590 <vTaskSuspend+0x10c>)
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	440b      	add	r3, r1
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <vTaskSuspend+0x58>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d0:	43da      	mvns	r2, r3
 800c4d2:	4b30      	ldr	r3, [pc, #192]	; (800c594 <vTaskSuspend+0x110>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	4a2e      	ldr	r2, [pc, #184]	; (800c594 <vTaskSuspend+0x110>)
 800c4da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3318      	adds	r3, #24
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7ff f9e8 	bl	800b8be <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4828      	ldr	r0, [pc, #160]	; (800c598 <vTaskSuspend+0x114>)
 800c4f6:	f7ff f985 	bl	800b804 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b01      	cmp	r3, #1
 800c504:	d103      	bne.n	800c50e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c50e:	f000 ff3d 	bl	800d38c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c512:	4b22      	ldr	r3, [pc, #136]	; (800c59c <vTaskSuspend+0x118>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d005      	beq.n	800c526 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c51a:	f000 ff05 	bl	800d328 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c51e:	f000 fccd 	bl	800cebc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c522:	f000 ff33 	bl	800d38c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c526:	4b19      	ldr	r3, [pc, #100]	; (800c58c <vTaskSuspend+0x108>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d128      	bne.n	800c582 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800c530:	4b1a      	ldr	r3, [pc, #104]	; (800c59c <vTaskSuspend+0x118>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d018      	beq.n	800c56a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <vTaskSuspend+0x11c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <vTaskSuspend+0xd4>
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	b672      	cpsid	i
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	b662      	cpsie	i
 800c554:	60bb      	str	r3, [r7, #8]
 800c556:	e7fe      	b.n	800c556 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800c558:	4b12      	ldr	r3, [pc, #72]	; (800c5a4 <vTaskSuspend+0x120>)
 800c55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c568:	e00b      	b.n	800c582 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c56a:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <vTaskSuspend+0x114>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <vTaskSuspend+0x124>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d103      	bne.n	800c57e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <vTaskSuspend+0x108>)
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]
	}
 800c57c:	e001      	b.n	800c582 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800c57e:	f000 fa7d 	bl	800ca7c <vTaskSwitchContext>
	}
 800c582:	bf00      	nop
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	2000057c 	.word	0x2000057c
 800c590:	20000580 	.word	0x20000580
 800c594:	20000684 	.word	0x20000684
 800c598:	20000668 	.word	0x20000668
 800c59c:	20000688 	.word	0x20000688
 800c5a0:	200006a4 	.word	0x200006a4
 800c5a4:	e000ed04 	.word	0xe000ed04
 800c5a8:	2000067c 	.word	0x2000067c

0800c5ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10b      	bne.n	800c5da <prvTaskIsTaskSuspended+0x2e>
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	b672      	cpsid	i
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	b662      	cpsie	i
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	e7fe      	b.n	800c5d8 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	4a0a      	ldr	r2, [pc, #40]	; (800c608 <prvTaskIsTaskSuspended+0x5c>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d10a      	bne.n	800c5fa <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	4a08      	ldr	r2, [pc, #32]	; (800c60c <prvTaskIsTaskSuspended+0x60>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d005      	beq.n	800c5fa <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5fa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	371c      	adds	r7, #28
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20000668 	.word	0x20000668
 800c60c:	2000063c 	.word	0x2000063c

0800c610 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10b      	bne.n	800c63a <vTaskResume+0x2a>
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	b672      	cpsid	i
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	b662      	cpsie	i
 800c636:	60bb      	str	r3, [r7, #8]
 800c638:	e7fe      	b.n	800c638 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c63a:	4b20      	ldr	r3, [pc, #128]	; (800c6bc <vTaskResume+0xac>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	429a      	cmp	r2, r3
 800c642:	d037      	beq.n	800c6b4 <vTaskResume+0xa4>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d034      	beq.n	800c6b4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800c64a:	f000 fe6d 	bl	800d328 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff ffac 	bl	800c5ac <prvTaskIsTaskSuspended>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d02a      	beq.n	800c6b0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff f92d 	bl	800b8be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	2201      	movs	r2, #1
 800c66a:	409a      	lsls	r2, r3
 800c66c:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <vTaskResume+0xb0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4313      	orrs	r3, r2
 800c672:	4a13      	ldr	r2, [pc, #76]	; (800c6c0 <vTaskResume+0xb0>)
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	4613      	mov	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4a10      	ldr	r2, [pc, #64]	; (800c6c4 <vTaskResume+0xb4>)
 800c684:	441a      	add	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3304      	adds	r3, #4
 800c68a:	4619      	mov	r1, r3
 800c68c:	4610      	mov	r0, r2
 800c68e:	f7ff f8b9 	bl	800b804 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c696:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <vTaskResume+0xac>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d307      	bcc.n	800c6b0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c6a0:	4b09      	ldr	r3, [pc, #36]	; (800c6c8 <vTaskResume+0xb8>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c6b0:	f000 fe6c 	bl	800d38c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	2000057c 	.word	0x2000057c
 800c6c0:	20000684 	.word	0x20000684
 800c6c4:	20000580 	.word	0x20000580
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6da:	463a      	mov	r2, r7
 800c6dc:	1d39      	adds	r1, r7, #4
 800c6de:	f107 0308 	add.w	r3, r7, #8
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7f3 ff64 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	9202      	str	r2, [sp, #8]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	460a      	mov	r2, r1
 800c6fa:	491f      	ldr	r1, [pc, #124]	; (800c778 <vTaskStartScheduler+0xac>)
 800c6fc:	481f      	ldr	r0, [pc, #124]	; (800c77c <vTaskStartScheduler+0xb0>)
 800c6fe:	f7ff fc73 	bl	800bfe8 <xTaskCreateStatic>
 800c702:	4602      	mov	r2, r0
 800c704:	4b1e      	ldr	r3, [pc, #120]	; (800c780 <vTaskStartScheduler+0xb4>)
 800c706:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c708:	4b1d      	ldr	r3, [pc, #116]	; (800c780 <vTaskStartScheduler+0xb4>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c710:	2301      	movs	r3, #1
 800c712:	617b      	str	r3, [r7, #20]
 800c714:	e001      	b.n	800c71a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d117      	bne.n	800c750 <vTaskStartScheduler+0x84>
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c736:	4b13      	ldr	r3, [pc, #76]	; (800c784 <vTaskStartScheduler+0xb8>)
 800c738:	f04f 32ff 	mov.w	r2, #4294967295
 800c73c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c73e:	4b12      	ldr	r3, [pc, #72]	; (800c788 <vTaskStartScheduler+0xbc>)
 800c740:	2201      	movs	r2, #1
 800c742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c744:	4b11      	ldr	r3, [pc, #68]	; (800c78c <vTaskStartScheduler+0xc0>)
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c74a:	f000 fd71 	bl	800d230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c74e:	e00f      	b.n	800c770 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c756:	d10b      	bne.n	800c770 <vTaskStartScheduler+0xa4>
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	b672      	cpsid	i
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	b662      	cpsie	i
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	e7fe      	b.n	800c76e <vTaskStartScheduler+0xa2>
}
 800c770:	bf00      	nop
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	0800e204 	.word	0x0800e204
 800c77c:	0800cd55 	.word	0x0800cd55
 800c780:	200006a0 	.word	0x200006a0
 800c784:	2000069c 	.word	0x2000069c
 800c788:	20000688 	.word	0x20000688
 800c78c:	20000680 	.word	0x20000680

0800c790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c790:	b480      	push	{r7}
 800c792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <vTaskSuspendAll+0x18>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3301      	adds	r3, #1
 800c79a:	4a03      	ldr	r2, [pc, #12]	; (800c7a8 <vTaskSuspendAll+0x18>)
 800c79c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c79e:	bf00      	nop
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	200006a4 	.word	0x200006a4

0800c7ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ba:	4b42      	ldr	r3, [pc, #264]	; (800c8c4 <xTaskResumeAll+0x118>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10b      	bne.n	800c7da <xTaskResumeAll+0x2e>
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	b672      	cpsid	i
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	b662      	cpsie	i
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	e7fe      	b.n	800c7d8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7da:	f000 fda5 	bl	800d328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7de:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <xTaskResumeAll+0x118>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	4a37      	ldr	r2, [pc, #220]	; (800c8c4 <xTaskResumeAll+0x118>)
 800c7e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e8:	4b36      	ldr	r3, [pc, #216]	; (800c8c4 <xTaskResumeAll+0x118>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d161      	bne.n	800c8b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7f0:	4b35      	ldr	r3, [pc, #212]	; (800c8c8 <xTaskResumeAll+0x11c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d05d      	beq.n	800c8b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7f8:	e02e      	b.n	800c858 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7fa:	4b34      	ldr	r3, [pc, #208]	; (800c8cc <xTaskResumeAll+0x120>)
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3318      	adds	r3, #24
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff f859 	bl	800b8be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3304      	adds	r3, #4
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff f854 	bl	800b8be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	2201      	movs	r2, #1
 800c81c:	409a      	lsls	r2, r3
 800c81e:	4b2c      	ldr	r3, [pc, #176]	; (800c8d0 <xTaskResumeAll+0x124>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4313      	orrs	r3, r2
 800c824:	4a2a      	ldr	r2, [pc, #168]	; (800c8d0 <xTaskResumeAll+0x124>)
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4a27      	ldr	r2, [pc, #156]	; (800c8d4 <xTaskResumeAll+0x128>)
 800c836:	441a      	add	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe ffe0 	bl	800b804 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <xTaskResumeAll+0x12c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	429a      	cmp	r2, r3
 800c850:	d302      	bcc.n	800c858 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c852:	4b22      	ldr	r3, [pc, #136]	; (800c8dc <xTaskResumeAll+0x130>)
 800c854:	2201      	movs	r2, #1
 800c856:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c858:	4b1c      	ldr	r3, [pc, #112]	; (800c8cc <xTaskResumeAll+0x120>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1cc      	bne.n	800c7fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c866:	f000 fb29 	bl	800cebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c86a:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <xTaskResumeAll+0x134>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d010      	beq.n	800c898 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c876:	f000 f847 	bl	800c908 <xTaskIncrementTick>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c880:	4b16      	ldr	r3, [pc, #88]	; (800c8dc <xTaskResumeAll+0x130>)
 800c882:	2201      	movs	r2, #1
 800c884:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3b01      	subs	r3, #1
 800c88a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f1      	bne.n	800c876 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c892:	4b13      	ldr	r3, [pc, #76]	; (800c8e0 <xTaskResumeAll+0x134>)
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c898:	4b10      	ldr	r3, [pc, #64]	; (800c8dc <xTaskResumeAll+0x130>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d009      	beq.n	800c8b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8a4:	4b0f      	ldr	r3, [pc, #60]	; (800c8e4 <xTaskResumeAll+0x138>)
 800c8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8b4:	f000 fd6a 	bl	800d38c <vPortExitCritical>

	return xAlreadyYielded;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	200006a4 	.word	0x200006a4
 800c8c8:	2000067c 	.word	0x2000067c
 800c8cc:	2000063c 	.word	0x2000063c
 800c8d0:	20000684 	.word	0x20000684
 800c8d4:	20000580 	.word	0x20000580
 800c8d8:	2000057c 	.word	0x2000057c
 800c8dc:	20000690 	.word	0x20000690
 800c8e0:	2000068c 	.word	0x2000068c
 800c8e4:	e000ed04 	.word	0xe000ed04

0800c8e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8ee:	4b05      	ldr	r3, [pc, #20]	; (800c904 <xTaskGetTickCount+0x1c>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8f4:	687b      	ldr	r3, [r7, #4]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20000680 	.word	0x20000680

0800c908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c90e:	2300      	movs	r3, #0
 800c910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c912:	4b4f      	ldr	r3, [pc, #316]	; (800ca50 <xTaskIncrementTick+0x148>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	f040 8089 	bne.w	800ca2e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c91c:	4b4d      	ldr	r3, [pc, #308]	; (800ca54 <xTaskIncrementTick+0x14c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3301      	adds	r3, #1
 800c922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c924:	4a4b      	ldr	r2, [pc, #300]	; (800ca54 <xTaskIncrementTick+0x14c>)
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d121      	bne.n	800c974 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c930:	4b49      	ldr	r3, [pc, #292]	; (800ca58 <xTaskIncrementTick+0x150>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00b      	beq.n	800c952 <xTaskIncrementTick+0x4a>
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	b672      	cpsid	i
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	b662      	cpsie	i
 800c94e:	603b      	str	r3, [r7, #0]
 800c950:	e7fe      	b.n	800c950 <xTaskIncrementTick+0x48>
 800c952:	4b41      	ldr	r3, [pc, #260]	; (800ca58 <xTaskIncrementTick+0x150>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	4b40      	ldr	r3, [pc, #256]	; (800ca5c <xTaskIncrementTick+0x154>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a3e      	ldr	r2, [pc, #248]	; (800ca58 <xTaskIncrementTick+0x150>)
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	4a3e      	ldr	r2, [pc, #248]	; (800ca5c <xTaskIncrementTick+0x154>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	4b3e      	ldr	r3, [pc, #248]	; (800ca60 <xTaskIncrementTick+0x158>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	4a3c      	ldr	r2, [pc, #240]	; (800ca60 <xTaskIncrementTick+0x158>)
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	f000 faa4 	bl	800cebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c974:	4b3b      	ldr	r3, [pc, #236]	; (800ca64 <xTaskIncrementTick+0x15c>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d348      	bcc.n	800ca10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c97e:	4b36      	ldr	r3, [pc, #216]	; (800ca58 <xTaskIncrementTick+0x150>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d104      	bne.n	800c992 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c988:	4b36      	ldr	r3, [pc, #216]	; (800ca64 <xTaskIncrementTick+0x15c>)
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	601a      	str	r2, [r3, #0]
					break;
 800c990:	e03e      	b.n	800ca10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c992:	4b31      	ldr	r3, [pc, #196]	; (800ca58 <xTaskIncrementTick+0x150>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d203      	bcs.n	800c9b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9aa:	4a2e      	ldr	r2, [pc, #184]	; (800ca64 <xTaskIncrementTick+0x15c>)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9b0:	e02e      	b.n	800ca10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe ff81 	bl	800b8be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d004      	beq.n	800c9ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	3318      	adds	r3, #24
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe ff78 	bl	800b8be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	409a      	lsls	r2, r3
 800c9d6:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <xTaskIncrementTick+0x160>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	4a22      	ldr	r2, [pc, #136]	; (800ca68 <xTaskIncrementTick+0x160>)
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4a1f      	ldr	r2, [pc, #124]	; (800ca6c <xTaskIncrementTick+0x164>)
 800c9ee:	441a      	add	r2, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	f7fe ff04 	bl	800b804 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca00:	4b1b      	ldr	r3, [pc, #108]	; (800ca70 <xTaskIncrementTick+0x168>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d3b9      	bcc.n	800c97e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca0e:	e7b6      	b.n	800c97e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca10:	4b17      	ldr	r3, [pc, #92]	; (800ca70 <xTaskIncrementTick+0x168>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca16:	4915      	ldr	r1, [pc, #84]	; (800ca6c <xTaskIncrementTick+0x164>)
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	440b      	add	r3, r1
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d907      	bls.n	800ca38 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	e004      	b.n	800ca38 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca2e:	4b11      	ldr	r3, [pc, #68]	; (800ca74 <xTaskIncrementTick+0x16c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3301      	adds	r3, #1
 800ca34:	4a0f      	ldr	r2, [pc, #60]	; (800ca74 <xTaskIncrementTick+0x16c>)
 800ca36:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ca38:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <xTaskIncrementTick+0x170>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800ca40:	2301      	movs	r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ca44:	697b      	ldr	r3, [r7, #20]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	200006a4 	.word	0x200006a4
 800ca54:	20000680 	.word	0x20000680
 800ca58:	20000634 	.word	0x20000634
 800ca5c:	20000638 	.word	0x20000638
 800ca60:	20000694 	.word	0x20000694
 800ca64:	2000069c 	.word	0x2000069c
 800ca68:	20000684 	.word	0x20000684
 800ca6c:	20000580 	.word	0x20000580
 800ca70:	2000057c 	.word	0x2000057c
 800ca74:	2000068c 	.word	0x2000068c
 800ca78:	20000690 	.word	0x20000690

0800ca7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca82:	4b27      	ldr	r3, [pc, #156]	; (800cb20 <vTaskSwitchContext+0xa4>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <vTaskSwitchContext+0xa8>)
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca90:	e040      	b.n	800cb14 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ca92:	4b24      	ldr	r3, [pc, #144]	; (800cb24 <vTaskSwitchContext+0xa8>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca98:	4b23      	ldr	r3, [pc, #140]	; (800cb28 <vTaskSwitchContext+0xac>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	fab3 f383 	clz	r3, r3
 800caa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800caa6:	7afb      	ldrb	r3, [r7, #11]
 800caa8:	f1c3 031f 	rsb	r3, r3, #31
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	491f      	ldr	r1, [pc, #124]	; (800cb2c <vTaskSwitchContext+0xb0>)
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	440b      	add	r3, r1
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10b      	bne.n	800cada <vTaskSwitchContext+0x5e>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	b672      	cpsid	i
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	b662      	cpsie	i
 800cad6:	607b      	str	r3, [r7, #4]
 800cad8:	e7fe      	b.n	800cad8 <vTaskSwitchContext+0x5c>
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	4613      	mov	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4413      	add	r3, r2
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	4a11      	ldr	r2, [pc, #68]	; (800cb2c <vTaskSwitchContext+0xb0>)
 800cae6:	4413      	add	r3, r2
 800cae8:	613b      	str	r3, [r7, #16]
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	605a      	str	r2, [r3, #4]
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	3308      	adds	r3, #8
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d104      	bne.n	800cb0a <vTaskSwitchContext+0x8e>
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	605a      	str	r2, [r3, #4]
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	4a07      	ldr	r2, [pc, #28]	; (800cb30 <vTaskSwitchContext+0xb4>)
 800cb12:	6013      	str	r3, [r2, #0]
}
 800cb14:	bf00      	nop
 800cb16:	371c      	adds	r7, #28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr
 800cb20:	200006a4 	.word	0x200006a4
 800cb24:	20000690 	.word	0x20000690
 800cb28:	20000684 	.word	0x20000684
 800cb2c:	20000580 	.word	0x20000580
 800cb30:	2000057c 	.word	0x2000057c

0800cb34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10b      	bne.n	800cb5c <vTaskPlaceOnEventList+0x28>
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	b672      	cpsid	i
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	b662      	cpsie	i
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	e7fe      	b.n	800cb5a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb5c:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <vTaskPlaceOnEventList+0x48>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3318      	adds	r3, #24
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7fe fe71 	bl	800b84c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	6838      	ldr	r0, [r7, #0]
 800cb6e:	f000 fa6b 	bl	800d048 <prvAddCurrentTaskToDelayedList>
}
 800cb72:	bf00      	nop
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	2000057c 	.word	0x2000057c

0800cb80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10b      	bne.n	800cbae <xTaskRemoveFromEventList+0x2e>
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	b672      	cpsid	i
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	b662      	cpsie	i
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	e7fe      	b.n	800cbac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3318      	adds	r3, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fe83 	bl	800b8be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbb8:	4b1d      	ldr	r3, [pc, #116]	; (800cc30 <xTaskRemoveFromEventList+0xb0>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d11c      	bne.n	800cbfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fe7a 	bl	800b8be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	2201      	movs	r2, #1
 800cbd0:	409a      	lsls	r2, r3
 800cbd2:	4b18      	ldr	r3, [pc, #96]	; (800cc34 <xTaskRemoveFromEventList+0xb4>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	4a16      	ldr	r2, [pc, #88]	; (800cc34 <xTaskRemoveFromEventList+0xb4>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4a13      	ldr	r2, [pc, #76]	; (800cc38 <xTaskRemoveFromEventList+0xb8>)
 800cbea:	441a      	add	r2, r3
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	f7fe fe06 	bl	800b804 <vListInsertEnd>
 800cbf8:	e005      	b.n	800cc06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	3318      	adds	r3, #24
 800cbfe:	4619      	mov	r1, r3
 800cc00:	480e      	ldr	r0, [pc, #56]	; (800cc3c <xTaskRemoveFromEventList+0xbc>)
 800cc02:	f7fe fdff 	bl	800b804 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <xTaskRemoveFromEventList+0xc0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d905      	bls.n	800cc20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc14:	2301      	movs	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <xTaskRemoveFromEventList+0xc4>)
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e001      	b.n	800cc24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc24:	697b      	ldr	r3, [r7, #20]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	200006a4 	.word	0x200006a4
 800cc34:	20000684 	.word	0x20000684
 800cc38:	20000580 	.word	0x20000580
 800cc3c:	2000063c 	.word	0x2000063c
 800cc40:	2000057c 	.word	0x2000057c
 800cc44:	20000690 	.word	0x20000690

0800cc48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc50:	4b06      	ldr	r3, [pc, #24]	; (800cc6c <vTaskInternalSetTimeOutState+0x24>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc58:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <vTaskInternalSetTimeOutState+0x28>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	605a      	str	r2, [r3, #4]
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	20000694 	.word	0x20000694
 800cc70:	20000680 	.word	0x20000680

0800cc74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10b      	bne.n	800cc9c <xTaskCheckForTimeOut+0x28>
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	b672      	cpsid	i
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	b662      	cpsie	i
 800cc98:	613b      	str	r3, [r7, #16]
 800cc9a:	e7fe      	b.n	800cc9a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10b      	bne.n	800ccba <xTaskCheckForTimeOut+0x46>
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	b672      	cpsid	i
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	b662      	cpsie	i
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	e7fe      	b.n	800ccb8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ccba:	f000 fb35 	bl	800d328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccbe:	4b1d      	ldr	r3, [pc, #116]	; (800cd34 <xTaskCheckForTimeOut+0xc0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd6:	d102      	bne.n	800ccde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	e023      	b.n	800cd26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <xTaskCheckForTimeOut+0xc4>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d007      	beq.n	800ccfa <xTaskCheckForTimeOut+0x86>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d302      	bcc.n	800ccfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	e015      	b.n	800cd26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d20b      	bcs.n	800cd1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	1ad2      	subs	r2, r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff ff99 	bl	800cc48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e004      	b.n	800cd26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd22:	2301      	movs	r3, #1
 800cd24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd26:	f000 fb31 	bl	800d38c <vPortExitCritical>

	return xReturn;
 800cd2a:	69fb      	ldr	r3, [r7, #28]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3720      	adds	r7, #32
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	20000680 	.word	0x20000680
 800cd38:	20000694 	.word	0x20000694

0800cd3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd40:	4b03      	ldr	r3, [pc, #12]	; (800cd50 <vTaskMissedYield+0x14>)
 800cd42:	2201      	movs	r2, #1
 800cd44:	601a      	str	r2, [r3, #0]
}
 800cd46:	bf00      	nop
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr
 800cd50:	20000690 	.word	0x20000690

0800cd54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd5c:	f000 f852 	bl	800ce04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd60:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <prvIdleTask+0x28>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d9f9      	bls.n	800cd5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <prvIdleTask+0x2c>)
 800cd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd78:	e7f0      	b.n	800cd5c <prvIdleTask+0x8>
 800cd7a:	bf00      	nop
 800cd7c:	20000580 	.word	0x20000580
 800cd80:	e000ed04 	.word	0xe000ed04

0800cd84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	607b      	str	r3, [r7, #4]
 800cd8e:	e00c      	b.n	800cdaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	4613      	mov	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4413      	add	r3, r2
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4a12      	ldr	r2, [pc, #72]	; (800cde4 <prvInitialiseTaskLists+0x60>)
 800cd9c:	4413      	add	r3, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fd03 	bl	800b7aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3301      	adds	r3, #1
 800cda8:	607b      	str	r3, [r7, #4]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b06      	cmp	r3, #6
 800cdae:	d9ef      	bls.n	800cd90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdb0:	480d      	ldr	r0, [pc, #52]	; (800cde8 <prvInitialiseTaskLists+0x64>)
 800cdb2:	f7fe fcfa 	bl	800b7aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdb6:	480d      	ldr	r0, [pc, #52]	; (800cdec <prvInitialiseTaskLists+0x68>)
 800cdb8:	f7fe fcf7 	bl	800b7aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdbc:	480c      	ldr	r0, [pc, #48]	; (800cdf0 <prvInitialiseTaskLists+0x6c>)
 800cdbe:	f7fe fcf4 	bl	800b7aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdc2:	480c      	ldr	r0, [pc, #48]	; (800cdf4 <prvInitialiseTaskLists+0x70>)
 800cdc4:	f7fe fcf1 	bl	800b7aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cdc8:	480b      	ldr	r0, [pc, #44]	; (800cdf8 <prvInitialiseTaskLists+0x74>)
 800cdca:	f7fe fcee 	bl	800b7aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdce:	4b0b      	ldr	r3, [pc, #44]	; (800cdfc <prvInitialiseTaskLists+0x78>)
 800cdd0:	4a05      	ldr	r2, [pc, #20]	; (800cde8 <prvInitialiseTaskLists+0x64>)
 800cdd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	; (800ce00 <prvInitialiseTaskLists+0x7c>)
 800cdd6:	4a05      	ldr	r2, [pc, #20]	; (800cdec <prvInitialiseTaskLists+0x68>)
 800cdd8:	601a      	str	r2, [r3, #0]
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	20000580 	.word	0x20000580
 800cde8:	2000060c 	.word	0x2000060c
 800cdec:	20000620 	.word	0x20000620
 800cdf0:	2000063c 	.word	0x2000063c
 800cdf4:	20000650 	.word	0x20000650
 800cdf8:	20000668 	.word	0x20000668
 800cdfc:	20000634 	.word	0x20000634
 800ce00:	20000638 	.word	0x20000638

0800ce04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce0a:	e019      	b.n	800ce40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce0c:	f000 fa8c 	bl	800d328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce10:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <prvCheckTasksWaitingTermination+0x4c>)
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fd4e 	bl	800b8be <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce22:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <prvCheckTasksWaitingTermination+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	4a0a      	ldr	r2, [pc, #40]	; (800ce54 <prvCheckTasksWaitingTermination+0x50>)
 800ce2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <prvCheckTasksWaitingTermination+0x54>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	4a09      	ldr	r2, [pc, #36]	; (800ce58 <prvCheckTasksWaitingTermination+0x54>)
 800ce34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce36:	f000 faa9 	bl	800d38c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f80e 	bl	800ce5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce40:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <prvCheckTasksWaitingTermination+0x54>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e1      	bne.n	800ce0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce48:	bf00      	nop
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20000650 	.word	0x20000650
 800ce54:	2000067c 	.word	0x2000067c
 800ce58:	20000664 	.word	0x20000664

0800ce5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d108      	bne.n	800ce80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 fc00 	bl	800d678 <vPortFree>
				vPortFree( pxTCB );
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fbfd 	bl	800d678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce7e:	e019      	b.n	800ceb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d103      	bne.n	800ce92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fbf4 	bl	800d678 <vPortFree>
	}
 800ce90:	e010      	b.n	800ceb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d00b      	beq.n	800ceb4 <prvDeleteTCB+0x58>
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	b672      	cpsid	i
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	b662      	cpsie	i
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	e7fe      	b.n	800ceb2 <prvDeleteTCB+0x56>
	}
 800ceb4:	bf00      	nop
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cec2:	4b0c      	ldr	r3, [pc, #48]	; (800cef4 <prvResetNextTaskUnblockTime+0x38>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d104      	bne.n	800ced6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <prvResetNextTaskUnblockTime+0x3c>)
 800cece:	f04f 32ff 	mov.w	r2, #4294967295
 800ced2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ced4:	e008      	b.n	800cee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <prvResetNextTaskUnblockTime+0x38>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4a04      	ldr	r2, [pc, #16]	; (800cef8 <prvResetNextTaskUnblockTime+0x3c>)
 800cee6:	6013      	str	r3, [r2, #0]
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	20000634 	.word	0x20000634
 800cef8:	2000069c 	.word	0x2000069c

0800cefc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf02:	4b0b      	ldr	r3, [pc, #44]	; (800cf30 <xTaskGetSchedulerState+0x34>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	607b      	str	r3, [r7, #4]
 800cf0e:	e008      	b.n	800cf22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf10:	4b08      	ldr	r3, [pc, #32]	; (800cf34 <xTaskGetSchedulerState+0x38>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	607b      	str	r3, [r7, #4]
 800cf1c:	e001      	b.n	800cf22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf22:	687b      	ldr	r3, [r7, #4]
	}
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	20000688 	.word	0x20000688
 800cf34:	200006a4 	.word	0x200006a4

0800cf38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d070      	beq.n	800d030 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf4e:	4b3b      	ldr	r3, [pc, #236]	; (800d03c <xTaskPriorityDisinherit+0x104>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d00b      	beq.n	800cf70 <xTaskPriorityDisinherit+0x38>
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	b672      	cpsid	i
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	b662      	cpsie	i
 800cf6c:	60fb      	str	r3, [r7, #12]
 800cf6e:	e7fe      	b.n	800cf6e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <xTaskPriorityDisinherit+0x58>
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	b672      	cpsid	i
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	b662      	cpsie	i
 800cf8c:	60bb      	str	r3, [r7, #8]
 800cf8e:	e7fe      	b.n	800cf8e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf94:	1e5a      	subs	r2, r3, #1
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d044      	beq.n	800d030 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d140      	bne.n	800d030 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fc83 	bl	800b8be <uxListRemove>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d115      	bne.n	800cfea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc2:	491f      	ldr	r1, [pc, #124]	; (800d040 <xTaskPriorityDisinherit+0x108>)
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <xTaskPriorityDisinherit+0xb2>
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	2201      	movs	r2, #1
 800cfda:	fa02 f303 	lsl.w	r3, r2, r3
 800cfde:	43da      	mvns	r2, r3
 800cfe0:	4b18      	ldr	r3, [pc, #96]	; (800d044 <xTaskPriorityDisinherit+0x10c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	4a17      	ldr	r2, [pc, #92]	; (800d044 <xTaskPriorityDisinherit+0x10c>)
 800cfe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff6:	f1c3 0207 	rsb	r2, r3, #7
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d002:	2201      	movs	r2, #1
 800d004:	409a      	lsls	r2, r3
 800d006:	4b0f      	ldr	r3, [pc, #60]	; (800d044 <xTaskPriorityDisinherit+0x10c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	4a0d      	ldr	r2, [pc, #52]	; (800d044 <xTaskPriorityDisinherit+0x10c>)
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d014:	4613      	mov	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4a08      	ldr	r2, [pc, #32]	; (800d040 <xTaskPriorityDisinherit+0x108>)
 800d01e:	441a      	add	r2, r3
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	3304      	adds	r3, #4
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	f7fe fbec 	bl	800b804 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d02c:	2301      	movs	r3, #1
 800d02e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d030:	697b      	ldr	r3, [r7, #20]
	}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	2000057c 	.word	0x2000057c
 800d040:	20000580 	.word	0x20000580
 800d044:	20000684 	.word	0x20000684

0800d048 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d052:	4b29      	ldr	r3, [pc, #164]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d058:	4b28      	ldr	r3, [pc, #160]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3304      	adds	r3, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fc2d 	bl	800b8be <uxListRemove>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10b      	bne.n	800d082 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d06a:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d070:	2201      	movs	r2, #1
 800d072:	fa02 f303 	lsl.w	r3, r2, r3
 800d076:	43da      	mvns	r2, r3
 800d078:	4b21      	ldr	r3, [pc, #132]	; (800d100 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4013      	ands	r3, r2
 800d07e:	4a20      	ldr	r2, [pc, #128]	; (800d100 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d080:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d10a      	bne.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x58>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d090:	4b1a      	ldr	r3, [pc, #104]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3304      	adds	r3, #4
 800d096:	4619      	mov	r1, r3
 800d098:	481a      	ldr	r0, [pc, #104]	; (800d104 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d09a:	f7fe fbb3 	bl	800b804 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d09e:	e026      	b.n	800d0ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0a8:	4b14      	ldr	r3, [pc, #80]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0b0:	68ba      	ldr	r2, [r7, #8]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d209      	bcs.n	800d0cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0b8:	4b13      	ldr	r3, [pc, #76]	; (800d108 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3304      	adds	r3, #4
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	4610      	mov	r0, r2
 800d0c6:	f7fe fbc1 	bl	800b84c <vListInsert>
}
 800d0ca:	e010      	b.n	800d0ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0cc:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f7fe fbb7 	bl	800b84c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d202      	bcs.n	800d0ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0e8:	4a09      	ldr	r2, [pc, #36]	; (800d110 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	6013      	str	r3, [r2, #0]
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000680 	.word	0x20000680
 800d0fc:	2000057c 	.word	0x2000057c
 800d100:	20000684 	.word	0x20000684
 800d104:	20000668 	.word	0x20000668
 800d108:	20000638 	.word	0x20000638
 800d10c:	20000634 	.word	0x20000634
 800d110:	2000069c 	.word	0x2000069c

0800d114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3b04      	subs	r3, #4
 800d124:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d12c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3b04      	subs	r3, #4
 800d132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f023 0201 	bic.w	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3b04      	subs	r3, #4
 800d142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d144:	4a0c      	ldr	r2, [pc, #48]	; (800d178 <pxPortInitialiseStack+0x64>)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3b14      	subs	r3, #20
 800d14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	3b04      	subs	r3, #4
 800d15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f06f 0202 	mvn.w	r2, #2
 800d162:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3b20      	subs	r3, #32
 800d168:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d16a:	68fb      	ldr	r3, [r7, #12]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	0800d17d 	.word	0x0800d17d

0800d17c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d186:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <prvTaskExitError+0x58>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d00b      	beq.n	800d1a8 <prvTaskExitError+0x2c>
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	b672      	cpsid	i
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	b662      	cpsie	i
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	e7fe      	b.n	800d1a6 <prvTaskExitError+0x2a>
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	b672      	cpsid	i
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	b662      	cpsie	i
 800d1bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1be:	bf00      	nop
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0fc      	beq.n	800d1c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1c6:	bf00      	nop
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20000058 	.word	0x20000058
	...

0800d1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <pxCurrentTCBConst2>)
 800d1e2:	6819      	ldr	r1, [r3, #0]
 800d1e4:	6808      	ldr	r0, [r1, #0]
 800d1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ea:	f380 8809 	msr	PSP, r0
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	f04f 0000 	mov.w	r0, #0
 800d1f6:	f380 8811 	msr	BASEPRI, r0
 800d1fa:	4770      	bx	lr
 800d1fc:	f3af 8000 	nop.w

0800d200 <pxCurrentTCBConst2>:
 800d200:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop

0800d208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d208:	4808      	ldr	r0, [pc, #32]	; (800d22c <prvPortStartFirstTask+0x24>)
 800d20a:	6800      	ldr	r0, [r0, #0]
 800d20c:	6800      	ldr	r0, [r0, #0]
 800d20e:	f380 8808 	msr	MSP, r0
 800d212:	f04f 0000 	mov.w	r0, #0
 800d216:	f380 8814 	msr	CONTROL, r0
 800d21a:	b662      	cpsie	i
 800d21c:	b661      	cpsie	f
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	df00      	svc	0
 800d228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d22a:	bf00      	nop
 800d22c:	e000ed08 	.word	0xe000ed08

0800d230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d236:	4b36      	ldr	r3, [pc, #216]	; (800d310 <xPortStartScheduler+0xe0>)
 800d238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	22ff      	movs	r2, #255	; 0xff
 800d246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d250:	78fb      	ldrb	r3, [r7, #3]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	4b2e      	ldr	r3, [pc, #184]	; (800d314 <xPortStartScheduler+0xe4>)
 800d25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d25e:	4b2e      	ldr	r3, [pc, #184]	; (800d318 <xPortStartScheduler+0xe8>)
 800d260:	2207      	movs	r2, #7
 800d262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d264:	e009      	b.n	800d27a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d266:	4b2c      	ldr	r3, [pc, #176]	; (800d318 <xPortStartScheduler+0xe8>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	4a2a      	ldr	r2, [pc, #168]	; (800d318 <xPortStartScheduler+0xe8>)
 800d26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d282:	2b80      	cmp	r3, #128	; 0x80
 800d284:	d0ef      	beq.n	800d266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <xPortStartScheduler+0xe8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f1c3 0307 	rsb	r3, r3, #7
 800d28e:	2b04      	cmp	r3, #4
 800d290:	d00b      	beq.n	800d2aa <xPortStartScheduler+0x7a>
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	b672      	cpsid	i
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	b662      	cpsie	i
 800d2a6:	60bb      	str	r3, [r7, #8]
 800d2a8:	e7fe      	b.n	800d2a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2aa:	4b1b      	ldr	r3, [pc, #108]	; (800d318 <xPortStartScheduler+0xe8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	4a19      	ldr	r2, [pc, #100]	; (800d318 <xPortStartScheduler+0xe8>)
 800d2b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2b4:	4b18      	ldr	r3, [pc, #96]	; (800d318 <xPortStartScheduler+0xe8>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2bc:	4a16      	ldr	r2, [pc, #88]	; (800d318 <xPortStartScheduler+0xe8>)
 800d2be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2c8:	4b14      	ldr	r3, [pc, #80]	; (800d31c <xPortStartScheduler+0xec>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a13      	ldr	r2, [pc, #76]	; (800d31c <xPortStartScheduler+0xec>)
 800d2ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2d4:	4b11      	ldr	r3, [pc, #68]	; (800d31c <xPortStartScheduler+0xec>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a10      	ldr	r2, [pc, #64]	; (800d31c <xPortStartScheduler+0xec>)
 800d2da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2e0:	f000 f8d4 	bl	800d48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2e4:	4b0e      	ldr	r3, [pc, #56]	; (800d320 <xPortStartScheduler+0xf0>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2ea:	f000 f8f3 	bl	800d4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2ee:	4b0d      	ldr	r3, [pc, #52]	; (800d324 <xPortStartScheduler+0xf4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a0c      	ldr	r2, [pc, #48]	; (800d324 <xPortStartScheduler+0xf4>)
 800d2f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d2f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2fa:	f7ff ff85 	bl	800d208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2fe:	f7ff fbbd 	bl	800ca7c <vTaskSwitchContext>
	prvTaskExitError();
 800d302:	f7ff ff3b 	bl	800d17c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	e000e400 	.word	0xe000e400
 800d314:	200006a8 	.word	0x200006a8
 800d318:	200006ac 	.word	0x200006ac
 800d31c:	e000ed20 	.word	0xe000ed20
 800d320:	20000058 	.word	0x20000058
 800d324:	e000ef34 	.word	0xe000ef34

0800d328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	b672      	cpsid	i
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	b662      	cpsie	i
 800d342:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <vPortEnterCritical+0x5c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3301      	adds	r3, #1
 800d34a:	4a0e      	ldr	r2, [pc, #56]	; (800d384 <vPortEnterCritical+0x5c>)
 800d34c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d34e:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <vPortEnterCritical+0x5c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d110      	bne.n	800d378 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d356:	4b0c      	ldr	r3, [pc, #48]	; (800d388 <vPortEnterCritical+0x60>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00b      	beq.n	800d378 <vPortEnterCritical+0x50>
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	b672      	cpsid	i
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	b662      	cpsie	i
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	e7fe      	b.n	800d376 <vPortEnterCritical+0x4e>
	}
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	20000058 	.word	0x20000058
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <vPortExitCritical+0x50>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10b      	bne.n	800d3b2 <vPortExitCritical+0x26>
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	b672      	cpsid	i
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	b662      	cpsie	i
 800d3ae:	607b      	str	r3, [r7, #4]
 800d3b0:	e7fe      	b.n	800d3b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d3b2:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <vPortExitCritical+0x50>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	4a08      	ldr	r2, [pc, #32]	; (800d3dc <vPortExitCritical+0x50>)
 800d3ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3bc:	4b07      	ldr	r3, [pc, #28]	; (800d3dc <vPortExitCritical+0x50>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <vPortExitCritical+0x42>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3ce:	bf00      	nop
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	20000058 	.word	0x20000058

0800d3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3e0:	f3ef 8009 	mrs	r0, PSP
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	4b15      	ldr	r3, [pc, #84]	; (800d440 <pxCurrentTCBConst>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	f01e 0f10 	tst.w	lr, #16
 800d3f0:	bf08      	it	eq
 800d3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fa:	6010      	str	r0, [r2, #0]
 800d3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d404:	b672      	cpsid	i
 800d406:	f380 8811 	msr	BASEPRI, r0
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	b662      	cpsie	i
 800d414:	f7ff fb32 	bl	800ca7c <vTaskSwitchContext>
 800d418:	f04f 0000 	mov.w	r0, #0
 800d41c:	f380 8811 	msr	BASEPRI, r0
 800d420:	bc09      	pop	{r0, r3}
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42a:	f01e 0f10 	tst.w	lr, #16
 800d42e:	bf08      	it	eq
 800d430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d434:	f380 8809 	msr	PSP, r0
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop

0800d440 <pxCurrentTCBConst>:
 800d440:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d452:	b672      	cpsid	i
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	b662      	cpsie	i
 800d462:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d464:	f7ff fa50 	bl	800c908 <xTaskIncrementTick>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d46e:	4b06      	ldr	r3, [pc, #24]	; (800d488 <SysTick_Handler+0x40>)
 800d470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	2300      	movs	r3, #0
 800d478:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d490:	4b0b      	ldr	r3, [pc, #44]	; (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <vPortSetupTimerInterrupt+0x38>)
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d49c:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <vPortSetupTimerInterrupt+0x3c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <vPortSetupTimerInterrupt+0x40>)
 800d4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4a6:	099b      	lsrs	r3, r3, #6
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <vPortSetupTimerInterrupt+0x44>)
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ae:	4b04      	ldr	r3, [pc, #16]	; (800d4c0 <vPortSetupTimerInterrupt+0x34>)
 800d4b0:	2207      	movs	r2, #7
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	e000e010 	.word	0xe000e010
 800d4c4:	e000e018 	.word	0xe000e018
 800d4c8:	2000004c 	.word	0x2000004c
 800d4cc:	10624dd3 	.word	0x10624dd3
 800d4d0:	e000e014 	.word	0xe000e014

0800d4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d4e4 <vPortEnableVFP+0x10>
 800d4d8:	6801      	ldr	r1, [r0, #0]
 800d4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4de:	6001      	str	r1, [r0, #0]
 800d4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4e2:	bf00      	nop
 800d4e4:	e000ed88 	.word	0xe000ed88

0800d4e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08a      	sub	sp, #40	; 0x28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f4:	f7ff f94c 	bl	800c790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4f8:	4b5a      	ldr	r3, [pc, #360]	; (800d664 <pvPortMalloc+0x17c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d500:	f000 f916 	bl	800d730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d504:	4b58      	ldr	r3, [pc, #352]	; (800d668 <pvPortMalloc+0x180>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4013      	ands	r3, r2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f040 8090 	bne.w	800d632 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01e      	beq.n	800d556 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d518:	2208      	movs	r2, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	2b00      	cmp	r3, #0
 800d528:	d015      	beq.n	800d556 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f023 0307 	bic.w	r3, r3, #7
 800d530:	3308      	adds	r3, #8
 800d532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f003 0307 	and.w	r3, r3, #7
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <pvPortMalloc+0x6e>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	b672      	cpsid	i
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	b662      	cpsie	i
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	e7fe      	b.n	800d554 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d06a      	beq.n	800d632 <pvPortMalloc+0x14a>
 800d55c:	4b43      	ldr	r3, [pc, #268]	; (800d66c <pvPortMalloc+0x184>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	429a      	cmp	r2, r3
 800d564:	d865      	bhi.n	800d632 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d566:	4b42      	ldr	r3, [pc, #264]	; (800d670 <pvPortMalloc+0x188>)
 800d568:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d56a:	4b41      	ldr	r3, [pc, #260]	; (800d670 <pvPortMalloc+0x188>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d570:	e004      	b.n	800d57c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	429a      	cmp	r2, r3
 800d584:	d903      	bls.n	800d58e <pvPortMalloc+0xa6>
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f1      	bne.n	800d572 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d58e:	4b35      	ldr	r3, [pc, #212]	; (800d664 <pvPortMalloc+0x17c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d594:	429a      	cmp	r2, r3
 800d596:	d04c      	beq.n	800d632 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2208      	movs	r2, #8
 800d59e:	4413      	add	r3, r2
 800d5a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	1ad2      	subs	r2, r2, r3
 800d5b2:	2308      	movs	r3, #8
 800d5b4:	005b      	lsls	r3, r3, #1
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d920      	bls.n	800d5fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4413      	add	r3, r2
 800d5c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <pvPortMalloc+0xfc>
 800d5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d0:	b672      	cpsid	i
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	b662      	cpsie	i
 800d5e0:	613b      	str	r3, [r7, #16]
 800d5e2:	e7fe      	b.n	800d5e2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5f6:	69b8      	ldr	r0, [r7, #24]
 800d5f8:	f000 f8fc 	bl	800d7f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5fc:	4b1b      	ldr	r3, [pc, #108]	; (800d66c <pvPortMalloc+0x184>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	4a19      	ldr	r2, [pc, #100]	; (800d66c <pvPortMalloc+0x184>)
 800d608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d60a:	4b18      	ldr	r3, [pc, #96]	; (800d66c <pvPortMalloc+0x184>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	4b19      	ldr	r3, [pc, #100]	; (800d674 <pvPortMalloc+0x18c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	429a      	cmp	r2, r3
 800d614:	d203      	bcs.n	800d61e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d616:	4b15      	ldr	r3, [pc, #84]	; (800d66c <pvPortMalloc+0x184>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a16      	ldr	r2, [pc, #88]	; (800d674 <pvPortMalloc+0x18c>)
 800d61c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	4b11      	ldr	r3, [pc, #68]	; (800d668 <pvPortMalloc+0x180>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	431a      	orrs	r2, r3
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d632:	f7ff f8bb 	bl	800c7ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	f003 0307 	and.w	r3, r3, #7
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <pvPortMalloc+0x170>
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	b672      	cpsid	i
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	b662      	cpsie	i
 800d654:	60fb      	str	r3, [r7, #12]
 800d656:	e7fe      	b.n	800d656 <pvPortMalloc+0x16e>
	return pvReturn;
 800d658:	69fb      	ldr	r3, [r7, #28]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3728      	adds	r7, #40	; 0x28
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	200086b8 	.word	0x200086b8
 800d668:	200086c4 	.word	0x200086c4
 800d66c:	200086bc 	.word	0x200086bc
 800d670:	200086b0 	.word	0x200086b0
 800d674:	200086c0 	.word	0x200086c0

0800d678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d04a      	beq.n	800d720 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d68a:	2308      	movs	r3, #8
 800d68c:	425b      	negs	r3, r3
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	4413      	add	r3, r2
 800d692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	4b22      	ldr	r3, [pc, #136]	; (800d728 <vPortFree+0xb0>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10b      	bne.n	800d6be <vPortFree+0x46>
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	b672      	cpsid	i
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	b662      	cpsie	i
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e7fe      	b.n	800d6bc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00b      	beq.n	800d6de <vPortFree+0x66>
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	b672      	cpsid	i
 800d6cc:	f383 8811 	msr	BASEPRI, r3
 800d6d0:	f3bf 8f6f 	isb	sy
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	b662      	cpsie	i
 800d6da:	60bb      	str	r3, [r7, #8]
 800d6dc:	e7fe      	b.n	800d6dc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	4b11      	ldr	r3, [pc, #68]	; (800d728 <vPortFree+0xb0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d019      	beq.n	800d720 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d115      	bne.n	800d720 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	685a      	ldr	r2, [r3, #4]
 800d6f8:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <vPortFree+0xb0>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	401a      	ands	r2, r3
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d704:	f7ff f844 	bl	800c790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b07      	ldr	r3, [pc, #28]	; (800d72c <vPortFree+0xb4>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4413      	add	r3, r2
 800d712:	4a06      	ldr	r2, [pc, #24]	; (800d72c <vPortFree+0xb4>)
 800d714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d716:	6938      	ldr	r0, [r7, #16]
 800d718:	f000 f86c 	bl	800d7f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d71c:	f7ff f846 	bl	800c7ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d720:	bf00      	nop
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	200086c4 	.word	0x200086c4
 800d72c:	200086bc 	.word	0x200086bc

0800d730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d73a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d73c:	4b27      	ldr	r3, [pc, #156]	; (800d7dc <prvHeapInit+0xac>)
 800d73e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00c      	beq.n	800d764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3307      	adds	r3, #7
 800d74e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f023 0307 	bic.w	r3, r3, #7
 800d756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	4a1f      	ldr	r2, [pc, #124]	; (800d7dc <prvHeapInit+0xac>)
 800d760:	4413      	add	r3, r2
 800d762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d768:	4a1d      	ldr	r2, [pc, #116]	; (800d7e0 <prvHeapInit+0xb0>)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d76e:	4b1c      	ldr	r3, [pc, #112]	; (800d7e0 <prvHeapInit+0xb0>)
 800d770:	2200      	movs	r2, #0
 800d772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	4413      	add	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d77c:	2208      	movs	r2, #8
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	1a9b      	subs	r3, r3, r2
 800d782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f023 0307 	bic.w	r3, r3, #7
 800d78a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4a15      	ldr	r2, [pc, #84]	; (800d7e4 <prvHeapInit+0xb4>)
 800d790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <prvHeapInit+0xb4>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2200      	movs	r2, #0
 800d798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d79a:	4b12      	ldr	r3, [pc, #72]	; (800d7e4 <prvHeapInit+0xb4>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7b0:	4b0c      	ldr	r3, [pc, #48]	; (800d7e4 <prvHeapInit+0xb4>)
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	4a0a      	ldr	r2, [pc, #40]	; (800d7e8 <prvHeapInit+0xb8>)
 800d7be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	4a09      	ldr	r2, [pc, #36]	; (800d7ec <prvHeapInit+0xbc>)
 800d7c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7c8:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <prvHeapInit+0xc0>)
 800d7ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7ce:	601a      	str	r2, [r3, #0]
}
 800d7d0:	bf00      	nop
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	200006b0 	.word	0x200006b0
 800d7e0:	200086b0 	.word	0x200086b0
 800d7e4:	200086b8 	.word	0x200086b8
 800d7e8:	200086c0 	.word	0x200086c0
 800d7ec:	200086bc 	.word	0x200086bc
 800d7f0:	200086c4 	.word	0x200086c4

0800d7f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7fc:	4b28      	ldr	r3, [pc, #160]	; (800d8a0 <prvInsertBlockIntoFreeList+0xac>)
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	e002      	b.n	800d808 <prvInsertBlockIntoFreeList+0x14>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d8f7      	bhi.n	800d802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	4413      	add	r3, r2
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d108      	bne.n	800d836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	441a      	add	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	441a      	add	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d118      	bne.n	800d87c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	4b15      	ldr	r3, [pc, #84]	; (800d8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	429a      	cmp	r2, r3
 800d854:	d00d      	beq.n	800d872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	441a      	add	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	e008      	b.n	800d884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <prvInsertBlockIntoFreeList+0xb0>)
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	e003      	b.n	800d884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d002      	beq.n	800d892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d892:	bf00      	nop
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	200086b0 	.word	0x200086b0
 800d8a4:	200086b8 	.word	0x200086b8

0800d8a8 <__errno>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	; (800d8b0 <__errno+0x8>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	2000005c 	.word	0x2000005c

0800d8b4 <__libc_init_array>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	4e0d      	ldr	r6, [pc, #52]	; (800d8ec <__libc_init_array+0x38>)
 800d8b8:	4c0d      	ldr	r4, [pc, #52]	; (800d8f0 <__libc_init_array+0x3c>)
 800d8ba:	1ba4      	subs	r4, r4, r6
 800d8bc:	10a4      	asrs	r4, r4, #2
 800d8be:	2500      	movs	r5, #0
 800d8c0:	42a5      	cmp	r5, r4
 800d8c2:	d109      	bne.n	800d8d8 <__libc_init_array+0x24>
 800d8c4:	4e0b      	ldr	r6, [pc, #44]	; (800d8f4 <__libc_init_array+0x40>)
 800d8c6:	4c0c      	ldr	r4, [pc, #48]	; (800d8f8 <__libc_init_array+0x44>)
 800d8c8:	f000 fc28 	bl	800e11c <_init>
 800d8cc:	1ba4      	subs	r4, r4, r6
 800d8ce:	10a4      	asrs	r4, r4, #2
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	42a5      	cmp	r5, r4
 800d8d4:	d105      	bne.n	800d8e2 <__libc_init_array+0x2e>
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8dc:	4798      	blx	r3
 800d8de:	3501      	adds	r5, #1
 800d8e0:	e7ee      	b.n	800d8c0 <__libc_init_array+0xc>
 800d8e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8e6:	4798      	blx	r3
 800d8e8:	3501      	adds	r5, #1
 800d8ea:	e7f2      	b.n	800d8d2 <__libc_init_array+0x1e>
 800d8ec:	08010194 	.word	0x08010194
 800d8f0:	08010194 	.word	0x08010194
 800d8f4:	08010194 	.word	0x08010194
 800d8f8:	08010198 	.word	0x08010198

0800d8fc <memcpy>:
 800d8fc:	b510      	push	{r4, lr}
 800d8fe:	1e43      	subs	r3, r0, #1
 800d900:	440a      	add	r2, r1
 800d902:	4291      	cmp	r1, r2
 800d904:	d100      	bne.n	800d908 <memcpy+0xc>
 800d906:	bd10      	pop	{r4, pc}
 800d908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d90c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d910:	e7f7      	b.n	800d902 <memcpy+0x6>

0800d912 <memset>:
 800d912:	4402      	add	r2, r0
 800d914:	4603      	mov	r3, r0
 800d916:	4293      	cmp	r3, r2
 800d918:	d100      	bne.n	800d91c <memset+0xa>
 800d91a:	4770      	bx	lr
 800d91c:	f803 1b01 	strb.w	r1, [r3], #1
 800d920:	e7f9      	b.n	800d916 <memset+0x4>
	...

0800d924 <siprintf>:
 800d924:	b40e      	push	{r1, r2, r3}
 800d926:	b500      	push	{lr}
 800d928:	b09c      	sub	sp, #112	; 0x70
 800d92a:	ab1d      	add	r3, sp, #116	; 0x74
 800d92c:	9002      	str	r0, [sp, #8]
 800d92e:	9006      	str	r0, [sp, #24]
 800d930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d934:	4809      	ldr	r0, [pc, #36]	; (800d95c <siprintf+0x38>)
 800d936:	9107      	str	r1, [sp, #28]
 800d938:	9104      	str	r1, [sp, #16]
 800d93a:	4909      	ldr	r1, [pc, #36]	; (800d960 <siprintf+0x3c>)
 800d93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d940:	9105      	str	r1, [sp, #20]
 800d942:	6800      	ldr	r0, [r0, #0]
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	a902      	add	r1, sp, #8
 800d948:	f000 f866 	bl	800da18 <_svfiprintf_r>
 800d94c:	9b02      	ldr	r3, [sp, #8]
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
 800d952:	b01c      	add	sp, #112	; 0x70
 800d954:	f85d eb04 	ldr.w	lr, [sp], #4
 800d958:	b003      	add	sp, #12
 800d95a:	4770      	bx	lr
 800d95c:	2000005c 	.word	0x2000005c
 800d960:	ffff0208 	.word	0xffff0208

0800d964 <__ssputs_r>:
 800d964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	688e      	ldr	r6, [r1, #8]
 800d96a:	429e      	cmp	r6, r3
 800d96c:	4682      	mov	sl, r0
 800d96e:	460c      	mov	r4, r1
 800d970:	4690      	mov	r8, r2
 800d972:	4699      	mov	r9, r3
 800d974:	d837      	bhi.n	800d9e6 <__ssputs_r+0x82>
 800d976:	898a      	ldrh	r2, [r1, #12]
 800d978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d97c:	d031      	beq.n	800d9e2 <__ssputs_r+0x7e>
 800d97e:	6825      	ldr	r5, [r4, #0]
 800d980:	6909      	ldr	r1, [r1, #16]
 800d982:	1a6f      	subs	r7, r5, r1
 800d984:	6965      	ldr	r5, [r4, #20]
 800d986:	2302      	movs	r3, #2
 800d988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d98c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d990:	f109 0301 	add.w	r3, r9, #1
 800d994:	443b      	add	r3, r7
 800d996:	429d      	cmp	r5, r3
 800d998:	bf38      	it	cc
 800d99a:	461d      	movcc	r5, r3
 800d99c:	0553      	lsls	r3, r2, #21
 800d99e:	d530      	bpl.n	800da02 <__ssputs_r+0x9e>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	f000 fb21 	bl	800dfe8 <_malloc_r>
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	b950      	cbnz	r0, 800d9c0 <__ssputs_r+0x5c>
 800d9aa:	230c      	movs	r3, #12
 800d9ac:	f8ca 3000 	str.w	r3, [sl]
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9b6:	81a3      	strh	r3, [r4, #12]
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	463a      	mov	r2, r7
 800d9c2:	6921      	ldr	r1, [r4, #16]
 800d9c4:	f7ff ff9a 	bl	800d8fc <memcpy>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	6126      	str	r6, [r4, #16]
 800d9d6:	6165      	str	r5, [r4, #20]
 800d9d8:	443e      	add	r6, r7
 800d9da:	1bed      	subs	r5, r5, r7
 800d9dc:	6026      	str	r6, [r4, #0]
 800d9de:	60a5      	str	r5, [r4, #8]
 800d9e0:	464e      	mov	r6, r9
 800d9e2:	454e      	cmp	r6, r9
 800d9e4:	d900      	bls.n	800d9e8 <__ssputs_r+0x84>
 800d9e6:	464e      	mov	r6, r9
 800d9e8:	4632      	mov	r2, r6
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	6820      	ldr	r0, [r4, #0]
 800d9ee:	f000 fa93 	bl	800df18 <memmove>
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	1b9b      	subs	r3, r3, r6
 800d9f6:	60a3      	str	r3, [r4, #8]
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	441e      	add	r6, r3
 800d9fc:	6026      	str	r6, [r4, #0]
 800d9fe:	2000      	movs	r0, #0
 800da00:	e7dc      	b.n	800d9bc <__ssputs_r+0x58>
 800da02:	462a      	mov	r2, r5
 800da04:	f000 fb4a 	bl	800e09c <_realloc_r>
 800da08:	4606      	mov	r6, r0
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d1e2      	bne.n	800d9d4 <__ssputs_r+0x70>
 800da0e:	6921      	ldr	r1, [r4, #16]
 800da10:	4650      	mov	r0, sl
 800da12:	f000 fa9b 	bl	800df4c <_free_r>
 800da16:	e7c8      	b.n	800d9aa <__ssputs_r+0x46>

0800da18 <_svfiprintf_r>:
 800da18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da1c:	461d      	mov	r5, r3
 800da1e:	898b      	ldrh	r3, [r1, #12]
 800da20:	061f      	lsls	r7, r3, #24
 800da22:	b09d      	sub	sp, #116	; 0x74
 800da24:	4680      	mov	r8, r0
 800da26:	460c      	mov	r4, r1
 800da28:	4616      	mov	r6, r2
 800da2a:	d50f      	bpl.n	800da4c <_svfiprintf_r+0x34>
 800da2c:	690b      	ldr	r3, [r1, #16]
 800da2e:	b96b      	cbnz	r3, 800da4c <_svfiprintf_r+0x34>
 800da30:	2140      	movs	r1, #64	; 0x40
 800da32:	f000 fad9 	bl	800dfe8 <_malloc_r>
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	6120      	str	r0, [r4, #16]
 800da3a:	b928      	cbnz	r0, 800da48 <_svfiprintf_r+0x30>
 800da3c:	230c      	movs	r3, #12
 800da3e:	f8c8 3000 	str.w	r3, [r8]
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	e0c8      	b.n	800dbda <_svfiprintf_r+0x1c2>
 800da48:	2340      	movs	r3, #64	; 0x40
 800da4a:	6163      	str	r3, [r4, #20]
 800da4c:	2300      	movs	r3, #0
 800da4e:	9309      	str	r3, [sp, #36]	; 0x24
 800da50:	2320      	movs	r3, #32
 800da52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da56:	2330      	movs	r3, #48	; 0x30
 800da58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da5c:	9503      	str	r5, [sp, #12]
 800da5e:	f04f 0b01 	mov.w	fp, #1
 800da62:	4637      	mov	r7, r6
 800da64:	463d      	mov	r5, r7
 800da66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da6a:	b10b      	cbz	r3, 800da70 <_svfiprintf_r+0x58>
 800da6c:	2b25      	cmp	r3, #37	; 0x25
 800da6e:	d13e      	bne.n	800daee <_svfiprintf_r+0xd6>
 800da70:	ebb7 0a06 	subs.w	sl, r7, r6
 800da74:	d00b      	beq.n	800da8e <_svfiprintf_r+0x76>
 800da76:	4653      	mov	r3, sl
 800da78:	4632      	mov	r2, r6
 800da7a:	4621      	mov	r1, r4
 800da7c:	4640      	mov	r0, r8
 800da7e:	f7ff ff71 	bl	800d964 <__ssputs_r>
 800da82:	3001      	adds	r0, #1
 800da84:	f000 80a4 	beq.w	800dbd0 <_svfiprintf_r+0x1b8>
 800da88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8a:	4453      	add	r3, sl
 800da8c:	9309      	str	r3, [sp, #36]	; 0x24
 800da8e:	783b      	ldrb	r3, [r7, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 809d 	beq.w	800dbd0 <_svfiprintf_r+0x1b8>
 800da96:	2300      	movs	r3, #0
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	9307      	str	r3, [sp, #28]
 800daa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daa8:	931a      	str	r3, [sp, #104]	; 0x68
 800daaa:	462f      	mov	r7, r5
 800daac:	2205      	movs	r2, #5
 800daae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dab2:	4850      	ldr	r0, [pc, #320]	; (800dbf4 <_svfiprintf_r+0x1dc>)
 800dab4:	f7f2 fbac 	bl	8000210 <memchr>
 800dab8:	9b04      	ldr	r3, [sp, #16]
 800daba:	b9d0      	cbnz	r0, 800daf2 <_svfiprintf_r+0xda>
 800dabc:	06d9      	lsls	r1, r3, #27
 800dabe:	bf44      	itt	mi
 800dac0:	2220      	movmi	r2, #32
 800dac2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dac6:	071a      	lsls	r2, r3, #28
 800dac8:	bf44      	itt	mi
 800daca:	222b      	movmi	r2, #43	; 0x2b
 800dacc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dad0:	782a      	ldrb	r2, [r5, #0]
 800dad2:	2a2a      	cmp	r2, #42	; 0x2a
 800dad4:	d015      	beq.n	800db02 <_svfiprintf_r+0xea>
 800dad6:	9a07      	ldr	r2, [sp, #28]
 800dad8:	462f      	mov	r7, r5
 800dada:	2000      	movs	r0, #0
 800dadc:	250a      	movs	r5, #10
 800dade:	4639      	mov	r1, r7
 800dae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dae4:	3b30      	subs	r3, #48	; 0x30
 800dae6:	2b09      	cmp	r3, #9
 800dae8:	d94d      	bls.n	800db86 <_svfiprintf_r+0x16e>
 800daea:	b1b8      	cbz	r0, 800db1c <_svfiprintf_r+0x104>
 800daec:	e00f      	b.n	800db0e <_svfiprintf_r+0xf6>
 800daee:	462f      	mov	r7, r5
 800daf0:	e7b8      	b.n	800da64 <_svfiprintf_r+0x4c>
 800daf2:	4a40      	ldr	r2, [pc, #256]	; (800dbf4 <_svfiprintf_r+0x1dc>)
 800daf4:	1a80      	subs	r0, r0, r2
 800daf6:	fa0b f000 	lsl.w	r0, fp, r0
 800dafa:	4318      	orrs	r0, r3
 800dafc:	9004      	str	r0, [sp, #16]
 800dafe:	463d      	mov	r5, r7
 800db00:	e7d3      	b.n	800daaa <_svfiprintf_r+0x92>
 800db02:	9a03      	ldr	r2, [sp, #12]
 800db04:	1d11      	adds	r1, r2, #4
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	9103      	str	r1, [sp, #12]
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	db01      	blt.n	800db12 <_svfiprintf_r+0xfa>
 800db0e:	9207      	str	r2, [sp, #28]
 800db10:	e004      	b.n	800db1c <_svfiprintf_r+0x104>
 800db12:	4252      	negs	r2, r2
 800db14:	f043 0302 	orr.w	r3, r3, #2
 800db18:	9207      	str	r2, [sp, #28]
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	783b      	ldrb	r3, [r7, #0]
 800db1e:	2b2e      	cmp	r3, #46	; 0x2e
 800db20:	d10c      	bne.n	800db3c <_svfiprintf_r+0x124>
 800db22:	787b      	ldrb	r3, [r7, #1]
 800db24:	2b2a      	cmp	r3, #42	; 0x2a
 800db26:	d133      	bne.n	800db90 <_svfiprintf_r+0x178>
 800db28:	9b03      	ldr	r3, [sp, #12]
 800db2a:	1d1a      	adds	r2, r3, #4
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	9203      	str	r2, [sp, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	bfb8      	it	lt
 800db34:	f04f 33ff 	movlt.w	r3, #4294967295
 800db38:	3702      	adds	r7, #2
 800db3a:	9305      	str	r3, [sp, #20]
 800db3c:	4d2e      	ldr	r5, [pc, #184]	; (800dbf8 <_svfiprintf_r+0x1e0>)
 800db3e:	7839      	ldrb	r1, [r7, #0]
 800db40:	2203      	movs	r2, #3
 800db42:	4628      	mov	r0, r5
 800db44:	f7f2 fb64 	bl	8000210 <memchr>
 800db48:	b138      	cbz	r0, 800db5a <_svfiprintf_r+0x142>
 800db4a:	2340      	movs	r3, #64	; 0x40
 800db4c:	1b40      	subs	r0, r0, r5
 800db4e:	fa03 f000 	lsl.w	r0, r3, r0
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	4303      	orrs	r3, r0
 800db56:	3701      	adds	r7, #1
 800db58:	9304      	str	r3, [sp, #16]
 800db5a:	7839      	ldrb	r1, [r7, #0]
 800db5c:	4827      	ldr	r0, [pc, #156]	; (800dbfc <_svfiprintf_r+0x1e4>)
 800db5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db62:	2206      	movs	r2, #6
 800db64:	1c7e      	adds	r6, r7, #1
 800db66:	f7f2 fb53 	bl	8000210 <memchr>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d038      	beq.n	800dbe0 <_svfiprintf_r+0x1c8>
 800db6e:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <_svfiprintf_r+0x1e8>)
 800db70:	bb13      	cbnz	r3, 800dbb8 <_svfiprintf_r+0x1a0>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	3307      	adds	r3, #7
 800db76:	f023 0307 	bic.w	r3, r3, #7
 800db7a:	3308      	adds	r3, #8
 800db7c:	9303      	str	r3, [sp, #12]
 800db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db80:	444b      	add	r3, r9
 800db82:	9309      	str	r3, [sp, #36]	; 0x24
 800db84:	e76d      	b.n	800da62 <_svfiprintf_r+0x4a>
 800db86:	fb05 3202 	mla	r2, r5, r2, r3
 800db8a:	2001      	movs	r0, #1
 800db8c:	460f      	mov	r7, r1
 800db8e:	e7a6      	b.n	800dade <_svfiprintf_r+0xc6>
 800db90:	2300      	movs	r3, #0
 800db92:	3701      	adds	r7, #1
 800db94:	9305      	str	r3, [sp, #20]
 800db96:	4619      	mov	r1, r3
 800db98:	250a      	movs	r5, #10
 800db9a:	4638      	mov	r0, r7
 800db9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba0:	3a30      	subs	r2, #48	; 0x30
 800dba2:	2a09      	cmp	r2, #9
 800dba4:	d903      	bls.n	800dbae <_svfiprintf_r+0x196>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0c8      	beq.n	800db3c <_svfiprintf_r+0x124>
 800dbaa:	9105      	str	r1, [sp, #20]
 800dbac:	e7c6      	b.n	800db3c <_svfiprintf_r+0x124>
 800dbae:	fb05 2101 	mla	r1, r5, r1, r2
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	e7f0      	b.n	800db9a <_svfiprintf_r+0x182>
 800dbb8:	ab03      	add	r3, sp, #12
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	4622      	mov	r2, r4
 800dbbe:	4b11      	ldr	r3, [pc, #68]	; (800dc04 <_svfiprintf_r+0x1ec>)
 800dbc0:	a904      	add	r1, sp, #16
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	f3af 8000 	nop.w
 800dbc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dbcc:	4681      	mov	r9, r0
 800dbce:	d1d6      	bne.n	800db7e <_svfiprintf_r+0x166>
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	065b      	lsls	r3, r3, #25
 800dbd4:	f53f af35 	bmi.w	800da42 <_svfiprintf_r+0x2a>
 800dbd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbda:	b01d      	add	sp, #116	; 0x74
 800dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe0:	ab03      	add	r3, sp, #12
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	4b07      	ldr	r3, [pc, #28]	; (800dc04 <_svfiprintf_r+0x1ec>)
 800dbe8:	a904      	add	r1, sp, #16
 800dbea:	4640      	mov	r0, r8
 800dbec:	f000 f882 	bl	800dcf4 <_printf_i>
 800dbf0:	e7ea      	b.n	800dbc8 <_svfiprintf_r+0x1b0>
 800dbf2:	bf00      	nop
 800dbf4:	08010158 	.word	0x08010158
 800dbf8:	0801015e 	.word	0x0801015e
 800dbfc:	08010162 	.word	0x08010162
 800dc00:	00000000 	.word	0x00000000
 800dc04:	0800d965 	.word	0x0800d965

0800dc08 <_printf_common>:
 800dc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc0c:	4691      	mov	r9, r2
 800dc0e:	461f      	mov	r7, r3
 800dc10:	688a      	ldr	r2, [r1, #8]
 800dc12:	690b      	ldr	r3, [r1, #16]
 800dc14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	bfb8      	it	lt
 800dc1c:	4613      	movlt	r3, r2
 800dc1e:	f8c9 3000 	str.w	r3, [r9]
 800dc22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc26:	4606      	mov	r6, r0
 800dc28:	460c      	mov	r4, r1
 800dc2a:	b112      	cbz	r2, 800dc32 <_printf_common+0x2a>
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	f8c9 3000 	str.w	r3, [r9]
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	0699      	lsls	r1, r3, #26
 800dc36:	bf42      	ittt	mi
 800dc38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dc3c:	3302      	addmi	r3, #2
 800dc3e:	f8c9 3000 	strmi.w	r3, [r9]
 800dc42:	6825      	ldr	r5, [r4, #0]
 800dc44:	f015 0506 	ands.w	r5, r5, #6
 800dc48:	d107      	bne.n	800dc5a <_printf_common+0x52>
 800dc4a:	f104 0a19 	add.w	sl, r4, #25
 800dc4e:	68e3      	ldr	r3, [r4, #12]
 800dc50:	f8d9 2000 	ldr.w	r2, [r9]
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	42ab      	cmp	r3, r5
 800dc58:	dc28      	bgt.n	800dcac <_printf_common+0xa4>
 800dc5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc5e:	6822      	ldr	r2, [r4, #0]
 800dc60:	3300      	adds	r3, #0
 800dc62:	bf18      	it	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	0692      	lsls	r2, r2, #26
 800dc68:	d42d      	bmi.n	800dcc6 <_printf_common+0xbe>
 800dc6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc6e:	4639      	mov	r1, r7
 800dc70:	4630      	mov	r0, r6
 800dc72:	47c0      	blx	r8
 800dc74:	3001      	adds	r0, #1
 800dc76:	d020      	beq.n	800dcba <_printf_common+0xb2>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	68e5      	ldr	r5, [r4, #12]
 800dc7c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc80:	f003 0306 	and.w	r3, r3, #6
 800dc84:	2b04      	cmp	r3, #4
 800dc86:	bf08      	it	eq
 800dc88:	1aad      	subeq	r5, r5, r2
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	6922      	ldr	r2, [r4, #16]
 800dc8e:	bf0c      	ite	eq
 800dc90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc94:	2500      	movne	r5, #0
 800dc96:	4293      	cmp	r3, r2
 800dc98:	bfc4      	itt	gt
 800dc9a:	1a9b      	subgt	r3, r3, r2
 800dc9c:	18ed      	addgt	r5, r5, r3
 800dc9e:	f04f 0900 	mov.w	r9, #0
 800dca2:	341a      	adds	r4, #26
 800dca4:	454d      	cmp	r5, r9
 800dca6:	d11a      	bne.n	800dcde <_printf_common+0xd6>
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e008      	b.n	800dcbe <_printf_common+0xb6>
 800dcac:	2301      	movs	r3, #1
 800dcae:	4652      	mov	r2, sl
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	47c0      	blx	r8
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	d103      	bne.n	800dcc2 <_printf_common+0xba>
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc2:	3501      	adds	r5, #1
 800dcc4:	e7c3      	b.n	800dc4e <_printf_common+0x46>
 800dcc6:	18e1      	adds	r1, r4, r3
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	2030      	movs	r0, #48	; 0x30
 800dccc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcd0:	4422      	add	r2, r4
 800dcd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcda:	3302      	adds	r3, #2
 800dcdc:	e7c5      	b.n	800dc6a <_printf_common+0x62>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4622      	mov	r2, r4
 800dce2:	4639      	mov	r1, r7
 800dce4:	4630      	mov	r0, r6
 800dce6:	47c0      	blx	r8
 800dce8:	3001      	adds	r0, #1
 800dcea:	d0e6      	beq.n	800dcba <_printf_common+0xb2>
 800dcec:	f109 0901 	add.w	r9, r9, #1
 800dcf0:	e7d8      	b.n	800dca4 <_printf_common+0x9c>
	...

0800dcf4 <_printf_i>:
 800dcf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	7e09      	ldrb	r1, [r1, #24]
 800dd00:	b085      	sub	sp, #20
 800dd02:	296e      	cmp	r1, #110	; 0x6e
 800dd04:	4617      	mov	r7, r2
 800dd06:	4606      	mov	r6, r0
 800dd08:	4698      	mov	r8, r3
 800dd0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd0c:	f000 80b3 	beq.w	800de76 <_printf_i+0x182>
 800dd10:	d822      	bhi.n	800dd58 <_printf_i+0x64>
 800dd12:	2963      	cmp	r1, #99	; 0x63
 800dd14:	d036      	beq.n	800dd84 <_printf_i+0x90>
 800dd16:	d80a      	bhi.n	800dd2e <_printf_i+0x3a>
 800dd18:	2900      	cmp	r1, #0
 800dd1a:	f000 80b9 	beq.w	800de90 <_printf_i+0x19c>
 800dd1e:	2958      	cmp	r1, #88	; 0x58
 800dd20:	f000 8083 	beq.w	800de2a <_printf_i+0x136>
 800dd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dd2c:	e032      	b.n	800dd94 <_printf_i+0xa0>
 800dd2e:	2964      	cmp	r1, #100	; 0x64
 800dd30:	d001      	beq.n	800dd36 <_printf_i+0x42>
 800dd32:	2969      	cmp	r1, #105	; 0x69
 800dd34:	d1f6      	bne.n	800dd24 <_printf_i+0x30>
 800dd36:	6820      	ldr	r0, [r4, #0]
 800dd38:	6813      	ldr	r3, [r2, #0]
 800dd3a:	0605      	lsls	r5, r0, #24
 800dd3c:	f103 0104 	add.w	r1, r3, #4
 800dd40:	d52a      	bpl.n	800dd98 <_printf_i+0xa4>
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6011      	str	r1, [r2, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	da03      	bge.n	800dd52 <_printf_i+0x5e>
 800dd4a:	222d      	movs	r2, #45	; 0x2d
 800dd4c:	425b      	negs	r3, r3
 800dd4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd52:	486f      	ldr	r0, [pc, #444]	; (800df10 <_printf_i+0x21c>)
 800dd54:	220a      	movs	r2, #10
 800dd56:	e039      	b.n	800ddcc <_printf_i+0xd8>
 800dd58:	2973      	cmp	r1, #115	; 0x73
 800dd5a:	f000 809d 	beq.w	800de98 <_printf_i+0x1a4>
 800dd5e:	d808      	bhi.n	800dd72 <_printf_i+0x7e>
 800dd60:	296f      	cmp	r1, #111	; 0x6f
 800dd62:	d020      	beq.n	800dda6 <_printf_i+0xb2>
 800dd64:	2970      	cmp	r1, #112	; 0x70
 800dd66:	d1dd      	bne.n	800dd24 <_printf_i+0x30>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	f043 0320 	orr.w	r3, r3, #32
 800dd6e:	6023      	str	r3, [r4, #0]
 800dd70:	e003      	b.n	800dd7a <_printf_i+0x86>
 800dd72:	2975      	cmp	r1, #117	; 0x75
 800dd74:	d017      	beq.n	800dda6 <_printf_i+0xb2>
 800dd76:	2978      	cmp	r1, #120	; 0x78
 800dd78:	d1d4      	bne.n	800dd24 <_printf_i+0x30>
 800dd7a:	2378      	movs	r3, #120	; 0x78
 800dd7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd80:	4864      	ldr	r0, [pc, #400]	; (800df14 <_printf_i+0x220>)
 800dd82:	e055      	b.n	800de30 <_printf_i+0x13c>
 800dd84:	6813      	ldr	r3, [r2, #0]
 800dd86:	1d19      	adds	r1, r3, #4
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6011      	str	r1, [r2, #0]
 800dd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd94:	2301      	movs	r3, #1
 800dd96:	e08c      	b.n	800deb2 <_printf_i+0x1be>
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6011      	str	r1, [r2, #0]
 800dd9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dda0:	bf18      	it	ne
 800dda2:	b21b      	sxthne	r3, r3
 800dda4:	e7cf      	b.n	800dd46 <_printf_i+0x52>
 800dda6:	6813      	ldr	r3, [r2, #0]
 800dda8:	6825      	ldr	r5, [r4, #0]
 800ddaa:	1d18      	adds	r0, r3, #4
 800ddac:	6010      	str	r0, [r2, #0]
 800ddae:	0628      	lsls	r0, r5, #24
 800ddb0:	d501      	bpl.n	800ddb6 <_printf_i+0xc2>
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	e002      	b.n	800ddbc <_printf_i+0xc8>
 800ddb6:	0668      	lsls	r0, r5, #25
 800ddb8:	d5fb      	bpl.n	800ddb2 <_printf_i+0xbe>
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	4854      	ldr	r0, [pc, #336]	; (800df10 <_printf_i+0x21c>)
 800ddbe:	296f      	cmp	r1, #111	; 0x6f
 800ddc0:	bf14      	ite	ne
 800ddc2:	220a      	movne	r2, #10
 800ddc4:	2208      	moveq	r2, #8
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddcc:	6865      	ldr	r5, [r4, #4]
 800ddce:	60a5      	str	r5, [r4, #8]
 800ddd0:	2d00      	cmp	r5, #0
 800ddd2:	f2c0 8095 	blt.w	800df00 <_printf_i+0x20c>
 800ddd6:	6821      	ldr	r1, [r4, #0]
 800ddd8:	f021 0104 	bic.w	r1, r1, #4
 800dddc:	6021      	str	r1, [r4, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d13d      	bne.n	800de5e <_printf_i+0x16a>
 800dde2:	2d00      	cmp	r5, #0
 800dde4:	f040 808e 	bne.w	800df04 <_printf_i+0x210>
 800dde8:	4665      	mov	r5, ip
 800ddea:	2a08      	cmp	r2, #8
 800ddec:	d10b      	bne.n	800de06 <_printf_i+0x112>
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	07db      	lsls	r3, r3, #31
 800ddf2:	d508      	bpl.n	800de06 <_printf_i+0x112>
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	6862      	ldr	r2, [r4, #4]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	bfde      	ittt	le
 800ddfc:	2330      	movle	r3, #48	; 0x30
 800ddfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de02:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de06:	ebac 0305 	sub.w	r3, ip, r5
 800de0a:	6123      	str	r3, [r4, #16]
 800de0c:	f8cd 8000 	str.w	r8, [sp]
 800de10:	463b      	mov	r3, r7
 800de12:	aa03      	add	r2, sp, #12
 800de14:	4621      	mov	r1, r4
 800de16:	4630      	mov	r0, r6
 800de18:	f7ff fef6 	bl	800dc08 <_printf_common>
 800de1c:	3001      	adds	r0, #1
 800de1e:	d14d      	bne.n	800debc <_printf_i+0x1c8>
 800de20:	f04f 30ff 	mov.w	r0, #4294967295
 800de24:	b005      	add	sp, #20
 800de26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2a:	4839      	ldr	r0, [pc, #228]	; (800df10 <_printf_i+0x21c>)
 800de2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800de30:	6813      	ldr	r3, [r2, #0]
 800de32:	6821      	ldr	r1, [r4, #0]
 800de34:	1d1d      	adds	r5, r3, #4
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	6015      	str	r5, [r2, #0]
 800de3a:	060a      	lsls	r2, r1, #24
 800de3c:	d50b      	bpl.n	800de56 <_printf_i+0x162>
 800de3e:	07ca      	lsls	r2, r1, #31
 800de40:	bf44      	itt	mi
 800de42:	f041 0120 	orrmi.w	r1, r1, #32
 800de46:	6021      	strmi	r1, [r4, #0]
 800de48:	b91b      	cbnz	r3, 800de52 <_printf_i+0x15e>
 800de4a:	6822      	ldr	r2, [r4, #0]
 800de4c:	f022 0220 	bic.w	r2, r2, #32
 800de50:	6022      	str	r2, [r4, #0]
 800de52:	2210      	movs	r2, #16
 800de54:	e7b7      	b.n	800ddc6 <_printf_i+0xd2>
 800de56:	064d      	lsls	r5, r1, #25
 800de58:	bf48      	it	mi
 800de5a:	b29b      	uxthmi	r3, r3
 800de5c:	e7ef      	b.n	800de3e <_printf_i+0x14a>
 800de5e:	4665      	mov	r5, ip
 800de60:	fbb3 f1f2 	udiv	r1, r3, r2
 800de64:	fb02 3311 	mls	r3, r2, r1, r3
 800de68:	5cc3      	ldrb	r3, [r0, r3]
 800de6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de6e:	460b      	mov	r3, r1
 800de70:	2900      	cmp	r1, #0
 800de72:	d1f5      	bne.n	800de60 <_printf_i+0x16c>
 800de74:	e7b9      	b.n	800ddea <_printf_i+0xf6>
 800de76:	6813      	ldr	r3, [r2, #0]
 800de78:	6825      	ldr	r5, [r4, #0]
 800de7a:	6961      	ldr	r1, [r4, #20]
 800de7c:	1d18      	adds	r0, r3, #4
 800de7e:	6010      	str	r0, [r2, #0]
 800de80:	0628      	lsls	r0, r5, #24
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	d501      	bpl.n	800de8a <_printf_i+0x196>
 800de86:	6019      	str	r1, [r3, #0]
 800de88:	e002      	b.n	800de90 <_printf_i+0x19c>
 800de8a:	066a      	lsls	r2, r5, #25
 800de8c:	d5fb      	bpl.n	800de86 <_printf_i+0x192>
 800de8e:	8019      	strh	r1, [r3, #0]
 800de90:	2300      	movs	r3, #0
 800de92:	6123      	str	r3, [r4, #16]
 800de94:	4665      	mov	r5, ip
 800de96:	e7b9      	b.n	800de0c <_printf_i+0x118>
 800de98:	6813      	ldr	r3, [r2, #0]
 800de9a:	1d19      	adds	r1, r3, #4
 800de9c:	6011      	str	r1, [r2, #0]
 800de9e:	681d      	ldr	r5, [r3, #0]
 800dea0:	6862      	ldr	r2, [r4, #4]
 800dea2:	2100      	movs	r1, #0
 800dea4:	4628      	mov	r0, r5
 800dea6:	f7f2 f9b3 	bl	8000210 <memchr>
 800deaa:	b108      	cbz	r0, 800deb0 <_printf_i+0x1bc>
 800deac:	1b40      	subs	r0, r0, r5
 800deae:	6060      	str	r0, [r4, #4]
 800deb0:	6863      	ldr	r3, [r4, #4]
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	2300      	movs	r3, #0
 800deb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deba:	e7a7      	b.n	800de0c <_printf_i+0x118>
 800debc:	6923      	ldr	r3, [r4, #16]
 800debe:	462a      	mov	r2, r5
 800dec0:	4639      	mov	r1, r7
 800dec2:	4630      	mov	r0, r6
 800dec4:	47c0      	blx	r8
 800dec6:	3001      	adds	r0, #1
 800dec8:	d0aa      	beq.n	800de20 <_printf_i+0x12c>
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	079b      	lsls	r3, r3, #30
 800dece:	d413      	bmi.n	800def8 <_printf_i+0x204>
 800ded0:	68e0      	ldr	r0, [r4, #12]
 800ded2:	9b03      	ldr	r3, [sp, #12]
 800ded4:	4298      	cmp	r0, r3
 800ded6:	bfb8      	it	lt
 800ded8:	4618      	movlt	r0, r3
 800deda:	e7a3      	b.n	800de24 <_printf_i+0x130>
 800dedc:	2301      	movs	r3, #1
 800dede:	464a      	mov	r2, r9
 800dee0:	4639      	mov	r1, r7
 800dee2:	4630      	mov	r0, r6
 800dee4:	47c0      	blx	r8
 800dee6:	3001      	adds	r0, #1
 800dee8:	d09a      	beq.n	800de20 <_printf_i+0x12c>
 800deea:	3501      	adds	r5, #1
 800deec:	68e3      	ldr	r3, [r4, #12]
 800deee:	9a03      	ldr	r2, [sp, #12]
 800def0:	1a9b      	subs	r3, r3, r2
 800def2:	42ab      	cmp	r3, r5
 800def4:	dcf2      	bgt.n	800dedc <_printf_i+0x1e8>
 800def6:	e7eb      	b.n	800ded0 <_printf_i+0x1dc>
 800def8:	2500      	movs	r5, #0
 800defa:	f104 0919 	add.w	r9, r4, #25
 800defe:	e7f5      	b.n	800deec <_printf_i+0x1f8>
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1ac      	bne.n	800de5e <_printf_i+0x16a>
 800df04:	7803      	ldrb	r3, [r0, #0]
 800df06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df0e:	e76c      	b.n	800ddea <_printf_i+0xf6>
 800df10:	08010169 	.word	0x08010169
 800df14:	0801017a 	.word	0x0801017a

0800df18 <memmove>:
 800df18:	4288      	cmp	r0, r1
 800df1a:	b510      	push	{r4, lr}
 800df1c:	eb01 0302 	add.w	r3, r1, r2
 800df20:	d807      	bhi.n	800df32 <memmove+0x1a>
 800df22:	1e42      	subs	r2, r0, #1
 800df24:	4299      	cmp	r1, r3
 800df26:	d00a      	beq.n	800df3e <memmove+0x26>
 800df28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800df30:	e7f8      	b.n	800df24 <memmove+0xc>
 800df32:	4283      	cmp	r3, r0
 800df34:	d9f5      	bls.n	800df22 <memmove+0xa>
 800df36:	1881      	adds	r1, r0, r2
 800df38:	1ad2      	subs	r2, r2, r3
 800df3a:	42d3      	cmn	r3, r2
 800df3c:	d100      	bne.n	800df40 <memmove+0x28>
 800df3e:	bd10      	pop	{r4, pc}
 800df40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800df48:	e7f7      	b.n	800df3a <memmove+0x22>
	...

0800df4c <_free_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4605      	mov	r5, r0
 800df50:	2900      	cmp	r1, #0
 800df52:	d045      	beq.n	800dfe0 <_free_r+0x94>
 800df54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df58:	1f0c      	subs	r4, r1, #4
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	bfb8      	it	lt
 800df5e:	18e4      	addlt	r4, r4, r3
 800df60:	f000 f8d2 	bl	800e108 <__malloc_lock>
 800df64:	4a1f      	ldr	r2, [pc, #124]	; (800dfe4 <_free_r+0x98>)
 800df66:	6813      	ldr	r3, [r2, #0]
 800df68:	4610      	mov	r0, r2
 800df6a:	b933      	cbnz	r3, 800df7a <_free_r+0x2e>
 800df6c:	6063      	str	r3, [r4, #4]
 800df6e:	6014      	str	r4, [r2, #0]
 800df70:	4628      	mov	r0, r5
 800df72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df76:	f000 b8c8 	b.w	800e10a <__malloc_unlock>
 800df7a:	42a3      	cmp	r3, r4
 800df7c:	d90c      	bls.n	800df98 <_free_r+0x4c>
 800df7e:	6821      	ldr	r1, [r4, #0]
 800df80:	1862      	adds	r2, r4, r1
 800df82:	4293      	cmp	r3, r2
 800df84:	bf04      	itt	eq
 800df86:	681a      	ldreq	r2, [r3, #0]
 800df88:	685b      	ldreq	r3, [r3, #4]
 800df8a:	6063      	str	r3, [r4, #4]
 800df8c:	bf04      	itt	eq
 800df8e:	1852      	addeq	r2, r2, r1
 800df90:	6022      	streq	r2, [r4, #0]
 800df92:	6004      	str	r4, [r0, #0]
 800df94:	e7ec      	b.n	800df70 <_free_r+0x24>
 800df96:	4613      	mov	r3, r2
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	b10a      	cbz	r2, 800dfa0 <_free_r+0x54>
 800df9c:	42a2      	cmp	r2, r4
 800df9e:	d9fa      	bls.n	800df96 <_free_r+0x4a>
 800dfa0:	6819      	ldr	r1, [r3, #0]
 800dfa2:	1858      	adds	r0, r3, r1
 800dfa4:	42a0      	cmp	r0, r4
 800dfa6:	d10b      	bne.n	800dfc0 <_free_r+0x74>
 800dfa8:	6820      	ldr	r0, [r4, #0]
 800dfaa:	4401      	add	r1, r0
 800dfac:	1858      	adds	r0, r3, r1
 800dfae:	4282      	cmp	r2, r0
 800dfb0:	6019      	str	r1, [r3, #0]
 800dfb2:	d1dd      	bne.n	800df70 <_free_r+0x24>
 800dfb4:	6810      	ldr	r0, [r2, #0]
 800dfb6:	6852      	ldr	r2, [r2, #4]
 800dfb8:	605a      	str	r2, [r3, #4]
 800dfba:	4401      	add	r1, r0
 800dfbc:	6019      	str	r1, [r3, #0]
 800dfbe:	e7d7      	b.n	800df70 <_free_r+0x24>
 800dfc0:	d902      	bls.n	800dfc8 <_free_r+0x7c>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	e7d3      	b.n	800df70 <_free_r+0x24>
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	1821      	adds	r1, r4, r0
 800dfcc:	428a      	cmp	r2, r1
 800dfce:	bf04      	itt	eq
 800dfd0:	6811      	ldreq	r1, [r2, #0]
 800dfd2:	6852      	ldreq	r2, [r2, #4]
 800dfd4:	6062      	str	r2, [r4, #4]
 800dfd6:	bf04      	itt	eq
 800dfd8:	1809      	addeq	r1, r1, r0
 800dfda:	6021      	streq	r1, [r4, #0]
 800dfdc:	605c      	str	r4, [r3, #4]
 800dfde:	e7c7      	b.n	800df70 <_free_r+0x24>
 800dfe0:	bd38      	pop	{r3, r4, r5, pc}
 800dfe2:	bf00      	nop
 800dfe4:	200086c8 	.word	0x200086c8

0800dfe8 <_malloc_r>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	1ccd      	adds	r5, r1, #3
 800dfec:	f025 0503 	bic.w	r5, r5, #3
 800dff0:	3508      	adds	r5, #8
 800dff2:	2d0c      	cmp	r5, #12
 800dff4:	bf38      	it	cc
 800dff6:	250c      	movcc	r5, #12
 800dff8:	2d00      	cmp	r5, #0
 800dffa:	4606      	mov	r6, r0
 800dffc:	db01      	blt.n	800e002 <_malloc_r+0x1a>
 800dffe:	42a9      	cmp	r1, r5
 800e000:	d903      	bls.n	800e00a <_malloc_r+0x22>
 800e002:	230c      	movs	r3, #12
 800e004:	6033      	str	r3, [r6, #0]
 800e006:	2000      	movs	r0, #0
 800e008:	bd70      	pop	{r4, r5, r6, pc}
 800e00a:	f000 f87d 	bl	800e108 <__malloc_lock>
 800e00e:	4a21      	ldr	r2, [pc, #132]	; (800e094 <_malloc_r+0xac>)
 800e010:	6814      	ldr	r4, [r2, #0]
 800e012:	4621      	mov	r1, r4
 800e014:	b991      	cbnz	r1, 800e03c <_malloc_r+0x54>
 800e016:	4c20      	ldr	r4, [pc, #128]	; (800e098 <_malloc_r+0xb0>)
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	b91b      	cbnz	r3, 800e024 <_malloc_r+0x3c>
 800e01c:	4630      	mov	r0, r6
 800e01e:	f000 f863 	bl	800e0e8 <_sbrk_r>
 800e022:	6020      	str	r0, [r4, #0]
 800e024:	4629      	mov	r1, r5
 800e026:	4630      	mov	r0, r6
 800e028:	f000 f85e 	bl	800e0e8 <_sbrk_r>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d124      	bne.n	800e07a <_malloc_r+0x92>
 800e030:	230c      	movs	r3, #12
 800e032:	6033      	str	r3, [r6, #0]
 800e034:	4630      	mov	r0, r6
 800e036:	f000 f868 	bl	800e10a <__malloc_unlock>
 800e03a:	e7e4      	b.n	800e006 <_malloc_r+0x1e>
 800e03c:	680b      	ldr	r3, [r1, #0]
 800e03e:	1b5b      	subs	r3, r3, r5
 800e040:	d418      	bmi.n	800e074 <_malloc_r+0x8c>
 800e042:	2b0b      	cmp	r3, #11
 800e044:	d90f      	bls.n	800e066 <_malloc_r+0x7e>
 800e046:	600b      	str	r3, [r1, #0]
 800e048:	50cd      	str	r5, [r1, r3]
 800e04a:	18cc      	adds	r4, r1, r3
 800e04c:	4630      	mov	r0, r6
 800e04e:	f000 f85c 	bl	800e10a <__malloc_unlock>
 800e052:	f104 000b 	add.w	r0, r4, #11
 800e056:	1d23      	adds	r3, r4, #4
 800e058:	f020 0007 	bic.w	r0, r0, #7
 800e05c:	1ac3      	subs	r3, r0, r3
 800e05e:	d0d3      	beq.n	800e008 <_malloc_r+0x20>
 800e060:	425a      	negs	r2, r3
 800e062:	50e2      	str	r2, [r4, r3]
 800e064:	e7d0      	b.n	800e008 <_malloc_r+0x20>
 800e066:	428c      	cmp	r4, r1
 800e068:	684b      	ldr	r3, [r1, #4]
 800e06a:	bf16      	itet	ne
 800e06c:	6063      	strne	r3, [r4, #4]
 800e06e:	6013      	streq	r3, [r2, #0]
 800e070:	460c      	movne	r4, r1
 800e072:	e7eb      	b.n	800e04c <_malloc_r+0x64>
 800e074:	460c      	mov	r4, r1
 800e076:	6849      	ldr	r1, [r1, #4]
 800e078:	e7cc      	b.n	800e014 <_malloc_r+0x2c>
 800e07a:	1cc4      	adds	r4, r0, #3
 800e07c:	f024 0403 	bic.w	r4, r4, #3
 800e080:	42a0      	cmp	r0, r4
 800e082:	d005      	beq.n	800e090 <_malloc_r+0xa8>
 800e084:	1a21      	subs	r1, r4, r0
 800e086:	4630      	mov	r0, r6
 800e088:	f000 f82e 	bl	800e0e8 <_sbrk_r>
 800e08c:	3001      	adds	r0, #1
 800e08e:	d0cf      	beq.n	800e030 <_malloc_r+0x48>
 800e090:	6025      	str	r5, [r4, #0]
 800e092:	e7db      	b.n	800e04c <_malloc_r+0x64>
 800e094:	200086c8 	.word	0x200086c8
 800e098:	200086cc 	.word	0x200086cc

0800e09c <_realloc_r>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	4607      	mov	r7, r0
 800e0a0:	4614      	mov	r4, r2
 800e0a2:	460e      	mov	r6, r1
 800e0a4:	b921      	cbnz	r1, 800e0b0 <_realloc_r+0x14>
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e0ac:	f7ff bf9c 	b.w	800dfe8 <_malloc_r>
 800e0b0:	b922      	cbnz	r2, 800e0bc <_realloc_r+0x20>
 800e0b2:	f7ff ff4b 	bl	800df4c <_free_r>
 800e0b6:	4625      	mov	r5, r4
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0bc:	f000 f826 	bl	800e10c <_malloc_usable_size_r>
 800e0c0:	42a0      	cmp	r0, r4
 800e0c2:	d20f      	bcs.n	800e0e4 <_realloc_r+0x48>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	f7ff ff8e 	bl	800dfe8 <_malloc_r>
 800e0cc:	4605      	mov	r5, r0
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d0f2      	beq.n	800e0b8 <_realloc_r+0x1c>
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	f7ff fc11 	bl	800d8fc <memcpy>
 800e0da:	4631      	mov	r1, r6
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff ff35 	bl	800df4c <_free_r>
 800e0e2:	e7e9      	b.n	800e0b8 <_realloc_r+0x1c>
 800e0e4:	4635      	mov	r5, r6
 800e0e6:	e7e7      	b.n	800e0b8 <_realloc_r+0x1c>

0800e0e8 <_sbrk_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4c06      	ldr	r4, [pc, #24]	; (800e104 <_sbrk_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	6023      	str	r3, [r4, #0]
 800e0f4:	f7f6 fe04 	bl	8004d00 <_sbrk>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_sbrk_r+0x1a>
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_sbrk_r+0x1a>
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	20008da4 	.word	0x20008da4

0800e108 <__malloc_lock>:
 800e108:	4770      	bx	lr

0800e10a <__malloc_unlock>:
 800e10a:	4770      	bx	lr

0800e10c <_malloc_usable_size_r>:
 800e10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e110:	1f18      	subs	r0, r3, #4
 800e112:	2b00      	cmp	r3, #0
 800e114:	bfbc      	itt	lt
 800e116:	580b      	ldrlt	r3, [r1, r0]
 800e118:	18c0      	addlt	r0, r0, r3
 800e11a:	4770      	bx	lr

0800e11c <_init>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	bf00      	nop
 800e120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e122:	bc08      	pop	{r3}
 800e124:	469e      	mov	lr, r3
 800e126:	4770      	bx	lr

0800e128 <_fini>:
 800e128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12a:	bf00      	nop
 800e12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e12e:	bc08      	pop	{r3}
 800e130:	469e      	mov	lr, r3
 800e132:	4770      	bx	lr
