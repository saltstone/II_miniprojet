
mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002028  0800d794  0800d794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7bc  0800f7bc  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7bc  0800f7bc  0001f7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7c4  0800f7c4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7c4  0800f7c4  0001f7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800f7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ce0  200000bc  0800f888  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d9c  0800f888  00028d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c3f6  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005503  00000000  00000000  0004c4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002590  00000000  00000000  000519e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022f8  00000000  00000000  00053f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3d6  00000000  00000000  00056270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f319  00000000  00000000  00084646  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114e9f  00000000  00000000  000a395f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b87fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1e0  00000000  00000000  001b887c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d77c 	.word	0x0800d77c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	0800d77c 	.word	0x0800d77c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8
 80005e0:	2000012c 	.word	0x2000012c

080005e4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f002 fab0 	bl	8002b54 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f4:	f000 f9b4 	bl	8000960 <ft5336_I2C_InitializeIfRequired>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000628:	2300      	movs	r3, #0
 800062a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800062c:	f000 f998 	bl	8000960 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e010      	b.n	8000658 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	21a8      	movs	r1, #168	; 0xa8
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fa6b 	bl	8002b18 <TS_IO_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b51      	cmp	r3, #81	; 0x51
 800064c:	d101      	bne.n	8000652 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d802      	bhi.n	8000664 <ft5336_ReadID+0x4e>
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0e8      	beq.n	8000636 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f97e 	bl	8000980 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f932 	bl	80008f0 <ft5336_TS_DisableIT>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa35 	bl	8002b18 <TS_IO_Read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	d901      	bls.n	80006ca <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b2db      	uxtb	r3, r3
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000032c 	.word	0x2000032c

080006e8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800070c:	789a      	ldrb	r2, [r3, #2]
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 8000710:	785b      	ldrb	r3, [r3, #1]
 8000712:	429a      	cmp	r2, r3
 8000714:	f080 80cf 	bcs.w	80008b6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000718:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	2b09      	cmp	r3, #9
 800071e:	d871      	bhi.n	8000804 <ft5336_TS_GetXY+0x11c>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <ft5336_TS_GetXY+0x40>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000751 	.word	0x08000751
 800072c:	08000763 	.word	0x08000763
 8000730:	08000775 	.word	0x08000775
 8000734:	08000787 	.word	0x08000787
 8000738:	08000799 	.word	0x08000799
 800073c:	080007ab 	.word	0x080007ab
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007cf 	.word	0x080007cf
 8000748:	080007e1 	.word	0x080007e1
 800074c:	080007f3 	.word	0x080007f3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000750:	2304      	movs	r3, #4
 8000752:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000754:	2303      	movs	r3, #3
 8000756:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000758:	2306      	movs	r3, #6
 800075a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800075c:	2305      	movs	r3, #5
 800075e:	753b      	strb	r3, [r7, #20]
      break;
 8000760:	e051      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000762:	230a      	movs	r3, #10
 8000764:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000766:	2309      	movs	r3, #9
 8000768:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076a:	230c      	movs	r3, #12
 800076c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800076e:	230b      	movs	r3, #11
 8000770:	753b      	strb	r3, [r7, #20]
      break;
 8000772:	e048      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000774:	2310      	movs	r3, #16
 8000776:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000778:	230f      	movs	r3, #15
 800077a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800077c:	2312      	movs	r3, #18
 800077e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000780:	2311      	movs	r3, #17
 8000782:	753b      	strb	r3, [r7, #20]
      break;
 8000784:	e03f      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000786:	2316      	movs	r3, #22
 8000788:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078a:	2315      	movs	r3, #21
 800078c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800078e:	2318      	movs	r3, #24
 8000790:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000792:	2317      	movs	r3, #23
 8000794:	753b      	strb	r3, [r7, #20]
      break;
 8000796:	e036      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000798:	231c      	movs	r3, #28
 800079a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800079c:	231b      	movs	r3, #27
 800079e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a0:	231e      	movs	r3, #30
 80007a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a4:	231d      	movs	r3, #29
 80007a6:	753b      	strb	r3, [r7, #20]
      break;
 80007a8:	e02d      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007aa:	2322      	movs	r3, #34	; 0x22
 80007ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b2:	2324      	movs	r3, #36	; 0x24
 80007b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007b6:	2323      	movs	r3, #35	; 0x23
 80007b8:	753b      	strb	r3, [r7, #20]
      break;
 80007ba:	e024      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c0:	2327      	movs	r3, #39	; 0x27
 80007c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c4:	232a      	movs	r3, #42	; 0x2a
 80007c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007c8:	2329      	movs	r3, #41	; 0x29
 80007ca:	753b      	strb	r3, [r7, #20]
      break;
 80007cc:	e01b      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007ce:	232e      	movs	r3, #46	; 0x2e
 80007d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d2:	232d      	movs	r3, #45	; 0x2d
 80007d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007d6:	2330      	movs	r3, #48	; 0x30
 80007d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007da:	232f      	movs	r3, #47	; 0x2f
 80007dc:	753b      	strb	r3, [r7, #20]
      break;
 80007de:	e012      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e4:	2333      	movs	r3, #51	; 0x33
 80007e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007e8:	2336      	movs	r3, #54	; 0x36
 80007ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007ec:	2335      	movs	r3, #53	; 0x35
 80007ee:	753b      	strb	r3, [r7, #20]
      break;
 80007f0:	e009      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f2:	233a      	movs	r3, #58	; 0x3a
 80007f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007f6:	2339      	movs	r3, #57	; 0x39
 80007f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fa:	233c      	movs	r3, #60	; 0x3c
 80007fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007fe:	233b      	movs	r3, #59	; 0x3b
 8000800:	753b      	strb	r3, [r7, #20]
      break;
 8000802:	e000      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000804:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	7dfa      	ldrb	r2, [r7, #23]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f982 	bl	8002b18 <TS_IO_Read>
 8000814:	4603      	mov	r3, r0
 8000816:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000820:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	7dba      	ldrb	r2, [r7, #22]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f002 f974 	bl	8002b18 <TS_IO_Read>
 8000830:	4603      	mov	r3, r0
 8000832:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800083e:	b21a      	sxth	r2, r3
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 800084e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	7d7a      	ldrb	r2, [r7, #21]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f002 f959 	bl	8002b18 <TS_IO_Read>
 8000866:	4603      	mov	r3, r0
 8000868:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000872:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	7d3a      	ldrb	r2, [r7, #20]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f002 f94b 	bl	8002b18 <TS_IO_Read>
 8000882:	4603      	mov	r3, r0
 8000884:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a0:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008b4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000032c 	.word	0x2000032c
 80008c4:	20000330 	.word	0x20000330

080008c8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	21a4      	movs	r1, #164	; 0xa4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f8fe 	bl	8002ae4 <TS_IO_Write>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	21a4      	movs	r1, #164	; 0xa4
 800090a:	4618      	mov	r0, r3
 800090c:	f002 f8ea 	bl	8002ae4 <TS_IO_Write>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800094e:	781b      	ldrb	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000032c 	.word	0x2000032c

08000960 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000964:	f7ff fff0 	bl	8000948 <ft5336_Get_I2C_InitializedStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800096e:	f002 f8af 	bl	8002ad0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000972:	4b02      	ldr	r3, [pc, #8]	; (800097c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
  }
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000032c 	.word	0x2000032c

08000980 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b0a0      	sub	sp, #128	; 0x80
 80009a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a2:	f003 fe76 	bl	8004692 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a6:	f000 f9e3 	bl	8000d70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009aa:	f001 f885 	bl	8001ab8 <MX_GPIO_Init>
	MX_ADC3_Init();
 80009ae:	f000 fae1 	bl	8000f74 <MX_ADC3_Init>
	MX_I2C1_Init();
 80009b2:	f000 fb8d 	bl	80010d0 <MX_I2C1_Init>
	MX_I2C3_Init();
 80009b6:	f000 fbcb 	bl	8001150 <MX_I2C3_Init>
	MX_LTDC_Init();
 80009ba:	f000 fc09 	bl	80011d0 <MX_LTDC_Init>
	MX_RTC_Init();
 80009be:	f000 fc89 	bl	80012d4 <MX_RTC_Init>
	MX_SPI2_Init();
 80009c2:	f000 fd2d 	bl	8001420 <MX_SPI2_Init>
	MX_TIM1_Init();
 80009c6:	f000 fd69 	bl	800149c <MX_TIM1_Init>
	MX_TIM2_Init();
 80009ca:	f000 fdbb 	bl	8001544 <MX_TIM2_Init>
	MX_TIM3_Init();
 80009ce:	f000 fe07 	bl	80015e0 <MX_TIM3_Init>
	MX_TIM5_Init();
 80009d2:	f000 fe93 	bl	80016fc <MX_TIM5_Init>
	MX_TIM8_Init();
 80009d6:	f000 fedf 	bl	8001798 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 80009da:	f000 ffb7 	bl	800194c <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 80009de:	f000 ffed 	bl	80019bc <MX_USART6_UART_Init>
	MX_ADC1_Init();
 80009e2:	f000 fa75 	bl	8000ed0 <MX_ADC1_Init>
	MX_DAC_Init();
 80009e6:	f000 fb17 	bl	8001018 <MX_DAC_Init>
	MX_UART7_Init();
 80009ea:	f000 ff7f 	bl	80018ec <MX_UART7_Init>
	MX_FMC_Init();
 80009ee:	f001 f815 	bl	8001a1c <MX_FMC_Init>
	MX_DMA2D_Init();
 80009f2:	f000 fb3b 	bl	800106c <MX_DMA2D_Init>
	/* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 80009f6:	f002 f8b9 	bl	8002b6c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80009fe:	2000      	movs	r0, #0
 8000a00:	f002 f94c 	bl	8002c9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a04:	f002 f922 	bl	8002c4c <BSP_LCD_GetXSize>
 8000a08:	4604      	mov	r4, r0
 8000a0a:	f002 f933 	bl	8002c74 <BSP_LCD_GetYSize>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a14:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f002 f93d 	bl	8002c9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a22:	f002 fbe9 	bl	80031f8 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f002 f998 	bl	8002d5c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8000a2c:	4863      	ldr	r0, [pc, #396]	; (8000bbc <main+0x220>)
 8000a2e:	f002 f9f1 	bl	8002e14 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000a32:	4863      	ldr	r0, [pc, #396]	; (8000bc0 <main+0x224>)
 8000a34:	f002 f9d4 	bl	8002de0 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a38:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a3c:	f002 f99e 	bl	8002d7c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 8000a40:	485e      	ldr	r0, [pc, #376]	; (8000bbc <main+0x220>)
 8000a42:	f002 f9b3 	bl	8002dac <BSP_LCD_SetBackColor>

	// ============== affichage sol
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a46:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000a4a:	f002 f997 	bl	8002d7c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, HAUTEUR_SOL, 480, 272 - HAUTEUR_SOL);
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <main+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b299      	uxth	r1, r3
 8000a54:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <main+0x228>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f002 fb4d 	bl	8003104 <BSP_LCD_FillRect>

	// ===============  creation des blocs ==================
	blocs[1] = 1 + (7 << 8) + (6 << 4);
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <main+0x22c>)
 8000a6c:	f240 7261 	movw	r2, #1889	; 0x761
 8000a70:	805a      	strh	r2, [r3, #2]
	blocs[2] = 1 + (6 << 8) + (6 << 4);
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <main+0x22c>)
 8000a74:	f240 6261 	movw	r2, #1633	; 0x661
 8000a78:	809a      	strh	r2, [r3, #4]
	blocs[3] = 1 + (5 << 8) + (6 << 4);
 8000a7a:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <main+0x22c>)
 8000a7c:	f240 5261 	movw	r2, #1377	; 0x561
 8000a80:	80da      	strh	r2, [r3, #6]

	blocs[4] = 1 + (13 << 8) + (6 << 4);
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <main+0x22c>)
 8000a84:	f640 5261 	movw	r2, #3425	; 0xd61
 8000a88:	811a      	strh	r2, [r3, #8]
	blocs[5] = 1 + (12 << 8) + (6 << 4);
 8000a8a:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <main+0x22c>)
 8000a8c:	f640 4261 	movw	r2, #3169	; 0xc61
 8000a90:	815a      	strh	r2, [r3, #10]
	blocs[6] = 1 + (11 << 8) + (6 << 4);
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <main+0x22c>)
 8000a94:	f640 3261 	movw	r2, #2913	; 0xb61
 8000a98:	819a      	strh	r2, [r3, #12]

	blocs[7] = 1 + (10 << 8) + (3 << 4);
 8000a9a:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <main+0x22c>)
 8000a9c:	f640 2231 	movw	r2, #2609	; 0xa31
 8000aa0:	81da      	strh	r2, [r3, #14]
	blocs[8] = 1 + (9 << 8) + (3 << 4);
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <main+0x22c>)
 8000aa4:	f640 1231 	movw	r2, #2353	; 0x931
 8000aa8:	821a      	strh	r2, [r3, #16]
	blocs[9] = 1 + (8 << 8) + (3 << 4);
 8000aaa:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <main+0x22c>)
 8000aac:	f640 0231 	movw	r2, #2097	; 0x831
 8000ab0:	825a      	strh	r2, [r3, #18]

	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000ab2:	4846      	ldr	r0, [pc, #280]	; (8000bcc <main+0x230>)
 8000ab4:	f002 f962 	bl	8002d7c <BSP_LCD_SetTextColor>
	int iterateur_blocs = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ac0:	e02d      	b.n	8000b1e <main+0x182>
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
			iterateur_blocs += 1) {
		if ((blocs[iterateur_blocs] & (15)) != 0) {
 8000ac2:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <main+0x22c>)
 8000ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d022      	beq.n	8000b18 <main+0x17c>
			BSP_LCD_FillRect(
					((blocs[iterateur_blocs] >> 8) & (255)) * blocs_size,
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <main+0x22c>)
 8000ad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <main+0x234>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	fb12 f303 	smulbb	r3, r2, r3
 8000ae8:	b298      	uxth	r0, r3
					blocs_size * ((blocs[iterateur_blocs] >> 4) & (15)),
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <main+0x22c>)
 8000aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <main+0x234>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	fb12 f303 	smulbb	r3, r2, r3
 8000b06:	b299      	uxth	r1, r3
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <main+0x234>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <main+0x234>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f002 faf6 	bl	8003104 <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
 8000b1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000b20:	2b1d      	cmp	r3, #29
 8000b22:	d9ce      	bls.n	8000ac2 <main+0x126>
		}
	}

	// ======== les pieces =========

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000b24:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000b28:	f002 f928 	bl	8002d7c <BSP_LCD_SetTextColor>
	position_pieces[0] = 1 + (7 << 8) + (5 << 4);
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <main+0x238>)
 8000b2e:	f240 7251 	movw	r2, #1873	; 0x751
 8000b32:	801a      	strh	r2, [r3, #0]
	position_pieces[1] = 1 + (6 << 8) + (5 << 4);
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <main+0x238>)
 8000b36:	f240 6251 	movw	r2, #1617	; 0x651
 8000b3a:	805a      	strh	r2, [r3, #2]
	position_pieces[2] = 1 + (5 << 8) + (5 << 4);
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <main+0x238>)
 8000b3e:	f240 5251 	movw	r2, #1361	; 0x551
 8000b42:	809a      	strh	r2, [r3, #4]

	position_pieces[3] = 1 + (8 << 8) + (2 << 4);
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <main+0x238>)
 8000b46:	f640 0221 	movw	r2, #2081	; 0x821
 8000b4a:	80da      	strh	r2, [r3, #6]
	position_pieces[4] = 1 + (9 << 8) + (2 << 4);
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x238>)
 8000b4e:	f640 1221 	movw	r2, #2337	; 0x921
 8000b52:	811a      	strh	r2, [r3, #8]
	position_pieces[5] = 1 + (10 << 8) + (2 << 4);
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <main+0x238>)
 8000b56:	f640 2221 	movw	r2, #2593	; 0xa21
 8000b5a:	815a      	strh	r2, [r3, #10]

	position_pieces[6] = 1 + (11 << 8) + (5 << 4);
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <main+0x238>)
 8000b5e:	f640 3251 	movw	r2, #2897	; 0xb51
 8000b62:	819a      	strh	r2, [r3, #12]
	position_pieces[7] = 1 + (12 << 8) + (5 << 4);
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <main+0x238>)
 8000b66:	f640 4251 	movw	r2, #3153	; 0xc51
 8000b6a:	81da      	strh	r2, [r3, #14]
	position_pieces[8] = 1 + (13 << 8) + (5 << 4);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <main+0x238>)
 8000b6e:	f640 5251 	movw	r2, #3409	; 0xd51
 8000b72:	821a      	strh	r2, [r3, #16]

	position_pieces[9] = 2 + (9 << 8) + (8 << 4);
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <main+0x238>)
 8000b76:	f640 1282 	movw	r2, #2434	; 0x982
 8000b7a:	825a      	strh	r2, [r3, #18]
	position_pieces[10] = 1 + (17 << 8) + (8 << 4);
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <main+0x238>)
 8000b7e:	f241 1281 	movw	r2, #4481	; 0x1181
 8000b82:	829a      	strh	r2, [r3, #20]
	position_pieces[11] = 1 + (15 << 8) + (8 << 4);
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <main+0x238>)
 8000b86:	f640 7281 	movw	r2, #3969	; 0xf81
 8000b8a:	82da      	strh	r2, [r3, #22]
	for (iterateur_blocs = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b90:	e070      	b.n	8000c74 <main+0x2d8>
			iterateur_blocs
			< sizeof(position_pieces) / sizeof(position_pieces[0]);
			iterateur_blocs += 1) {
		if ((position_pieces[iterateur_blocs] & (15)) != 0) {
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <main+0x238>)
 8000b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d065      	beq.n	8000c6e <main+0x2d2>
			if ((position_pieces[iterateur_blocs] & (15)) == 2)BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <main+0x238>)
 8000ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d114      	bne.n	8000bdc <main+0x240>
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <main+0x23c>)
 8000bb4:	f002 f8e2 	bl	8002d7c <BSP_LCD_SetTextColor>
 8000bb8:	e01c      	b.n	8000bf4 <main+0x258>
 8000bba:	bf00      	nop
 8000bbc:	ff8080ff 	.word	0xff8080ff
 8000bc0:	2000003c 	.word	0x2000003c
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	20000334 	.word	0x20000334
 8000bcc:	ffffa500 	.word	0xffffa500
 8000bd0:	2000002c 	.word	0x2000002c
 8000bd4:	20000380 	.word	0x20000380
 8000bd8:	ffff0000 	.word	0xffff0000
			else if ((position_pieces[iterateur_blocs] & (15)) == 1)BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000bdc:	4a59      	ldr	r2, [pc, #356]	; (8000d44 <main+0x3a8>)
 8000bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <main+0x258>
 8000bec:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000bf0:	f002 f8c4 	bl	8002d7c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(
					((position_pieces[iterateur_blocs] >> 8) & (255))
 8000bf4:	4a53      	ldr	r2, [pc, #332]	; (8000d44 <main+0x3a8>)
 8000bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <main+0x3ac>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	fb12 f303 	smulbb	r3, r2, r3
 8000c0a:	b29a      	uxth	r2, r3
					* (blocs_size) + blocs_size / 4,
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	; (8000d48 <main+0x3ac>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da00      	bge.n	8000c16 <main+0x27a>
 8000c14:	3303      	adds	r3, #3
 8000c16:	109b      	asrs	r3, r3, #2
			BSP_LCD_FillRect(
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b298      	uxth	r0, r3
					blocs_size
					* ((position_pieces[iterateur_blocs] >> 4) & (15))
 8000c1e:	4a49      	ldr	r2, [pc, #292]	; (8000d44 <main+0x3a8>)
 8000c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <main+0x3ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	fb12 f303 	smulbb	r3, r2, r3
 8000c3a:	b29a      	uxth	r2, r3
					+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <main+0x3ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da00      	bge.n	8000c46 <main+0x2aa>
 8000c44:	3303      	adds	r3, #3
 8000c46:	109b      	asrs	r3, r3, #2
			BSP_LCD_FillRect(
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b299      	uxth	r1, r3
					+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <main+0x3ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da00      	bge.n	8000c58 <main+0x2bc>
 8000c56:	3301      	adds	r3, #1
 8000c58:	105b      	asrs	r3, r3, #1
			BSP_LCD_FillRect(
 8000c5a:	b29a      	uxth	r2, r3
					+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <main+0x3ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da00      	bge.n	8000c66 <main+0x2ca>
 8000c64:	3301      	adds	r3, #1
 8000c66:	105b      	asrs	r3, r3, #1
			BSP_LCD_FillRect(
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f002 fa4b 	bl	8003104 <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c70:	3301      	adds	r3, #1
 8000c72:	67fb      	str	r3, [r7, #124]	; 0x7c
			< sizeof(position_pieces) / sizeof(position_pieces[0]);
 8000c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000c76:	2b13      	cmp	r3, #19
 8000c78:	d98b      	bls.n	8000b92 <main+0x1f6>
		}
	}

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c7a:	f001 ffe7 	bl	8002c4c <BSP_LCD_GetXSize>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29c      	uxth	r4, r3
 8000c82:	f001 fff7 	bl	8002c74 <BSP_LCD_GetYSize>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 fe81 	bl	8003994 <BSP_TS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex01 */
	osMutexDef(myMutex01);
 8000c92:	2300      	movs	r3, #0
 8000c94:	677b      	str	r3, [r7, #116]	; 0x74
 8000c96:	2300      	movs	r3, #0
 8000c98:	67bb      	str	r3, [r7, #120]	; 0x78
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000c9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a f9bf 	bl	800b022 <osMutexCreate>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <main+0x3b0>)
 8000ca8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000caa:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <main+0x3b4>)
 8000cac:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cb0:	461d      	mov	r5, r3
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00a f94c 	bl	800af62 <osThreadCreate>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <main+0x3b8>)
 8000cce:	601a      	str	r2, [r3, #0]

	/* definition and creation of Player */
	osThreadDef(Player, player, osPriorityNormal, 0, 1024);
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <main+0x3bc>)
 8000cd2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PlayerHandle = osThreadCreate(osThread(Player), NULL);
 8000ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00a f939 	bl	800af62 <osThreadCreate>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <main+0x3c0>)
 8000cf4:	601a      	str	r2, [r3, #0]

	/* definition and creation of Game_over */
	osThreadDef(Game_over, game_over, osPriorityHigh, 0, 128);
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <main+0x3c4>)
 8000cf8:	f107 0420 	add.w	r4, r7, #32
 8000cfc:	461d      	mov	r5, r3
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Game_overHandle = osThreadCreate(osThread(Game_over), NULL);
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00a f926 	bl	800af62 <osThreadCreate>
 8000d16:	4602      	mov	r2, r0
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <main+0x3c8>)
 8000d1a:	601a      	str	r2, [r3, #0]

	/* definition and creation of Pieces */
	osThreadDef(Pieces, pieces, osPriorityNormal, 0, 1024);
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <main+0x3cc>)
 8000d1e:	1d3c      	adds	r4, r7, #4
 8000d20:	461d      	mov	r5, r3
 8000d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PiecesHandle = osThreadCreate(osThread(Pieces), NULL);
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00a f915 	bl	800af62 <osThreadCreate>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <main+0x3d0>)
 8000d3c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000d3e:	f00a f909 	bl	800af54 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000d42:	e7fe      	b.n	8000d42 <main+0x3a6>
 8000d44:	20000380 	.word	0x20000380
 8000d48:	2000002c 	.word	0x2000002c
 8000d4c:	20008c70 	.word	0x20008c70
 8000d50:	0800d7a0 	.word	0x0800d7a0
 8000d54:	200086c8 	.word	0x200086c8
 8000d58:	0800d7c4 	.word	0x0800d7c4
 8000d5c:	20008c6c 	.word	0x20008c6c
 8000d60:	0800d7ec 	.word	0x0800d7ec
 8000d64:	200088c8 	.word	0x200088c8
 8000d68:	0800d810 	.word	0x0800d810
 8000d6c:	20008c74 	.word	0x20008c74

08000d70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0b4      	sub	sp, #208	; 0xd0
 8000d74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00c f8f7 	bl	800cf72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2284      	movs	r2, #132	; 0x84
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00c f8e8 	bl	800cf72 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000da2:	f006 fac7 	bl	8007334 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <SystemClock_Config+0x154>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a46      	ldr	r2, [pc, #280]	; (8000ec4 <SystemClock_Config+0x154>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <SystemClock_Config+0x154>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <SystemClock_Config+0x158>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a41      	ldr	r2, [pc, #260]	; (8000ec8 <SystemClock_Config+0x158>)
 8000dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <SystemClock_Config+0x158>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000dd6:	2309      	movs	r3, #9
 8000dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000df8:	2319      	movs	r3, #25
 8000dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000dfe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 faec 	bl	80073f4 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xb6>
		Error_Handler();
 8000e22:	f001 fcfb 	bl	800281c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000e26:	f006 fa95 	bl	8007354 <HAL_PWREx_EnableOverDrive>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xc4>
		Error_Handler();
 8000e30:	f001 fcf4 	bl	800281c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000e56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fd6d 	bl	800793c <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xfc>
		Error_Handler();
 8000e68:	f001 fcd8 	bl	800281c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <SystemClock_Config+0x15c>)
 8000e6e:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART6
			| RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000e70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e74:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f006 ff4a 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x14a>
		Error_Handler();
 8000eb6:	f001 fcb1 	bl	800281c <Error_Handler>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	37d0      	adds	r7, #208	; 0xd0
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	00015868 	.word	0x00015868

08000ed0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f32:	f003 fbfd 	bl	8004730 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000f3c:	f001 fc6e 	bl	800281c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f52:	f003 fd83 	bl	8004a5c <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000f5c:	f001 fc5e 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200089b4 	.word	0x200089b4
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <MX_ADC3_Init+0x98>)
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <MX_ADC3_Init+0x9c>)
 8000f8a:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_ADC3_Init+0x98>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_ADC3_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_ADC3_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_ADC3_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_ADC3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_ADC3_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_ADC3_Init+0x98>)
 8000fb6:	4a17      	ldr	r2, [pc, #92]	; (8001014 <MX_ADC3_Init+0xa0>)
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_ADC3_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_ADC3_Init+0x98>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_ADC3_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC3_Init+0x98>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_ADC3_Init+0x98>)
 8000fd6:	f003 fbab 	bl	8004730 <HAL_ADC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000fe0:	f001 fc1c 	bl	800281c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_ADC3_Init+0x98>)
 8000ff6:	f003 fd31 	bl	8004a5c <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC3_Init+0x90>
		Error_Handler();
 8001000:	f001 fc0c 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200089fc 	.word	0x200089fc
 8001010:	40012200 	.word	0x40012200
 8001014:	0f000001 	.word	0x0f000001

08001018 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_DAC_Init+0x4c>)
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_DAC_Init+0x50>)
 800102a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_DAC_Init+0x4c>)
 800102e:	f004 f83b 	bl	80050a8 <HAL_DAC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_DAC_Init+0x24>
		Error_Handler();
 8001038:	f001 fbf0 	bl	800281c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_DAC_Init+0x4c>)
 800104c:	f004 f8a2 	bl	8005194 <HAL_DAC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DAC_Init+0x42>
		Error_Handler();
 8001056:	f001 fbe1 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20008ac4 	.word	0x20008ac4
 8001068:	40007400 	.word	0x40007400

0800106c <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <MX_DMA2D_Init+0x60>)
 8001074:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 80010a2:	f004 faad 	bl	8005600 <HAL_DMA2D_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_DMA2D_Init+0x44>
		Error_Handler();
 80010ac:	f001 fbb6 	bl	800281c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 80010b0:	2101      	movs	r1, #1
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_DMA2D_Init+0x5c>)
 80010b4:	f004 fc02 	bl	80058bc <HAL_DMA2D_ConfigLayer>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_DMA2D_Init+0x56>
		Error_Handler();
 80010be:	f001 fbad 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20008bb8 	.word	0x20008bb8
 80010cc:	4002b000 	.word	0x4002b000

080010d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f004 ffea 	bl	80060e4 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001116:	f001 fb81 	bl	800281c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f005 fcf9 	bl	8006b14 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001128:	f001 fb78 	bl	800281c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f005 fd3b 	bl	8006baa <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800113a:	f001 fb6f 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000883c 	.word	0x2000883c
 8001148:	40005400 	.word	0x40005400
 800114c:	00c0eaff 	.word	0x00c0eaff

08001150 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <MX_I2C3_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_I2C3_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <MX_I2C3_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_I2C3_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C3_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_I2C3_Init+0x74>)
 800118c:	f004 ffaa 	bl	80060e4 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C3_Init+0x4a>
		Error_Handler();
 8001196:	f001 fb41 	bl	800281c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_I2C3_Init+0x74>)
 800119e:	f005 fcb9 	bl	8006b14 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80011a8:	f001 fb38 	bl	800281c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_I2C3_Init+0x74>)
 80011b0:	f005 fcfb 	bl	8006baa <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C3_Init+0x6e>
		Error_Handler();
 80011ba:	f001 fb2f 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200086cc 	.word	0x200086cc
 80011c8:	40005c00 	.word	0x40005c00
 80011cc:	00c0eaff 	.word	0x00c0eaff

080011d0 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2234      	movs	r2, #52	; 0x34
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00b fec8 	bl	800cf72 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <MX_LTDC_Init+0xfc>)
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <MX_LTDC_Init+0x100>)
 80011e6:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <MX_LTDC_Init+0xfc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <MX_LTDC_Init+0xfc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_LTDC_Init+0xfc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <MX_LTDC_Init+0xfc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001208:	2209      	movs	r2, #9
 800120a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_LTDC_Init+0xfc>)
 800120e:	2235      	movs	r2, #53	; 0x35
 8001210:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001214:	220b      	movs	r2, #11
 8001216:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_LTDC_Init+0xfc>)
 800121a:	f240 2215 	movw	r2, #533	; 0x215
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001222:	f240 121b 	movw	r2, #283	; 0x11b
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_LTDC_Init+0xfc>)
 800122a:	f240 2235 	movw	r2, #565	; 0x235
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001232:	f240 121d 	movw	r2, #285	; 0x11d
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_LTDC_Init+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_LTDC_Init+0xfc>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001250:	481e      	ldr	r0, [pc, #120]	; (80012cc <MX_LTDC_Init+0xfc>)
 8001252:	f005 fcf7 	bl	8006c44 <HAL_LTDC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_LTDC_Init+0x90>
		Error_Handler();
 800125c:	f001 fade 	bl	800281c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001264:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001268:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800126e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001272:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001274:	2302      	movs	r3, #2
 8001276:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001278:	23ff      	movs	r3, #255	; 0xff
 800127a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001280:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001284:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001286:	2307      	movs	r3, #7
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800128a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001290:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001296:	f44f 7388 	mov.w	r3, #272	; 0x110
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_LTDC_Init+0xfc>)
 80012b6:	f005 fe57 	bl	8006f68 <HAL_LTDC_ConfigLayer>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_LTDC_Init+0xf4>
		Error_Handler();
 80012c0:	f001 faac 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	; 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000890c 	.word	0x2000890c
 80012d0:	40016800 	.word	0x40016800

080012d4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b092      	sub	sp, #72	; 0x48
 80012d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80012da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = { 0 };
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = { 0 };
 80012f0:	463b      	mov	r3, r7
 80012f2:	222c      	movs	r2, #44	; 0x2c
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00b fe3b 	bl	800cf72 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <MX_RTC_Init+0x144>)
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <MX_RTC_Init+0x148>)
 8001300:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001302:	4b45      	ldr	r3, [pc, #276]	; (8001418 <MX_RTC_Init+0x144>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <MX_RTC_Init+0x144>)
 800130a:	227f      	movs	r2, #127	; 0x7f
 800130c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <MX_RTC_Init+0x144>)
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <MX_RTC_Init+0x144>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <MX_RTC_Init+0x144>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <MX_RTC_Init+0x144>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001326:	483c      	ldr	r0, [pc, #240]	; (8001418 <MX_RTC_Init+0x144>)
 8001328:	f007 f8fa 	bl	8008520 <HAL_RTC_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_RTC_Init+0x62>
		Error_Handler();
 8001332:	f001 fa73 	bl	800281c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001354:	2201      	movs	r2, #1
 8001356:	4619      	mov	r1, r3
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <MX_RTC_Init+0x144>)
 800135a:	f007 f95d 	bl	8008618 <HAL_RTC_SetTime>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_RTC_Init+0x94>
		Error_Handler();
 8001364:	f001 fa5a 	bl	800281c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001368:	2301      	movs	r3, #1
 800136a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 800136e:	2301      	movs	r3, #1
 8001370:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001374:	2301      	movs	r3, #1
 8001376:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	4823      	ldr	r0, [pc, #140]	; (8001418 <MX_RTC_Init+0x144>)
 800138a:	f007 fa03 	bl	8008794 <HAL_RTC_SetDate>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_RTC_Init+0xc4>
		Error_Handler();
 8001394:	f001 fa42 	bl	800281c <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001398:	2300      	movs	r3, #0
 800139a:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 800139c:	2300      	movs	r3, #0
 800139e:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80013c8:	463b      	mov	r3, r7
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <MX_RTC_Init+0x144>)
 80013d0:	f007 fa88 	bl	80088e4 <HAL_RTC_SetAlarm>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_RTC_Init+0x10a>
		Error_Handler();
 80013da:	f001 fa1f 	bl	800281c <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80013de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80013e4:	463b      	mov	r3, r7
 80013e6:	2201      	movs	r2, #1
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <MX_RTC_Init+0x144>)
 80013ec:	f007 fa7a 	bl	80088e4 <HAL_RTC_SetAlarm>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_RTC_Init+0x126>
		Error_Handler();
 80013f6:	f001 fa11 	bl	800281c <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 80013fa:	2202      	movs	r2, #2
 80013fc:	2100      	movs	r1, #0
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_RTC_Init+0x144>)
 8001400:	f007 fbfa 	bl	8008bf8 <HAL_RTCEx_SetTimeStamp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0x13a>
			RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
		Error_Handler();
 800140a:	f001 fa07 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3748      	adds	r7, #72	; 0x48
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20008ad8 	.word	0x20008ad8
 800141c:	40002800 	.word	0x40002800

08001420 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_SPI2_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_SPI2_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_SPI2_Init+0x74>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI2_Init+0x74>)
 800143a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800143e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI2_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_SPI2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI2_Init+0x74>)
 800144e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001452:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_SPI2_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI2_Init+0x74>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_SPI2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI2_Init+0x74>)
 800147a:	2208      	movs	r2, #8
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_SPI2_Init+0x74>)
 8001480:	f007 fc8f 	bl	8008da2 <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI2_Init+0x6e>
		Error_Handler();
 800148a:	f001 f9c7 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20008718 	.word	0x20008718
 8001498:	40003800 	.word	0x40003800

0800149c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM1_Init+0xa0>)
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <MX_TIM1_Init+0xa4>)
 80014be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM1_Init+0xa0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM1_Init+0xa0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM1_Init+0xa0>)
 80014ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_TIM1_Init+0xa0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_TIM1_Init+0xa0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_TIM1_Init+0xa0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80014e6:	4815      	ldr	r0, [pc, #84]	; (800153c <MX_TIM1_Init+0xa0>)
 80014e8:	f007 fced 	bl	8008ec6 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x5a>
		Error_Handler();
 80014f2:	f001 f993 	bl	800281c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	480e      	ldr	r0, [pc, #56]	; (800153c <MX_TIM1_Init+0xa0>)
 8001504:	f007 ffa0 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0x76>
		Error_Handler();
 800150e:	f001 f985 	bl	800281c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM1_Init+0xa0>)
 8001524:	f008 fcd4 	bl	8009ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800152e:	f001 f975 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20008af8 	.word	0x20008af8
 8001540:	40010000 	.word	0x40010000

08001544 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_TIM2_Init+0x98>)
 8001564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001568:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM2_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM2_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM2_Init+0x98>)
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_TIM2_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM2_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MX_TIM2_Init+0x98>)
 800158c:	f007 fc9b 	bl	8008ec6 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x56>
		Error_Handler();
 8001596:	f001 f941 	bl	800281c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM2_Init+0x98>)
 80015a8:	f007 ff4e 	bl	8009448 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x72>
		Error_Handler();
 80015b2:	f001 f933 	bl	800281c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM2_Init+0x98>)
 80015c4:	f008 fc84 	bl	8009ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80015ce:	f001 f925 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3720      	adds	r7, #32
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20008bf8 	.word	0x20008bf8

080015e0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80015f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001624:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <MX_TIM3_Init+0x118>)
 8001626:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <MX_TIM3_Init+0x114>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001634:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <MX_TIM3_Init+0x114>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001648:	482a      	ldr	r0, [pc, #168]	; (80016f4 <MX_TIM3_Init+0x114>)
 800164a:	f007 fc3c 	bl	8008ec6 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x78>
		Error_Handler();
 8001654:	f001 f8e2 	bl	800281c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800165e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001662:	4619      	mov	r1, r3
 8001664:	4823      	ldr	r0, [pc, #140]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001666:	f007 feef 	bl	8009448 <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001670:	f001 f8d4 	bl	800281c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001674:	481f      	ldr	r0, [pc, #124]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001676:	f007 fc7b 	bl	8008f70 <HAL_TIM_PWM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0xa4>
		Error_Handler();
 8001680:	f001 f8cc 	bl	800281c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 800168c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001690:	4619      	mov	r1, r3
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MX_TIM3_Init+0x114>)
 8001694:	f007 ff92 	bl	80095bc <HAL_TIM_SlaveConfigSynchro>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM3_Init+0xc2>
		Error_Handler();
 800169e:	f001 f8bd 	bl	800281c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	4619      	mov	r1, r3
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_TIM3_Init+0x114>)
 80016b2:	f008 fc0d 	bl	8009ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 80016bc:	f001 f8ae 	bl	800281c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	; 0x60
 80016c2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM3_Init+0x114>)
 80016d8:	f007 fd9e 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 80016e2:	f001 f89b 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM3_Init+0x114>)
 80016e8:	f002 fd08 	bl	80040fc <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3750      	adds	r7, #80	; 0x50
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200088cc 	.word	0x200088cc
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_TIM5_Init+0x94>)
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <MX_TIM5_Init+0x98>)
 800171e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_TIM5_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_TIM5_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_TIM5_Init+0x94>)
 800172e:	f04f 32ff 	mov.w	r2, #4294967295
 8001732:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_TIM5_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_TIM5_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <MX_TIM5_Init+0x94>)
 8001742:	f007 fbc0 	bl	8008ec6 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM5_Init+0x54>
		Error_Handler();
 800174c:	f001 f866 	bl	800281c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_TIM5_Init+0x94>)
 800175e:	f007 fe73 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM5_Init+0x70>
		Error_Handler();
 8001768:	f001 f858 	bl	800281c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_TIM5_Init+0x94>)
 800177a:	f008 fba9 	bl	8009ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001784:	f001 f84a 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20008888 	.word	0x20008888
 8001794:	40000c00 	.word	0x40000c00

08001798 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b09a      	sub	sp, #104	; 0x68
 800179c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]
 80017ca:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	222c      	movs	r2, #44	; 0x2c
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00b fbcd 	bl	800cf72 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017da:	4a43      	ldr	r2, [pc, #268]	; (80018e8 <MX_TIM8_Init+0x150>)
 80017dc:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80017de:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f0:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001804:	4837      	ldr	r0, [pc, #220]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001806:	f007 fb5e 	bl	8008ec6 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM8_Init+0x7c>
		Error_Handler();
 8001810:	f001 f804 	bl	800281c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 800181a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800181e:	4619      	mov	r1, r3
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001822:	f007 fe11 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM8_Init+0x98>
		Error_Handler();
 800182c:	f000 fff6 	bl	800281c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001830:	482c      	ldr	r0, [pc, #176]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001832:	f007 fb9d 	bl	8008f70 <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0xa8>
		Error_Handler();
 800183c:	f000 ffee 	bl	800281c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800184c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001850:	4619      	mov	r1, r3
 8001852:	4824      	ldr	r0, [pc, #144]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001854:	f008 fb3c 	bl	8009ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800185e:	f000 ffdd 	bl	800281c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800187a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187e:	220c      	movs	r2, #12
 8001880:	4619      	mov	r1, r3
 8001882:	4818      	ldr	r0, [pc, #96]	; (80018e4 <MX_TIM8_Init+0x14c>)
 8001884:	f007 fcc8 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800188e:	f000 ffc5 	bl	800281c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018aa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80018c8:	f008 fb90 	bl	8009fec <HAL_TIMEx_ConfigBreakDeadTime>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM8_Init+0x13e>
			!= HAL_OK) {
		Error_Handler();
 80018d2:	f000 ffa3 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <MX_TIM8_Init+0x14c>)
 80018d8:	f002 fc10 	bl	80040fc <HAL_TIM_MspPostInit>

}
 80018dc:	bf00      	nop
 80018de:	3768      	adds	r7, #104	; 0x68
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200087fc 	.word	0x200087fc
 80018e8:	40010400 	.word	0x40010400

080018ec <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_UART7_Init+0x58>)
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <MX_UART7_Init+0x5c>)
 80018f4:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_UART7_Init+0x58>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_UART7_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_UART7_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_UART7_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_UART7_Init+0x58>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_UART7_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_UART7_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_UART7_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_UART7_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_UART7_Init+0x58>)
 8001930:	f008 fbf8 	bl	800a124 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_UART7_Init+0x52>
		Error_Handler();
 800193a:	f000 ff6f 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000877c 	.word	0x2000877c
 8001948:	40007800 	.word	0x40007800

0800194c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <MX_USART1_UART_Init+0x6c>)
 8001954:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
			| UART_ADVFEATURE_DMADISABLEONERROR_INIT;
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
	huart1.AdvancedInit.DMADisableonRxError =
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 8001998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c
			UART_ADVFEATURE_DMA_DISABLEONRXERROR;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART1_UART_Init+0x68>)
 80019a0:	f008 fbc0 	bl	800a124 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x62>
		Error_Handler();
 80019aa:	f000 ff37 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20008a44 	.word	0x20008a44
 80019b8:	40011000 	.word	0x40011000

080019bc <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_USART6_UART_Init+0x5c>)
 80019c4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART6_UART_Init+0x58>)
 8001a00:	f008 fb90 	bl	800a124 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART6_UART_Init+0x52>
		Error_Handler();
 8001a0a:	f000 ff07 	bl	800281c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20008b38 	.word	0x20008b38
 8001a18:	40011400 	.word	0x40011400

08001a1c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]
 8001a32:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <MX_FMC_Init+0x98>)
 8001a38:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a48:	2204      	movs	r2, #4
 8001a4a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a4e:	2210      	movs	r2, #16
 8001a50:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8001a76:	2310      	movs	r3, #16
 8001a78:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8001a82:	2310      	movs	r3, #16
 8001a84:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8001a86:	2310      	movs	r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8001a8e:	2310      	movs	r3, #16
 8001a90:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_FMC_Init+0x94>)
 8001a98:	f007 f904 	bl	8008ca4 <HAL_SDRAM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_FMC_Init+0x8a>
		Error_Handler();
 8001aa2:	f000 febb 	bl	800281c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20008c38 	.word	0x20008c38
 8001ab4:	a0000140 	.word	0xa0000140

08001ab8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b090      	sub	sp, #64	; 0x40
 8001abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4aaf      	ldr	r2, [pc, #700]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4bad      	ldr	r3, [pc, #692]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4baa      	ldr	r3, [pc, #680]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4aa9      	ldr	r2, [pc, #676]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4ba7      	ldr	r3, [pc, #668]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4ba4      	ldr	r3, [pc, #656]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4aa3      	ldr	r2, [pc, #652]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b16:	4b9e      	ldr	r3, [pc, #632]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a9d      	ldr	r2, [pc, #628]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b9b      	ldr	r3, [pc, #620]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b2e:	4b98      	ldr	r3, [pc, #608]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a97      	ldr	r2, [pc, #604]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a91      	ldr	r2, [pc, #580]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a8b      	ldr	r2, [pc, #556]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001b76:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a85      	ldr	r2, [pc, #532]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba6:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a73      	ldr	r2, [pc, #460]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <MX_GPIO_Init+0x2d8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2160      	movs	r1, #96	; 0x60
 8001bda:	486e      	ldr	r0, [pc, #440]	; (8001d94 <MX_GPIO_Init+0x2dc>)
 8001bdc:	f004 fa68 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001be0:	2201      	movs	r2, #1
 8001be2:	2120      	movs	r1, #32
 8001be4:	486c      	ldr	r0, [pc, #432]	; (8001d98 <MX_GPIO_Init+0x2e0>)
 8001be6:	f004 fa63 	bl	80060b0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2108      	movs	r1, #8
 8001bee:	486a      	ldr	r0, [pc, #424]	; (8001d98 <MX_GPIO_Init+0x2e0>)
 8001bf0:	f004 fa5e 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2108      	movs	r1, #8
 8001bf8:	4868      	ldr	r0, [pc, #416]	; (8001d9c <MX_GPIO_Init+0x2e4>)
 8001bfa:	f004 fa59 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2108      	movs	r1, #8
 8001c02:	4867      	ldr	r0, [pc, #412]	; (8001da0 <MX_GPIO_Init+0x2e8>)
 8001c04:	f004 fa54 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	4863      	ldr	r0, [pc, #396]	; (8001d9c <MX_GPIO_Init+0x2e4>)
 8001c10:	f004 fa4e 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 8001c14:	2200      	movs	r2, #0
 8001c16:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001c1a:	4862      	ldr	r0, [pc, #392]	; (8001da4 <MX_GPIO_Init+0x2ec>)
 8001c1c:	f004 fa48 	bl	80060b0 <HAL_GPIO_WritePin>
			LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin | LED18_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2108      	movs	r1, #8
 8001c24:	4860      	ldr	r0, [pc, #384]	; (8001da8 <MX_GPIO_Init+0x2f0>)
 8001c26:	f004 fa43 	bl	80060b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4855      	ldr	r0, [pc, #340]	; (8001d94 <MX_GPIO_Init+0x2dc>)
 8001c3e:	f003 ff6b 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
	 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D2_Pin
 8001c42:	f643 0323 	movw	r3, #14371	; 0x3823
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c54:	230a      	movs	r3, #10
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4853      	ldr	r0, [pc, #332]	; (8001dac <MX_GPIO_Init+0x2f4>)
 8001c60:	f003 ff5a 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP2_Pin BP1_Pin */
	GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin;
 8001c64:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	484d      	ldr	r0, [pc, #308]	; (8001db0 <MX_GPIO_Init+0x2f8>)
 8001c7a:	f003 ff4d 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED14_Pin LED15_Pin */
	GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8001c7e:	2360      	movs	r3, #96	; 0x60
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	483f      	ldr	r0, [pc, #252]	; (8001d94 <MX_GPIO_Init+0x2dc>)
 8001c96:	f003 ff3f 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4841      	ldr	r0, [pc, #260]	; (8001db4 <MX_GPIO_Init+0x2fc>)
 8001cb0:	f003 ff32 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <MX_GPIO_Init+0x300>)
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4834      	ldr	r0, [pc, #208]	; (8001d98 <MX_GPIO_Init+0x2e0>)
 8001cc8:	f003 ff26 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8001ccc:	2328      	movs	r3, #40	; 0x28
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	482d      	ldr	r0, [pc, #180]	; (8001d98 <MX_GPIO_Init+0x2e0>)
 8001ce4:	f003 ff18 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LCD_DISP_Pin;
 8001ce8:	f241 0308 	movw	r3, #4104	; 0x1008
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4826      	ldr	r0, [pc, #152]	; (8001d9c <MX_GPIO_Init+0x2e4>)
 8001d02:	f003 ff09 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4828      	ldr	r0, [pc, #160]	; (8001dbc <MX_GPIO_Init+0x304>)
 8001d1c:	f003 fefc 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001d20:	2308      	movs	r3, #8
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	481a      	ldr	r0, [pc, #104]	; (8001da0 <MX_GPIO_Init+0x2e8>)
 8001d38:	f003 feee 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <MX_GPIO_Init+0x2e0>)
 8001d50:	f003 fee2 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001d54:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d66:	4619      	mov	r1, r3
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <MX_GPIO_Init+0x2ec>)
 8001d6a:	f003 fed5 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
	 LED2_Pin LED18_Pin */
	GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8001d6e:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
			| LED2_Pin | LED18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_GPIO_Init+0x2ec>)
 8001d88:	f003 fec6 	bl	8005b18 <HAL_GPIO_Init>
 8001d8c:	e018      	b.n	8001dc0 <MX_GPIO_Init+0x308>
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40022800 	.word	0x40022800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	10120000 	.word	0x10120000
 8001dbc:	40020800 	.word	0x40020800

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <MX_GPIO_Init+0x3c0>)
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_GPIO_Init+0x3c4>)
 8001dd6:	f003 fe9f 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dea:	230a      	movs	r3, #10
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df2:	4619      	mov	r1, r3
 8001df4:	4822      	ldr	r0, [pc, #136]	; (8001e80 <MX_GPIO_Init+0x3c8>)
 8001df6:	f003 fe8f 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
	GPIO_InitStruct.Pin = BP_JOYSTICK_Pin | RMII_RXER_Pin;
 8001dfa:	2384      	movs	r3, #132	; 0x84
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481d      	ldr	r0, [pc, #116]	; (8001e84 <MX_GPIO_Init+0x3cc>)
 8001e0e:	f003 fe83 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001e12:	2305      	movs	r3, #5
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e22:	230a      	movs	r3, #10
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4816      	ldr	r0, [pc, #88]	; (8001e88 <MX_GPIO_Init+0x3d0>)
 8001e2e:	f003 fe73 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : EXT_RST_Pin */
	GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001e32:	2308      	movs	r3, #8
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <MX_GPIO_Init+0x3cc>)
 8001e4a:	f003 fe65 	bl	8005b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001e4e:	2328      	movs	r3, #40	; 0x28
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e5e:	230a      	movs	r3, #10
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <MX_GPIO_Init+0x3d4>)
 8001e6a:	f003 fe55 	bl	8005b18 <HAL_GPIO_Init>

}
 8001e6e:	bf00      	nop
 8001e70:	3740      	adds	r7, #64	; 0x40
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021c00 	.word	0x40021c00
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f009 f8ae 	bl	800affa <osDelay>
 8001e9e:	e7fb      	b.n	8001e98 <StartDefaultTask+0x8>

08001ea0 <jump.12881>:
	int bloc_x;
	int bloc_y;

	char text[5];

	void jump(uint8_t etat_saut) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	4662      	mov	r2, ip
 8001eac:	f8c7 c000 	str.w	ip, [r7]
		if (etat_saut == 0) {
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <jump.12881+0x1a>
			joueur_dy = 10.5;
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <jump.12881+0x28>)
 8001eb8:	6013      	str	r3, [r2, #0]
		}
	}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	41280000 	.word	0x41280000

08001ecc <player>:
void player(void const *argument) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b09a      	sub	sp, #104	; 0x68
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ed8:	613b      	str	r3, [r7, #16]
	const TickType_t xFrequency = 20;
 8001eda:	2314      	movs	r3, #20
 8001edc:	657b      	str	r3, [r7, #84]	; 0x54
	xLastWakeTime = xTaskGetTickCount();
 8001ede:	f00a f833 	bl	800bf48 <xTaskGetTickCount>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t etat_saut = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t etat_bouton_saut = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t etat_bouton_saut_old = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	float joueur_dy = 0;
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
	float joueur_dx = 0;
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
	float joueur_dy_limite = -15;
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <player+0x2a0>)
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
	float gravite = 0.6;
 8001f1e:	4b94      	ldr	r3, [pc, #592]	; (8002170 <player+0x2a4>)
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
	float joueur_x = 0;
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	663b      	str	r3, [r7, #96]	; 0x60
	float joueur_y = HAUTEUR_SOL - joueur_height;
 8001f28:	4b92      	ldr	r3, [pc, #584]	; (8002174 <player+0x2a8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <player+0x2ac>)
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float joueur_x_old = 0;
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
	float joueur_y_old = HAUTEUR_SOL - joueur_height;
 8001f44:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <player+0x2a8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a8b      	ldr	r2, [pc, #556]	; (8002178 <player+0x2ac>)
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	uint16_t joystick_x = 2077;
 8001f5a:	f640 031d 	movw	r3, #2077	; 0x81d
 8001f5e:	877b      	strh	r3, [r7, #58]	; 0x3a
	int iterateur_blocs_collision = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Infinite loop */
	for (;;) {

		joueur_x_old = position_joueur[0];
 8001f64:	4b85      	ldr	r3, [pc, #532]	; (800217c <player+0x2b0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		joueur_y_old = position_joueur[1];
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <player+0x2b0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		joueur_x = position_joueur[0];
 8001f84:	4b7d      	ldr	r3, [pc, #500]	; (800217c <player+0x2b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		joueur_y = position_joueur[1];
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <player+0x2b0>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		etat_bouton_saut_old = etat_bouton_saut;
 8001fa4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001fa8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		etat_bouton_saut = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb0:	4873      	ldr	r0, [pc, #460]	; (8002180 <player+0x2b4>)
 8001fb2:	f004 f865 	bl	8006080 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		if ((etat_bouton_saut == 0) && (etat_bouton_saut_old == 1)) {
 8001fbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d110      	bne.n	8001fe6 <player+0x11a>
 8001fc4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10c      	bne.n	8001fe6 <player+0x11a>
			jump(etat_saut);
 8001fcc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	469c      	mov	ip, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f7ff ff62 	bl	8001ea0 <jump.12881>
			etat_saut = etat_saut + 1;
 8001fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		//recuperation du joystick
		sConfig.Channel = ADC_CHANNEL_8;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	61fb      	str	r3, [r7, #28]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4864      	ldr	r0, [pc, #400]	; (8002184 <player+0x2b8>)
 8001ff2:	f002 fd33 	bl	8004a5c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001ff6:	4863      	ldr	r0, [pc, #396]	; (8002184 <player+0x2b8>)
 8001ff8:	f002 fbde 	bl	80047b8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001ffc:	bf00      	nop
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	4860      	ldr	r0, [pc, #384]	; (8002184 <player+0x2b8>)
 8002002:	f002 fc99 	bl	8004938 <HAL_ADC_PollForConversion>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f8      	bne.n	8001ffe <player+0x132>
			;
		//joystick_y = HAL_ADC_GetValue(&hadc3);

		HAL_ADC_Start(&hadc1);
 800200c:	485e      	ldr	r0, [pc, #376]	; (8002188 <player+0x2bc>)
 800200e:	f002 fbd3 	bl	80047b8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8002012:	bf00      	nop
 8002014:	2164      	movs	r1, #100	; 0x64
 8002016:	485c      	ldr	r0, [pc, #368]	; (8002188 <player+0x2bc>)
 8002018:	f002 fc8e 	bl	8004938 <HAL_ADC_PollForConversion>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f8      	bne.n	8002014 <player+0x148>
			;
		joystick_x = HAL_ADC_GetValue(&hadc1);
 8002022:	4859      	ldr	r0, [pc, #356]	; (8002188 <player+0x2bc>)
 8002024:	f002 fd0c 	bl	8004a40 <HAL_ADC_GetValue>
 8002028:	4603      	mov	r3, r0
 800202a:	877b      	strh	r3, [r7, #58]	; 0x3a

		// ========== maj coord player ================

		joueur_dx = -(joystick_x - 2077) * 20 * 270 / (1000 * 2077);
 800202c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800202e:	f640 031d 	movw	r3, #2077	; 0x81d
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	f241 5218 	movw	r2, #5400	; 0x1518
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <player+0x2c0>)
 800203e:	fb82 1203 	smull	r1, r2, r2, r3
 8002042:	441a      	add	r2, r3
 8002044:	1512      	asrs	r2, r2, #20
 8002046:	17db      	asrs	r3, r3, #31
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		joueur_x = joueur_x + joueur_dx;
 8002056:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800205a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800205e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002062:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		joueur_dy =
				(float) ((joueur_dy - gravite)
 8002066:	ed97 7a03 	vldr	s14, [r7, #12]
 800206a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800206e:	ee77 7a67 	vsub.f32	s15, s14, s15
						* (joueur_dy_limite < (joueur_dy - gravite))
 8002072:	edd7 6a03 	vldr	s13, [r7, #12]
 8002076:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800207a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800207e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002082:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d502      	bpl.n	8002092 <player+0x1c6>
 800208c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002090:	e001      	b.n	8002096 <player+0x1ca>
 8002092:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002190 <player+0x2c4>
 8002096:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ joueur_dy_limite
						* (joueur_dy_limite >= (joueur_dy - gravite)));
 800209a:	edd7 6a03 	vldr	s13, [r7, #12]
 800209e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020a6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80020aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	db02      	blt.n	80020ba <player+0x1ee>
 80020b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020b8:	e001      	b.n	80020be <player+0x1f2>
 80020ba:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002190 <player+0x2c4>
 80020be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
		joueur_dy =
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	edc7 7a03 	vstr	s15, [r7, #12]
		joueur_y = joueur_y - joueur_dy;
 80020ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80020d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		if (joueur_y >= HAUTEUR_SOL - joueur_height) {
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <player+0x2a8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <player+0x2ac>)
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80020f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	db0d      	blt.n	800211a <player+0x24e>
			joueur_y = HAUTEUR_SOL - joueur_height;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <player+0x2a8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <player+0x2ac>)
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002110:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			etat_saut = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		// bounds of screen
		if (joueur_x <= 0)
 800211a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800211e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d803      	bhi.n	8002130 <player+0x264>
			joueur_x = 0;
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
 800212e:	e01a      	b.n	8002166 <player+0x29a>
		else if (joueur_x + joueur_width >= 480)
 8002130:	4b18      	ldr	r3, [pc, #96]	; (8002194 <player+0x2c8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002198 <player+0x2cc>
 8002148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002150:	db09      	blt.n	8002166 <player+0x29a>
			joueur_x = 480 - joueur_width;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <player+0x2c8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002162:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

		//================ collisions ============

		for (iterateur_blocs_collision = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
 800216a:	e141      	b.n	80023f0 <player+0x524>
 800216c:	c1700000 	.word	0xc1700000
 8002170:	3f19999a 	.word	0x3f19999a
 8002174:	20000028 	.word	0x20000028
 8002178:	20000030 	.word	0x20000030
 800217c:	20000370 	.word	0x20000370
 8002180:	40020000 	.word	0x40020000
 8002184:	200089fc 	.word	0x200089fc
 8002188:	200089b4 	.word	0x200089b4
 800218c:	813dee19 	.word	0x813dee19
 8002190:	00000000 	.word	0x00000000
 8002194:	20000031 	.word	0x20000031
 8002198:	43f00000 	.word	0x43f00000
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
				iterateur_blocs_collision += 1) {
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 800219c:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <player+0x4cc>)
 800219e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
							* blocs_size;
 80021aa:	4a7c      	ldr	r2, [pc, #496]	; (800239c <player+0x4d0>)
 80021ac:	6812      	ldr	r2, [r2, #0]
			bloc_x = ((blocs[iterateur_blocs_collision] >> 8 & 255))
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 80021b4:	4a78      	ldr	r2, [pc, #480]	; (8002398 <player+0x4cc>)
 80021b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f003 030f 	and.w	r3, r3, #15
							* blocs_size;
 80021c4:	4a75      	ldr	r2, [pc, #468]	; (800239c <player+0x4d0>)
 80021c6:	6812      	ldr	r2, [r2, #0]
			bloc_y = ((blocs[iterateur_blocs_collision] >> 4 & 15))
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30

			if (!((bloc_x >= joueur_x + joueur_width)
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <player+0x4d4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80021e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	bfac      	ite	ge
 80021f6:	2301      	movge	r3, #1
 80021f8:	2300      	movlt	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80f1 	beq.w	80023ea <player+0x51e>
					|| (bloc_x + blocs_size <= joueur_x)
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <player+0x4d0>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	4413      	add	r3, r2
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002218:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800221c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	bfac      	ite	ge
 8002226:	2301      	movge	r3, #1
 8002228:	2300      	movlt	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f083 0301 	eor.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80d9 	beq.w	80023ea <player+0x51e>
					|| (bloc_y >= joueur_y + joueur_height)
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <player+0x4d8>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800224e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	bfac      	ite	ge
 8002260:	2301      	movge	r3, #1
 8002262:	2300      	movlt	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80bc 	beq.w	80023ea <player+0x51e>
					|| (bloc_y + blocs_size <= joueur_y))) {
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <player+0x4d0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	4413      	add	r3, r2
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002282:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	bfac      	ite	ge
 8002290:	2301      	movge	r3, #1
 8002292:	2300      	movlt	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f083 0301 	eor.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
			if (!((bloc_x >= joueur_x + joueur_width)
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80a4 	beq.w	80023ea <player+0x51e>

				if (joueur_y + joueur_height + joueur_dy - 2 < bloc_y) {
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <player+0x4d8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d511      	bpl.n	80022fe <player+0x432>
					joueur_dy = 0;
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
					joueur_y = bloc_y - joueur_height;
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <player+0x4d8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
					etat_saut = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022fc:	e075      	b.n	80023ea <player+0x51e>
				} else if (joueur_y > bloc_y + blocs_size - joueur_dy) {
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <player+0x4d0>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	4413      	add	r3, r2
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800231a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	dd0d      	ble.n	8002340 <player+0x474>
					joueur_dy = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
					joueur_y = bloc_y + blocs_size;
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <player+0x4d0>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	4413      	add	r3, r2
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800233e:	e054      	b.n	80023ea <player+0x51e>
				} else if ((joueur_x + joueur_width - 8 < bloc_x)
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <player+0x4d4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002354:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002358:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	d51b      	bpl.n	80023a8 <player+0x4dc>
						&& (joueur_dx > 0)) {
 8002370:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	dd14      	ble.n	80023a8 <player+0x4dc>

					joueur_x = bloc_x - joueur_width;
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <player+0x4d4>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002390:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8002394:	e029      	b.n	80023ea <player+0x51e>
 8002396:	bf00      	nop
 8002398:	20000334 	.word	0x20000334
 800239c:	2000002c 	.word	0x2000002c
 80023a0:	20000031 	.word	0x20000031
 80023a4:	20000030 	.word	0x20000030
				} else if ((joueur_x > bloc_x + blocs_size - 8)
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <player+0x634>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ae:	4413      	add	r3, r2
 80023b0:	3b08      	subs	r3, #8
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80023be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	dd10      	ble.n	80023ea <player+0x51e>
						&& (joueur_dx < 0)) {
 80023c8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d509      	bpl.n	80023ea <player+0x51e>

					joueur_x = bloc_x + blocs_size;
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <player+0x634>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	4413      	add	r3, r2
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				iterateur_blocs_collision += 1) {
 80023ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ec:	3301      	adds	r3, #1
 80023ee:	65bb      	str	r3, [r7, #88]	; 0x58
				iterateur_blocs_collision < sizeof(blocs) / sizeof(blocs[0]);
 80023f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		for (iterateur_blocs_collision = 0;
 80023f2:	2b1d      	cmp	r3, #29
 80023f4:	f67f aed2 	bls.w	800219c <player+0x2d0>
		}

		//=============== affichage


		sprintf(text, "x %d", vies);
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <player+0x638>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4941      	ldr	r1, [pc, #260]	; (8002508 <player+0x63c>)
 8002404:	4618      	mov	r0, r3
 8002406:	f00a fdbd 	bl	800cf84 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800240a:	4840      	ldr	r0, [pc, #256]	; (800250c <player+0x640>)
 800240c:	f000 fcb6 	bl	8002d7c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(433,5,blocs_size / 2, blocs_size / 2);
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <player+0x634>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	da00      	bge.n	800241a <player+0x54e>
 8002418:	3301      	adds	r3, #1
 800241a:	105b      	asrs	r3, r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <player+0x634>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da00      	bge.n	8002428 <player+0x55c>
 8002426:	3301      	adds	r3, #1
 8002428:	105b      	asrs	r3, r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	2105      	movs	r1, #5
 800242e:	f240 10b1 	movw	r0, #433	; 0x1b1
 8002432:	f000 fe67 	bl	8003104 <BSP_LCD_FillRect>
		BSP_LCD_DisplayStringAt(450,6, (uint8_t*) text,LEFT_MODE );
 8002436:	f107 0214 	add.w	r2, r7, #20
 800243a:	2303      	movs	r3, #3
 800243c:	2106      	movs	r1, #6
 800243e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002442:	f000 fd53 	bl	8002eec <BSP_LCD_DisplayStringAt>

		taskENTER_CRITICAL();
 8002446:	f00a fa9f 	bl	800c988 <vPortEnterCritical>
		position_joueur[0] = (uint16_t) joueur_x;
 800244a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800244e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002452:	ee17 3a90 	vmov	r3, s15
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <player+0x644>)
 800245c:	601a      	str	r2, [r3, #0]
		position_joueur[1] = (uint16_t) joueur_y;
 800245e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002466:	ee17 3a90 	vmov	r3, s15
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <player+0x644>)
 8002470:	605a      	str	r2, [r3, #4]
		position_joueur[2] = (uint16_t) joueur_x_old;
 8002472:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247a:	ee17 3a90 	vmov	r3, s15
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4b23      	ldr	r3, [pc, #140]	; (8002510 <player+0x644>)
 8002484:	609a      	str	r2, [r3, #8]
		position_joueur[3] = (uint16_t) joueur_y_old;
 8002486:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800248a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248e:	ee17 3a90 	vmov	r3, s15
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <player+0x644>)
 8002498:	60da      	str	r2, [r3, #12]
		taskEXIT_CRITICAL();
 800249a:	f00a faa7 	bl	800c9ec <vPortExitCritical>

		BSP_LCD_SelectLayer(1);
 800249e:	2001      	movs	r0, #1
 80024a0:	f000 fc5c 	bl	8002d5c <BSP_LCD_SelectLayer>
		taskENTER_CRITICAL();
 80024a4:	f00a fa70 	bl	800c988 <vPortEnterCritical>
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 80024a8:	481a      	ldr	r0, [pc, #104]	; (8002514 <player+0x648>)
 80024aa:	f000 fc67 	bl	8002d7c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) position_joueur[2], (uint16_t) position_joueur[3],
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <player+0x644>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	b298      	uxth	r0, r3
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <player+0x644>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	b299      	uxth	r1, r3
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <player+0x64c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <player+0x650>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f000 fe1d 	bl	8003104 <BSP_LCD_FillRect>
				joueur_width, joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80024ca:	4810      	ldr	r0, [pc, #64]	; (800250c <player+0x640>)
 80024cc:	f000 fc56 	bl	8002d7c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) position_joueur[0], (uint16_t) position_joueur[1], joueur_width,
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <player+0x644>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b298      	uxth	r0, r3
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <player+0x644>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	b299      	uxth	r1, r3
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <player+0x64c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <player+0x650>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f000 fe0c 	bl	8003104 <BSP_LCD_FillRect>
				joueur_height);
		taskEXIT_CRITICAL();
 80024ec:	f00a fa7e 	bl	800c9ec <vPortExitCritical>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80024f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024f6:	4618      	mov	r0, r3
 80024f8:	f009 fb62 	bl	800bbc0 <vTaskDelayUntil>
		joueur_x_old = position_joueur[0];
 80024fc:	e532      	b.n	8001f64 <player+0x98>
 80024fe:	bf00      	nop
 8002500:	2000002c 	.word	0x2000002c
 8002504:	20000032 	.word	0x20000032
 8002508:	0800d82c 	.word	0x0800d82c
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	20000370 	.word	0x20000370
 8002514:	ff8080ff 	.word	0xff8080ff
 8002518:	20000031 	.word	0x20000031
 800251c:	20000030 	.word	0x20000030

08002520 <game_over>:
 * @brief Function implementing the Game_over thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_game_over */
void game_over(void const *argument) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN game_over */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8002528:	2314      	movs	r3, #20
 800252a:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800252c:	f009 fd0c 	bl	800bf48 <xTaskGetTickCount>
 8002530:	4603      	mov	r3, r0
 8002532:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f009 fb40 	bl	800bbc0 <vTaskDelayUntil>
 8002540:	e7f8      	b.n	8002534 <game_over+0x14>
	...

08002544 <pieces>:
 * @brief Function implementing the Pieces thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_pieces */
void pieces(void const *argument) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN pieces */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 800254c:	2314      	movs	r3, #20
 800254e:	623b      	str	r3, [r7, #32]
	xLastWakeTime = xTaskGetTickCount();
 8002550:	f009 fcfa 	bl	800bf48 <xTaskGetTickCount>
 8002554:	4603      	mov	r3, r0
 8002556:	617b      	str	r3, [r7, #20]

	uint16_t iterateur_piece_collision = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t joueur_x = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	83fb      	strh	r3, [r7, #30]
	uint16_t joueur_y = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	83bb      	strh	r3, [r7, #28]
	uint16_t piece_x = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	837b      	strh	r3, [r7, #26]
	uint16_t piece_y = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	833b      	strh	r3, [r7, #24]

	uint8_t piece_compteur = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char text[12];

	/* Infinite loop */
	for (;;) {

		for (iterateur_piece_collision = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002576:	e0e0      	b.n	800273a <pieces+0x1f6>
				iterateur_piece_collision
				< sizeof(position_pieces) / sizeof(position_pieces[0]);
				iterateur_piece_collision += 1) {
			piece_x = ((position_pieces[iterateur_piece_collision] >> 8 & 255))
 8002578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800257a:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <pieces+0x290>)
 800257c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
							* blocs_size + blocs_size / 4;
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b94      	ldr	r3, [pc, #592]	; (80027d8 <pieces+0x294>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	fb12 f303 	smulbb	r3, r2, r3
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b91      	ldr	r3, [pc, #580]	; (80027d8 <pieces+0x294>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	da00      	bge.n	800259a <pieces+0x56>
 8002598:	3303      	adds	r3, #3
 800259a:	109b      	asrs	r3, r3, #2
 800259c:	b29b      	uxth	r3, r3
			piece_x = ((position_pieces[iterateur_piece_collision] >> 8 & 255))
 800259e:	4413      	add	r3, r2
 80025a0:	837b      	strh	r3, [r7, #26]
			piece_y = ((position_pieces[iterateur_piece_collision] >> 4 & 15))
 80025a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025a4:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <pieces+0x290>)
 80025a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
							* blocs_size + blocs_size / 4;
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <pieces+0x294>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	fb12 f303 	smulbb	r3, r2, r3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <pieces+0x294>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da00      	bge.n	80025ca <pieces+0x86>
 80025c8:	3303      	adds	r3, #3
 80025ca:	109b      	asrs	r3, r3, #2
 80025cc:	b29b      	uxth	r3, r3
			piece_y = ((position_pieces[iterateur_piece_collision] >> 4 & 15))
 80025ce:	4413      	add	r3, r2
 80025d0:	833b      	strh	r3, [r7, #24]
			joueur_x = position_joueur[0];
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <pieces+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	83fb      	strh	r3, [r7, #30]
			joueur_y = position_joueur[1];
 80025d8:	4b80      	ldr	r3, [pc, #512]	; (80027dc <pieces+0x298>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	83bb      	strh	r3, [r7, #28]

			if ((!((piece_x >= joueur_x + joueur_width)
 80025de:	8b7a      	ldrh	r2, [r7, #26]
 80025e0:	8bfb      	ldrh	r3, [r7, #30]
 80025e2:	497f      	ldr	r1, [pc, #508]	; (80027e0 <pieces+0x29c>)
 80025e4:	7809      	ldrb	r1, [r1, #0]
 80025e6:	440b      	add	r3, r1
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f280 80a3 	bge.w	8002734 <pieces+0x1f0>
					|| (piece_x + blocs_size / 2 <= joueur_x)
 80025ee:	8b7a      	ldrh	r2, [r7, #26]
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <pieces+0x294>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da00      	bge.n	80025fa <pieces+0xb6>
 80025f8:	3301      	adds	r3, #1
 80025fa:	105b      	asrs	r3, r3, #1
 80025fc:	441a      	add	r2, r3
 80025fe:	8bfb      	ldrh	r3, [r7, #30]
 8002600:	429a      	cmp	r2, r3
 8002602:	f340 8097 	ble.w	8002734 <pieces+0x1f0>
					|| (piece_y >= joueur_y + joueur_height)
 8002606:	8b3a      	ldrh	r2, [r7, #24]
 8002608:	8bbb      	ldrh	r3, [r7, #28]
 800260a:	4976      	ldr	r1, [pc, #472]	; (80027e4 <pieces+0x2a0>)
 800260c:	7809      	ldrb	r1, [r1, #0]
 800260e:	440b      	add	r3, r1
 8002610:	429a      	cmp	r2, r3
 8002612:	f280 808f 	bge.w	8002734 <pieces+0x1f0>
					|| (piece_y + blocs_size / 2 <= joueur_y)))
 8002616:	8b3a      	ldrh	r2, [r7, #24]
 8002618:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <pieces+0x294>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	da00      	bge.n	8002622 <pieces+0xde>
 8002620:	3301      	adds	r3, #1
 8002622:	105b      	asrs	r3, r3, #1
 8002624:	441a      	add	r2, r3
 8002626:	8bbb      	ldrh	r3, [r7, #28]
			if ((!((piece_x >= joueur_x + joueur_width)
 8002628:	429a      	cmp	r2, r3
 800262a:	f340 8083 	ble.w	8002734 <pieces+0x1f0>
					&& ((position_pieces[iterateur_piece_collision] & 15) != 0)) {
 800262e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002630:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <pieces+0x290>)
 8002632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	2b00      	cmp	r3, #0
 800263c:	d07a      	beq.n	8002734 <pieces+0x1f0>

				if ((position_pieces[iterateur_piece_collision] & (15)) == 1) piece_compteur = piece_compteur+1;
 800263e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002640:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <pieces+0x290>)
 8002642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <pieces+0x116>
 800264e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002652:	3301      	adds	r3, #1
 8002654:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002658:	e022      	b.n	80026a0 <pieces+0x15c>
				else if ((position_pieces[iterateur_piece_collision] & (15)) == 2)
 800265a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800265c:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <pieces+0x290>)
 800265e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	2b02      	cmp	r3, #2
 8002668:	d11a      	bne.n	80026a0 <pieces+0x15c>
				{
					taskENTER_CRITICAL();
 800266a:	f00a f98d 	bl	800c988 <vPortEnterCritical>
					//etat_joueur = 2;
					joueur_height = 32;
 800266e:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <pieces+0x2a0>)
 8002670:	2220      	movs	r2, #32
 8002672:	701a      	strb	r2, [r3, #0]
					position_joueur[1] -= 8;
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <pieces+0x298>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	3b08      	subs	r3, #8
 800267a:	4a58      	ldr	r2, [pc, #352]	; (80027dc <pieces+0x298>)
 800267c:	6053      	str	r3, [r2, #4]
					position_joueur[3] -= 8;
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <pieces+0x298>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3b08      	subs	r3, #8
 8002684:	4a55      	ldr	r2, [pc, #340]	; (80027dc <pieces+0x298>)
 8002686:	60d3      	str	r3, [r2, #12]
					taskEXIT_CRITICAL();
 8002688:	f00a f9b0 	bl	800c9ec <vPortExitCritical>
					position_pieces[iterateur_piece_collision] = position_pieces[iterateur_piece_collision]-1;
 800268c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800268e:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <pieces+0x290>)
 8002690:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002696:	3a01      	subs	r2, #1
 8002698:	b291      	uxth	r1, r2
 800269a:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <pieces+0x290>)
 800269c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}


				position_pieces[iterateur_piece_collision] = position_pieces[iterateur_piece_collision]- 1;
 80026a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026a2:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <pieces+0x290>)
 80026a4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80026a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026aa:	3a01      	subs	r2, #1
 80026ac:	b291      	uxth	r1, r2
 80026ae:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <pieces+0x290>)
 80026b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 80026b4:	484c      	ldr	r0, [pc, #304]	; (80027e8 <pieces+0x2a4>)
 80026b6:	f000 fb61 	bl	8002d7c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(
									((position_pieces[iterateur_piece_collision] >> 8) & (255))
 80026ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026bc:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <pieces+0x290>)
 80026be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				BSP_LCD_FillRect(
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <pieces+0x294>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	fb12 f303 	smulbb	r3, r2, r3
 80026d0:	b29a      	uxth	r2, r3
									* (blocs_size) + blocs_size / 4,
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <pieces+0x294>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da00      	bge.n	80026dc <pieces+0x198>
 80026da:	3303      	adds	r3, #3
 80026dc:	109b      	asrs	r3, r3, #2
				BSP_LCD_FillRect(
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	b298      	uxth	r0, r3
									blocs_size
									* ((position_pieces[iterateur_piece_collision] >> 4) & (15))
 80026e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <pieces+0x290>)
 80026e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				BSP_LCD_FillRect(
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <pieces+0x294>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	fb12 f303 	smulbb	r3, r2, r3
 8002700:	b29a      	uxth	r2, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <pieces+0x294>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	da00      	bge.n	800270c <pieces+0x1c8>
 800270a:	3303      	adds	r3, #3
 800270c:	109b      	asrs	r3, r3, #2
				BSP_LCD_FillRect(
 800270e:	b29b      	uxth	r3, r3
 8002710:	4413      	add	r3, r2
 8002712:	b299      	uxth	r1, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <pieces+0x294>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	da00      	bge.n	800271e <pieces+0x1da>
 800271c:	3301      	adds	r3, #1
 800271e:	105b      	asrs	r3, r3, #1
				BSP_LCD_FillRect(
 8002720:	b29a      	uxth	r2, r3
									+ blocs_size / 4, blocs_size / 2, blocs_size / 2);
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <pieces+0x294>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	da00      	bge.n	800272c <pieces+0x1e8>
 800272a:	3301      	adds	r3, #1
 800272c:	105b      	asrs	r3, r3, #1
				BSP_LCD_FillRect(
 800272e:	b29b      	uxth	r3, r3
 8002730:	f000 fce8 	bl	8003104 <BSP_LCD_FillRect>
				iterateur_piece_collision += 1) {
 8002734:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002736:	3301      	adds	r3, #1
 8002738:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iterateur_piece_collision = 0;
 800273a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800273c:	2b13      	cmp	r3, #19
 800273e:	f67f af1b 	bls.w	8002578 <pieces+0x34>
			}

		}
		taskENTER_CRITICAL();
 8002742:	f00a f921 	bl	800c988 <vPortEnterCritical>
		if (piece_compteur >= 5){
 8002746:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800274a:	2b04      	cmp	r3, #4
 800274c:	d911      	bls.n	8002772 <pieces+0x22e>
			piece_compteur = piece_compteur % 5;
 800274e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <pieces+0x2a8>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	0899      	lsrs	r1, r3, #2
 800275a:	460b      	mov	r3, r1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			vies = vies + 1;
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <pieces+0x2ac>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <pieces+0x2ac>)
 8002770:	701a      	strb	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 8002772:	f00a f93b 	bl	800c9ec <vPortExitCritical>
		sprintf(text, "x %d", piece_compteur);
 8002776:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	491d      	ldr	r1, [pc, #116]	; (80027f4 <pieces+0x2b0>)
 8002780:	4618      	mov	r0, r3
 8002782:	f00a fbff 	bl	800cf84 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002786:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800278a:	f000 faf7 	bl	8002d7c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(5,5,blocs_size / 2, blocs_size / 2);
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <pieces+0x294>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da00      	bge.n	8002798 <pieces+0x254>
 8002796:	3301      	adds	r3, #1
 8002798:	105b      	asrs	r3, r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <pieces+0x294>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	da00      	bge.n	80027a6 <pieces+0x262>
 80027a4:	3301      	adds	r3, #1
 80027a6:	105b      	asrs	r3, r3, #1
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2105      	movs	r1, #5
 80027ac:	2005      	movs	r0, #5
 80027ae:	f000 fca9 	bl	8003104 <BSP_LCD_FillRect>
		BSP_LCD_DisplayStringAt(blocs_size,6, (uint8_t*) text,LEFT_MODE );
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <pieces+0x294>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b298      	uxth	r0, r3
 80027b8:	f107 0208 	add.w	r2, r7, #8
 80027bc:	2303      	movs	r3, #3
 80027be:	2106      	movs	r1, #6
 80027c0:	f000 fb94 	bl	8002eec <BSP_LCD_DisplayStringAt>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f009 f9f8 	bl	800bbc0 <vTaskDelayUntil>
		for (iterateur_piece_collision = 0;
 80027d0:	e6cf      	b.n	8002572 <pieces+0x2e>
 80027d2:	bf00      	nop
 80027d4:	20000380 	.word	0x20000380
 80027d8:	2000002c 	.word	0x2000002c
 80027dc:	20000370 	.word	0x20000370
 80027e0:	20000031 	.word	0x20000031
 80027e4:	20000030 	.word	0x20000030
 80027e8:	ff8080ff 	.word	0xff8080ff
 80027ec:	cccccccd 	.word	0xcccccccd
 80027f0:	20000032 	.word	0x20000032
 80027f4:	0800d82c 	.word	0x0800d82c

080027f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800280a:	f001 ff4f 	bl	80046ac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40001000 	.word	0x40001000

0800281c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002822:	e7fe      	b.n	8002822 <Error_Handler+0x6>

08002824 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08c      	sub	sp, #48	; 0x30
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a51      	ldr	r2, [pc, #324]	; (8002974 <I2Cx_MspInit+0x150>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d14d      	bne.n	80028d0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <I2Cx_MspInit+0x154>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <I2Cx_MspInit+0x154>)
 800283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283e:	6313      	str	r3, [r2, #48]	; 0x30
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <I2Cx_MspInit+0x154>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002858:	2302      	movs	r3, #2
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800285c:	2304      	movs	r3, #4
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	4619      	mov	r1, r3
 8002866:	4845      	ldr	r0, [pc, #276]	; (800297c <I2Cx_MspInit+0x158>)
 8002868:	f003 f956 	bl	8005b18 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800286c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	4619      	mov	r1, r3
 8002878:	4840      	ldr	r0, [pc, #256]	; (800297c <I2Cx_MspInit+0x158>)
 800287a:	f003 f94d 	bl	8005b18 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <I2Cx_MspInit+0x154>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <I2Cx_MspInit+0x154>)
 8002884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <I2Cx_MspInit+0x154>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <I2Cx_MspInit+0x154>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a37      	ldr	r2, [pc, #220]	; (8002978 <I2Cx_MspInit+0x154>)
 800289c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80028a2:	4b35      	ldr	r3, [pc, #212]	; (8002978 <I2Cx_MspInit+0x154>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a34      	ldr	r2, [pc, #208]	; (8002978 <I2Cx_MspInit+0x154>)
 80028a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028ac:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	210f      	movs	r1, #15
 80028b2:	2048      	movs	r0, #72	; 0x48
 80028b4:	f002 fbce 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80028b8:	2048      	movs	r0, #72	; 0x48
 80028ba:	f002 fbe7 	bl	800508c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	210f      	movs	r1, #15
 80028c2:	2049      	movs	r0, #73	; 0x49
 80028c4:	f002 fbc6 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80028c8:	2049      	movs	r0, #73	; 0x49
 80028ca:	f002 fbdf 	bl	800508c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80028ce:	e04d      	b.n	800296c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <I2Cx_MspInit+0x154>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4a28      	ldr	r2, [pc, #160]	; (8002978 <I2Cx_MspInit+0x154>)
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	6313      	str	r3, [r2, #48]	; 0x30
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <I2Cx_MspInit+0x154>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80028e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ec:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80028ee:	2312      	movs	r3, #18
 80028f0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80028f6:	2302      	movs	r3, #2
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80028fa:	2304      	movs	r3, #4
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	4619      	mov	r1, r3
 8002904:	481e      	ldr	r0, [pc, #120]	; (8002980 <I2Cx_MspInit+0x15c>)
 8002906:	f003 f907 	bl	8005b18 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800290a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	481a      	ldr	r0, [pc, #104]	; (8002980 <I2Cx_MspInit+0x15c>)
 8002918:	f003 f8fe 	bl	8005b18 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <I2Cx_MspInit+0x154>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <I2Cx_MspInit+0x154>)
 8002922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <I2Cx_MspInit+0x154>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <I2Cx_MspInit+0x154>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <I2Cx_MspInit+0x154>)
 800293a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <I2Cx_MspInit+0x154>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <I2Cx_MspInit+0x154>)
 8002946:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800294a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	210f      	movs	r1, #15
 8002950:	201f      	movs	r0, #31
 8002952:	f002 fb7f 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002956:	201f      	movs	r0, #31
 8002958:	f002 fb98 	bl	800508c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	210f      	movs	r1, #15
 8002960:	2020      	movs	r0, #32
 8002962:	f002 fb77 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002966:	2020      	movs	r0, #32
 8002968:	f002 fb90 	bl	800508c <HAL_NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	3730      	adds	r7, #48	; 0x30
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200003a8 	.word	0x200003a8
 8002978:	40023800 	.word	0x40023800
 800297c:	40021c00 	.word	0x40021c00
 8002980:	40020400 	.word	0x40020400

08002984 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f003 fe97 	bl	80066c0 <HAL_I2C_GetState>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d125      	bne.n	80029e4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a14      	ldr	r2, [pc, #80]	; (80029ec <I2Cx_Init+0x68>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d103      	bne.n	80029a8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <I2Cx_Init+0x6c>)
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e002      	b.n	80029ae <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <I2Cx_Init+0x70>)
 80029ac:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <I2Cx_Init+0x74>)
 80029b2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff23 	bl	8002824 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f003 fb80 	bl	80060e4 <HAL_I2C_Init>
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200003a8 	.word	0x200003a8
 80029f0:	40005c00 	.word	0x40005c00
 80029f4:	40005400 	.word	0x40005400
 80029f8:	40912732 	.word	0x40912732

080029fc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af04      	add	r7, sp, #16
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	72fb      	strb	r3, [r7, #11]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	b299      	uxth	r1, r3
 8002a1e:	88f8      	ldrh	r0, [r7, #6]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4603      	mov	r3, r0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f003 fd2a 	bl	800648c <HAL_I2C_Mem_Read>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002a42:	7afb      	ldrb	r3, [r7, #11]
 8002a44:	4619      	mov	r1, r3
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f832 	bl	8002ab0 <I2Cx_Error>
  }
  return status;    
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b08a      	sub	sp, #40	; 0x28
 8002a5a:	af04      	add	r7, sp, #16
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	4608      	mov	r0, r1
 8002a60:	4611      	mov	r1, r2
 8002a62:	461a      	mov	r2, r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	72fb      	strb	r3, [r7, #11]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	813b      	strh	r3, [r7, #8]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	b299      	uxth	r1, r3
 8002a78:	88f8      	ldrh	r0, [r7, #6]
 8002a7a:	893a      	ldrh	r2, [r7, #8]
 8002a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f003 fbe9 	bl	8006264 <HAL_I2C_Mem_Write>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f805 	bl	8002ab0 <I2Cx_Error>
  }
  return status;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f003 fba1 	bl	8006204 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ff5e 	bl	8002984 <I2Cx_Init>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <TS_IO_Init+0x10>)
 8002ad6:	f7ff ff55 	bl	8002984 <I2Cx_Init>
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200003a8 	.word	0x200003a8

08002ae4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
 8002aee:	460b      	mov	r3, r1
 8002af0:	71bb      	strb	r3, [r7, #6]
 8002af2:	4613      	mov	r3, r2
 8002af4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	79f9      	ldrb	r1, [r7, #7]
 8002afc:	2301      	movs	r3, #1
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	1d7b      	adds	r3, r7, #5
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2301      	movs	r3, #1
 8002b06:	4803      	ldr	r0, [pc, #12]	; (8002b14 <TS_IO_Write+0x30>)
 8002b08:	f7ff ffa5 	bl	8002a56 <I2Cx_WriteMultiple>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200003a8 	.word	0x200003a8

08002b18 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460a      	mov	r2, r1
 8002b22:	71fb      	strb	r3, [r7, #7]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	79f9      	ldrb	r1, [r7, #7]
 8002b32:	2301      	movs	r3, #1
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f107 030f 	add.w	r3, r7, #15
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	4804      	ldr	r0, [pc, #16]	; (8002b50 <TS_IO_Read+0x38>)
 8002b40:	f7ff ff5c 	bl	80029fc <I2Cx_ReadMultiple>

  return read_value;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200003a8 	.word	0x200003a8

08002b54 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f001 fdc5 	bl	80046ec <HAL_Delay>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b72:	2228      	movs	r2, #40	; 0x28
 8002b74:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b78:	2209      	movs	r2, #9
 8002b7a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b7e:	2235      	movs	r2, #53	; 0x35
 8002b80:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b84:	220b      	movs	r2, #11
 8002b86:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b8a:	f240 121b 	movw	r2, #283	; 0x11b
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b92:	f240 2215 	movw	r2, #533	; 0x215
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002b9a:	f240 121d 	movw	r2, #285	; 0x11d
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002ba2:	f240 2235 	movw	r2, #565	; 0x235
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4823      	ldr	r0, [pc, #140]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bac:	f000 fc1c 	bl	80033e8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bba:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002bbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <BSP_LCD_Init+0xd0>)
 8002bf4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002bf6:	4810      	ldr	r0, [pc, #64]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002bf8:	f004 f9f4 	bl	8006fe4 <HAL_LTDC_GetState>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002c02:	2100      	movs	r1, #0
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002c06:	f000 fb15 	bl	8003234 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002c0a:	480b      	ldr	r0, [pc, #44]	; (8002c38 <BSP_LCD_Init+0xcc>)
 8002c0c:	f004 f81a 	bl	8006c44 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c10:	2201      	movs	r2, #1
 8002c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c16:	480a      	ldr	r0, [pc, #40]	; (8002c40 <BSP_LCD_Init+0xd4>)
 8002c18:	f003 fa4a 	bl	80060b0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	2108      	movs	r1, #8
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <BSP_LCD_Init+0xd8>)
 8002c22:	f003 fa45 	bl	80060b0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002c26:	f000 fcff 	bl	8003628 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <BSP_LCD_Init+0xdc>)
 8002c2c:	f000 f8d8 	bl	8002de0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20008c78 	.word	0x20008c78
 8002c3c:	40016800 	.word	0x40016800
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40022800 	.word	0x40022800
 8002c48:	20000034 	.word	0x20000034

08002c4c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <BSP_LCD_GetXSize+0x20>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a06      	ldr	r2, [pc, #24]	; (8002c70 <BSP_LCD_GetXSize+0x24>)
 8002c56:	2134      	movs	r1, #52	; 0x34
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	681b      	ldr	r3, [r3, #0]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	20000434 	.word	0x20000434
 8002c70:	20008c78 	.word	0x20008c78

08002c74 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <BSP_LCD_GetYSize+0x20>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <BSP_LCD_GetYSize+0x24>)
 8002c7e:	2134      	movs	r1, #52	; 0x34
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3364      	adds	r3, #100	; 0x64
 8002c88:	681b      	ldr	r3, [r3, #0]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000434 	.word	0x20000434
 8002c98:	20008c78 	.word	0x20008c78

08002c9c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b090      	sub	sp, #64	; 0x40
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002cac:	f7ff ffce 	bl	8002c4c <BSP_LCD_GetXSize>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002cb8:	f7ff ffdc 	bl	8002c74 <BSP_LCD_GetYSize>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002cc8:	23ff      	movs	r3, #255	; 0xff
 8002cca:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ce2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002cec:	f7ff ffae 	bl	8002c4c <BSP_LCD_GetXSize>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002cf4:	f7ff ffbe 	bl	8002c74 <BSP_LCD_GetYSize>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	4619      	mov	r1, r3
 8002d04:	4812      	ldr	r0, [pc, #72]	; (8002d50 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002d06:	f004 f92f 	bl	8006f68 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	4911      	ldr	r1, [pc, #68]	; (8002d54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3304      	adds	r3, #4
 8002d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	490c      	ldr	r1, [pc, #48]	; (8002d54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3308      	adds	r3, #8
 8002d30:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002d32:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	4907      	ldr	r1, [pc, #28]	; (8002d54 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002d46:	601a      	str	r2, [r3, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	3740      	adds	r7, #64	; 0x40
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20008c78 	.word	0x20008c78
 8002d54:	20000438 	.word	0x20000438
 8002d58:	20000034 	.word	0x20000034

08002d5c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <BSP_LCD_SelectLayer+0x1c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6013      	str	r3, [r2, #0]
} 
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000434 	.word	0x20000434

08002d7c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <BSP_LCD_SetTextColor+0x28>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <BSP_LCD_SetTextColor+0x2c>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	20000434 	.word	0x20000434
 8002da8:	20000438 	.word	0x20000438

08002dac <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <BSP_LCD_SetBackColor+0x2c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4908      	ldr	r1, [pc, #32]	; (8002ddc <BSP_LCD_SetBackColor+0x30>)
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000434 	.word	0x20000434
 8002ddc:	20000438 	.word	0x20000438

08002de0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <BSP_LCD_SetFont+0x2c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4908      	ldr	r1, [pc, #32]	; (8002e10 <BSP_LCD_SetFont+0x30>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3308      	adds	r3, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000434 	.word	0x20000434
 8002e10:	20000438 	.word	0x20000438

08002e14 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <BSP_LCD_Clear+0x48>)
 8002e1e:	681c      	ldr	r4, [r3, #0]
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <BSP_LCD_Clear+0x48>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <BSP_LCD_Clear+0x4c>)
 8002e26:	2134      	movs	r1, #52	; 0x34
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	335c      	adds	r3, #92	; 0x5c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461d      	mov	r5, r3
 8002e34:	f7ff ff0a 	bl	8002c4c <BSP_LCD_GetXSize>
 8002e38:	4606      	mov	r6, r0
 8002e3a:	f7ff ff1b 	bl	8002c74 <BSP_LCD_GetYSize>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2300      	movs	r3, #0
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	4632      	mov	r2, r6
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f000 fb9e 	bl	8003590 <LL_FillBuffer>
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5c:	20000434 	.word	0x20000434
 8002e60:	20008c78 	.word	0x20008c78

08002e64 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	80bb      	strh	r3, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <BSP_LCD_DisplayChar+0x80>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <BSP_LCD_DisplayChar+0x84>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3308      	adds	r3, #8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <BSP_LCD_DisplayChar+0x80>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4c14      	ldr	r4, [pc, #80]	; (8002ee8 <BSP_LCD_DisplayChar+0x84>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4423      	add	r3, r4
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ea8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <BSP_LCD_DisplayChar+0x80>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ee8 <BSP_LCD_DisplayChar+0x84>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4423      	add	r3, r4
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	889b      	ldrh	r3, [r3, #4]
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da00      	bge.n	8002eca <BSP_LCD_DisplayChar+0x66>
 8002ec8:	3307      	adds	r3, #7
 8002eca:	10db      	asrs	r3, r3, #3
 8002ecc:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ed0:	18ca      	adds	r2, r1, r3
 8002ed2:	88b9      	ldrh	r1, [r7, #4]
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 faa2 	bl	8003420 <DrawChar>
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd90      	pop	{r4, r7, pc}
 8002ee4:	20000434 	.word	0x20000434
 8002ee8:	20000438 	.word	0x20000438

08002eec <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60ba      	str	r2, [r7, #8]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	81fb      	strh	r3, [r7, #14]
 8002efa:	460b      	mov	r3, r1
 8002efc:	81bb      	strh	r3, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002f02:	2301      	movs	r3, #1
 8002f04:	83fb      	strh	r3, [r7, #30]
 8002f06:	2300      	movs	r3, #0
 8002f08:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002f16:	e002      	b.n	8002f1e <BSP_LCD_DisplayStringAt+0x32>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	617a      	str	r2, [r7, #20]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f6      	bne.n	8002f18 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002f2a:	f7ff fe8f 	bl	8002c4c <BSP_LCD_GetXSize>
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	494f      	ldr	r1, [pc, #316]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3308      	adds	r3, #8
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	889b      	ldrh	r3, [r3, #4]
 8002f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f48:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d01c      	beq.n	8002f8a <BSP_LCD_DisplayStringAt+0x9e>
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d017      	beq.n	8002f84 <BSP_LCD_DisplayStringAt+0x98>
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d12e      	bne.n	8002fb6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	1ad1      	subs	r1, r2, r3
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4843      	ldr	r0, [pc, #268]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4403      	add	r3, r0
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	889b      	ldrh	r3, [r3, #4]
 8002f74:	fb03 f301 	mul.w	r3, r3, r1
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	89fb      	ldrh	r3, [r7, #14]
 8002f7e:	4413      	add	r3, r2
 8002f80:	83fb      	strh	r3, [r7, #30]
      break;
 8002f82:	e01b      	b.n	8002fbc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002f84:	89fb      	ldrh	r3, [r7, #14]
 8002f86:	83fb      	strh	r3, [r7, #30]
      break;
 8002f88:	e018      	b.n	8002fbc <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b299      	uxth	r1, r3
 8002f92:	4b36      	ldr	r3, [pc, #216]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4836      	ldr	r0, [pc, #216]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	889b      	ldrh	r3, [r3, #4]
 8002fa8:	fb11 f303 	smulbb	r3, r1, r3
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	83fb      	strh	r3, [r7, #30]
      break;
 8002fb4:	e002      	b.n	8002fbc <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	83fb      	strh	r3, [r7, #30]
      break;
 8002fba:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002fbc:	8bfb      	ldrh	r3, [r7, #30]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <BSP_LCD_DisplayStringAt+0xde>
 8002fc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da1d      	bge.n	8003006 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002fce:	e01a      	b.n	8003006 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	89b9      	ldrh	r1, [r7, #12]
 8002fd6:	8bfb      	ldrh	r3, [r7, #30]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff43 	bl	8002e64 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4923      	ldr	r1, [pc, #140]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	889a      	ldrh	r2, [r3, #4]
 8002ff4:	8bfb      	ldrh	r3, [r7, #30]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
    i++;
 8003000:	8bbb      	ldrh	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2dc      	uxtb	r4, r3
 8003014:	f7ff fe1a 	bl	8002c4c <BSP_LCD_GetXSize>
 8003018:	4605      	mov	r5, r0
 800301a:	8bb9      	ldrh	r1, [r7, #28]
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4813      	ldr	r0, [pc, #76]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	3308      	adds	r3, #8
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	889b      	ldrh	r3, [r3, #4]
 8003032:	fb03 f301 	mul.w	r3, r3, r1
 8003036:	1aeb      	subs	r3, r5, r3
 8003038:	b299      	uxth	r1, r3
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <BSP_LCD_DisplayStringAt+0x180>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	480c      	ldr	r0, [pc, #48]	; (8003070 <BSP_LCD_DisplayStringAt+0x184>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4403      	add	r3, r0
 800304a:	3308      	adds	r3, #8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	889b      	ldrh	r3, [r3, #4]
 8003050:	4299      	cmp	r1, r3
 8003052:	bf2c      	ite	cs
 8003054:	2301      	movcs	r3, #1
 8003056:	2300      	movcc	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4023      	ands	r3, r4
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1b6      	bne.n	8002fd0 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	bf00      	nop
 800306c:	20000434 	.word	0x20000434
 8003070:	20000438 	.word	0x20000438

08003074 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003074:	b5b0      	push	{r4, r5, r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	603a      	str	r2, [r7, #0]
 800307e:	80fb      	strh	r3, [r7, #6]
 8003080:	460b      	mov	r3, r1
 8003082:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <BSP_LCD_DrawPixel+0x88>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <BSP_LCD_DrawPixel+0x8c>)
 800308a:	2134      	movs	r1, #52	; 0x34
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3348      	adds	r3, #72	; 0x48
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d116      	bne.n	80030c8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <BSP_LCD_DrawPixel+0x88>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <BSP_LCD_DrawPixel+0x8c>)
 80030a0:	2134      	movs	r1, #52	; 0x34
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	335c      	adds	r3, #92	; 0x5c
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	88bd      	ldrh	r5, [r7, #4]
 80030ae:	f7ff fdcd 	bl	8002c4c <BSP_LCD_GetXSize>
 80030b2:	4603      	mov	r3, r0
 80030b4:	fb03 f205 	mul.w	r2, r3, r5
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4413      	add	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4423      	add	r3, r4
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b292      	uxth	r2, r2
 80030c4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80030c6:	e015      	b.n	80030f4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <BSP_LCD_DrawPixel+0x88>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <BSP_LCD_DrawPixel+0x8c>)
 80030ce:	2134      	movs	r1, #52	; 0x34
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	335c      	adds	r3, #92	; 0x5c
 80030d8:	681c      	ldr	r4, [r3, #0]
 80030da:	88bd      	ldrh	r5, [r7, #4]
 80030dc:	f7ff fdb6 	bl	8002c4c <BSP_LCD_GetXSize>
 80030e0:	4603      	mov	r3, r0
 80030e2:	fb03 f205 	mul.w	r2, r3, r5
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4423      	add	r3, r4
 80030ee:	461a      	mov	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bdb0      	pop	{r4, r5, r7, pc}
 80030fc:	20000434 	.word	0x20000434
 8003100:	20008c78 	.word	0x20008c78

08003104 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af02      	add	r7, sp, #8
 800310c:	4604      	mov	r4, r0
 800310e:	4608      	mov	r0, r1
 8003110:	4611      	mov	r1, r2
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	80fb      	strh	r3, [r7, #6]
 8003118:	4603      	mov	r3, r0
 800311a:	80bb      	strh	r3, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4930      	ldr	r1, [pc, #192]	; (80031f0 <BSP_LCD_FillRect+0xec>)
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fe1e 	bl	8002d7c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <BSP_LCD_FillRect+0xf0>)
 8003146:	2134      	movs	r1, #52	; 0x34
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3348      	adds	r3, #72	; 0x48
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d114      	bne.n	8003180 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <BSP_LCD_FillRect+0xf0>)
 800315c:	2134      	movs	r1, #52	; 0x34
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	681c      	ldr	r4, [r3, #0]
 8003168:	f7ff fd70 	bl	8002c4c <BSP_LCD_GetXSize>
 800316c:	4602      	mov	r2, r0
 800316e:	88bb      	ldrh	r3, [r7, #4]
 8003170:	fb03 f202 	mul.w	r2, r3, r2
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4413      	add	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4423      	add	r3, r4
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e013      	b.n	80031a8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <BSP_LCD_FillRect+0xf0>)
 8003186:	2134      	movs	r1, #52	; 0x34
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	681c      	ldr	r4, [r3, #0]
 8003192:	f7ff fd5b 	bl	8002c4c <BSP_LCD_GetXSize>
 8003196:	4602      	mov	r2, r0
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4423      	add	r3, r4
 80031a6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 80031aa:	681c      	ldr	r4, [r3, #0]
 80031ac:	68fd      	ldr	r5, [r7, #12]
 80031ae:	887e      	ldrh	r6, [r7, #2]
 80031b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80031b4:	f7ff fd4a 	bl	8002c4c <BSP_LCD_GetXSize>
 80031b8:	4602      	mov	r2, r0
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	1ad1      	subs	r1, r2, r3
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <BSP_LCD_FillRect+0xe8>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	480b      	ldr	r0, [pc, #44]	; (80031f0 <BSP_LCD_FillRect+0xec>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4403      	add	r3, r0
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	9100      	str	r1, [sp, #0]
 80031d4:	4643      	mov	r3, r8
 80031d6:	4632      	mov	r2, r6
 80031d8:	4629      	mov	r1, r5
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f9d8 	bl	8003590 <LL_FillBuffer>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ea:	bf00      	nop
 80031ec:	20000434 	.word	0x20000434
 80031f0:	20000438 	.word	0x20000438
 80031f4:	20008c78 	.word	0x20008c78

080031f8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <BSP_LCD_DisplayOn+0x30>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <BSP_LCD_DisplayOn+0x30>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800320c:	2201      	movs	r2, #1
 800320e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003212:	4806      	ldr	r0, [pc, #24]	; (800322c <BSP_LCD_DisplayOn+0x34>)
 8003214:	f002 ff4c 	bl	80060b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003218:	2201      	movs	r2, #1
 800321a:	2108      	movs	r1, #8
 800321c:	4804      	ldr	r0, [pc, #16]	; (8003230 <BSP_LCD_DisplayOn+0x38>)
 800321e:	f002 ff47 	bl	80060b0 <HAL_GPIO_WritePin>
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20008c78 	.word	0x20008c78
 800322c:	40022000 	.word	0x40022000
 8003230:	40022800 	.word	0x40022800

08003234 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b090      	sub	sp, #64	; 0x40
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800323e:	4b64      	ldr	r3, [pc, #400]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a63      	ldr	r2, [pc, #396]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b61      	ldr	r3, [pc, #388]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003256:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a5d      	ldr	r2, [pc, #372]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 800325c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800326e:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a57      	ldr	r2, [pc, #348]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003286:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a51      	ldr	r2, [pc, #324]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 800328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800329e:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032b6:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a33      	ldr	r2, [pc, #204]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 8003304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <BSP_LCD_MspInit+0x19c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003316:	2310      	movs	r3, #16
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003322:	2302      	movs	r3, #2
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003326:	230e      	movs	r3, #14
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800332a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800332e:	4619      	mov	r1, r3
 8003330:	4828      	ldr	r0, [pc, #160]	; (80033d4 <BSP_LCD_MspInit+0x1a0>)
 8003332:	f002 fbf1 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003340:	2309      	movs	r3, #9
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003348:	4619      	mov	r1, r3
 800334a:	4823      	ldr	r0, [pc, #140]	; (80033d8 <BSP_LCD_MspInit+0x1a4>)
 800334c:	f002 fbe4 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003350:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800335a:	230e      	movs	r3, #14
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800335e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003362:	4619      	mov	r1, r3
 8003364:	481d      	ldr	r0, [pc, #116]	; (80033dc <BSP_LCD_MspInit+0x1a8>)
 8003366:	f002 fbd7 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800336a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003374:	230e      	movs	r3, #14
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800337c:	4619      	mov	r1, r3
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <BSP_LCD_MspInit+0x1ac>)
 8003380:	f002 fbca 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003384:	23f7      	movs	r3, #247	; 0xf7
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800338c:	230e      	movs	r3, #14
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003394:	4619      	mov	r1, r3
 8003396:	4813      	ldr	r0, [pc, #76]	; (80033e4 <BSP_LCD_MspInit+0x1b0>)
 8003398:	f002 fbbe 	bl	8005b18 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800339c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	4619      	mov	r1, r3
 80033ac:	480b      	ldr	r0, [pc, #44]	; (80033dc <BSP_LCD_MspInit+0x1a8>)
 80033ae:	f002 fbb3 	bl	8005b18 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80033b2:	2308      	movs	r3, #8
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80033ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033be:	4619      	mov	r1, r3
 80033c0:	4808      	ldr	r0, [pc, #32]	; (80033e4 <BSP_LCD_MspInit+0x1b0>)
 80033c2:	f002 fba9 	bl	8005b18 <HAL_GPIO_Init>
}
 80033c6:	bf00      	nop
 80033c8:	3740      	adds	r7, #64	; 0x40
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40022400 	.word	0x40022400
 80033e4:	40022800 	.word	0x40022800

080033e8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <BSP_LCD_ClockConfig+0x34>)
 80033f4:	2208      	movs	r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <BSP_LCD_ClockConfig+0x34>)
 80033fa:	22c0      	movs	r2, #192	; 0xc0
 80033fc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <BSP_LCD_ClockConfig+0x34>)
 8003400:	2205      	movs	r2, #5
 8003402:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <BSP_LCD_ClockConfig+0x34>)
 8003406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800340c:	4803      	ldr	r0, [pc, #12]	; (800341c <BSP_LCD_ClockConfig+0x34>)
 800340e:	f004 fc99 	bl	8007d44 <HAL_RCCEx_PeriphCLKConfig>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000450 	.word	0x20000450

08003420 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	603a      	str	r2, [r7, #0]
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	460b      	mov	r3, r1
 800342e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <DrawChar+0x168>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4953      	ldr	r1, [pc, #332]	; (800358c <DrawChar+0x16c>)
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3308      	adds	r3, #8
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	88db      	ldrh	r3, [r3, #6]
 800344e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <DrawChar+0x168>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <DrawChar+0x16c>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3308      	adds	r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	889b      	ldrh	r3, [r3, #4]
 8003466:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003468:	8a3b      	ldrh	r3, [r7, #16]
 800346a:	3307      	adds	r3, #7
 800346c:	2b00      	cmp	r3, #0
 800346e:	da00      	bge.n	8003472 <DrawChar+0x52>
 8003470:	3307      	adds	r3, #7
 8003472:	10db      	asrs	r3, r3, #3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	b2da      	uxtb	r2, r3
 800347a:	8a3b      	ldrh	r3, [r7, #16]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e076      	b.n	8003576 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003488:	8a3b      	ldrh	r3, [r7, #16]
 800348a:	3307      	adds	r3, #7
 800348c:	2b00      	cmp	r3, #0
 800348e:	da00      	bge.n	8003492 <DrawChar+0x72>
 8003490:	3307      	adds	r3, #7
 8003492:	10db      	asrs	r3, r3, #3
 8003494:	461a      	mov	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fb03 f302 	mul.w	r3, r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80034a2:	8a3b      	ldrh	r3, [r7, #16]
 80034a4:	3307      	adds	r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da00      	bge.n	80034ac <DrawChar+0x8c>
 80034aa:	3307      	adds	r3, #7
 80034ac:	10db      	asrs	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d002      	beq.n	80034b8 <DrawChar+0x98>
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d004      	beq.n	80034c0 <DrawChar+0xa0>
 80034b6:	e00c      	b.n	80034d2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	e016      	b.n	80034ee <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	3201      	adds	r2, #1
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
      break;
 80034d0:	e00d      	b.n	80034ee <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	041a      	lsls	r2, r3, #16
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	4313      	orrs	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	3202      	adds	r2, #2
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
      break;
 80034ec:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e036      	b.n	8003562 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034f4:	8a3a      	ldrh	r2, [r7, #16]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad2      	subs	r2, r2, r3
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	4413      	add	r3, r2
 80034fe:	3b01      	subs	r3, #1
 8003500:	2201      	movs	r2, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	461a      	mov	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	b29a      	uxth	r2, r3
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	4413      	add	r3, r2
 8003518:	b298      	uxth	r0, r3
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <DrawChar+0x168>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	491b      	ldr	r1, [pc, #108]	; (800358c <DrawChar+0x16c>)
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	88bb      	ldrh	r3, [r7, #4]
 800352e:	4619      	mov	r1, r3
 8003530:	f7ff fda0 	bl	8003074 <BSP_LCD_DrawPixel>
 8003534:	e012      	b.n	800355c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	b29a      	uxth	r2, r3
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4413      	add	r3, r2
 800353e:	b298      	uxth	r0, r3
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <DrawChar+0x168>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4911      	ldr	r1, [pc, #68]	; (800358c <DrawChar+0x16c>)
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3304      	adds	r3, #4
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	4619      	mov	r1, r3
 8003558:	f7ff fd8c 	bl	8003074 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	3301      	adds	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	8a3b      	ldrh	r3, [r7, #16]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3c4      	bcc.n	80034f4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	3301      	adds	r3, #1
 800356e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3301      	adds	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	8a7b      	ldrh	r3, [r7, #18]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	429a      	cmp	r2, r3
 800357c:	d384      	bcc.n	8003488 <DrawChar+0x68>
  }
}
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000434 	.word	0x20000434
 800358c:	20000438 	.word	0x20000438

08003590 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <LL_FillBuffer+0x88>)
 80035a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035a4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <LL_FillBuffer+0x8c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <LL_FillBuffer+0x90>)
 80035ac:	2134      	movs	r1, #52	; 0x34
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3348      	adds	r3, #72	; 0x48
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d103      	bne.n	80035c4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <LL_FillBuffer+0x88>)
 80035be:	2202      	movs	r2, #2
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	e002      	b.n	80035ca <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <LL_FillBuffer+0x88>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80035ca:	4a13      	ldr	r2, [pc, #76]	; (8003618 <LL_FillBuffer+0x88>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <LL_FillBuffer+0x88>)
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <LL_FillBuffer+0x94>)
 80035d4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035d6:	4810      	ldr	r0, [pc, #64]	; (8003618 <LL_FillBuffer+0x88>)
 80035d8:	f002 f812 	bl	8005600 <HAL_DMA2D_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <LL_FillBuffer+0x88>)
 80035e6:	f002 f969 	bl	80058bc <HAL_DMA2D_ConfigLayer>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10e      	bne.n	800360e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69f9      	ldr	r1, [r7, #28]
 80035fa:	4807      	ldr	r0, [pc, #28]	; (8003618 <LL_FillBuffer+0x88>)
 80035fc:	f002 f84a 	bl	8005694 <HAL_DMA2D_Start>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003606:	210a      	movs	r1, #10
 8003608:	4803      	ldr	r0, [pc, #12]	; (8003618 <LL_FillBuffer+0x88>)
 800360a:	f002 f86e 	bl	80056ea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200003f4 	.word	0x200003f4
 800361c:	20000434 	.word	0x20000434
 8003620:	20008c78 	.word	0x20008c78
 8003624:	4002b000 	.word	0x4002b000

08003628 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800362e:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <BSP_SDRAM_Init+0xb0>)
 8003630:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003634:	2202      	movs	r2, #2
 8003636:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 800363a:	2207      	movs	r2, #7
 800363c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003640:	2204      	movs	r2, #4
 8003642:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003646:	2207      	movs	r2, #7
 8003648:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 800364c:	2202      	movs	r2, #2
 800364e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003652:	2202      	movs	r2, #2
 8003654:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 8003658:	2202      	movs	r2, #2
 800365a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800365e:	2200      	movs	r2, #0
 8003660:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800366a:	2204      	movs	r2, #4
 800366c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003670:	2210      	movs	r2, #16
 8003672:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800367c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003680:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800368a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800368e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 8003692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003696:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 800369a:	2200      	movs	r2, #0
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800369e:	2100      	movs	r1, #0
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 80036a2:	f000 f87f 	bl	80037a4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <BSP_SDRAM_Init+0xb4>)
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <BSP_SDRAM_Init+0xac>)
 80036aa:	f005 fafb 	bl	8008ca4 <HAL_SDRAM_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e002      	b.n	80036c2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036c2:	f240 6003 	movw	r0, #1539	; 0x603
 80036c6:	f000 f80d 	bl	80036e4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <BSP_SDRAM_Init+0xb8>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20008d20 	.word	0x20008d20
 80036d8:	a0000140 	.word	0xa0000140
 80036dc:	200004d4 	.word	0x200004d4
 80036e0:	20000044 	.word	0x20000044

080036e4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f8:	2210      	movs	r2, #16
 80036fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fe:	2201      	movs	r2, #1
 8003700:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003704:	2200      	movs	r2, #0
 8003706:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800370c:	4923      	ldr	r1, [pc, #140]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370e:	4824      	ldr	r0, [pc, #144]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003710:	f005 fafc 	bl	8008d0c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003714:	2001      	movs	r0, #1
 8003716:	f000 ffe9 	bl	80046ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003720:	4b1e      	ldr	r3, [pc, #120]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003722:	2210      	movs	r2, #16
 8003724:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003728:	2201      	movs	r2, #1
 800372a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372e:	2200      	movs	r2, #0
 8003730:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003736:	4919      	ldr	r1, [pc, #100]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003738:	4819      	ldr	r0, [pc, #100]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800373a:	f005 fae7 	bl	8008d0c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003740:	2203      	movs	r2, #3
 8003742:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003746:	2210      	movs	r2, #16
 8003748:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374c:	2208      	movs	r2, #8
 800374e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003752:	2200      	movs	r2, #0
 8003754:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800375a:	4910      	ldr	r1, [pc, #64]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375c:	4810      	ldr	r0, [pc, #64]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800375e:	f005 fad5 	bl	8008d0c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003762:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003766:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	2204      	movs	r2, #4
 800376c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003770:	2210      	movs	r2, #16
 8003772:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2201      	movs	r2, #1
 8003778:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4905      	ldr	r1, [pc, #20]	; (800379c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	4806      	ldr	r0, [pc, #24]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003788:	f005 fac0 	bl	8008d0c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4804      	ldr	r0, [pc, #16]	; (80037a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003790:	f005 fae7 	bl	8008d62 <HAL_SDRAM_ProgramRefreshRate>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200004f0 	.word	0x200004f0
 80037a0:	20008d20 	.word	0x20008d20

080037a4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b090      	sub	sp, #64	; 0x40
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80037ae:	4b70      	ldr	r3, [pc, #448]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	4a6f      	ldr	r2, [pc, #444]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6393      	str	r3, [r2, #56]	; 0x38
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a69      	ldr	r2, [pc, #420]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	4b64      	ldr	r3, [pc, #400]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a63      	ldr	r2, [pc, #396]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b61      	ldr	r3, [pc, #388]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 80037fc:	f043 0308 	orr.w	r3, r3, #8
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800380e:	4b58      	ldr	r3, [pc, #352]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a57      	ldr	r2, [pc, #348]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003814:	f043 0310 	orr.w	r3, r3, #16
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b55      	ldr	r3, [pc, #340]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003826:	4b52      	ldr	r3, [pc, #328]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a51      	ldr	r2, [pc, #324]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a4b      	ldr	r2, [pc, #300]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b49      	ldr	r3, [pc, #292]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a45      	ldr	r2, [pc, #276]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 800385c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <BSP_SDRAM_MspInit+0x1cc>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003872:	2301      	movs	r3, #1
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003876:	2302      	movs	r3, #2
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800387a:	230c      	movs	r3, #12
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800387e:	2308      	movs	r3, #8
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003886:	4619      	mov	r1, r3
 8003888:	483a      	ldr	r0, [pc, #232]	; (8003974 <BSP_SDRAM_MspInit+0x1d0>)
 800388a:	f002 f945 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800388e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003898:	4619      	mov	r1, r3
 800389a:	4837      	ldr	r0, [pc, #220]	; (8003978 <BSP_SDRAM_MspInit+0x1d4>)
 800389c:	f002 f93c 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80038a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80038a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038aa:	4619      	mov	r1, r3
 80038ac:	4833      	ldr	r0, [pc, #204]	; (800397c <BSP_SDRAM_MspInit+0x1d8>)
 80038ae:	f002 f933 	bl	8005b18 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80038b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80038b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038bc:	4619      	mov	r1, r3
 80038be:	4830      	ldr	r0, [pc, #192]	; (8003980 <BSP_SDRAM_MspInit+0x1dc>)
 80038c0:	f002 f92a 	bl	8005b18 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80038c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	482c      	ldr	r0, [pc, #176]	; (8003984 <BSP_SDRAM_MspInit+0x1e0>)
 80038d2:	f002 f921 	bl	8005b18 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80038d6:	2328      	movs	r3, #40	; 0x28
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80038da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038de:	4619      	mov	r1, r3
 80038e0:	4829      	ldr	r0, [pc, #164]	; (8003988 <BSP_SDRAM_MspInit+0x1e4>)
 80038e2:	f002 f919 	bl	8005b18 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 80038f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 80038fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003900:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003908:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 800390c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003910:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 800391a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003922:	2200      	movs	r2, #0
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003928:	2203      	movs	r2, #3
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 800392e:	2200      	movs	r2, #0
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 800393a:	4a15      	ldr	r2, [pc, #84]	; (8003990 <BSP_SDRAM_MspInit+0x1ec>)
 800393c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
 8003944:	4a11      	ldr	r2, [pc, #68]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800394a:	4810      	ldr	r0, [pc, #64]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 800394c:	f001 fd28 	bl	80053a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003950:	480e      	ldr	r0, [pc, #56]	; (800398c <BSP_SDRAM_MspInit+0x1e8>)
 8003952:	f001 fc77 	bl	8005244 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	210f      	movs	r1, #15
 800395a:	2038      	movs	r0, #56	; 0x38
 800395c:	f001 fb7a 	bl	8005054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003960:	2038      	movs	r0, #56	; 0x38
 8003962:	f001 fb93 	bl	800508c <HAL_NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3740      	adds	r7, #64	; 0x40
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40020800 	.word	0x40020800
 8003978:	40020c00 	.word	0x40020c00
 800397c:	40021000 	.word	0x40021000
 8003980:	40021400 	.word	0x40021400
 8003984:	40021800 	.word	0x40021800
 8003988:	40021c00 	.word	0x40021c00
 800398c:	20000500 	.word	0x20000500
 8003990:	40026410 	.word	0x40026410

08003994 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	460a      	mov	r2, r1
 800399e:	80fb      	strh	r3, [r7, #6]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <BSP_TS_Init+0x68>)
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <BSP_TS_Init+0x6c>)
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <BSP_TS_Init+0x70>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2070      	movs	r0, #112	; 0x70
 80039ba:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <BSP_TS_Init+0x70>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2070      	movs	r0, #112	; 0x70
 80039c2:	4798      	blx	r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b51      	cmp	r3, #81	; 0x51
 80039c8:	d111      	bne.n	80039ee <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <BSP_TS_Init+0x74>)
 80039cc:	4a0d      	ldr	r2, [pc, #52]	; (8003a04 <BSP_TS_Init+0x70>)
 80039ce:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <BSP_TS_Init+0x78>)
 80039d2:	2270      	movs	r2, #112	; 0x70
 80039d4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <BSP_TS_Init+0x7c>)
 80039d8:	2208      	movs	r2, #8
 80039da:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <BSP_TS_Init+0x74>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <BSP_TS_Init+0x78>)
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	b292      	uxth	r2, r2
 80039e8:	4610      	mov	r0, r2
 80039ea:	4798      	blx	r3
 80039ec:	e001      	b.n	80039f2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80039ee:	2303      	movs	r3, #3
 80039f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000564 	.word	0x20000564
 8003a00:	20000566 	.word	0x20000566
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000560 	.word	0x20000560
 8003a0c:	20000569 	.word	0x20000569
 8003a10:	20000568 	.word	0x20000568

08003a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_MspInit+0x4c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	210f      	movs	r1, #15
 8003a4e:	f06f 0001 	mvn.w	r0, #1
 8003a52:	f001 faff 	bl	8005054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	; 0x30
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <HAL_ADC_MspInit+0xc8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d124      	bne.n	8003ad0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a90:	6453      	str	r3, [r2, #68]	; 0x44
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aba:	2303      	movs	r3, #3
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	f107 031c 	add.w	r3, r7, #28
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	481a      	ldr	r0, [pc, #104]	; (8003b34 <HAL_ADC_MspInit+0xd0>)
 8003aca:	f002 f825 	bl	8005b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ace:	e029      	b.n	8003b24 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_ADC_MspInit+0xd4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d124      	bne.n	8003b24 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ada:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a0e      	ldr	r2, [pc, #56]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003af8:	f043 0320 	orr.w	r3, r3, #32
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <HAL_ADC_MspInit+0xcc>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003b0a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b10:	2303      	movs	r3, #3
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4807      	ldr	r0, [pc, #28]	; (8003b3c <HAL_ADC_MspInit+0xd8>)
 8003b20:	f001 fffa 	bl	8005b18 <HAL_GPIO_Init>
}
 8003b24:	bf00      	nop
 8003b26:	3730      	adds	r7, #48	; 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40012000 	.word	0x40012000
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40012200 	.word	0x40012200
 8003b3c:	40021400 	.word	0x40021400

08003b40 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_DAC_MspInit+0x84>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d12b      	bne.n	8003bba <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_DAC_MspInit+0x88>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b92:	2310      	movs	r3, #16
 8003b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b96:	2303      	movs	r3, #3
 8003b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <HAL_DAC_MspInit+0x8c>)
 8003ba6:	f001 ffb7 	bl	8005b18 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2100      	movs	r1, #0
 8003bae:	2036      	movs	r0, #54	; 0x36
 8003bb0:	f001 fa50 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bb4:	2036      	movs	r0, #54	; 0x36
 8003bb6:	f001 fa69 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003bba:	bf00      	nop
 8003bbc:	3728      	adds	r7, #40	; 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40007400 	.word	0x40007400
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_DMA2D_MspInit+0x38>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10b      	bne.n	8003bfa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_DMA2D_MspInit+0x3c>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_DMA2D_MspInit+0x3c>)
 8003be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_DMA2D_MspInit+0x3c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	4002b000 	.word	0x4002b000
 8003c0c:	40023800 	.word	0x40023800

08003c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <HAL_I2C_MspInit+0xdc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d129      	bne.n	8003c86 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a2e      	ldr	r2, [pc, #184]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c50:	2312      	movs	r3, #18
 8003c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	4823      	ldr	r0, [pc, #140]	; (8003cf4 <HAL_I2C_MspInit+0xe4>)
 8003c68:	f001 ff56 	bl	8005b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c76:	6413      	str	r3, [r2, #64]	; 0x40
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c84:	e02d      	b.n	8003ce2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_I2C_MspInit+0xe8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d128      	bne.n	8003ce2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003ca8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cae:	2312      	movs	r3, #18
 8003cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cba:	2304      	movs	r3, #4
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <HAL_I2C_MspInit+0xec>)
 8003cc6:	f001 ff27 	bl	8005b18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_I2C_MspInit+0xe0>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40005400 	.word	0x40005400
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020400 	.word	0x40020400
 8003cf8:	40005c00 	.word	0x40005c00
 8003cfc:	40021c00 	.word	0x40021c00

08003d00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <HAL_I2C_MspDeInit+0x64>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d110      	bne.n	8003d34 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_I2C_MspDeInit+0x68>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_I2C_MspDeInit+0x68>)
 8003d18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d22:	4812      	ldr	r0, [pc, #72]	; (8003d6c <HAL_I2C_MspDeInit+0x6c>)
 8003d24:	f002 f8a2 	bl	8005e6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d2c:	480f      	ldr	r0, [pc, #60]	; (8003d6c <HAL_I2C_MspDeInit+0x6c>)
 8003d2e:	f002 f89d 	bl	8005e6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003d32:	e013      	b.n	8003d5c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <HAL_I2C_MspDeInit+0x70>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10e      	bne.n	8003d5c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_I2C_MspDeInit+0x68>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <HAL_I2C_MspDeInit+0x68>)
 8003d44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	4809      	ldr	r0, [pc, #36]	; (8003d74 <HAL_I2C_MspDeInit+0x74>)
 8003d4e:	f002 f88d 	bl	8005e6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d56:	4807      	ldr	r0, [pc, #28]	; (8003d74 <HAL_I2C_MspDeInit+0x74>)
 8003d58:	f002 f888 	bl	8005e6c <HAL_GPIO_DeInit>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40005400 	.word	0x40005400
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40005c00 	.word	0x40005c00
 8003d74:	40021c00 	.word	0x40021c00

08003d78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	; 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a55      	ldr	r2, [pc, #340]	; (8003eec <HAL_LTDC_MspInit+0x174>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	f040 80a3 	bne.w	8003ee2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d9c:	4b54      	ldr	r3, [pc, #336]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	4a53      	ldr	r2, [pc, #332]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003da6:	6453      	str	r3, [r2, #68]	; 0x44
 8003da8:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003db4:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4a4d      	ldr	r2, [pc, #308]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dba:	f043 0310 	orr.w	r3, r3, #16
 8003dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003dcc:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003de4:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dee:	6313      	str	r3, [r2, #48]	; 0x30
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dfc:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e06:	6313      	str	r3, [r2, #48]	; 0x30
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4a35      	ldr	r2, [pc, #212]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_LTDC_MspInit+0x178>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e3c:	230e      	movs	r3, #14
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e44:	4619      	mov	r1, r3
 8003e46:	482b      	ldr	r0, [pc, #172]	; (8003ef4 <HAL_LTDC_MspInit+0x17c>)
 8003e48:	f001 fe66 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003e4c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e5e:	230e      	movs	r3, #14
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e66:	4619      	mov	r1, r3
 8003e68:	4823      	ldr	r0, [pc, #140]	; (8003ef8 <HAL_LTDC_MspInit+0x180>)
 8003e6a:	f001 fe55 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003e6e:	23f7      	movs	r3, #247	; 0xf7
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e7e:	230e      	movs	r3, #14
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e86:	4619      	mov	r1, r3
 8003e88:	481c      	ldr	r0, [pc, #112]	; (8003efc <HAL_LTDC_MspInit+0x184>)
 8003e8a:	f001 fe45 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003ea0:	2309      	movs	r3, #9
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4815      	ldr	r0, [pc, #84]	; (8003f00 <HAL_LTDC_MspInit+0x188>)
 8003eac:	f001 fe34 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003eb0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ec2:	230e      	movs	r3, #14
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eca:	4619      	mov	r1, r3
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <HAL_LTDC_MspInit+0x18c>)
 8003ece:	f001 fe23 	bl	8005b18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2105      	movs	r1, #5
 8003ed6:	2058      	movs	r0, #88	; 0x58
 8003ed8:	f001 f8bc 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003edc:	2058      	movs	r0, #88	; 0x58
 8003ede:	f001 f8d5 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003ee2:	bf00      	nop
 8003ee4:	3738      	adds	r7, #56	; 0x38
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40016800 	.word	0x40016800
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40022400 	.word	0x40022400
 8003efc:	40022800 	.word	0x40022800
 8003f00:	40021800 	.word	0x40021800
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <HAL_RTC_MspInit+0x2c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d105      	bne.n	8003f26 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_RTC_MspInit+0x30>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <HAL_RTC_MspInit+0x30>)
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40002800 	.word	0x40002800
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_SPI_MspInit+0xd4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d154      	bne.n	8004008 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_SPI_MspInit+0xd8>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4815      	ldr	r0, [pc, #84]	; (8004018 <HAL_SPI_MspInit+0xdc>)
 8003fc2:	f001 fda9 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	4619      	mov	r1, r3
 8003fe0:	480d      	ldr	r0, [pc, #52]	; (8004018 <HAL_SPI_MspInit+0xdc>)
 8003fe2:	f001 fd99 	bl	8005b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003fe6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ff8:	2305      	movs	r3, #5
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <HAL_SPI_MspInit+0xe0>)
 8004004:	f001 fd88 	bl	8005b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004008:	bf00      	nop
 800400a:	3728      	adds	r7, #40	; 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40003800 	.word	0x40003800
 8004014:	40023800 	.word	0x40023800
 8004018:	40022000 	.word	0x40022000
 800401c:	40020400 	.word	0x40020400

08004020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <HAL_TIM_Base_MspInit+0xc8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10c      	bne.n	800404c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800404a:	e046      	b.n	80040da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d10c      	bne.n	8004070 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004056:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a24      	ldr	r2, [pc, #144]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	69bb      	ldr	r3, [r7, #24]
}
 800406e:	e034      	b.n	80040da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_TIM_Base_MspInit+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10c      	bne.n	8004094 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	e022      	b.n	80040da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_TIM_Base_MspInit+0xd4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10c      	bne.n	80040b8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	6413      	str	r3, [r2, #64]	; 0x40
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
}
 80040b6:	e010      	b.n	80040da <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <HAL_TIM_Base_MspInit+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10b      	bne.n	80040da <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	6453      	str	r3, [r2, #68]	; 0x44
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_TIM_Base_MspInit+0xcc>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
}
 80040da:	bf00      	nop
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40010400 	.word	0x40010400

080040fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <HAL_TIM_MspPostInit+0xa8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d11c      	bne.n	8004158 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a21      	ldr	r2, [pc, #132]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004136:	2310      	movs	r3, #16
 8004138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413a:	2302      	movs	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004146:	2302      	movs	r3, #2
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	4619      	mov	r1, r3
 8004150:	4816      	ldr	r0, [pc, #88]	; (80041ac <HAL_TIM_MspPostInit+0xb0>)
 8004152:	f001 fce1 	bl	8005b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004156:	e020      	b.n	800419a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <HAL_TIM_MspPostInit+0xb4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d11b      	bne.n	800419a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416c:	6313      	str	r3, [r2, #48]	; 0x30
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_TIM_MspPostInit+0xac>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800417a:	2304      	movs	r3, #4
 800417c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2302      	movs	r3, #2
 8004180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800418a:	2303      	movs	r3, #3
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	4619      	mov	r1, r3
 8004194:	4807      	ldr	r0, [pc, #28]	; (80041b4 <HAL_TIM_MspPostInit+0xb8>)
 8004196:	f001 fcbf 	bl	8005b18 <HAL_GPIO_Init>
}
 800419a:	bf00      	nop
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40020400 	.word	0x40020400
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40022000 	.word	0x40022000

080041b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08e      	sub	sp, #56	; 0x38
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a57      	ldr	r2, [pc, #348]	; (8004334 <HAL_UART_MspInit+0x17c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d128      	bne.n	800422c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <HAL_UART_MspInit+0x180>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a56      	ldr	r2, [pc, #344]	; (8004338 <HAL_UART_MspInit+0x180>)
 80041e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b54      	ldr	r3, [pc, #336]	; (8004338 <HAL_UART_MspInit+0x180>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041f2:	4b51      	ldr	r3, [pc, #324]	; (8004338 <HAL_UART_MspInit+0x180>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4a50      	ldr	r2, [pc, #320]	; (8004338 <HAL_UART_MspInit+0x180>)
 80041f8:	f043 0320 	orr.w	r3, r3, #32
 80041fc:	6313      	str	r3, [r2, #48]	; 0x30
 80041fe:	4b4e      	ldr	r3, [pc, #312]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004216:	2303      	movs	r3, #3
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800421a:	2308      	movs	r3, #8
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800421e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004222:	4619      	mov	r1, r3
 8004224:	4845      	ldr	r0, [pc, #276]	; (800433c <HAL_UART_MspInit+0x184>)
 8004226:	f001 fc77 	bl	8005b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800422a:	e07f      	b.n	800432c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a43      	ldr	r2, [pc, #268]	; (8004340 <HAL_UART_MspInit+0x188>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d14d      	bne.n	80042d2 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004236:	4b40      	ldr	r3, [pc, #256]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <HAL_UART_MspInit+0x180>)
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	6453      	str	r3, [r2, #68]	; 0x44
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424e:	4b3a      	ldr	r3, [pc, #232]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a39      	ldr	r2, [pc, #228]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b37      	ldr	r3, [pc, #220]	; (8004338 <HAL_UART_MspInit+0x180>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_UART_MspInit+0x180>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800428e:	2307      	movs	r3, #7
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004296:	4619      	mov	r1, r3
 8004298:	482a      	ldr	r0, [pc, #168]	; (8004344 <HAL_UART_MspInit+0x18c>)
 800429a:	f001 fc3d 	bl	8005b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800429e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042b0:	2307      	movs	r3, #7
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80042b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b8:	4619      	mov	r1, r3
 80042ba:	4823      	ldr	r0, [pc, #140]	; (8004348 <HAL_UART_MspInit+0x190>)
 80042bc:	f001 fc2c 	bl	8005b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80042c0:	2200      	movs	r2, #0
 80042c2:	2107      	movs	r1, #7
 80042c4:	2025      	movs	r0, #37	; 0x25
 80042c6:	f000 fec5 	bl	8005054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042ca:	2025      	movs	r0, #37	; 0x25
 80042cc:	f000 fede 	bl	800508c <HAL_NVIC_EnableIRQ>
}
 80042d0:	e02c      	b.n	800432c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_UART_MspInit+0x194>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d127      	bne.n	800432c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042dc:	4b16      	ldr	r3, [pc, #88]	; (8004338 <HAL_UART_MspInit+0x180>)
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_UART_MspInit+0x180>)
 80042e2:	f043 0320 	orr.w	r3, r3, #32
 80042e6:	6453      	str	r3, [r2, #68]	; 0x44
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <HAL_UART_MspInit+0x180>)
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_UART_MspInit+0x180>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a0f      	ldr	r2, [pc, #60]	; (8004338 <HAL_UART_MspInit+0x180>)
 80042fa:	f043 0304 	orr.w	r3, r3, #4
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_UART_MspInit+0x180>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800430c:	23c0      	movs	r3, #192	; 0xc0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	2302      	movs	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004318:	2303      	movs	r3, #3
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800431c:	2308      	movs	r3, #8
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004324:	4619      	mov	r1, r3
 8004326:	480a      	ldr	r0, [pc, #40]	; (8004350 <HAL_UART_MspInit+0x198>)
 8004328:	f001 fbf6 	bl	8005b18 <HAL_GPIO_Init>
}
 800432c:	bf00      	nop
 800432e:	3738      	adds	r7, #56	; 0x38
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40007800 	.word	0x40007800
 8004338:	40023800 	.word	0x40023800
 800433c:	40021400 	.word	0x40021400
 8004340:	40011000 	.word	0x40011000
 8004344:	40020400 	.word	0x40020400
 8004348:	40020000 	.word	0x40020000
 800434c:	40011400 	.word	0x40011400
 8004350:	40020800 	.word	0x40020800

08004354 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_FMC_MspInit+0x100>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d16d      	bne.n	800444c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004370:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_FMC_MspInit+0x100>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_FMC_MspInit+0x104>)
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4a37      	ldr	r2, [pc, #220]	; (8004458 <HAL_FMC_MspInit+0x104>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6393      	str	r3, [r2, #56]	; 0x38
 8004382:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_FMC_MspInit+0x104>)
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800438e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004392:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439c:	2303      	movs	r3, #3
 800439e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043a0:	230c      	movs	r3, #12
 80043a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	482c      	ldr	r0, [pc, #176]	; (800445c <HAL_FMC_MspInit+0x108>)
 80043aa:	f001 fbb5 	bl	8005b18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80043ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80043b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043bc:	2303      	movs	r3, #3
 80043be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043c0:	230c      	movs	r3, #12
 80043c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4825      	ldr	r0, [pc, #148]	; (8004460 <HAL_FMC_MspInit+0x10c>)
 80043ca:	f001 fba5 	bl	8005b18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80043ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80043d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043dc:	2303      	movs	r3, #3
 80043de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043e0:	230c      	movs	r3, #12
 80043e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	4619      	mov	r1, r3
 80043e8:	481e      	ldr	r0, [pc, #120]	; (8004464 <HAL_FMC_MspInit+0x110>)
 80043ea:	f001 fb95 	bl	8005b18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80043ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80043f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f4:	2302      	movs	r3, #2
 80043f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fc:	2303      	movs	r3, #3
 80043fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004400:	230c      	movs	r3, #12
 8004402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4817      	ldr	r0, [pc, #92]	; (8004468 <HAL_FMC_MspInit+0x114>)
 800440a:	f001 fb85 	bl	8005b18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800440e:	2328      	movs	r3, #40	; 0x28
 8004410:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004412:	2302      	movs	r3, #2
 8004414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800441a:	2303      	movs	r3, #3
 800441c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800441e:	230c      	movs	r3, #12
 8004420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4811      	ldr	r0, [pc, #68]	; (800446c <HAL_FMC_MspInit+0x118>)
 8004428:	f001 fb76 	bl	8005b18 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800442c:	2308      	movs	r3, #8
 800442e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004430:	2302      	movs	r3, #2
 8004432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004438:	2303      	movs	r3, #3
 800443a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800443c:	230c      	movs	r3, #12
 800443e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	4619      	mov	r1, r3
 8004444:	480a      	ldr	r0, [pc, #40]	; (8004470 <HAL_FMC_MspInit+0x11c>)
 8004446:	f001 fb67 	bl	8005b18 <HAL_GPIO_Init>
 800444a:	e000      	b.n	800444e <HAL_FMC_MspInit+0xfa>
    return;
 800444c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	2000056c 	.word	0x2000056c
 8004458:	40023800 	.word	0x40023800
 800445c:	40021000 	.word	0x40021000
 8004460:	40021800 	.word	0x40021800
 8004464:	40020c00 	.word	0x40020c00
 8004468:	40021400 	.word	0x40021400
 800446c:	40021c00 	.word	0x40021c00
 8004470:	40020800 	.word	0x40020800

08004474 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800447c:	f7ff ff6a 	bl	8004354 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004498:	2200      	movs	r2, #0
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	2036      	movs	r0, #54	; 0x36
 800449e:	f000 fdd9 	bl	8005054 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044a2:	2036      	movs	r0, #54	; 0x36
 80044a4:	f000 fdf2 	bl	800508c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <HAL_InitTick+0xa0>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_InitTick+0xa0>)
 80044ae:	f043 0310 	orr.w	r3, r3, #16
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_InitTick+0xa0>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044c0:	f107 0210 	add.w	r2, r7, #16
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f003 fc08 	bl	8007ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80044d0:	f003 fbde 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 80044d4:	4603      	mov	r3, r0
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <HAL_InitTick+0xa4>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	3b01      	subs	r3, #1
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_InitTick+0xa8>)
 80044ea:	4a12      	ldr	r2, [pc, #72]	; (8004534 <HAL_InitTick+0xac>)
 80044ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_InitTick+0xa8>)
 80044f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <HAL_InitTick+0xa8>)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_InitTick+0xa8>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_InitTick+0xa8>)
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004508:	4809      	ldr	r0, [pc, #36]	; (8004530 <HAL_InitTick+0xa8>)
 800450a:	f004 fcdc 	bl	8008ec6 <HAL_TIM_Base_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004514:	4806      	ldr	r0, [pc, #24]	; (8004530 <HAL_InitTick+0xa8>)
 8004516:	f004 fd01 	bl	8008f1c <HAL_TIM_Base_Start_IT>
 800451a:	4603      	mov	r3, r0
 800451c:	e000      	b.n	8004520 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	431bde83 	.word	0x431bde83
 8004530:	20008d54 	.word	0x20008d54
 8004534:	40001000 	.word	0x40001000

08004538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800453c:	e7fe      	b.n	800453c <NMI_Handler+0x4>

0800453e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <HardFault_Handler+0x4>

08004544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <MemManage_Handler+0x4>

0800454a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <BusFault_Handler+0x4>

08004550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <UsageFault_Handler+0x4>

08004556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <USART1_IRQHandler+0x10>)
 800456a:	f005 fe29 	bl	800a1c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20008a44 	.word	0x20008a44

08004578 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <TIM6_DAC_IRQHandler+0x14>)
 800457e:	f000 fdb5 	bl	80050ec <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004582:	4803      	ldr	r0, [pc, #12]	; (8004590 <TIM6_DAC_IRQHandler+0x18>)
 8004584:	f004 fd29 	bl	8008fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20008ac4 	.word	0x20008ac4
 8004590:	20008d54 	.word	0x20008d54

08004594 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <LTDC_IRQHandler+0x10>)
 800459a:	f002 fc23 	bl	8006de4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000890c 	.word	0x2000890c

080045a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <_sbrk+0x5c>)
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <_sbrk+0x60>)
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <_sbrk+0x64>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <_sbrk+0x64>)
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <_sbrk+0x68>)
 80045c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <_sbrk+0x64>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d207      	bcs.n	80045e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045d8:	f008 fc96 	bl	800cf08 <__errno>
 80045dc:	4602      	mov	r2, r0
 80045de:	230c      	movs	r3, #12
 80045e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	e009      	b.n	80045fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <_sbrk+0x64>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <_sbrk+0x64>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <_sbrk+0x64>)
 80045f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20050000 	.word	0x20050000
 8004608:	00000400 	.word	0x00000400
 800460c:	20000570 	.word	0x20000570
 8004610:	20008da0 	.word	0x20008da0

08004614 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <SystemInit+0x28>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <SystemInit+0x28>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <SystemInit+0x28>)
 800462a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800462e:	609a      	str	r2, [r3, #8]
#endif
 }
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004678 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004646:	e003      	b.n	8004650 <LoopCopyDataInit>

08004648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800464a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800464c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800464e:	3104      	adds	r1, #4

08004650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004650:	480b      	ldr	r0, [pc, #44]	; (8004680 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004658:	d3f6      	bcc.n	8004648 <CopyDataInit>
  ldr  r2, =_sbss
 800465a:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800465c:	e002      	b.n	8004664 <LoopFillZerobss>

0800465e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800465e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004660:	f842 3b04 	str.w	r3, [r2], #4

08004664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004668:	d3f9      	bcc.n	800465e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800466a:	f7ff ffd3 	bl	8004614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800466e:	f008 fc51 	bl	800cf14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004672:	f7fc f993 	bl	800099c <main>
  bx  lr    
 8004676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004678:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800467c:	0800f7cc 	.word	0x0800f7cc
  ldr  r0, =_sdata
 8004680:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004684:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8004688:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 800468c:	20008d9c 	.word	0x20008d9c

08004690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004690:	e7fe      	b.n	8004690 <ADC_IRQHandler>

08004692 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004696:	2003      	movs	r0, #3
 8004698:	f000 fcd1 	bl	800503e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800469c:	2000      	movs	r0, #0
 800469e:	f7ff fef3 	bl	8004488 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80046a2:	f7ff f9b7 	bl	8003a14 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_IncTick+0x20>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_IncTick+0x24>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4413      	add	r3, r2
 80046bc:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <HAL_IncTick+0x24>)
 80046be:	6013      	str	r3, [r2, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000050 	.word	0x20000050
 80046d0:	20008d94 	.word	0x20008d94

080046d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return uwTick;
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <HAL_GetTick+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20008d94 	.word	0x20008d94

080046ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7ff ffee 	bl	80046d4 <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d005      	beq.n	8004712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_Delay+0x40>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004712:	bf00      	nop
 8004714:	f7ff ffde 	bl	80046d4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d8f7      	bhi.n	8004714 <HAL_Delay+0x28>
  {
  }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000050 	.word	0x20000050

08004730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e031      	b.n	80047aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff f988 	bl	8003a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_ADC_Init+0x84>)
 8004774:	4013      	ands	r3, r2
 8004776:	f043 0202 	orr.w	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fab6 	bl	8004cf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	f043 0201 	orr.w	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
 800479a:	e001      	b.n	80047a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	ffffeefd 	.word	0xffffeefd

080047b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Start+0x1a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e0a0      	b.n	8004914 <HAL_ADC_Start+0x15c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d018      	beq.n	800481a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80047f8:	4b49      	ldr	r3, [pc, #292]	; (8004920 <HAL_ADC_Start+0x168>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a49      	ldr	r2, [pc, #292]	; (8004924 <HAL_ADC_Start+0x16c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0c9a      	lsrs	r2, r3, #18
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800480c:	e002      	b.n	8004814 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b01      	subs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f9      	bne.n	800480e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d174      	bne.n	8004912 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482c:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <HAL_ADC_Start+0x170>)
 800482e:	4013      	ands	r3, r2
 8004830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800484e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d106      	bne.n	8004872 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f023 0206 	bic.w	r2, r3, #6
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
 8004870:	e002      	b.n	8004878 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004888:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_ADC_Start+0x174>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d136      	bne.n	8004912 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	e02d      	b.n	8004912 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_ADC_Start+0x178>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10e      	bne.n	80048de <HAL_ADC_Start+0x126>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_ADC_Start+0x174>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d113      	bne.n	8004912 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_ADC_Start+0x17c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10e      	bne.n	8004912 <HAL_ADC_Start+0x15a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d107      	bne.n	8004912 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004910:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	20000048 	.word	0x20000048
 8004924:	431bde83 	.word	0x431bde83
 8004928:	fffff8fe 	.word	0xfffff8fe
 800492c:	40012300 	.word	0x40012300
 8004930:	40012000 	.word	0x40012000
 8004934:	40012200 	.word	0x40012200

08004938 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d113      	bne.n	800497e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d10b      	bne.n	800497e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e05c      	b.n	8004a38 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800497e:	f7ff fea9 	bl	80046d4 <HAL_GetTick>
 8004982:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004984:	e01a      	b.n	80049bc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d016      	beq.n	80049bc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_ADC_PollForConversion+0x6c>
 8004994:	f7ff fe9e 	bl	80046d4 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d20b      	bcs.n	80049bc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0204 	orr.w	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e03d      	b.n	8004a38 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d1dd      	bne.n	8004986 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0212 	mvn.w	r2, #18
 80049d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d123      	bne.n	8004a36 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11f      	bne.n	8004a36 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d111      	bne.n	8004a36 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x1c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e12a      	b.n	8004cce <HAL_ADC_ConfigChannel+0x272>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d93a      	bls.n	8004afe <HAL_ADC_ConfigChannel+0xa2>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a90:	d035      	beq.n	8004afe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3b1e      	subs	r3, #30
 8004aa8:	2207      	movs	r2, #7
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a87      	ldr	r2, [pc, #540]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68d9      	ldr	r1, [r3, #12]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	061a      	lsls	r2, r3, #24
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ad6:	e035      	b.n	8004b44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68d9      	ldr	r1, [r3, #12]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4403      	add	r3, r0
 8004af0:	3b1e      	subs	r3, #30
 8004af2:	409a      	lsls	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004afc:	e022      	b.n	8004b44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6919      	ldr	r1, [r3, #16]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	2207      	movs	r2, #7
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	400a      	ands	r2, r1
 8004b20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6919      	ldr	r1, [r3, #16]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4618      	mov	r0, r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4403      	add	r3, r0
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d824      	bhi.n	8004b96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3b05      	subs	r3, #5
 8004b5e:	221f      	movs	r2, #31
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43da      	mvns	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	3b05      	subs	r3, #5
 8004b88:	fa00 f203 	lsl.w	r2, r0, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	635a      	str	r2, [r3, #52]	; 0x34
 8004b94:	e04c      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d824      	bhi.n	8004be8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	3b23      	subs	r3, #35	; 0x23
 8004bb0:	221f      	movs	r2, #31
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3b23      	subs	r3, #35	; 0x23
 8004bda:	fa00 f203 	lsl.w	r2, r0, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
 8004be6:	e023      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b41      	subs	r3, #65	; 0x41
 8004bfa:	221f      	movs	r2, #31
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43da      	mvns	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	400a      	ands	r2, r1
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	3b41      	subs	r3, #65	; 0x41
 8004c24:	fa00 f203 	lsl.w	r2, r0, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10a      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1f4>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c42:	d105      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004c4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d109      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x212>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d105      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d125      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <HAL_ADC_ConfigChannel+0x22e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b11      	cmp	r3, #17
 8004c88:	d11c      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d111      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_ADC_ConfigChannel+0x28c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a11      	ldr	r2, [pc, #68]	; (8004cec <HAL_ADC_ConfigChannel+0x290>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0c9a      	lsrs	r2, r3, #18
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004cb6:	e002      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f9      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	10000012 	.word	0x10000012
 8004ce0:	40012000 	.word	0x40012000
 8004ce4:	40012300 	.word	0x40012300
 8004ce8:	20000048 	.word	0x20000048
 8004cec:	431bde83 	.word	0x431bde83

08004cf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <ADC_Init+0x1ec>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a77      	ldr	r2, [pc, #476]	; (8004edc <ADC_Init+0x1ec>)
 8004cfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <ADC_Init+0x1ec>)
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4973      	ldr	r1, [pc, #460]	; (8004edc <ADC_Init+0x1ec>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	4a58      	ldr	r2, [pc, #352]	; (8004ee0 <ADC_Init+0x1f0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d022      	beq.n	8004dca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6899      	ldr	r1, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e00f      	b.n	8004dea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0202 	bic.w	r2, r2, #2
 8004df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	005a      	lsls	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	3b01      	subs	r3, #1
 8004e44:	035a      	lsls	r2, r3, #13
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e007      	b.n	8004e60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	051a      	lsls	r2, r3, #20
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ea2:	025a      	lsls	r2, r3, #9
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	029a      	lsls	r2, r3, #10
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40012300 	.word	0x40012300
 8004ee0:	0f000001 	.word	0x0f000001

08004ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <__NVIC_SetPriorityGrouping+0x40>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f00:	4013      	ands	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <__NVIC_SetPriorityGrouping+0x44>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <__NVIC_SetPriorityGrouping+0x40>)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	60d3      	str	r3, [r2, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	05fa0000 	.word	0x05fa0000

08004f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <__NVIC_GetPriorityGrouping+0x18>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	f003 0307 	and.w	r3, r3, #7
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db0b      	blt.n	8004f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4907      	ldr	r1, [pc, #28]	; (8004f80 <__NVIC_EnableIRQ+0x38>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2001      	movs	r0, #1
 8004f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db0a      	blt.n	8004fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	490c      	ldr	r1, [pc, #48]	; (8004fd0 <__NVIC_SetPriority+0x4c>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fac:	e00a      	b.n	8004fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4908      	ldr	r1, [pc, #32]	; (8004fd4 <__NVIC_SetPriority+0x50>)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	761a      	strb	r2, [r3, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e100 	.word	0xe000e100
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f1c3 0307 	rsb	r3, r3, #7
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf28      	it	cs
 8004ff6:	2304      	movcs	r3, #4
 8004ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d902      	bls.n	8005008 <NVIC_EncodePriority+0x30>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3b03      	subs	r3, #3
 8005006:	e000      	b.n	800500a <NVIC_EncodePriority+0x32>
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	401a      	ands	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005020:	f04f 31ff 	mov.w	r1, #4294967295
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	43d9      	mvns	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005030:	4313      	orrs	r3, r2
         );
}
 8005032:	4618      	mov	r0, r3
 8005034:	3724      	adds	r7, #36	; 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ff4c 	bl	8004ee4 <__NVIC_SetPriorityGrouping>
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005066:	f7ff ff61 	bl	8004f2c <__NVIC_GetPriorityGrouping>
 800506a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f7ff ffb1 	bl	8004fd8 <NVIC_EncodePriority>
 8005076:	4602      	mov	r2, r0
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff80 	bl	8004f84 <__NVIC_SetPriority>
}
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff54 	bl	8004f48 <__NVIC_EnableIRQ>
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e014      	b.n	80050e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	791b      	ldrb	r3, [r3, #4]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fe fd38 	bl	8003b40 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005102:	d118      	bne.n	8005136 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2204      	movs	r2, #4
 8005108:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800511e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800512e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f825 	bl	8005180 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005144:	d118      	bne.n	8005178 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f043 0202 	orr.w	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005160:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f85b 	bl	800522e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	795b      	ldrb	r3, [r3, #5]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_DAC_ConfigChannel+0x20>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e036      	b.n	8005222 <HAL_DAC_ConfigChannel+0x8e>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2202      	movs	r2, #2
 80051be:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80051c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43db      	mvns	r3, r3
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4013      	ands	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	22c0      	movs	r2, #192	; 0xc0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	400a      	ands	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005250:	f7ff fa40 	bl	80046d4 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e099      	b.n	8005394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005280:	e00f      	b.n	80052a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005282:	f7ff fa27 	bl	80046d4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b05      	cmp	r3, #5
 800528e:	d908      	bls.n	80052a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2203      	movs	r2, #3
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e078      	b.n	8005394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e8      	bne.n	8005282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4b38      	ldr	r3, [pc, #224]	; (800539c <HAL_DMA_Init+0x158>)
 80052bc:	4013      	ands	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d107      	bne.n	800530c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	4313      	orrs	r3, r2
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0307 	bic.w	r3, r3, #7
 8005322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b04      	cmp	r3, #4
 8005334:	d117      	bne.n	8005366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f8df 	bl	800550c <DMA_CheckFifoParam>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005362:	2301      	movs	r3, #1
 8005364:	e016      	b.n	8005394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f896 	bl	80054a0 <DMA_CalcBaseAndBitshift>
 8005374:	4603      	mov	r3, r0
 8005376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	223f      	movs	r2, #63	; 0x3f
 800537e:	409a      	lsls	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	f010803f 	.word	0xf010803f

080053a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e050      	b.n	8005454 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d101      	bne.n	80053c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
 80053c0:	e048      	b.n	8005454 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2221      	movs	r2, #33	; 0x21
 8005400:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f84c 	bl	80054a0 <DMA_CalcBaseAndBitshift>
 8005408:	4603      	mov	r3, r0
 800540a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d004      	beq.n	800547a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2280      	movs	r2, #128	; 0x80
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00c      	b.n	8005494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2205      	movs	r2, #5
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	3b10      	subs	r3, #16
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <DMA_CalcBaseAndBitshift+0x60>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054ba:	4a12      	ldr	r2, [pc, #72]	; (8005504 <DMA_CalcBaseAndBitshift+0x64>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d908      	bls.n	80054e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <DMA_CalcBaseAndBitshift+0x68>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	1d1a      	adds	r2, r3, #4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	659a      	str	r2, [r3, #88]	; 0x58
 80054de:	e006      	b.n	80054ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	4b08      	ldr	r3, [pc, #32]	; (8005508 <DMA_CalcBaseAndBitshift+0x68>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	aaaaaaab 	.word	0xaaaaaaab
 8005504:	0800f780 	.word	0x0800f780
 8005508:	fffffc00 	.word	0xfffffc00

0800550c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d11f      	bne.n	8005566 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d855      	bhi.n	80055d8 <DMA_CheckFifoParam+0xcc>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <DMA_CheckFifoParam+0x28>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005545 	.word	0x08005545
 8005538:	08005557 	.word	0x08005557
 800553c:	08005545 	.word	0x08005545
 8005540:	080055d9 	.word	0x080055d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d045      	beq.n	80055dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005554:	e042      	b.n	80055dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800555e:	d13f      	bne.n	80055e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005564:	e03c      	b.n	80055e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	d121      	bne.n	80055b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d836      	bhi.n	80055e4 <DMA_CheckFifoParam+0xd8>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <DMA_CheckFifoParam+0x70>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	0800558d 	.word	0x0800558d
 8005580:	08005593 	.word	0x08005593
 8005584:	0800558d 	.word	0x0800558d
 8005588:	080055a5 	.word	0x080055a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e02f      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d024      	beq.n	80055e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a2:	e021      	b.n	80055e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ac:	d11e      	bne.n	80055ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055b2:	e01b      	b.n	80055ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d902      	bls.n	80055c0 <DMA_CheckFifoParam+0xb4>
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d003      	beq.n	80055c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055be:	e018      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e015      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      break;
 80055d6:	e00b      	b.n	80055f0 <DMA_CheckFifoParam+0xe4>
      break;
 80055d8:	bf00      	nop
 80055da:	e00a      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;
 80055dc:	bf00      	nop
 80055de:	e008      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;
 80055e0:	bf00      	nop
 80055e2:	e006      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;
 80055e4:	bf00      	nop
 80055e6:	e004      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <DMA_CheckFifoParam+0xe6>
      break;
 80055f0:	bf00      	nop
    }
  } 
  
  return status; 
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e039      	b.n	8005686 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fe fad2 	bl	8003bd0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	f023 0107 	bic.w	r1, r3, #7
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_DMA2D_Init+0x90>)
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68d1      	ldr	r1, [r2, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	430b      	orrs	r3, r1
 8005674:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	ffffc000 	.word	0xffffc000

08005694 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA2D_Start+0x1c>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e018      	b.n	80056e2 <HAL_DMA2D_Start+0x4e>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f988 	bl	80059e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d056      	beq.n	80057b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005706:	f7fe ffe5 	bl	80046d4 <HAL_GetTick>
 800570a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800570c:	e04b      	b.n	80057a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2221      	movs	r2, #33	; 0x21
 8005752:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2204      	movs	r2, #4
 8005758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0a5      	b.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d01a      	beq.n	80057a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005770:	f7fe ffb0 	bl	80046d4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <HAL_DMA2D_PollForTransfer+0x9c>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2203      	movs	r2, #3
 8005796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e086      	b.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ac      	beq.n	800570e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d061      	beq.n	800589a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d6:	f7fe ff7d 	bl	80046d4 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80057dc:	e056      	b.n	800588c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02e      	beq.n	800584e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f043 0204 	orr.w	r2, r3, #4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0202 	orr.w	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	f043 0201 	orr.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2229      	movs	r2, #41	; 0x29
 8005838:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e032      	b.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d01a      	beq.n	800588c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005856:	f7fe ff3d 	bl	80046d4 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <HAL_DMA2D_PollForTransfer+0x182>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10f      	bne.n	800588c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e013      	b.n	80058b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0a1      	beq.n	80057de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2212      	movs	r2, #18
 80058a0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_DMA2D_ConfigLayer+0x20>
 80058d8:	2302      	movs	r3, #2
 80058da:	e079      	b.n	80059d0 <HAL_DMA2D_ConfigLayer+0x114>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3318      	adds	r3, #24
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005906:	4b35      	ldr	r3, [pc, #212]	; (80059dc <HAL_DMA2D_ConfigLayer+0x120>)
 8005908:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b0a      	cmp	r3, #10
 8005910:	d003      	beq.n	800591a <HAL_DMA2D_ConfigLayer+0x5e>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b09      	cmp	r3, #9
 8005918:	d107      	bne.n	800592a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e005      	b.n	8005936 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d120      	bne.n	800597e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	43db      	mvns	r3, r3
 8005946:	ea02 0103 	and.w	r1, r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	430a      	orrs	r2, r1
 8005952:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b0a      	cmp	r3, #10
 8005964:	d003      	beq.n	800596e <HAL_DMA2D_ConfigLayer+0xb2>
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b09      	cmp	r3, #9
 800596c:	d127      	bne.n	80059be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
 800597c:	e01f      	b.n	80059be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	43db      	mvns	r3, r3
 8005988:	ea02 0103 	and.w	r1, r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	430a      	orrs	r2, r1
 8005994:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b0a      	cmp	r3, #10
 80059a6:	d003      	beq.n	80059b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b09      	cmp	r3, #9
 80059ae:	d106      	bne.n	80059be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80059bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	ff03000f 	.word	0xff03000f

080059e0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b08b      	sub	sp, #44	; 0x2c
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	041a      	lsls	r2, r3, #16
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	431a      	orrs	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a18:	d174      	bne.n	8005b04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	e053      	b.n	8005afa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d106      	bne.n	8005a68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	e048      	b.n	8005afa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d111      	bne.n	8005a94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	0cdb      	lsrs	r3, r3, #19
 8005a74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	0a9b      	lsrs	r3, r3, #10
 8005a7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	08db      	lsrs	r3, r3, #3
 8005a80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	02db      	lsls	r3, r3, #11
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	e032      	b.n	8005afa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d117      	bne.n	8005acc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	0fdb      	lsrs	r3, r3, #31
 8005aa0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	0cdb      	lsrs	r3, r3, #19
 8005aa6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	0adb      	lsrs	r3, r3, #11
 8005aac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	08db      	lsrs	r3, r3, #3
 8005ab2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	029b      	lsls	r3, r3, #10
 8005abc:	431a      	orrs	r2, r3
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	03db      	lsls	r3, r3, #15
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aca:	e016      	b.n	8005afa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	0f1b      	lsrs	r3, r3, #28
 8005ad0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	0d1b      	lsrs	r3, r3, #20
 8005ad6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	0b1b      	lsrs	r3, r3, #12
 8005adc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	011a      	lsls	r2, r3, #4
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	431a      	orrs	r2, r3
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	4313      	orrs	r3, r2
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b02:	e003      	b.n	8005b0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	60da      	str	r2, [r3, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	372c      	adds	r7, #44	; 0x2c
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b089      	sub	sp, #36	; 0x24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	e175      	b.n	8005e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b38:	2201      	movs	r2, #1
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	f040 8164 	bne.w	8005e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d00b      	beq.n	8005b76 <HAL_GPIO_Init+0x5e>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d007      	beq.n	8005b76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b6a:	2b11      	cmp	r3, #17
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b12      	cmp	r3, #18
 8005b74:	d130      	bne.n	8005bd8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	2203      	movs	r2, #3
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bac:	2201      	movs	r2, #1
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 0201 	and.w	r2, r3, #1
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x100>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b12      	cmp	r3, #18
 8005c16:	d123      	bne.n	8005c60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	08da      	lsrs	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3208      	adds	r2, #8
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	220f      	movs	r2, #15
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	08da      	lsrs	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3208      	adds	r2, #8
 8005c5a:	69b9      	ldr	r1, [r7, #24]
 8005c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0203 	and.w	r2, r3, #3
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80be 	beq.w	8005e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca2:	4b65      	ldr	r3, [pc, #404]	; (8005e38 <HAL_GPIO_Init+0x320>)
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	4a64      	ldr	r2, [pc, #400]	; (8005e38 <HAL_GPIO_Init+0x320>)
 8005ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cac:	6453      	str	r3, [r2, #68]	; 0x44
 8005cae:	4b62      	ldr	r3, [pc, #392]	; (8005e38 <HAL_GPIO_Init+0x320>)
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005cba:	4a60      	ldr	r2, [pc, #384]	; (8005e3c <HAL_GPIO_Init+0x324>)
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	089b      	lsrs	r3, r3, #2
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	220f      	movs	r2, #15
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a57      	ldr	r2, [pc, #348]	; (8005e40 <HAL_GPIO_Init+0x328>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d037      	beq.n	8005d56 <HAL_GPIO_Init+0x23e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a56      	ldr	r2, [pc, #344]	; (8005e44 <HAL_GPIO_Init+0x32c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d031      	beq.n	8005d52 <HAL_GPIO_Init+0x23a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a55      	ldr	r2, [pc, #340]	; (8005e48 <HAL_GPIO_Init+0x330>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d02b      	beq.n	8005d4e <HAL_GPIO_Init+0x236>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a54      	ldr	r2, [pc, #336]	; (8005e4c <HAL_GPIO_Init+0x334>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d025      	beq.n	8005d4a <HAL_GPIO_Init+0x232>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a53      	ldr	r2, [pc, #332]	; (8005e50 <HAL_GPIO_Init+0x338>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01f      	beq.n	8005d46 <HAL_GPIO_Init+0x22e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a52      	ldr	r2, [pc, #328]	; (8005e54 <HAL_GPIO_Init+0x33c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d019      	beq.n	8005d42 <HAL_GPIO_Init+0x22a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a51      	ldr	r2, [pc, #324]	; (8005e58 <HAL_GPIO_Init+0x340>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_GPIO_Init+0x226>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a50      	ldr	r2, [pc, #320]	; (8005e5c <HAL_GPIO_Init+0x344>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00d      	beq.n	8005d3a <HAL_GPIO_Init+0x222>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a4f      	ldr	r2, [pc, #316]	; (8005e60 <HAL_GPIO_Init+0x348>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <HAL_GPIO_Init+0x21e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a4e      	ldr	r2, [pc, #312]	; (8005e64 <HAL_GPIO_Init+0x34c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_GPIO_Init+0x21a>
 8005d2e:	2309      	movs	r3, #9
 8005d30:	e012      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d32:	230a      	movs	r3, #10
 8005d34:	e010      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d36:	2308      	movs	r3, #8
 8005d38:	e00e      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d3a:	2307      	movs	r3, #7
 8005d3c:	e00c      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e00a      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e008      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e006      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e004      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e002      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <HAL_GPIO_Init+0x240>
 8005d56:	2300      	movs	r3, #0
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	f002 0203 	and.w	r2, r2, #3
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	4093      	lsls	r3, r2
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d68:	4934      	ldr	r1, [pc, #208]	; (8005e3c <HAL_GPIO_Init+0x324>)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d76:	4b3c      	ldr	r3, [pc, #240]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d9a:	4a33      	ldr	r2, [pc, #204]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dc4:	4a28      	ldr	r2, [pc, #160]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005df4:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e18:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <HAL_GPIO_Init+0x350>)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	f67f ae86 	bls.w	8005b38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3724      	adds	r7, #36	; 0x24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40013800 	.word	0x40013800
 8005e40:	40020000 	.word	0x40020000
 8005e44:	40020400 	.word	0x40020400
 8005e48:	40020800 	.word	0x40020800
 8005e4c:	40020c00 	.word	0x40020c00
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40021400 	.word	0x40021400
 8005e58:	40021800 	.word	0x40021800
 8005e5c:	40021c00 	.word	0x40021c00
 8005e60:	40022000 	.word	0x40022000
 8005e64:	40022400 	.word	0x40022400
 8005e68:	40013c00 	.word	0x40013c00

08005e6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e0d9      	b.n	800603c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e88:	2201      	movs	r2, #1
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	f040 80c9 	bne.w	8006036 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005ea4:	4a6a      	ldr	r2, [pc, #424]	; (8006050 <HAL_GPIO_DeInit+0x1e4>)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	3302      	adds	r3, #2
 8005eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	220f      	movs	r2, #15
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a62      	ldr	r2, [pc, #392]	; (8006054 <HAL_GPIO_DeInit+0x1e8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d037      	beq.n	8005f3e <HAL_GPIO_DeInit+0xd2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a61      	ldr	r2, [pc, #388]	; (8006058 <HAL_GPIO_DeInit+0x1ec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d031      	beq.n	8005f3a <HAL_GPIO_DeInit+0xce>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a60      	ldr	r2, [pc, #384]	; (800605c <HAL_GPIO_DeInit+0x1f0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02b      	beq.n	8005f36 <HAL_GPIO_DeInit+0xca>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a5f      	ldr	r2, [pc, #380]	; (8006060 <HAL_GPIO_DeInit+0x1f4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d025      	beq.n	8005f32 <HAL_GPIO_DeInit+0xc6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a5e      	ldr	r2, [pc, #376]	; (8006064 <HAL_GPIO_DeInit+0x1f8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d01f      	beq.n	8005f2e <HAL_GPIO_DeInit+0xc2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a5d      	ldr	r2, [pc, #372]	; (8006068 <HAL_GPIO_DeInit+0x1fc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d019      	beq.n	8005f2a <HAL_GPIO_DeInit+0xbe>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a5c      	ldr	r2, [pc, #368]	; (800606c <HAL_GPIO_DeInit+0x200>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_GPIO_DeInit+0xba>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a5b      	ldr	r2, [pc, #364]	; (8006070 <HAL_GPIO_DeInit+0x204>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00d      	beq.n	8005f22 <HAL_GPIO_DeInit+0xb6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a5a      	ldr	r2, [pc, #360]	; (8006074 <HAL_GPIO_DeInit+0x208>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <HAL_GPIO_DeInit+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a59      	ldr	r2, [pc, #356]	; (8006078 <HAL_GPIO_DeInit+0x20c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_GPIO_DeInit+0xae>
 8005f16:	2309      	movs	r3, #9
 8005f18:	e012      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f1a:	230a      	movs	r3, #10
 8005f1c:	e010      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	e00e      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f22:	2307      	movs	r3, #7
 8005f24:	e00c      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f26:	2306      	movs	r3, #6
 8005f28:	e00a      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f2a:	2305      	movs	r3, #5
 8005f2c:	e008      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f2e:	2304      	movs	r3, #4
 8005f30:	e006      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f32:	2303      	movs	r3, #3
 8005f34:	e004      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e002      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <HAL_GPIO_DeInit+0xd4>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	f002 0203 	and.w	r2, r2, #3
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	4093      	lsls	r3, r2
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d132      	bne.n	8005fb6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f50:	4b4a      	ldr	r3, [pc, #296]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	4948      	ldr	r1, [pc, #288]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f5e:	4b47      	ldr	r3, [pc, #284]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	4945      	ldr	r1, [pc, #276]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005f6c:	4b43      	ldr	r3, [pc, #268]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	4941      	ldr	r1, [pc, #260]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005f7a:	4b40      	ldr	r3, [pc, #256]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	493e      	ldr	r1, [pc, #248]	; (800607c <HAL_GPIO_DeInit+0x210>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	220f      	movs	r2, #15
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005f98:	4a2d      	ldr	r2, [pc, #180]	; (8006050 <HAL_GPIO_DeInit+0x1e4>)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	089b      	lsrs	r3, r3, #2
 8005f9e:	3302      	adds	r3, #2
 8005fa0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	4829      	ldr	r0, [pc, #164]	; (8006050 <HAL_GPIO_DeInit+0x1e4>)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	089b      	lsrs	r3, r3, #2
 8005fae:	400a      	ands	r2, r1
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	2103      	movs	r1, #3
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	08da      	lsrs	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	220f      	movs	r2, #15
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	08d2      	lsrs	r2, r2, #3
 8005fec:	4019      	ands	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3208      	adds	r2, #8
 8005ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	2103      	movs	r1, #3
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	2101      	movs	r1, #1
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	fa01 f303 	lsl.w	r3, r1, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	401a      	ands	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	2103      	movs	r1, #3
 800602a:	fa01 f303 	lsl.w	r3, r1, r3
 800602e:	43db      	mvns	r3, r3
 8006030:	401a      	ands	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	3301      	adds	r3, #1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b0f      	cmp	r3, #15
 8006040:	f67f af22 	bls.w	8005e88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40013800 	.word	0x40013800
 8006054:	40020000 	.word	0x40020000
 8006058:	40020400 	.word	0x40020400
 800605c:	40020800 	.word	0x40020800
 8006060:	40020c00 	.word	0x40020c00
 8006064:	40021000 	.word	0x40021000
 8006068:	40021400 	.word	0x40021400
 800606c:	40021800 	.word	0x40021800
 8006070:	40021c00 	.word	0x40021c00
 8006074:	40022000 	.word	0x40022000
 8006078:	40022400 	.word	0x40022400
 800607c:	40013c00 	.word	0x40013c00

08006080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	887b      	ldrh	r3, [r7, #2]
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
 800609c:	e001      	b.n	80060a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
 80060bc:	4613      	mov	r3, r2
 80060be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060c0:	787b      	ldrb	r3, [r7, #1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80060cc:	e003      	b.n	80060d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80060ce:	887b      	ldrh	r3, [r7, #2]
 80060d0:	041a      	lsls	r2, r3, #16
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	619a      	str	r2, [r3, #24]
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd fd80 	bl	8003c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2224      	movs	r2, #36	; 0x24
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	e006      	b.n	800616c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800616a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d104      	bne.n	800617e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800617c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <HAL_I2C_Init+0x11c>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800619c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	ea42 0103 	orr.w	r1, r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	021a      	lsls	r2, r3, #8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	02008000 	.word	0x02008000

08006204 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e021      	b.n	800625a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2224      	movs	r2, #36	; 0x24
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fd fd66 	bl	8003d00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	817b      	strh	r3, [r7, #10]
 8006276:	460b      	mov	r3, r1
 8006278:	813b      	strh	r3, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b20      	cmp	r3, #32
 8006288:	f040 80f9 	bne.w	800647e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_I2C_Mem_Write+0x34>
 8006292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0ed      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Mem_Write+0x4e>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0e6      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062ba:	f7fe fa0b 	bl	80046d4 <HAL_GetTick>
 80062be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2319      	movs	r3, #25
 80062c6:	2201      	movs	r2, #1
 80062c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fad1 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0d1      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	; 0x21
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006304:	88f8      	ldrh	r0, [r7, #6]
 8006306:	893a      	ldrh	r2, [r7, #8]
 8006308:	8979      	ldrh	r1, [r7, #10]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4603      	mov	r3, r0
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f9e1 	bl	80066dc <I2C_RequestMemoryWrite>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0a9      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2bff      	cmp	r3, #255	; 0xff
 8006334:	d90e      	bls.n	8006354 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	b2da      	uxtb	r2, r3
 8006342:	8979      	ldrh	r1, [r7, #10]
 8006344:	2300      	movs	r3, #0
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fbb3 	bl	8006ab8 <I2C_TransferConfig>
 8006352:	e00f      	b.n	8006374 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	b2da      	uxtb	r2, r3
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fba2 	bl	8006ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fabb 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e07b      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	781a      	ldrb	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d034      	beq.n	800642c <HAL_I2C_Mem_Write+0x1c8>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d130      	bne.n	800642c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	2200      	movs	r2, #0
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa4d 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e04d      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d90e      	bls.n	800640c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	8979      	ldrh	r1, [r7, #10]
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fb57 	bl	8006ab8 <I2C_TransferConfig>
 800640a:	e00f      	b.n	800642c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641a:	b2da      	uxtb	r2, r3
 800641c:	8979      	ldrh	r1, [r7, #10]
 800641e:	2300      	movs	r3, #0
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fb46 	bl	8006ab8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d19e      	bne.n	8006374 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fa9a 	bl	8006974 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e01a      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2220      	movs	r2, #32
 8006450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <HAL_I2C_Mem_Write+0x224>)
 800645e:	400b      	ands	r3, r1
 8006460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	fe00e800 	.word	0xfe00e800

0800648c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4603      	mov	r3, r0
 800649c:	817b      	strh	r3, [r7, #10]
 800649e:	460b      	mov	r3, r1
 80064a0:	813b      	strh	r3, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 80fd 	bne.w	80066ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x34>
 80064ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0f1      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Mem_Read+0x4e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0ea      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064e2:	f7fe f8f7 	bl	80046d4 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2319      	movs	r3, #25
 80064ee:	2201      	movs	r2, #1
 80064f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f9bd 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0d5      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2222      	movs	r2, #34	; 0x22
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800652c:	88f8      	ldrh	r0, [r7, #6]
 800652e:	893a      	ldrh	r2, [r7, #8]
 8006530:	8979      	ldrh	r1, [r7, #10]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4603      	mov	r3, r0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f921 	bl	8006784 <I2C_RequestMemoryRead>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0ad      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	; 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <HAL_I2C_Mem_Read+0x22c>)
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fa9f 	bl	8006ab8 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <HAL_I2C_Mem_Read+0x22c>)
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fa8e 	bl	8006ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2200      	movs	r2, #0
 80065a4:	2104      	movs	r1, #4
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f964 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e07c      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d034      	beq.n	800665c <HAL_I2C_Mem_Read+0x1d0>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d130      	bne.n	800665c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	2200      	movs	r2, #0
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f935 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e04d      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	d90e      	bls.n	800663c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	b2da      	uxtb	r2, r3
 800662a:	8979      	ldrh	r1, [r7, #10]
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fa3f 	bl	8006ab8 <I2C_TransferConfig>
 800663a:	e00f      	b.n	800665c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664a:	b2da      	uxtb	r2, r3
 800664c:	8979      	ldrh	r1, [r7, #10]
 800664e:	2300      	movs	r3, #0
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fa2e 	bl	8006ab8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d19a      	bne.n	800659c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f982 	bl	8006974 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e01a      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2220      	movs	r2, #32
 8006680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_I2C_Mem_Read+0x230>)
 800668e:	400b      	ands	r3, r1
 8006690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	80002400 	.word	0x80002400
 80066bc:	fe00e800 	.word	0xfe00e800

080066c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ce:	b2db      	uxtb	r3, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	8979      	ldrh	r1, [r7, #10]
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <I2C_RequestMemoryWrite+0xa4>)
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f9d7 	bl	8006ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f8f0 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e02c      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006724:	893b      	ldrh	r3, [r7, #8]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	629a      	str	r2, [r3, #40]	; 0x28
 800672e:	e015      	b.n	800675c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	b29b      	uxth	r3, r3
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f8d6 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e012      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006752:	893b      	ldrh	r3, [r7, #8]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2200      	movs	r2, #0
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f884 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e000      	b.n	8006778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	80002000 	.word	0x80002000

08006784 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	817b      	strh	r3, [r7, #10]
 8006796:	460b      	mov	r3, r1
 8006798:	813b      	strh	r3, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	8979      	ldrh	r1, [r7, #10]
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <I2C_RequestMemoryRead+0xa4>)
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2300      	movs	r3, #0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f984 	bl	8006ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f89d 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02c      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067ca:	893b      	ldrh	r3, [r7, #8]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	e015      	b.n	8006802 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067d6:	893b      	ldrh	r3, [r7, #8]
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	b29b      	uxth	r3, r3
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f883 	bl	80068f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e012      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067f8:	893b      	ldrh	r3, [r7, #8]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2200      	movs	r2, #0
 800680a:	2140      	movs	r1, #64	; 0x40
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f831 	bl	8006874 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	80002000 	.word	0x80002000

0800682c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b02      	cmp	r3, #2
 8006840:	d103      	bne.n	800684a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d007      	beq.n	8006868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	619a      	str	r2, [r3, #24]
  }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006884:	e022      	b.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d01e      	beq.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fd ff21 	bl	80046d4 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d113      	bne.n	80068cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e00f      	b.n	80068ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	429a      	cmp	r2, r3
 80068da:	bf0c      	ite	eq
 80068dc:	2301      	moveq	r3, #1
 80068de:	2300      	movne	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d0cd      	beq.n	8006886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006900:	e02c      	b.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f870 	bl	80069ec <I2C_IsAcknowledgeFailed>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e02a      	b.n	800696c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d01e      	beq.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691e:	f7fd fed9 	bl	80046d4 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d1cb      	bne.n	8006902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006980:	e028      	b.n	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f830 	bl	80069ec <I2C_IsAcknowledgeFailed>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e026      	b.n	80069e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fd fe9d 	bl	80046d4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d113      	bne.n	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e007      	b.n	80069e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d1cf      	bne.n	8006982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d151      	bne.n	8006aaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a06:	e022      	b.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d01e      	beq.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a10:	f7fd fe60 	bl	80046d4 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <I2C_IsAcknowledgeFailed+0x3a>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d113      	bne.n	8006a4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e02e      	b.n	8006aac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d1d5      	bne.n	8006a08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2210      	movs	r2, #16
 8006a62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fedd 	bl	800682c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	fe00e800 	.word	0xfe00e800

08006ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	607b      	str	r3, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	0d5b      	lsrs	r3, r3, #21
 8006ad4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <I2C_TransferConfig+0x58>)
 8006ada:	430b      	orrs	r3, r1
 8006adc:	43db      	mvns	r3, r3
 8006ade:	ea02 0103 	and.w	r1, r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ae8:	7a7b      	ldrb	r3, [r7, #9]
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	431a      	orrs	r2, r3
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	03ff63ff 	.word	0x03ff63ff

08006b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d138      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e032      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d139      	bne.n	8006c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e033      	b.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2224      	movs	r2, #36	; 0x24
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0bf      	b.n	8006dd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fd f884 	bl	8003d78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6899      	ldr	r1, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	; (8006de0 <HAL_LTDC_Init+0x19c>)
 8006cb8:	400b      	ands	r3, r1
 8006cba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	041b      	lsls	r3, r3, #16
 8006cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6899      	ldr	r1, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68d9      	ldr	r1, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b3e      	ldr	r3, [pc, #248]	; (8006de0 <HAL_LTDC_Init+0x19c>)
 8006ce6:	400b      	ands	r3, r1
 8006ce8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68d9      	ldr	r1, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6919      	ldr	r1, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b33      	ldr	r3, [pc, #204]	; (8006de0 <HAL_LTDC_Init+0x19c>)
 8006d14:	400b      	ands	r3, r1
 8006d16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6919      	ldr	r1, [r3, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6959      	ldr	r1, [r3, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <HAL_LTDC_Init+0x19c>)
 8006d42:	400b      	ands	r3, r1
 8006d44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6959      	ldr	r1, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0206 	orr.w	r2, r2, #6
 8006db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	f000f800 	.word	0xf000f800

08006de4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d023      	beq.n	8006e4e <HAL_LTDC_IRQHandler+0x6a>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01e      	beq.n	8006e4e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2204      	movs	r2, #4
 8006e26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e2e:	f043 0201 	orr.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f86f 	bl	8006f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d023      	beq.n	8006ea0 <HAL_LTDC_IRQHandler+0xbc>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01e      	beq.n	8006ea0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0202 	bic.w	r2, r2, #2
 8006e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2202      	movs	r2, #2
 8006e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e80:	f043 0202 	orr.w	r2, r3, #2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f846 	bl	8006f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <HAL_LTDC_IRQHandler+0xfe>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d016      	beq.n	8006ee2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f82f 	bl	8006f40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <HAL_LTDC_IRQHandler+0x140>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d016      	beq.n	8006f24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0208 	bic.w	r2, r2, #8
 8006f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f818 	bl	8006f54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f68:	b5b0      	push	{r4, r5, r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_LTDC_ConfigLayer+0x1a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e02c      	b.n	8006fdc <HAL_LTDC_ConfigLayer+0x74>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2134      	movs	r1, #52	; 0x34
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f81f 	bl	8007000 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bdb0      	pop	{r4, r5, r7, pc}

08006fe4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ff2:	b2db      	uxtb	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800701c:	4413      	add	r3, r2
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	01db      	lsls	r3, r3, #7
 800702c:	4413      	add	r3, r2
 800702e:	3384      	adds	r3, #132	; 0x84
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	4611      	mov	r1, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	01d2      	lsls	r2, r2, #7
 800703c:	440a      	add	r2, r1
 800703e:	3284      	adds	r2, #132	; 0x84
 8007040:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007044:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007056:	4413      	add	r3, r2
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	440b      	add	r3, r1
 8007066:	3384      	adds	r3, #132	; 0x84
 8007068:	4619      	mov	r1, r3
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4313      	orrs	r3, r2
 800706e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707e:	4413      	add	r3, r2
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	01db      	lsls	r3, r3, #7
 800708e:	4413      	add	r3, r2
 8007090:	3384      	adds	r3, #132	; 0x84
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	4611      	mov	r1, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	01d2      	lsls	r2, r2, #7
 800709e:	440a      	add	r2, r1
 80070a0:	3284      	adds	r2, #132	; 0x84
 80070a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80070a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070b6:	4413      	add	r3, r2
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	440b      	add	r3, r1
 80070c6:	3384      	adds	r3, #132	; 0x84
 80070c8:	4619      	mov	r1, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	01db      	lsls	r3, r3, #7
 80070da:	4413      	add	r3, r2
 80070dc:	3384      	adds	r3, #132	; 0x84
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	4611      	mov	r1, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	01d2      	lsls	r2, r2, #7
 80070ea:	440a      	add	r2, r1
 80070ec:	3284      	adds	r2, #132	; 0x84
 80070ee:	f023 0307 	bic.w	r3, r3, #7
 80070f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	01db      	lsls	r3, r3, #7
 80070fe:	4413      	add	r3, r2
 8007100:	3384      	adds	r3, #132	; 0x84
 8007102:	461a      	mov	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	4413      	add	r3, r2
 8007132:	3384      	adds	r3, #132	; 0x84
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	01db      	lsls	r3, r3, #7
 8007140:	4413      	add	r3, r2
 8007142:	3384      	adds	r3, #132	; 0x84
 8007144:	461a      	mov	r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007150:	461a      	mov	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	431a      	orrs	r2, r3
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	440b      	add	r3, r1
 8007166:	3384      	adds	r3, #132	; 0x84
 8007168:	4619      	mov	r1, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	01db      	lsls	r3, r3, #7
 800717a:	4413      	add	r3, r2
 800717c:	3384      	adds	r3, #132	; 0x84
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	4611      	mov	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	01d2      	lsls	r2, r2, #7
 800718a:	440a      	add	r2, r1
 800718c:	3284      	adds	r2, #132	; 0x84
 800718e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007192:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	01db      	lsls	r3, r3, #7
 800719e:	4413      	add	r3, r2
 80071a0:	3384      	adds	r3, #132	; 0x84
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	01db      	lsls	r3, r3, #7
 80071b4:	4413      	add	r3, r2
 80071b6:	3384      	adds	r3, #132	; 0x84
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	3384      	adds	r3, #132	; 0x84
 80071c8:	4619      	mov	r1, r3
 80071ca:	4b58      	ldr	r3, [pc, #352]	; (800732c <LTDC_SetConfig+0x32c>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	6809      	ldr	r1, [r1, #0]
 80071dc:	4608      	mov	r0, r1
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	01c9      	lsls	r1, r1, #7
 80071e2:	4401      	add	r1, r0
 80071e4:	3184      	adds	r1, #132	; 0x84
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	4413      	add	r3, r2
 80071f6:	3384      	adds	r3, #132	; 0x84
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	01db      	lsls	r3, r3, #7
 8007204:	4413      	add	r3, r2
 8007206:	3384      	adds	r3, #132	; 0x84
 8007208:	461a      	mov	r2, r3
 800720a:	2300      	movs	r3, #0
 800720c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	01db      	lsls	r3, r3, #7
 8007218:	4413      	add	r3, r2
 800721a:	3384      	adds	r3, #132	; 0x84
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800722c:	2304      	movs	r3, #4
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e01b      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800723a:	2303      	movs	r3, #3
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e014      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d00b      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800724c:	2b02      	cmp	r3, #2
 800724e:	d007      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007254:	2b03      	cmp	r3, #3
 8007256:	d003      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800725c:	2b07      	cmp	r3, #7
 800725e:	d102      	bne.n	8007266 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007260:	2302      	movs	r3, #2
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e001      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	4413      	add	r3, r2
 8007276:	3384      	adds	r3, #132	; 0x84
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	4611      	mov	r1, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	01d2      	lsls	r2, r2, #7
 8007284:	440a      	add	r2, r1
 8007286:	3284      	adds	r2, #132	; 0x84
 8007288:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800728c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	fb02 f303 	mul.w	r3, r2, r3
 8007298:	041a      	lsls	r2, r3, #16
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6859      	ldr	r1, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	1acb      	subs	r3, r1, r3
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	3303      	adds	r3, #3
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	6809      	ldr	r1, [r1, #0]
 80072b0:	4608      	mov	r0, r1
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	01c9      	lsls	r1, r1, #7
 80072b6:	4401      	add	r1, r0
 80072b8:	3184      	adds	r1, #132	; 0x84
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	01db      	lsls	r3, r3, #7
 80072c8:	4413      	add	r3, r2
 80072ca:	3384      	adds	r3, #132	; 0x84
 80072cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	01db      	lsls	r3, r3, #7
 80072d8:	440b      	add	r3, r1
 80072da:	3384      	adds	r3, #132	; 0x84
 80072dc:	4619      	mov	r1, r3
 80072de:	4b14      	ldr	r3, [pc, #80]	; (8007330 <LTDC_SetConfig+0x330>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	01db      	lsls	r3, r3, #7
 80072ee:	4413      	add	r3, r2
 80072f0:	3384      	adds	r3, #132	; 0x84
 80072f2:	461a      	mov	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	; 0x84
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	4611      	mov	r1, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	01d2      	lsls	r2, r2, #7
 8007314:	440a      	add	r2, r1
 8007316:	3284      	adds	r2, #132	; 0x84
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	fffff8f8 	.word	0xfffff8f8
 8007330:	fffff800 	.word	0xfffff800

08007334 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800733e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40007000 	.word	0x40007000

08007354 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800735e:	4b23      	ldr	r3, [pc, #140]	; (80073ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a22      	ldr	r2, [pc, #136]	; (80073ec <HAL_PWREx_EnableOverDrive+0x98>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_PWREx_EnableOverDrive+0x98>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007376:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1d      	ldr	r2, [pc, #116]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007380:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007382:	f7fd f9a7 	bl	80046d4 <HAL_GetTick>
 8007386:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007388:	e009      	b.n	800739e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800738a:	f7fd f9a3 	bl	80046d4 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007398:	d901      	bls.n	800739e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e022      	b.n	80073e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073aa:	d1ee      	bne.n	800738a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b8:	f7fd f98c 	bl	80046d4 <HAL_GetTick>
 80073bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073be:	e009      	b.n	80073d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073c0:	f7fd f988 	bl	80046d4 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ce:	d901      	bls.n	80073d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e007      	b.n	80073e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e0:	d1ee      	bne.n	80073c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40007000 	.word	0x40007000

080073f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80073fc:	2300      	movs	r3, #0
 80073fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e291      	b.n	800792e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8087 	beq.w	8007526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007418:	4b96      	ldr	r3, [pc, #600]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 030c 	and.w	r3, r3, #12
 8007420:	2b04      	cmp	r3, #4
 8007422:	d00c      	beq.n	800743e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007424:	4b93      	ldr	r3, [pc, #588]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b08      	cmp	r3, #8
 800742e:	d112      	bne.n	8007456 <HAL_RCC_OscConfig+0x62>
 8007430:	4b90      	ldr	r3, [pc, #576]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800743c:	d10b      	bne.n	8007456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743e:	4b8d      	ldr	r3, [pc, #564]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d06c      	beq.n	8007524 <HAL_RCC_OscConfig+0x130>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d168      	bne.n	8007524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e26b      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745e:	d106      	bne.n	800746e <HAL_RCC_OscConfig+0x7a>
 8007460:	4b84      	ldr	r3, [pc, #528]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a83      	ldr	r2, [pc, #524]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	e02e      	b.n	80074cc <HAL_RCC_OscConfig+0xd8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10c      	bne.n	8007490 <HAL_RCC_OscConfig+0x9c>
 8007476:	4b7f      	ldr	r3, [pc, #508]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a7e      	ldr	r2, [pc, #504]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800747c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	4b7c      	ldr	r3, [pc, #496]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a7b      	ldr	r2, [pc, #492]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	e01d      	b.n	80074cc <HAL_RCC_OscConfig+0xd8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007498:	d10c      	bne.n	80074b4 <HAL_RCC_OscConfig+0xc0>
 800749a:	4b76      	ldr	r3, [pc, #472]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a75      	ldr	r2, [pc, #468]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	4b73      	ldr	r3, [pc, #460]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a72      	ldr	r2, [pc, #456]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e00b      	b.n	80074cc <HAL_RCC_OscConfig+0xd8>
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6e      	ldr	r2, [pc, #440]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	4b6c      	ldr	r3, [pc, #432]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a6b      	ldr	r2, [pc, #428]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d013      	beq.n	80074fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fd f8fe 	bl	80046d4 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074dc:	f7fd f8fa 	bl	80046d4 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b64      	cmp	r3, #100	; 0x64
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e21f      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ee:	4b61      	ldr	r3, [pc, #388]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0xe8>
 80074fa:	e014      	b.n	8007526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fd f8ea 	bl	80046d4 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007504:	f7fd f8e6 	bl	80046d4 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b64      	cmp	r3, #100	; 0x64
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e20b      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007516:	4b57      	ldr	r3, [pc, #348]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x110>
 8007522:	e000      	b.n	8007526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d069      	beq.n	8007606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007532:	4b50      	ldr	r3, [pc, #320]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800753e:	4b4d      	ldr	r3, [pc, #308]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 030c 	and.w	r3, r3, #12
 8007546:	2b08      	cmp	r3, #8
 8007548:	d11c      	bne.n	8007584 <HAL_RCC_OscConfig+0x190>
 800754a:	4b4a      	ldr	r3, [pc, #296]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d116      	bne.n	8007584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <HAL_RCC_OscConfig+0x17a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d001      	beq.n	800756e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e1df      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	493d      	ldr	r1, [pc, #244]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800757e:	4313      	orrs	r3, r2
 8007580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007582:	e040      	b.n	8007606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d023      	beq.n	80075d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800758c:	4b39      	ldr	r3, [pc, #228]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a38      	ldr	r2, [pc, #224]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fd f89c 	bl	80046d4 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a0:	f7fd f898 	bl	80046d4 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e1bd      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b2:	4b30      	ldr	r3, [pc, #192]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4929      	ldr	r1, [pc, #164]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	600b      	str	r3, [r1, #0]
 80075d2:	e018      	b.n	8007606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075d4:	4b27      	ldr	r3, [pc, #156]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a26      	ldr	r2, [pc, #152]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e0:	f7fd f878 	bl	80046d4 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e8:	f7fd f874 	bl	80046d4 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e199      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d038      	beq.n	8007684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d019      	beq.n	800764e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 800761c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761e:	4a15      	ldr	r2, [pc, #84]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007626:	f7fd f855 	bl	80046d4 <HAL_GetTick>
 800762a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800762c:	e008      	b.n	8007640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800762e:	f7fd f851 	bl	80046d4 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e176      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007640:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0f0      	beq.n	800762e <HAL_RCC_OscConfig+0x23a>
 800764c:	e01a      	b.n	8007684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007652:	4a08      	ldr	r2, [pc, #32]	; (8007674 <HAL_RCC_OscConfig+0x280>)
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765a:	f7fd f83b 	bl	80046d4 <HAL_GetTick>
 800765e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007660:	e00a      	b.n	8007678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007662:	f7fd f837 	bl	80046d4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d903      	bls.n	8007678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e15c      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
 8007674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007678:	4b91      	ldr	r3, [pc, #580]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800767a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1ee      	bne.n	8007662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80a4 	beq.w	80077da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007692:	4b8b      	ldr	r3, [pc, #556]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800769e:	4b88      	ldr	r3, [pc, #544]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	4a87      	ldr	r2, [pc, #540]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6413      	str	r3, [r2, #64]	; 0x40
 80076aa:	4b85      	ldr	r3, [pc, #532]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b2:	60bb      	str	r3, [r7, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076ba:	4b82      	ldr	r3, [pc, #520]	; (80078c4 <HAL_RCC_OscConfig+0x4d0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d118      	bne.n	80076f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80076c6:	4b7f      	ldr	r3, [pc, #508]	; (80078c4 <HAL_RCC_OscConfig+0x4d0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a7e      	ldr	r2, [pc, #504]	; (80078c4 <HAL_RCC_OscConfig+0x4d0>)
 80076cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076d2:	f7fc ffff 	bl	80046d4 <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076da:	f7fc fffb 	bl	80046d4 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b64      	cmp	r3, #100	; 0x64
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e120      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076ec:	4b75      	ldr	r3, [pc, #468]	; (80078c4 <HAL_RCC_OscConfig+0x4d0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0f0      	beq.n	80076da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <HAL_RCC_OscConfig+0x31a>
 8007700:	4b6f      	ldr	r3, [pc, #444]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	4a6e      	ldr	r2, [pc, #440]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007706:	f043 0301 	orr.w	r3, r3, #1
 800770a:	6713      	str	r3, [r2, #112]	; 0x70
 800770c:	e02d      	b.n	800776a <HAL_RCC_OscConfig+0x376>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x33c>
 8007716:	4b6a      	ldr	r3, [pc, #424]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771a:	4a69      	ldr	r2, [pc, #420]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	6713      	str	r3, [r2, #112]	; 0x70
 8007722:	4b67      	ldr	r3, [pc, #412]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007726:	4a66      	ldr	r2, [pc, #408]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007728:	f023 0304 	bic.w	r3, r3, #4
 800772c:	6713      	str	r3, [r2, #112]	; 0x70
 800772e:	e01c      	b.n	800776a <HAL_RCC_OscConfig+0x376>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b05      	cmp	r3, #5
 8007736:	d10c      	bne.n	8007752 <HAL_RCC_OscConfig+0x35e>
 8007738:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800773a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773c:	4a60      	ldr	r2, [pc, #384]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800773e:	f043 0304 	orr.w	r3, r3, #4
 8007742:	6713      	str	r3, [r2, #112]	; 0x70
 8007744:	4b5e      	ldr	r3, [pc, #376]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	4a5d      	ldr	r2, [pc, #372]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6713      	str	r3, [r2, #112]	; 0x70
 8007750:	e00b      	b.n	800776a <HAL_RCC_OscConfig+0x376>
 8007752:	4b5b      	ldr	r3, [pc, #364]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a5a      	ldr	r2, [pc, #360]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	6713      	str	r3, [r2, #112]	; 0x70
 800775e:	4b58      	ldr	r3, [pc, #352]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007762:	4a57      	ldr	r2, [pc, #348]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d015      	beq.n	800779e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007772:	f7fc ffaf 	bl	80046d4 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007778:	e00a      	b.n	8007790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777a:	f7fc ffab 	bl	80046d4 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	f241 3288 	movw	r2, #5000	; 0x1388
 8007788:	4293      	cmp	r3, r2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e0ce      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0ee      	beq.n	800777a <HAL_RCC_OscConfig+0x386>
 800779c:	e014      	b.n	80077c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779e:	f7fc ff99 	bl	80046d4 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077a4:	e00a      	b.n	80077bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a6:	f7fc ff95 	bl	80046d4 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e0b8      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077bc:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1ee      	bne.n	80077a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ce:	4b3c      	ldr	r3, [pc, #240]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	4a3b      	ldr	r2, [pc, #236]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80a4 	beq.w	800792c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077e4:	4b36      	ldr	r3, [pc, #216]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 030c 	and.w	r3, r3, #12
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d06b      	beq.n	80078c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d149      	bne.n	800788c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f8:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80077fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007804:	f7fc ff66 	bl	80046d4 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800780c:	f7fc ff62 	bl	80046d4 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e087      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800781e:	4b28      	ldr	r3, [pc, #160]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69da      	ldr	r2, [r3, #28]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	019b      	lsls	r3, r3, #6
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	3b01      	subs	r3, #1
 8007844:	041b      	lsls	r3, r3, #16
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	061b      	lsls	r3, r3, #24
 800784e:	4313      	orrs	r3, r2
 8007850:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007856:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007858:	4b19      	ldr	r3, [pc, #100]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a18      	ldr	r2, [pc, #96]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800785e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007864:	f7fc ff36 	bl	80046d4 <HAL_GetTick>
 8007868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800786a:	e008      	b.n	800787e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800786c:	f7fc ff32 	bl	80046d4 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d901      	bls.n	800787e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e057      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f0      	beq.n	800786c <HAL_RCC_OscConfig+0x478>
 800788a:	e04f      	b.n	800792c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 8007892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007898:	f7fc ff1c 	bl	80046d4 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a0:	f7fc ff18 	bl	80046d4 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e03d      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x4ac>
 80078be:	e035      	b.n	800792c <HAL_RCC_OscConfig+0x538>
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <HAL_RCC_OscConfig+0x544>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d028      	beq.n	8007928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d121      	bne.n	8007928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d11a      	bne.n	8007928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80078f8:	4013      	ands	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007900:	4293      	cmp	r3, r2
 8007902:	d111      	bne.n	8007928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	3b01      	subs	r3, #1
 8007912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d107      	bne.n	8007928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d001      	beq.n	800792c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40023800 	.word	0x40023800

0800793c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e0d0      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007954:	4b6a      	ldr	r3, [pc, #424]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d910      	bls.n	8007984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007962:	4b67      	ldr	r3, [pc, #412]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f023 020f 	bic.w	r2, r3, #15
 800796a:	4965      	ldr	r1, [pc, #404]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	4313      	orrs	r3, r2
 8007970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007972:	4b63      	ldr	r3, [pc, #396]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d001      	beq.n	8007984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0b8      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800799c:	4b59      	ldr	r3, [pc, #356]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a58      	ldr	r2, [pc, #352]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b4:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4a52      	ldr	r2, [pc, #328]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c0:	4b50      	ldr	r3, [pc, #320]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	494d      	ldr	r1, [pc, #308]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d040      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d107      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d115      	bne.n	8007a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e07f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d107      	bne.n	8007a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fe:	4b41      	ldr	r3, [pc, #260]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e073      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0e:	4b3d      	ldr	r3, [pc, #244]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e06b      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a1e:	4b39      	ldr	r3, [pc, #228]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f023 0203 	bic.w	r2, r3, #3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4936      	ldr	r1, [pc, #216]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a30:	f7fc fe50 	bl	80046d4 <HAL_GetTick>
 8007a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a36:	e00a      	b.n	8007a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a38:	f7fc fe4c 	bl	80046d4 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e053      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 020c 	and.w	r2, r3, #12
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d1eb      	bne.n	8007a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d210      	bcs.n	8007a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f023 020f 	bic.w	r2, r3, #15
 8007a76:	4922      	ldr	r1, [pc, #136]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <HAL_RCC_ClockConfig+0x1c4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d001      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e032      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4916      	ldr	r1, [pc, #88]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	490e      	ldr	r1, [pc, #56]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ace:	f000 f821 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	4a0a      	ldr	r2, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x1cc>)
 8007ae0:	5cd3      	ldrb	r3, [r2, r3]
 8007ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <HAL_RCC_ClockConfig+0x1d0>)
 8007ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <HAL_RCC_ClockConfig+0x1d4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fc fcca 	bl	8004488 <HAL_InitTick>

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40023c00 	.word	0x40023c00
 8007b04:	40023800 	.word	0x40023800
 8007b08:	0800f768 	.word	0x0800f768
 8007b0c:	20000048 	.word	0x20000048
 8007b10:	2000004c 	.word	0x2000004c

08007b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b2a:	4b50      	ldr	r3, [pc, #320]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d007      	beq.n	8007b46 <HAL_RCC_GetSysClockFreq+0x32>
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d008      	beq.n	8007b4c <HAL_RCC_GetSysClockFreq+0x38>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 808d 	bne.w	8007c5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b40:	4b4b      	ldr	r3, [pc, #300]	; (8007c70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007b42:	60bb      	str	r3, [r7, #8]
      break;
 8007b44:	e08c      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b46:	4b4b      	ldr	r3, [pc, #300]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b48:	60bb      	str	r3, [r7, #8]
      break;
 8007b4a:	e089      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b4c:	4b47      	ldr	r3, [pc, #284]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007b56:	4b45      	ldr	r3, [pc, #276]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d023      	beq.n	8007baa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b62:	4b42      	ldr	r3, [pc, #264]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	f04f 0400 	mov.w	r4, #0
 8007b6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	ea03 0501 	and.w	r5, r3, r1
 8007b78:	ea04 0602 	and.w	r6, r4, r2
 8007b7c:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b7e:	fb02 f106 	mul.w	r1, r2, r6
 8007b82:	2200      	movs	r2, #0
 8007b84:	fb02 f205 	mul.w	r2, r2, r5
 8007b88:	440a      	add	r2, r1
 8007b8a:	493a      	ldr	r1, [pc, #232]	; (8007c74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b8c:	fba5 0101 	umull	r0, r1, r5, r1
 8007b90:	1853      	adds	r3, r2, r1
 8007b92:	4619      	mov	r1, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f04f 0400 	mov.w	r4, #0
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	f7f8 fb87 	bl	80002b0 <__aeabi_uldivmod>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e049      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007baa:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	099b      	lsrs	r3, r3, #6
 8007bb0:	f04f 0400 	mov.w	r4, #0
 8007bb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	ea03 0501 	and.w	r5, r3, r1
 8007bc0:	ea04 0602 	and.w	r6, r4, r2
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4632      	mov	r2, r6
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	f04f 0400 	mov.w	r4, #0
 8007bd0:	0154      	lsls	r4, r2, #5
 8007bd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007bd6:	014b      	lsls	r3, r1, #5
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4622      	mov	r2, r4
 8007bdc:	1b49      	subs	r1, r1, r5
 8007bde:	eb62 0206 	sbc.w	r2, r2, r6
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	f04f 0400 	mov.w	r4, #0
 8007bea:	0194      	lsls	r4, r2, #6
 8007bec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007bf0:	018b      	lsls	r3, r1, #6
 8007bf2:	1a5b      	subs	r3, r3, r1
 8007bf4:	eb64 0402 	sbc.w	r4, r4, r2
 8007bf8:	f04f 0100 	mov.w	r1, #0
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	00e2      	lsls	r2, r4, #3
 8007c02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007c06:	00d9      	lsls	r1, r3, #3
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	195b      	adds	r3, r3, r5
 8007c0e:	eb44 0406 	adc.w	r4, r4, r6
 8007c12:	f04f 0100 	mov.w	r1, #0
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	02a2      	lsls	r2, r4, #10
 8007c1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007c20:	0299      	lsls	r1, r3, #10
 8007c22:	460b      	mov	r3, r1
 8007c24:	4614      	mov	r4, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	4621      	mov	r1, r4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f04f 0400 	mov.w	r4, #0
 8007c30:	461a      	mov	r2, r3
 8007c32:	4623      	mov	r3, r4
 8007c34:	f7f8 fb3c 	bl	80002b0 <__aeabi_uldivmod>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	; (8007c6c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	0c1b      	lsrs	r3, r3, #16
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	3301      	adds	r3, #1
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c56:	60bb      	str	r3, [r7, #8]
      break;
 8007c58:	e002      	b.n	8007c60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c5a:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007c5c:	60bb      	str	r3, [r7, #8]
      break;
 8007c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c60:	68bb      	ldr	r3, [r7, #8]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	00f42400 	.word	0x00f42400
 8007c74:	017d7840 	.word	0x017d7840

08007c78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c7c:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000048 	.word	0x20000048

08007c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c94:	f7ff fff0 	bl	8007c78 <HAL_RCC_GetHCLKFreq>
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	0a9b      	lsrs	r3, r3, #10
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	4a03      	ldr	r2, [pc, #12]	; (8007cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ca6:	5cd3      	ldrb	r3, [r2, r3]
 8007ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	0800f778 	.word	0x0800f778

08007cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007cbc:	f7ff ffdc 	bl	8007c78 <HAL_RCC_GetHCLKFreq>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	0b5b      	lsrs	r3, r3, #13
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4a03      	ldr	r2, [pc, #12]	; (8007cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cce:	5cd3      	ldrb	r3, [r2, r3]
 8007cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	0800f778 	.word	0x0800f778

08007ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	220f      	movs	r2, #15
 8007cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cf0:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <HAL_RCC_GetClockConfig+0x5c>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0203 	and.w	r2, r3, #3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <HAL_RCC_GetClockConfig+0x5c>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <HAL_RCC_GetClockConfig+0x5c>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <HAL_RCC_GetClockConfig+0x5c>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	08db      	lsrs	r3, r3, #3
 8007d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <HAL_RCC_GetClockConfig+0x60>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	601a      	str	r2, [r3, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40023800 	.word	0x40023800
 8007d40:	40023c00 	.word	0x40023c00

08007d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d6c:	4b69      	ldr	r3, [pc, #420]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4a68      	ldr	r2, [pc, #416]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007d76:	6093      	str	r3, [r2, #8]
 8007d78:	4b66      	ldr	r3, [pc, #408]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	4964      	ldr	r1, [pc, #400]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d017      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d9e:	4b5d      	ldr	r3, [pc, #372]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dac:	4959      	ldr	r1, [pc, #356]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dbc:	d101      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d017      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007dda:	4b4e      	ldr	r3, [pc, #312]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	494a      	ldr	r1, [pc, #296]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007df8:	d101      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007e06:	2301      	movs	r3, #1
 8007e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 808b 	beq.w	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e28:	4b3a      	ldr	r3, [pc, #232]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	4a39      	ldr	r2, [pc, #228]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e32:	6413      	str	r3, [r2, #64]	; 0x40
 8007e34:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e40:	4b35      	ldr	r3, [pc, #212]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a34      	ldr	r2, [pc, #208]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fc fc42 	bl	80046d4 <HAL_GetTick>
 8007e50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e54:	f7fc fc3e 	bl	80046d4 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	; 0x64
 8007e60:	d901      	bls.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e355      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007e66:	4b2c      	ldr	r3, [pc, #176]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e72:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d035      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d02e      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007eb2:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007eb8:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d114      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fc fc06 	bl	80046d4 <HAL_GetTick>
 8007ec8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eca:	e00a      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ecc:	f7fc fc02 	bl	80046d4 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e317      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ee      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007efa:	d111      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007efc:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007f08:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	4901      	ldr	r1, [pc, #4]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	e00b      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40007000 	.word	0x40007000
 8007f1c:	0ffffcff 	.word	0x0ffffcff
 8007f20:	4bb0      	ldr	r3, [pc, #704]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	4aaf      	ldr	r2, [pc, #700]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007f2a:	6093      	str	r3, [r2, #8]
 8007f2c:	4bad      	ldr	r3, [pc, #692]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f38:	49aa      	ldr	r1, [pc, #680]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d010      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f4a:	4ba6      	ldr	r3, [pc, #664]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f50:	4aa4      	ldr	r2, [pc, #656]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007f5a:	4ba2      	ldr	r3, [pc, #648]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	499f      	ldr	r1, [pc, #636]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f78:	4b9a      	ldr	r3, [pc, #616]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f86:	4997      	ldr	r1, [pc, #604]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f9a:	4b92      	ldr	r3, [pc, #584]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa8:	498e      	ldr	r1, [pc, #568]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fca:	4986      	ldr	r1, [pc, #536]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fde:	4b81      	ldr	r3, [pc, #516]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	497d      	ldr	r1, [pc, #500]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008000:	4b78      	ldr	r3, [pc, #480]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008006:	f023 0203 	bic.w	r2, r3, #3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	4975      	ldr	r1, [pc, #468]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008022:	4b70      	ldr	r3, [pc, #448]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	f023 020c 	bic.w	r2, r3, #12
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008030:	496c      	ldr	r1, [pc, #432]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008044:	4b67      	ldr	r3, [pc, #412]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008052:	4964      	ldr	r1, [pc, #400]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008066:	4b5f      	ldr	r3, [pc, #380]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008074:	495b      	ldr	r1, [pc, #364]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00a      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008088:	4b56      	ldr	r3, [pc, #344]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	4953      	ldr	r1, [pc, #332]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008098:	4313      	orrs	r3, r2
 800809a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80080aa:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b8:	494a      	ldr	r1, [pc, #296]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080da:	4942      	ldr	r1, [pc, #264]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80080ee:	4b3d      	ldr	r3, [pc, #244]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fc:	4939      	ldr	r1, [pc, #228]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008110:	4b34      	ldr	r3, [pc, #208]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800811e:	4931      	ldr	r1, [pc, #196]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d011      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008132:	4b2c      	ldr	r3, [pc, #176]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008138:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008140:	4928      	ldr	r1, [pc, #160]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008142:	4313      	orrs	r3, r2
 8008144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800814c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008150:	d101      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008152:	2301      	movs	r3, #1
 8008154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008162:	2301      	movs	r3, #1
 8008164:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008172:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008180:	4918      	ldr	r1, [pc, #96]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008194:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a4:	490f      	ldr	r1, [pc, #60]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d005      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ba:	f040 80d8 	bne.w	800836e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ca:	f7fc fa83 	bl	80046d4 <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081d0:	e00a      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081d2:	f7fc fa7f 	bl	80046d4 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b64      	cmp	r3, #100	; 0x64
 80081de:	d903      	bls.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e196      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80081e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081e8:	4b6c      	ldr	r3, [pc, #432]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1ee      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d021      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11d      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008208:	4b64      	ldr	r3, [pc, #400]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800820a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008216:	4b61      	ldr	r3, [pc, #388]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	019a      	lsls	r2, r3, #6
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	431a      	orrs	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	061b      	lsls	r3, r3, #24
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	071b      	lsls	r3, r3, #28
 800823c:	4957      	ldr	r1, [pc, #348]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008258:	d00a      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008262:	2b00      	cmp	r3, #0
 8008264:	d02e      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800826e:	d129      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008270:	4b4a      	ldr	r3, [pc, #296]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800827e:	4b47      	ldr	r3, [pc, #284]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008284:	0f1b      	lsrs	r3, r3, #28
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	019a      	lsls	r2, r3, #6
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	041b      	lsls	r3, r3, #16
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	061b      	lsls	r3, r3, #24
 800829e:	431a      	orrs	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	071b      	lsls	r3, r3, #28
 80082a4:	493d      	ldr	r1, [pc, #244]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082ac:	4b3b      	ldr	r3, [pc, #236]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80082ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b2:	f023 021f 	bic.w	r2, r3, #31
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	3b01      	subs	r3, #1
 80082bc:	4937      	ldr	r1, [pc, #220]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01d      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082d0:	4b32      	ldr	r3, [pc, #200]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80082d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d6:	0e1b      	lsrs	r3, r3, #24
 80082d8:	f003 030f 	and.w	r3, r3, #15
 80082dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80082de:	4b2f      	ldr	r3, [pc, #188]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80082e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e4:	0f1b      	lsrs	r3, r3, #28
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	019a      	lsls	r2, r3, #6
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	431a      	orrs	r2, r3
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	431a      	orrs	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	071b      	lsls	r3, r3, #28
 8008304:	4925      	ldr	r1, [pc, #148]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d011      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	019a      	lsls	r2, r3, #6
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	041b      	lsls	r3, r3, #16
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	061b      	lsls	r3, r3, #24
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	071b      	lsls	r3, r3, #28
 8008334:	4919      	ldr	r1, [pc, #100]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800833c:	4b17      	ldr	r3, [pc, #92]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a16      	ldr	r2, [pc, #88]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008348:	f7fc f9c4 	bl	80046d4 <HAL_GetTick>
 800834c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800834e:	e008      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008350:	f7fc f9c0 	bl	80046d4 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b64      	cmp	r3, #100	; 0x64
 800835c:	d901      	bls.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e0d7      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008362:	4b0e      	ldr	r3, [pc, #56]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f0      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b01      	cmp	r3, #1
 8008372:	f040 80cd 	bne.w	8008510 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a08      	ldr	r2, [pc, #32]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800837c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008382:	f7fc f9a7 	bl	80046d4 <HAL_GetTick>
 8008386:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008388:	e00a      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800838a:	f7fc f9a3 	bl	80046d4 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b64      	cmp	r3, #100	; 0x64
 8008396:	d903      	bls.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e0ba      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800839c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80083a0:	4b5e      	ldr	r3, [pc, #376]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ac:	d0ed      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d02e      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d12a      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083d6:	4b51      	ldr	r3, [pc, #324]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083e4:	4b4d      	ldr	r3, [pc, #308]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80083e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	019a      	lsls	r2, r3, #6
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	061b      	lsls	r3, r3, #24
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	071b      	lsls	r3, r3, #28
 800840a:	4944      	ldr	r1, [pc, #272]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008412:	4b42      	ldr	r3, [pc, #264]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008418:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	3b01      	subs	r3, #1
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	493d      	ldr	r1, [pc, #244]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d022      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008440:	d11d      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008442:	4b36      	ldr	r3, [pc, #216]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008448:	0e1b      	lsrs	r3, r3, #24
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008450:	4b32      	ldr	r3, [pc, #200]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008456:	0f1b      	lsrs	r3, r3, #28
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	019a      	lsls	r2, r3, #6
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	431a      	orrs	r2, r3
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	061b      	lsls	r3, r3, #24
 8008470:	431a      	orrs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	071b      	lsls	r3, r3, #28
 8008476:	4929      	ldr	r1, [pc, #164]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008478:	4313      	orrs	r3, r2
 800847a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d028      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800848a:	4b24      	ldr	r3, [pc, #144]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	0e1b      	lsrs	r3, r3, #24
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008498:	4b20      	ldr	r3, [pc, #128]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849e:	0c1b      	lsrs	r3, r3, #16
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	019a      	lsls	r2, r3, #6
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	431a      	orrs	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	071b      	lsls	r3, r3, #28
 80084be:	4917      	ldr	r1, [pc, #92]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	4911      	ldr	r1, [pc, #68]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0e      	ldr	r2, [pc, #56]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e8:	f7fc f8f4 	bl	80046d4 <HAL_GetTick>
 80084ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80084ee:	e008      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084f0:	f7fc f8f0 	bl	80046d4 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b64      	cmp	r3, #100	; 0x64
 80084fc:	d901      	bls.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e007      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008502:	4b06      	ldr	r3, [pc, #24]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800850a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800850e:	d1ef      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3720      	adds	r7, #32
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40023800 	.word	0x40023800

08008520 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e06b      	b.n	800860a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7f5b      	ldrb	r3, [r3, #29]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d105      	bne.n	8008548 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fb fce0 	bl	8003f08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	22ca      	movs	r2, #202	; 0xca
 8008554:	625a      	str	r2, [r3, #36]	; 0x24
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2253      	movs	r2, #83	; 0x53
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb00 	bl	8008b64 <RTC_EnterInitMode>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	22ff      	movs	r2, #255	; 0xff
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2204      	movs	r2, #4
 8008576:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e046      	b.n	800860a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	4b23      	ldr	r3, [pc, #140]	; (8008614 <HAL_RTC_Init+0xf4>)
 8008588:	400b      	ands	r3, r1
 800858a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	68d2      	ldr	r2, [r2, #12]
 80085b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6919      	ldr	r1, [r3, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	041a      	lsls	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0208 	bic.w	r2, r2, #8
 80085e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	22ff      	movs	r2, #255	; 0xff
 8008600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008608:	2300      	movs	r3, #0
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	ff8fffbf 	.word	0xff8fffbf

08008618 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008618:	b590      	push	{r4, r7, lr}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	7f1b      	ldrb	r3, [r3, #28]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_RTC_SetTime+0x1c>
 8008630:	2302      	movs	r3, #2
 8008632:	e0a8      	b.n	8008786 <HAL_RTC_SetTime+0x16e>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2202      	movs	r2, #2
 800863e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d126      	bne.n	8008694 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 faac 	bl	8008bbc <RTC_ByteToBcd2>
 8008664:	4603      	mov	r3, r0
 8008666:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 faa5 	bl	8008bbc <RTC_ByteToBcd2>
 8008672:	4603      	mov	r3, r0
 8008674:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008676:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	789b      	ldrb	r3, [r3, #2]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fa9d 	bl	8008bbc <RTC_ByteToBcd2>
 8008682:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008684:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	7b1b      	ldrb	r3, [r3, #12]
 800868c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e018      	b.n	80086c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d102      	bne.n	80086a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2200      	movs	r2, #0
 80086a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	7b1b      	ldrb	r3, [r3, #12]
 80086c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	22ca      	movs	r2, #202	; 0xca
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2253      	movs	r2, #83	; 0x53
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 fa44 	bl	8008b64 <RTC_EnterInitMode>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	22ff      	movs	r2, #255	; 0xff
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2204      	movs	r2, #4
 80086ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e045      	b.n	8008786 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	6979      	ldr	r1, [r7, #20]
 8008700:	4b23      	ldr	r3, [pc, #140]	; (8008790 <HAL_RTC_SetTime+0x178>)
 8008702:	400b      	ands	r3, r1
 8008704:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008714:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800873c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d111      	bne.n	8008770 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f9e1 	bl	8008b14 <HAL_RTC_WaitForSynchro>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	22ff      	movs	r2, #255	; 0xff
 800875e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2204      	movs	r2, #4
 8008764:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e00a      	b.n	8008786 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	22ff      	movs	r2, #255	; 0xff
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008784:	2300      	movs	r3, #0
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd90      	pop	{r4, r7, pc}
 800878e:	bf00      	nop
 8008790:	007f7f7f 	.word	0x007f7f7f

08008794 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	7f1b      	ldrb	r3, [r3, #28]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d101      	bne.n	80087b0 <HAL_RTC_SetDate+0x1c>
 80087ac:	2302      	movs	r3, #2
 80087ae:	e092      	b.n	80088d6 <HAL_RTC_SetDate+0x142>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2202      	movs	r2, #2
 80087ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10e      	bne.n	80087e0 <HAL_RTC_SetDate+0x4c>
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	f023 0310 	bic.w	r3, r3, #16
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	330a      	adds	r3, #10
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d11c      	bne.n	8008820 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	78db      	ldrb	r3, [r3, #3]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f9e6 	bl	8008bbc <RTC_ByteToBcd2>
 80087f0:	4603      	mov	r3, r0
 80087f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f9df 	bl	8008bbc <RTC_ByteToBcd2>
 80087fe:	4603      	mov	r3, r0
 8008800:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008802:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	789b      	ldrb	r3, [r3, #2]
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f9d7 	bl	8008bbc <RTC_ByteToBcd2>
 800880e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008810:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	e00e      	b.n	800883e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	78db      	ldrb	r3, [r3, #3]
 8008824:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800882c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008832:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	22ca      	movs	r2, #202	; 0xca
 8008844:	625a      	str	r2, [r3, #36]	; 0x24
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2253      	movs	r2, #83	; 0x53
 800884c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f988 	bl	8008b64 <RTC_EnterInitMode>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	22ff      	movs	r2, #255	; 0xff
 8008860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2204      	movs	r2, #4
 8008866:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e031      	b.n	80088d6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	6979      	ldr	r1, [r7, #20]
 8008878:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <HAL_RTC_SetDate+0x14c>)
 800887a:	400b      	ands	r3, r1
 800887c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800888c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d111      	bne.n	80088c0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f939 	bl	8008b14 <HAL_RTC_WaitForSynchro>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2204      	movs	r2, #4
 80088b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e00a      	b.n	80088d6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	22ff      	movs	r2, #255	; 0xff
 80088c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088d4:	2300      	movs	r3, #0
  }
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd90      	pop	{r4, r7, pc}
 80088de:	bf00      	nop
 80088e0:	00ffff3f 	.word	0x00ffff3f

080088e4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b089      	sub	sp, #36	; 0x24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	7f1b      	ldrb	r3, [r3, #28]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_RTC_SetAlarm+0x24>
 8008904:	2302      	movs	r3, #2
 8008906:	e101      	b.n	8008b0c <HAL_RTC_SetAlarm+0x228>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2202      	movs	r2, #2
 8008912:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d137      	bne.n	800898a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f942 	bl	8008bbc <RTC_ByteToBcd2>
 8008938:	4603      	mov	r3, r0
 800893a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f93b 	bl	8008bbc <RTC_ByteToBcd2>
 8008946:	4603      	mov	r3, r0
 8008948:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800894a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	789b      	ldrb	r3, [r3, #2]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f933 	bl	8008bbc <RTC_ByteToBcd2>
 8008956:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008958:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	7b1b      	ldrb	r3, [r3, #12]
 8008960:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008962:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f925 	bl	8008bbc <RTC_ByteToBcd2>
 8008972:	4603      	mov	r3, r0
 8008974:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008976:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800897e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008984:	4313      	orrs	r3, r2
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e023      	b.n	80089d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	7b1b      	ldrb	r3, [r3, #12]
 80089b6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	22ca      	movs	r2, #202	; 0xca
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2253      	movs	r2, #83	; 0x53
 80089ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f6:	d13f      	bne.n	8008a78 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a06:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a16:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a18:	f7fb fe5c 	bl	80046d4 <HAL_GetTick>
 8008a1c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a1e:	e013      	b.n	8008a48 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a20:	f7fb fe58 	bl	80046d4 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a2e:	d90b      	bls.n	8008a48 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e061      	b.n	8008b0c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0e4      	beq.n	8008a20 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a74:	609a      	str	r2, [r3, #8]
 8008a76:	e03e      	b.n	8008af6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a86:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a96:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a98:	f7fb fe1c 	bl	80046d4 <HAL_GetTick>
 8008a9c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008a9e:	e013      	b.n	8008ac8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008aa0:	f7fb fe18 	bl	80046d4 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aae:	d90b      	bls.n	8008ac8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2203      	movs	r2, #3
 8008abc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e021      	b.n	8008b0c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0e4      	beq.n	8008aa0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	22ff      	movs	r2, #255	; 0xff
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3724      	adds	r7, #36	; 0x24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd90      	pop	{r4, r7, pc}

08008b14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b30:	f7fb fdd0 	bl	80046d4 <HAL_GetTick>
 8008b34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b36:	e009      	b.n	8008b4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b38:	f7fb fdcc 	bl	80046d4 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b46:	d901      	bls.n	8008b4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e007      	b.n	8008b5c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0ee      	beq.n	8008b38 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d119      	bne.n	8008bb2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b88:	f7fb fda4 	bl	80046d4 <HAL_GetTick>
 8008b8c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b8e:	e009      	b.n	8008ba4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b90:	f7fb fda0 	bl	80046d4 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9e:	d901      	bls.n	8008ba4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e007      	b.n	8008bb4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0ee      	beq.n	8008b90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008bca:	e005      	b.n	8008bd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	3b0a      	subs	r3, #10
 8008bd6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d8f6      	bhi.n	8008bcc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	7f1b      	ldrb	r3, [r3, #28]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e03e      	b.n	8008c92 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	4b1e      	ldr	r3, [pc, #120]	; (8008ca0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ca      	movs	r2, #202	; 0xca
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2253      	movs	r2, #83	; 0x53
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0206 	bic.w	r2, r2, #6
 8008c52:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689a      	ldr	r2, [r3, #8]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	22ff      	movs	r2, #255	; 0xff
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	fffff7f7 	.word	0xfffff7f7

08008ca4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e025      	b.n	8008d04 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fb fbd1 	bl	8004474 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	f001 fff7 	bl	800acd8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	f002 f861 	bl	800adbc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d101      	bne.n	8008d28 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008d24:	2302      	movs	r3, #2
 8008d26:	e018      	b.n	8008d5a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f002 f8bf 	bl	800aebc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d104      	bne.n	8008d50 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008d4e:	e003      	b.n	8008d58 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d101      	bne.n	8008d7c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e00e      	b.n	8008d9a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 f8b7 	bl	800aefe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e084      	b.n	8008ebe <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fb f8b4 	bl	8003f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008df4:	d902      	bls.n	8008dfc <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e002      	b.n	8008e02 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e0a:	d007      	beq.n	8008e1c <HAL_SPI_Init+0x7a>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e14:	d002      	beq.n	8008e1c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e2c:	d903      	bls.n	8008e36 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2202      	movs	r2, #2
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30
 8008e34:	e002      	b.n	8008e3c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	ea42 0103 	orr.w	r1, r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	0c1b      	lsrs	r3, r3, #16
 8008e7c:	f003 0204 	and.w	r2, r3, #4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	ea42 0103 	orr.w	r1, r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69da      	ldr	r2, [r3, #28]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e01d      	b.n	8008f14 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7fb f897 	bl	8004020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f000 fbc3 	bl	8009690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <HAL_TIM_Base_Start_IT+0x50>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b06      	cmp	r3, #6
 8008f44:	d00b      	beq.n	8008f5e <HAL_TIM_Base_Start_IT+0x42>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d007      	beq.n	8008f5e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0201 	orr.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	00010007 	.word	0x00010007

08008f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e01d      	b.n	8008fbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f815 	bl	8008fc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f000 fb6e 	bl	8009690 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d122      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d11b      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0202 	mvn.w	r2, #2
 8009006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fb19 	bl	8009654 <HAL_TIM_IC_CaptureCallback>
 8009022:	e005      	b.n	8009030 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fb0b 	bl	8009640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fb1c 	bl	8009668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b04      	cmp	r3, #4
 8009042:	d122      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b04      	cmp	r3, #4
 8009050:	d11b      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f06f 0204 	mvn.w	r2, #4
 800905a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 faef 	bl	8009654 <HAL_TIM_IC_CaptureCallback>
 8009076:	e005      	b.n	8009084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fae1 	bl	8009640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 faf2 	bl	8009668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d122      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d11b      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f06f 0208 	mvn.w	r2, #8
 80090ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fac5 	bl	8009654 <HAL_TIM_IC_CaptureCallback>
 80090ca:	e005      	b.n	80090d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fab7 	bl	8009640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fac8 	bl	8009668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d122      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d11b      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f06f 0210 	mvn.w	r2, #16
 8009102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2208      	movs	r2, #8
 8009108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa9b 	bl	8009654 <HAL_TIM_IC_CaptureCallback>
 800911e:	e005      	b.n	800912c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa8d 	bl	8009640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa9e 	bl	8009668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10e      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f06f 0201 	mvn.w	r2, #1
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7f9 fb4d 	bl	80027f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009168:	2b80      	cmp	r3, #128	; 0x80
 800916a:	d10e      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d107      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 ffb9 	bl	800a0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d10e      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d107      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 ffac 	bl	800a110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d10e      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b40      	cmp	r3, #64	; 0x40
 80091d2:	d107      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa4c 	bl	800967c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d107      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0220 	mvn.w	r2, #32
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 ff6c 	bl	800a0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800922e:	2302      	movs	r3, #2
 8009230:	e105      	b.n	800943e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2202      	movs	r2, #2
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b14      	cmp	r3, #20
 8009246:	f200 80f0 	bhi.w	800942a <HAL_TIM_PWM_ConfigChannel+0x212>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	080092a5 	.word	0x080092a5
 8009254:	0800942b 	.word	0x0800942b
 8009258:	0800942b 	.word	0x0800942b
 800925c:	0800942b 	.word	0x0800942b
 8009260:	080092e5 	.word	0x080092e5
 8009264:	0800942b 	.word	0x0800942b
 8009268:	0800942b 	.word	0x0800942b
 800926c:	0800942b 	.word	0x0800942b
 8009270:	08009327 	.word	0x08009327
 8009274:	0800942b 	.word	0x0800942b
 8009278:	0800942b 	.word	0x0800942b
 800927c:	0800942b 	.word	0x0800942b
 8009280:	08009367 	.word	0x08009367
 8009284:	0800942b 	.word	0x0800942b
 8009288:	0800942b 	.word	0x0800942b
 800928c:	0800942b 	.word	0x0800942b
 8009290:	080093a9 	.word	0x080093a9
 8009294:	0800942b 	.word	0x0800942b
 8009298:	0800942b 	.word	0x0800942b
 800929c:	0800942b 	.word	0x0800942b
 80092a0:	080093e9 	.word	0x080093e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fa90 	bl	80097d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6999      	ldr	r1, [r3, #24]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	619a      	str	r2, [r3, #24]
      break;
 80092e2:	e0a3      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fae2 	bl	80098b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699a      	ldr	r2, [r3, #24]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6999      	ldr	r1, [r3, #24]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	021a      	lsls	r2, r3, #8
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	619a      	str	r2, [r3, #24]
      break;
 8009324:	e082      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fb39 	bl	80099a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0208 	orr.w	r2, r2, #8
 8009340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0204 	bic.w	r2, r2, #4
 8009350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69d9      	ldr	r1, [r3, #28]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	61da      	str	r2, [r3, #28]
      break;
 8009364:	e062      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fb8f 	bl	8009a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69d9      	ldr	r1, [r3, #28]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	021a      	lsls	r2, r3, #8
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	61da      	str	r2, [r3, #28]
      break;
 80093a6:	e041      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fbc6 	bl	8009b40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0208 	orr.w	r2, r2, #8
 80093c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0204 	bic.w	r2, r2, #4
 80093d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093e6:	e021      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68b9      	ldr	r1, [r7, #8]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fbf8 	bl	8009be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	021a      	lsls	r2, r3, #8
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009428:	e000      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800942a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_TIM_ConfigClockSource+0x18>
 800945c:	2302      	movs	r3, #2
 800945e:	e0a6      	b.n	80095ae <HAL_TIM_ConfigClockSource+0x166>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <HAL_TIM_ConfigClockSource+0x170>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009486:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b40      	cmp	r3, #64	; 0x40
 8009496:	d067      	beq.n	8009568 <HAL_TIM_ConfigClockSource+0x120>
 8009498:	2b40      	cmp	r3, #64	; 0x40
 800949a:	d80b      	bhi.n	80094b4 <HAL_TIM_ConfigClockSource+0x6c>
 800949c:	2b10      	cmp	r3, #16
 800949e:	d073      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	d802      	bhi.n	80094aa <HAL_TIM_ConfigClockSource+0x62>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d06f      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80094a8:	e078      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d06c      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
 80094ae:	2b30      	cmp	r3, #48	; 0x30
 80094b0:	d06a      	beq.n	8009588 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80094b2:	e073      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094b4:	2b70      	cmp	r3, #112	; 0x70
 80094b6:	d00d      	beq.n	80094d4 <HAL_TIM_ConfigClockSource+0x8c>
 80094b8:	2b70      	cmp	r3, #112	; 0x70
 80094ba:	d804      	bhi.n	80094c6 <HAL_TIM_ConfigClockSource+0x7e>
 80094bc:	2b50      	cmp	r3, #80	; 0x50
 80094be:	d033      	beq.n	8009528 <HAL_TIM_ConfigClockSource+0xe0>
 80094c0:	2b60      	cmp	r3, #96	; 0x60
 80094c2:	d041      	beq.n	8009548 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80094c4:	e06a      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ca:	d066      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x152>
 80094cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d0:	d017      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80094d2:	e063      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	6899      	ldr	r1, [r3, #8]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f000 fcd4 	bl	8009e90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	609a      	str	r2, [r3, #8]
      break;
 8009500:	e04c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6899      	ldr	r1, [r3, #8]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f000 fcbd 	bl	8009e90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009524:	609a      	str	r2, [r3, #8]
      break;
 8009526:	e039      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	6859      	ldr	r1, [r3, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	461a      	mov	r2, r3
 8009536:	f000 fc31 	bl	8009d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2150      	movs	r1, #80	; 0x50
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fc8a 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009546:	e029      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6859      	ldr	r1, [r3, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	461a      	mov	r2, r3
 8009556:	f000 fc50 	bl	8009dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2160      	movs	r1, #96	; 0x60
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fc7a 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009566:	e019      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	461a      	mov	r2, r3
 8009576:	f000 fc11 	bl	8009d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2140      	movs	r1, #64	; 0x40
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fc6a 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009586:	e009      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f000 fc61 	bl	8009e5a <TIM_ITRx_SetConfig>
      break;
 8009598:	e000      	b.n	800959c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800959a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	fffeff88 	.word	0xfffeff88

080095bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e031      	b.n	8009638 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fb50 	bl	8009c8c <TIM_SlaveTimer_SetConfig>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e018      	b.n	8009638 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009614:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009624:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a40      	ldr	r2, [pc, #256]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d013      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ae:	d00f      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a3d      	ldr	r2, [pc, #244]	; (80097a8 <TIM_Base_SetConfig+0x118>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00b      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a3c      	ldr	r2, [pc, #240]	; (80097ac <TIM_Base_SetConfig+0x11c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d007      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a3b      	ldr	r2, [pc, #236]	; (80097b0 <TIM_Base_SetConfig+0x120>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a3a      	ldr	r2, [pc, #232]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d108      	bne.n	80096e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a2f      	ldr	r2, [pc, #188]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d02b      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d027      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a2c      	ldr	r2, [pc, #176]	; (80097a8 <TIM_Base_SetConfig+0x118>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d023      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <TIM_Base_SetConfig+0x11c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d01f      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a2a      	ldr	r2, [pc, #168]	; (80097b0 <TIM_Base_SetConfig+0x120>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d01b      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a29      	ldr	r2, [pc, #164]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d017      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a28      	ldr	r2, [pc, #160]	; (80097b8 <TIM_Base_SetConfig+0x128>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d013      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a27      	ldr	r2, [pc, #156]	; (80097bc <TIM_Base_SetConfig+0x12c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00f      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a26      	ldr	r2, [pc, #152]	; (80097c0 <TIM_Base_SetConfig+0x130>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00b      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a25      	ldr	r2, [pc, #148]	; (80097c4 <TIM_Base_SetConfig+0x134>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d007      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a24      	ldr	r2, [pc, #144]	; (80097c8 <TIM_Base_SetConfig+0x138>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d003      	beq.n	8009742 <TIM_Base_SetConfig+0xb2>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a23      	ldr	r2, [pc, #140]	; (80097cc <TIM_Base_SetConfig+0x13c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d108      	bne.n	8009754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a0a      	ldr	r2, [pc, #40]	; (80097a4 <TIM_Base_SetConfig+0x114>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_Base_SetConfig+0xf8>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a0c      	ldr	r2, [pc, #48]	; (80097b4 <TIM_Base_SetConfig+0x124>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d103      	bne.n	8009790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	615a      	str	r2, [r3, #20]
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40000400 	.word	0x40000400
 80097ac:	40000800 	.word	0x40000800
 80097b0:	40000c00 	.word	0x40000c00
 80097b4:	40010400 	.word	0x40010400
 80097b8:	40014000 	.word	0x40014000
 80097bc:	40014400 	.word	0x40014400
 80097c0:	40014800 	.word	0x40014800
 80097c4:	40001800 	.word	0x40001800
 80097c8:	40001c00 	.word	0x40001c00
 80097cc:	40002000 	.word	0x40002000

080097d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	f023 0201 	bic.w	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <TIM_OC1_SetConfig+0xd8>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0303 	bic.w	r3, r3, #3
 8009806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f023 0302 	bic.w	r3, r3, #2
 8009818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4313      	orrs	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <TIM_OC1_SetConfig+0xdc>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d003      	beq.n	8009834 <TIM_OC1_SetConfig+0x64>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a20      	ldr	r2, [pc, #128]	; (80098b0 <TIM_OC1_SetConfig+0xe0>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d10c      	bne.n	800984e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f023 0308 	bic.w	r3, r3, #8
 800983a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f023 0304 	bic.w	r3, r3, #4
 800984c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a16      	ldr	r2, [pc, #88]	; (80098ac <TIM_OC1_SetConfig+0xdc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d003      	beq.n	800985e <TIM_OC1_SetConfig+0x8e>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <TIM_OC1_SetConfig+0xe0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d111      	bne.n	8009882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800986c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	4313      	orrs	r3, r2
 8009876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4313      	orrs	r3, r2
 8009880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	fffeff8f 	.word	0xfffeff8f
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40010400 	.word	0x40010400

080098b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f023 0210 	bic.w	r2, r3, #16
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4b2e      	ldr	r3, [pc, #184]	; (8009998 <TIM_OC2_SetConfig+0xe4>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f023 0320 	bic.w	r3, r3, #32
 80098fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a23      	ldr	r2, [pc, #140]	; (800999c <TIM_OC2_SetConfig+0xe8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d003      	beq.n	800991c <TIM_OC2_SetConfig+0x68>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a22      	ldr	r2, [pc, #136]	; (80099a0 <TIM_OC2_SetConfig+0xec>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d10d      	bne.n	8009938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a18      	ldr	r2, [pc, #96]	; (800999c <TIM_OC2_SetConfig+0xe8>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d003      	beq.n	8009948 <TIM_OC2_SetConfig+0x94>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a17      	ldr	r2, [pc, #92]	; (80099a0 <TIM_OC2_SetConfig+0xec>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d113      	bne.n	8009970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800994e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4313      	orrs	r3, r2
 8009962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	4313      	orrs	r3, r2
 800996e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	621a      	str	r2, [r3, #32]
}
 800998a:	bf00      	nop
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	feff8fff 	.word	0xfeff8fff
 800999c:	40010000 	.word	0x40010000
 80099a0:	40010400 	.word	0x40010400

080099a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4b2d      	ldr	r3, [pc, #180]	; (8009a84 <TIM_OC3_SetConfig+0xe0>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a22      	ldr	r2, [pc, #136]	; (8009a88 <TIM_OC3_SetConfig+0xe4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d003      	beq.n	8009a0a <TIM_OC3_SetConfig+0x66>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a21      	ldr	r2, [pc, #132]	; (8009a8c <TIM_OC3_SetConfig+0xe8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d10d      	bne.n	8009a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	021b      	lsls	r3, r3, #8
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <TIM_OC3_SetConfig+0xe4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d003      	beq.n	8009a36 <TIM_OC3_SetConfig+0x92>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <TIM_OC3_SetConfig+0xe8>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d113      	bne.n	8009a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	621a      	str	r2, [r3, #32]
}
 8009a78:	bf00      	nop
 8009a7a:	371c      	adds	r7, #28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	fffeff8f 	.word	0xfffeff8f
 8009a88:	40010000 	.word	0x40010000
 8009a8c:	40010400 	.word	0x40010400

08009a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <TIM_OC4_SetConfig+0xa4>)
 8009abc:	4013      	ands	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	031b      	lsls	r3, r3, #12
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a13      	ldr	r2, [pc, #76]	; (8009b38 <TIM_OC4_SetConfig+0xa8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d003      	beq.n	8009af8 <TIM_OC4_SetConfig+0x68>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a12      	ldr	r2, [pc, #72]	; (8009b3c <TIM_OC4_SetConfig+0xac>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d109      	bne.n	8009b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	019b      	lsls	r3, r3, #6
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	621a      	str	r2, [r3, #32]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	feff8fff 	.word	0xfeff8fff
 8009b38:	40010000 	.word	0x40010000
 8009b3c:	40010400 	.word	0x40010400

08009b40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <TIM_OC5_SetConfig+0x98>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a12      	ldr	r2, [pc, #72]	; (8009bdc <TIM_OC5_SetConfig+0x9c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d003      	beq.n	8009b9e <TIM_OC5_SetConfig+0x5e>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a11      	ldr	r2, [pc, #68]	; (8009be0 <TIM_OC5_SetConfig+0xa0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d109      	bne.n	8009bb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	021b      	lsls	r3, r3, #8
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	621a      	str	r2, [r3, #32]
}
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	fffeff8f 	.word	0xfffeff8f
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40010400 	.word	0x40010400

08009be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4b1c      	ldr	r3, [pc, #112]	; (8009c80 <TIM_OC6_SetConfig+0x9c>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	051b      	lsls	r3, r3, #20
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a13      	ldr	r2, [pc, #76]	; (8009c84 <TIM_OC6_SetConfig+0xa0>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <TIM_OC6_SetConfig+0x60>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a12      	ldr	r2, [pc, #72]	; (8009c88 <TIM_OC6_SetConfig+0xa4>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d109      	bne.n	8009c58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	029b      	lsls	r3, r3, #10
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	feff8fff 	.word	0xfeff8fff
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40010400 	.word	0x40010400

08009c8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4b39      	ldr	r3, [pc, #228]	; (8009d98 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b30      	cmp	r3, #48	; 0x30
 8009cd0:	d05c      	beq.n	8009d8c <TIM_SlaveTimer_SetConfig+0x100>
 8009cd2:	2b30      	cmp	r3, #48	; 0x30
 8009cd4:	d806      	bhi.n	8009ce4 <TIM_SlaveTimer_SetConfig+0x58>
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d058      	beq.n	8009d8c <TIM_SlaveTimer_SetConfig+0x100>
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d056      	beq.n	8009d8c <TIM_SlaveTimer_SetConfig+0x100>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d054      	beq.n	8009d8c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009ce2:	e054      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009ce4:	2b50      	cmp	r3, #80	; 0x50
 8009ce6:	d03d      	beq.n	8009d64 <TIM_SlaveTimer_SetConfig+0xd8>
 8009ce8:	2b50      	cmp	r3, #80	; 0x50
 8009cea:	d802      	bhi.n	8009cf2 <TIM_SlaveTimer_SetConfig+0x66>
 8009cec:	2b40      	cmp	r3, #64	; 0x40
 8009cee:	d010      	beq.n	8009d12 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009cf0:	e04d      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009cf2:	2b60      	cmp	r3, #96	; 0x60
 8009cf4:	d040      	beq.n	8009d78 <TIM_SlaveTimer_SetConfig+0xec>
 8009cf6:	2b70      	cmp	r3, #112	; 0x70
 8009cf8:	d000      	beq.n	8009cfc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009cfa:	e048      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68d9      	ldr	r1, [r3, #12]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f000 f8c0 	bl	8009e90 <TIM_ETR_SetConfig>
      break;
 8009d10:	e03d      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d101      	bne.n	8009d1e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e038      	b.n	8009d90 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6a1a      	ldr	r2, [r3, #32]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0201 	bic.w	r2, r2, #1
 8009d34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	621a      	str	r2, [r3, #32]
      break;
 8009d62:	e014      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6818      	ldr	r0, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	6899      	ldr	r1, [r3, #8]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f000 f813 	bl	8009d9c <TIM_TI1_ConfigInputStage>
      break;
 8009d76:	e00a      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	6899      	ldr	r1, [r3, #8]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f000 f838 	bl	8009dfa <TIM_TI2_ConfigInputStage>
      break;
 8009d8a:	e000      	b.n	8009d8e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009d8c:	bf00      	nop
  }
  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	fffefff8 	.word	0xfffefff8

08009d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	f023 0201 	bic.w	r2, r3, #1
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f023 030a 	bic.w	r3, r3, #10
 8009dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	621a      	str	r2, [r3, #32]
}
 8009dee:	bf00      	nop
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b087      	sub	sp, #28
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f023 0210 	bic.w	r2, r3, #16
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	031b      	lsls	r3, r3, #12
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	621a      	str	r2, [r3, #32]
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b085      	sub	sp, #20
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f043 0307 	orr.w	r3, r3, #7
 8009e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d101      	bne.n	8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e06d      	b.n	8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a30      	ldr	r2, [pc, #192]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d004      	beq.n	8009f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a2f      	ldr	r2, [pc, #188]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d108      	bne.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a20      	ldr	r2, [pc, #128]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d022      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5a:	d01d      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a1d      	ldr	r2, [pc, #116]	; (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d018      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a1c      	ldr	r2, [pc, #112]	; (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1a      	ldr	r2, [pc, #104]	; (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00e      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d009      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d004      	beq.n	8009f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10c      	bne.n	8009fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	40010000 	.word	0x40010000
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40000400 	.word	0x40000400
 8009fdc:	40000800 	.word	0x40000800
 8009fe0:	40000c00 	.word	0x40000c00
 8009fe4:	40014000 	.word	0x40014000
 8009fe8:	40001800 	.word	0x40001800

08009fec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a000:	2b01      	cmp	r3, #1
 800a002:	d101      	bne.n	800a008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a004:	2302      	movs	r3, #2
 800a006:	e065      	b.n	800a0d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a16      	ldr	r2, [pc, #88]	; (800a0e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d004      	beq.n	800a096 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a14      	ldr	r2, [pc, #80]	; (800a0e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d115      	bne.n	800a0c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	051b      	lsls	r3, r3, #20
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	40010000 	.word	0x40010000
 800a0e4:	40010400 	.word	0x40010400

0800a0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e040      	b.n	800a1b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fa f836 	bl	80041b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2224      	movs	r2, #36	; 0x24
 800a150:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0201 	bic.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f972 	bl	800a44c <UART_SetConfig>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e022      	b.n	800a1b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fc10 	bl	800a9a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a18e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a19e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0201 	orr.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fc97 	bl	800aae4 <UART_CheckIdleState>
 800a1b6:	4603      	mov	r3, r0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d113      	bne.n	800a218 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00e      	beq.n	800a218 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d009      	beq.n	800a218 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8100 	beq.w	800a40e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	4798      	blx	r3
      }
      return;
 800a216:	e0fa      	b.n	800a40e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80d5 	beq.w	800a3ca <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80ca 	beq.w	800a3ca <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <HAL_UART_IRQHandler+0x9e>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2201      	movs	r2, #1
 800a250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a256:	f043 0201 	orr.w	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00e      	beq.n	800a286 <HAL_UART_IRQHandler+0xc6>
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d009      	beq.n	800a286 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2202      	movs	r2, #2
 800a278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a27e:	f043 0204 	orr.w	r2, r3, #4
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00e      	beq.n	800a2ae <HAL_UART_IRQHandler+0xee>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2a6:	f043 0202 	orr.w	r2, r3, #2
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d013      	beq.n	800a2e0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d104      	bne.n	800a2cc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2208      	movs	r2, #8
 800a2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d8:	f043 0208 	orr.w	r2, r3, #8
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00f      	beq.n	800a30a <HAL_UART_IRQHandler+0x14a>
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a302:	f043 0220 	orr.w	r2, r3, #32
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d07f      	beq.n	800a412 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	f003 0320 	and.w	r3, r3, #32
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a346:	2b40      	cmp	r3, #64	; 0x40
 800a348:	d004      	beq.n	800a354 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a350:	2b00      	cmp	r3, #0
 800a352:	d031      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fc6f 	bl	800ac38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d123      	bne.n	800a3b0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a376:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d013      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a384:	4a26      	ldr	r2, [pc, #152]	; (800a420 <HAL_UART_IRQHandler+0x260>)
 800a386:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fb f865 	bl	800545c <HAL_DMA_Abort_IT>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d016      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a6:	e00e      	b.n	800a3c6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f845 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ae:	e00a      	b.n	800a3c6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f841 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b6:	e006      	b.n	800a3c6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f83d 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a3c4:	e025      	b.n	800a412 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3c6:	bf00      	nop
    return;
 800a3c8:	e023      	b.n	800a412 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00d      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d008      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d017      	beq.n	800a416 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	4798      	blx	r3
    }
    return;
 800a3ee:	e012      	b.n	800a416 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00e      	beq.n	800a418 <HAL_UART_IRQHandler+0x258>
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a400:	2b00      	cmp	r3, #0
 800a402:	d009      	beq.n	800a418 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fc4d 	bl	800aca4 <UART_EndTransmit_IT>
    return;
 800a40a:	bf00      	nop
 800a40c:	e004      	b.n	800a418 <HAL_UART_IRQHandler+0x258>
      return;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <HAL_UART_IRQHandler+0x258>
    return;
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <HAL_UART_IRQHandler+0x258>
    return;
 800a416:	bf00      	nop
  }

}
 800a418:	3720      	adds	r7, #32
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	0800ac79 	.word	0x0800ac79

0800a424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a454:	2300      	movs	r3, #0
 800a456:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	431a      	orrs	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	431a      	orrs	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	4313      	orrs	r3, r2
 800a472:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	4bb1      	ldr	r3, [pc, #708]	; (800a740 <UART_SetConfig+0x2f4>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	6812      	ldr	r2, [r2, #0]
 800a482:	6939      	ldr	r1, [r7, #16]
 800a484:	430b      	orrs	r3, r1
 800a486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a9f      	ldr	r2, [pc, #636]	; (800a744 <UART_SetConfig+0x2f8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d121      	bne.n	800a510 <UART_SetConfig+0xc4>
 800a4cc:	4b9e      	ldr	r3, [pc, #632]	; (800a748 <UART_SetConfig+0x2fc>)
 800a4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d816      	bhi.n	800a508 <UART_SetConfig+0xbc>
 800a4da:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <UART_SetConfig+0x94>)
 800a4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e0:	0800a4f1 	.word	0x0800a4f1
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a4f7 	.word	0x0800a4f7
 800a4ec:	0800a503 	.word	0x0800a503
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	77fb      	strb	r3, [r7, #31]
 800a4f4:	e151      	b.n	800a79a <UART_SetConfig+0x34e>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	77fb      	strb	r3, [r7, #31]
 800a4fa:	e14e      	b.n	800a79a <UART_SetConfig+0x34e>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	77fb      	strb	r3, [r7, #31]
 800a500:	e14b      	b.n	800a79a <UART_SetConfig+0x34e>
 800a502:	2308      	movs	r3, #8
 800a504:	77fb      	strb	r3, [r7, #31]
 800a506:	e148      	b.n	800a79a <UART_SetConfig+0x34e>
 800a508:	2310      	movs	r3, #16
 800a50a:	77fb      	strb	r3, [r7, #31]
 800a50c:	bf00      	nop
 800a50e:	e144      	b.n	800a79a <UART_SetConfig+0x34e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a8d      	ldr	r2, [pc, #564]	; (800a74c <UART_SetConfig+0x300>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d134      	bne.n	800a584 <UART_SetConfig+0x138>
 800a51a:	4b8b      	ldr	r3, [pc, #556]	; (800a748 <UART_SetConfig+0x2fc>)
 800a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a520:	f003 030c 	and.w	r3, r3, #12
 800a524:	2b0c      	cmp	r3, #12
 800a526:	d829      	bhi.n	800a57c <UART_SetConfig+0x130>
 800a528:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <UART_SetConfig+0xe4>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a565 	.word	0x0800a565
 800a534:	0800a57d 	.word	0x0800a57d
 800a538:	0800a57d 	.word	0x0800a57d
 800a53c:	0800a57d 	.word	0x0800a57d
 800a540:	0800a571 	.word	0x0800a571
 800a544:	0800a57d 	.word	0x0800a57d
 800a548:	0800a57d 	.word	0x0800a57d
 800a54c:	0800a57d 	.word	0x0800a57d
 800a550:	0800a56b 	.word	0x0800a56b
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a57d 	.word	0x0800a57d
 800a560:	0800a577 	.word	0x0800a577
 800a564:	2300      	movs	r3, #0
 800a566:	77fb      	strb	r3, [r7, #31]
 800a568:	e117      	b.n	800a79a <UART_SetConfig+0x34e>
 800a56a:	2302      	movs	r3, #2
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e114      	b.n	800a79a <UART_SetConfig+0x34e>
 800a570:	2304      	movs	r3, #4
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e111      	b.n	800a79a <UART_SetConfig+0x34e>
 800a576:	2308      	movs	r3, #8
 800a578:	77fb      	strb	r3, [r7, #31]
 800a57a:	e10e      	b.n	800a79a <UART_SetConfig+0x34e>
 800a57c:	2310      	movs	r3, #16
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	bf00      	nop
 800a582:	e10a      	b.n	800a79a <UART_SetConfig+0x34e>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a71      	ldr	r2, [pc, #452]	; (800a750 <UART_SetConfig+0x304>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d120      	bne.n	800a5d0 <UART_SetConfig+0x184>
 800a58e:	4b6e      	ldr	r3, [pc, #440]	; (800a748 <UART_SetConfig+0x2fc>)
 800a590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d00f      	beq.n	800a5bc <UART_SetConfig+0x170>
 800a59c:	2b10      	cmp	r3, #16
 800a59e:	d802      	bhi.n	800a5a6 <UART_SetConfig+0x15a>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <UART_SetConfig+0x164>
 800a5a4:	e010      	b.n	800a5c8 <UART_SetConfig+0x17c>
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d005      	beq.n	800a5b6 <UART_SetConfig+0x16a>
 800a5aa:	2b30      	cmp	r3, #48	; 0x30
 800a5ac:	d009      	beq.n	800a5c2 <UART_SetConfig+0x176>
 800a5ae:	e00b      	b.n	800a5c8 <UART_SetConfig+0x17c>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e0f1      	b.n	800a79a <UART_SetConfig+0x34e>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e0ee      	b.n	800a79a <UART_SetConfig+0x34e>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	e0eb      	b.n	800a79a <UART_SetConfig+0x34e>
 800a5c2:	2308      	movs	r3, #8
 800a5c4:	77fb      	strb	r3, [r7, #31]
 800a5c6:	e0e8      	b.n	800a79a <UART_SetConfig+0x34e>
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	bf00      	nop
 800a5ce:	e0e4      	b.n	800a79a <UART_SetConfig+0x34e>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a5f      	ldr	r2, [pc, #380]	; (800a754 <UART_SetConfig+0x308>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d120      	bne.n	800a61c <UART_SetConfig+0x1d0>
 800a5da:	4b5b      	ldr	r3, [pc, #364]	; (800a748 <UART_SetConfig+0x2fc>)
 800a5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d00f      	beq.n	800a608 <UART_SetConfig+0x1bc>
 800a5e8:	2b40      	cmp	r3, #64	; 0x40
 800a5ea:	d802      	bhi.n	800a5f2 <UART_SetConfig+0x1a6>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d005      	beq.n	800a5fc <UART_SetConfig+0x1b0>
 800a5f0:	e010      	b.n	800a614 <UART_SetConfig+0x1c8>
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d005      	beq.n	800a602 <UART_SetConfig+0x1b6>
 800a5f6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5f8:	d009      	beq.n	800a60e <UART_SetConfig+0x1c2>
 800a5fa:	e00b      	b.n	800a614 <UART_SetConfig+0x1c8>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	77fb      	strb	r3, [r7, #31]
 800a600:	e0cb      	b.n	800a79a <UART_SetConfig+0x34e>
 800a602:	2302      	movs	r3, #2
 800a604:	77fb      	strb	r3, [r7, #31]
 800a606:	e0c8      	b.n	800a79a <UART_SetConfig+0x34e>
 800a608:	2304      	movs	r3, #4
 800a60a:	77fb      	strb	r3, [r7, #31]
 800a60c:	e0c5      	b.n	800a79a <UART_SetConfig+0x34e>
 800a60e:	2308      	movs	r3, #8
 800a610:	77fb      	strb	r3, [r7, #31]
 800a612:	e0c2      	b.n	800a79a <UART_SetConfig+0x34e>
 800a614:	2310      	movs	r3, #16
 800a616:	77fb      	strb	r3, [r7, #31]
 800a618:	bf00      	nop
 800a61a:	e0be      	b.n	800a79a <UART_SetConfig+0x34e>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a4d      	ldr	r2, [pc, #308]	; (800a758 <UART_SetConfig+0x30c>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d124      	bne.n	800a670 <UART_SetConfig+0x224>
 800a626:	4b48      	ldr	r3, [pc, #288]	; (800a748 <UART_SetConfig+0x2fc>)
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a634:	d012      	beq.n	800a65c <UART_SetConfig+0x210>
 800a636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63a:	d802      	bhi.n	800a642 <UART_SetConfig+0x1f6>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d007      	beq.n	800a650 <UART_SetConfig+0x204>
 800a640:	e012      	b.n	800a668 <UART_SetConfig+0x21c>
 800a642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a646:	d006      	beq.n	800a656 <UART_SetConfig+0x20a>
 800a648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a64c:	d009      	beq.n	800a662 <UART_SetConfig+0x216>
 800a64e:	e00b      	b.n	800a668 <UART_SetConfig+0x21c>
 800a650:	2300      	movs	r3, #0
 800a652:	77fb      	strb	r3, [r7, #31]
 800a654:	e0a1      	b.n	800a79a <UART_SetConfig+0x34e>
 800a656:	2302      	movs	r3, #2
 800a658:	77fb      	strb	r3, [r7, #31]
 800a65a:	e09e      	b.n	800a79a <UART_SetConfig+0x34e>
 800a65c:	2304      	movs	r3, #4
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e09b      	b.n	800a79a <UART_SetConfig+0x34e>
 800a662:	2308      	movs	r3, #8
 800a664:	77fb      	strb	r3, [r7, #31]
 800a666:	e098      	b.n	800a79a <UART_SetConfig+0x34e>
 800a668:	2310      	movs	r3, #16
 800a66a:	77fb      	strb	r3, [r7, #31]
 800a66c:	bf00      	nop
 800a66e:	e094      	b.n	800a79a <UART_SetConfig+0x34e>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a39      	ldr	r2, [pc, #228]	; (800a75c <UART_SetConfig+0x310>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d124      	bne.n	800a6c4 <UART_SetConfig+0x278>
 800a67a:	4b33      	ldr	r3, [pc, #204]	; (800a748 <UART_SetConfig+0x2fc>)
 800a67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a680:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a688:	d012      	beq.n	800a6b0 <UART_SetConfig+0x264>
 800a68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a68e:	d802      	bhi.n	800a696 <UART_SetConfig+0x24a>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d007      	beq.n	800a6a4 <UART_SetConfig+0x258>
 800a694:	e012      	b.n	800a6bc <UART_SetConfig+0x270>
 800a696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a69a:	d006      	beq.n	800a6aa <UART_SetConfig+0x25e>
 800a69c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6a0:	d009      	beq.n	800a6b6 <UART_SetConfig+0x26a>
 800a6a2:	e00b      	b.n	800a6bc <UART_SetConfig+0x270>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	77fb      	strb	r3, [r7, #31]
 800a6a8:	e077      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	77fb      	strb	r3, [r7, #31]
 800a6ae:	e074      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e071      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e06e      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	bf00      	nop
 800a6c2:	e06a      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a25      	ldr	r2, [pc, #148]	; (800a760 <UART_SetConfig+0x314>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d124      	bne.n	800a718 <UART_SetConfig+0x2cc>
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <UART_SetConfig+0x2fc>)
 800a6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6dc:	d012      	beq.n	800a704 <UART_SetConfig+0x2b8>
 800a6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e2:	d802      	bhi.n	800a6ea <UART_SetConfig+0x29e>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <UART_SetConfig+0x2ac>
 800a6e8:	e012      	b.n	800a710 <UART_SetConfig+0x2c4>
 800a6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ee:	d006      	beq.n	800a6fe <UART_SetConfig+0x2b2>
 800a6f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6f4:	d009      	beq.n	800a70a <UART_SetConfig+0x2be>
 800a6f6:	e00b      	b.n	800a710 <UART_SetConfig+0x2c4>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	77fb      	strb	r3, [r7, #31]
 800a6fc:	e04d      	b.n	800a79a <UART_SetConfig+0x34e>
 800a6fe:	2302      	movs	r3, #2
 800a700:	77fb      	strb	r3, [r7, #31]
 800a702:	e04a      	b.n	800a79a <UART_SetConfig+0x34e>
 800a704:	2304      	movs	r3, #4
 800a706:	77fb      	strb	r3, [r7, #31]
 800a708:	e047      	b.n	800a79a <UART_SetConfig+0x34e>
 800a70a:	2308      	movs	r3, #8
 800a70c:	77fb      	strb	r3, [r7, #31]
 800a70e:	e044      	b.n	800a79a <UART_SetConfig+0x34e>
 800a710:	2310      	movs	r3, #16
 800a712:	77fb      	strb	r3, [r7, #31]
 800a714:	bf00      	nop
 800a716:	e040      	b.n	800a79a <UART_SetConfig+0x34e>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a11      	ldr	r2, [pc, #68]	; (800a764 <UART_SetConfig+0x318>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d139      	bne.n	800a796 <UART_SetConfig+0x34a>
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <UART_SetConfig+0x2fc>)
 800a724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a730:	d027      	beq.n	800a782 <UART_SetConfig+0x336>
 800a732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a736:	d817      	bhi.n	800a768 <UART_SetConfig+0x31c>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d01c      	beq.n	800a776 <UART_SetConfig+0x32a>
 800a73c:	e027      	b.n	800a78e <UART_SetConfig+0x342>
 800a73e:	bf00      	nop
 800a740:	efff69f3 	.word	0xefff69f3
 800a744:	40011000 	.word	0x40011000
 800a748:	40023800 	.word	0x40023800
 800a74c:	40004400 	.word	0x40004400
 800a750:	40004800 	.word	0x40004800
 800a754:	40004c00 	.word	0x40004c00
 800a758:	40005000 	.word	0x40005000
 800a75c:	40011400 	.word	0x40011400
 800a760:	40007800 	.word	0x40007800
 800a764:	40007c00 	.word	0x40007c00
 800a768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a76c:	d006      	beq.n	800a77c <UART_SetConfig+0x330>
 800a76e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a772:	d009      	beq.n	800a788 <UART_SetConfig+0x33c>
 800a774:	e00b      	b.n	800a78e <UART_SetConfig+0x342>
 800a776:	2300      	movs	r3, #0
 800a778:	77fb      	strb	r3, [r7, #31]
 800a77a:	e00e      	b.n	800a79a <UART_SetConfig+0x34e>
 800a77c:	2302      	movs	r3, #2
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e00b      	b.n	800a79a <UART_SetConfig+0x34e>
 800a782:	2304      	movs	r3, #4
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e008      	b.n	800a79a <UART_SetConfig+0x34e>
 800a788:	2308      	movs	r3, #8
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e005      	b.n	800a79a <UART_SetConfig+0x34e>
 800a78e:	2310      	movs	r3, #16
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	bf00      	nop
 800a794:	e001      	b.n	800a79a <UART_SetConfig+0x34e>
 800a796:	2310      	movs	r3, #16
 800a798:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a2:	d17f      	bne.n	800a8a4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	d85c      	bhi.n	800a864 <UART_SetConfig+0x418>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <UART_SetConfig+0x364>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7d5 	.word	0x0800a7d5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a815 	.word	0x0800a815
 800a7bc:	0800a865 	.word	0x0800a865
 800a7c0:	0800a82d 	.word	0x0800a82d
 800a7c4:	0800a865 	.word	0x0800a865
 800a7c8:	0800a865 	.word	0x0800a865
 800a7cc:	0800a865 	.word	0x0800a865
 800a7d0:	0800a84d 	.word	0x0800a84d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7d4:	f7fd fa5c 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800a7d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	005a      	lsls	r2, r3, #1
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	61bb      	str	r3, [r7, #24]
        break;
 800a7f2:	e03a      	b.n	800a86a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7f4:	f7fd fa60 	bl	8007cb8 <HAL_RCC_GetPCLK2Freq>
 800a7f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	005a      	lsls	r2, r3, #1
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	085b      	lsrs	r3, r3, #1
 800a804:	441a      	add	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	b29b      	uxth	r3, r3
 800a810:	61bb      	str	r3, [r7, #24]
        break;
 800a812:	e02a      	b.n	800a86a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	085a      	lsrs	r2, r3, #1
 800a81a:	4b5f      	ldr	r3, [pc, #380]	; (800a998 <UART_SetConfig+0x54c>)
 800a81c:	4413      	add	r3, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6852      	ldr	r2, [r2, #4]
 800a822:	fbb3 f3f2 	udiv	r3, r3, r2
 800a826:	b29b      	uxth	r3, r3
 800a828:	61bb      	str	r3, [r7, #24]
        break;
 800a82a:	e01e      	b.n	800a86a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a82c:	f7fd f972 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 800a830:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	005a      	lsls	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	085b      	lsrs	r3, r3, #1
 800a83c:	441a      	add	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	fbb2 f3f3 	udiv	r3, r2, r3
 800a846:	b29b      	uxth	r3, r3
 800a848:	61bb      	str	r3, [r7, #24]
        break;
 800a84a:	e00e      	b.n	800a86a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85e:	b29b      	uxth	r3, r3
 800a860:	61bb      	str	r3, [r7, #24]
        break;
 800a862:	e002      	b.n	800a86a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	75fb      	strb	r3, [r7, #23]
        break;
 800a868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2b0f      	cmp	r3, #15
 800a86e:	d916      	bls.n	800a89e <UART_SetConfig+0x452>
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a876:	d212      	bcs.n	800a89e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	f023 030f 	bic.w	r3, r3, #15
 800a880:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	085b      	lsrs	r3, r3, #1
 800a886:	b29b      	uxth	r3, r3
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	897b      	ldrh	r3, [r7, #10]
 800a890:	4313      	orrs	r3, r2
 800a892:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	897a      	ldrh	r2, [r7, #10]
 800a89a:	60da      	str	r2, [r3, #12]
 800a89c:	e070      	b.n	800a980 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	75fb      	strb	r3, [r7, #23]
 800a8a2:	e06d      	b.n	800a980 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a8a4:	7ffb      	ldrb	r3, [r7, #31]
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	d859      	bhi.n	800a95e <UART_SetConfig+0x512>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <UART_SetConfig+0x464>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8d5 	.word	0x0800a8d5
 800a8b4:	0800a8f3 	.word	0x0800a8f3
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a95f 	.word	0x0800a95f
 800a8c0:	0800a929 	.word	0x0800a929
 800a8c4:	0800a95f 	.word	0x0800a95f
 800a8c8:	0800a95f 	.word	0x0800a95f
 800a8cc:	0800a95f 	.word	0x0800a95f
 800a8d0:	0800a947 	.word	0x0800a947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d4:	f7fd f9dc 	bl	8007c90 <HAL_RCC_GetPCLK1Freq>
 800a8d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	085a      	lsrs	r2, r3, #1
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	441a      	add	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	61bb      	str	r3, [r7, #24]
        break;
 800a8f0:	e038      	b.n	800a964 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f2:	f7fd f9e1 	bl	8007cb8 <HAL_RCC_GetPCLK2Freq>
 800a8f6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	085a      	lsrs	r2, r3, #1
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	441a      	add	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	fbb2 f3f3 	udiv	r3, r2, r3
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	61bb      	str	r3, [r7, #24]
        break;
 800a90e:	e029      	b.n	800a964 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	085a      	lsrs	r2, r3, #1
 800a916:	4b21      	ldr	r3, [pc, #132]	; (800a99c <UART_SetConfig+0x550>)
 800a918:	4413      	add	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6852      	ldr	r2, [r2, #4]
 800a91e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a922:	b29b      	uxth	r3, r3
 800a924:	61bb      	str	r3, [r7, #24]
        break;
 800a926:	e01d      	b.n	800a964 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a928:	f7fd f8f4 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 800a92c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	085a      	lsrs	r2, r3, #1
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	441a      	add	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a940:	b29b      	uxth	r3, r3
 800a942:	61bb      	str	r3, [r7, #24]
        break;
 800a944:	e00e      	b.n	800a964 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	fbb2 f3f3 	udiv	r3, r2, r3
 800a958:	b29b      	uxth	r3, r3
 800a95a:	61bb      	str	r3, [r7, #24]
        break;
 800a95c:	e002      	b.n	800a964 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	75fb      	strb	r3, [r7, #23]
        break;
 800a962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d908      	bls.n	800a97c <UART_SetConfig+0x530>
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a970:	d204      	bcs.n	800a97c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	e001      	b.n	800a980 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3720      	adds	r7, #32
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	01e84800 	.word	0x01e84800
 800a99c:	00f42400 	.word	0x00f42400

0800a9a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	f003 0308 	and.w	r3, r3, #8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d01a      	beq.n	800aab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa9e:	d10a      	bne.n	800aab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00a      	beq.n	800aad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	430a      	orrs	r2, r1
 800aad6:	605a      	str	r2, [r3, #4]
  }
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aaf2:	f7f9 fdef 	bl	80046d4 <HAL_GetTick>
 800aaf6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b08      	cmp	r3, #8
 800ab04:	d10e      	bne.n	800ab24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f814 	bl	800ab42 <UART_WaitOnFlagUntilTimeout>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e00a      	b.n	800ab3a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	60f8      	str	r0, [r7, #12]
 800ab4a:	60b9      	str	r1, [r7, #8]
 800ab4c:	603b      	str	r3, [r7, #0]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab52:	e05d      	b.n	800ac10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5a:	d059      	beq.n	800ac10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab5c:	f7f9 fdba 	bl	80046d4 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d302      	bcc.n	800ab72 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d11b      	bne.n	800abaa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0201 	bic.w	r2, r2, #1
 800ab90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2220      	movs	r2, #32
 800ab96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e042      	b.n	800ac30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0304 	and.w	r3, r3, #4
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02b      	beq.n	800ac10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abc6:	d123      	bne.n	800ac10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abd0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abe0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0201 	bic.w	r2, r2, #1
 800abf0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e00f      	b.n	800ac30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69da      	ldr	r2, [r3, #28]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	bf0c      	ite	eq
 800ac20:	2301      	moveq	r3, #1
 800ac22:	2300      	movne	r3, #0
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	79fb      	ldrb	r3, [r7, #7]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d092      	beq.n	800ab54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0201 	bic.w	r2, r2, #1
 800ac5e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2220      	movs	r2, #32
 800ac64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff fbce 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2220      	movs	r2, #32
 800acc0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fbab 	bl	800a424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d027      	beq.n	800ad42 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	4b2f      	ldr	r3, [pc, #188]	; (800adb8 <FMC_SDRAM_Init+0xe0>)
 800acfc:	4013      	ands	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad08:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ad0e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ad14:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ad1a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ad20:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ad26:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ad2c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ad32:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e032      	b.n	800ada8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad4e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad58:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ad5e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <FMC_SDRAM_Init+0xe0>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad7c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ad82:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ad88:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ad8e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ad94:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	ffff8000 	.word	0xffff8000

0800adbc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d02e      	beq.n	800ae34 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ade2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	3b01      	subs	r3, #1
 800adf0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800adf2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800adfc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ae06:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ae10:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ae1a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae24:	4313      	orrs	r3, r2
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	609a      	str	r2, [r3, #8]
 800ae32:	e039      	b.n	800aea8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4b1e      	ldr	r3, [pc, #120]	; (800aeb8 <FMC_SDRAM_Timing_Init+0xfc>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ae52:	4313      	orrs	r3, r2
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae66:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae76:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae80:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae8a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae94:	4313      	orrs	r3, r2
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	ff0f0fff 	.word	0xff0f0fff

0800aebc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aed4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aede:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	695a      	ldr	r2, [r3, #20]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	431a      	orrs	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4603      	mov	r3, r0
 800af2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af36:	2b84      	cmp	r3, #132	; 0x84
 800af38:	d005      	beq.n	800af46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	3303      	adds	r3, #3
 800af44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af46:	68fb      	ldr	r3, [r7, #12]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af58:	f000 fee8 	bl	800bd2c <vTaskStartScheduler>
  
  return osOK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	bd80      	pop	{r7, pc}

0800af62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af64:	b089      	sub	sp, #36	; 0x24
 800af66:	af04      	add	r7, sp, #16
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d020      	beq.n	800afb6 <osThreadCreate+0x54>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01c      	beq.n	800afb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685c      	ldr	r4, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681d      	ldr	r5, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691e      	ldr	r6, [r3, #16]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ffc8 	bl	800af24 <makeFreeRtosPriority>
 800af94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af9e:	9202      	str	r2, [sp, #8]
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	9100      	str	r1, [sp, #0]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	4632      	mov	r2, r6
 800afa8:	4629      	mov	r1, r5
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 fc70 	bl	800b890 <xTaskCreateStatic>
 800afb0:	4603      	mov	r3, r0
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	e01c      	b.n	800aff0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685c      	ldr	r4, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afc2:	b29e      	uxth	r6, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff ffaa 	bl	800af24 <makeFreeRtosPriority>
 800afd0:	4602      	mov	r2, r0
 800afd2:	f107 030c 	add.w	r3, r7, #12
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	9200      	str	r2, [sp, #0]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	4632      	mov	r2, r6
 800afde:	4629      	mov	r1, r5
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fcb5 	bl	800b950 <xTaskCreate>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d001      	beq.n	800aff0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	e000      	b.n	800aff2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aff0:	68fb      	ldr	r3, [r7, #12]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800affa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <osDelay+0x16>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	e000      	b.n	800b012 <osDelay+0x18>
 800b010:	2301      	movs	r3, #1
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fe54 	bl	800bcc0 <vTaskDelay>
  
  return osOK;
 800b018:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d007      	beq.n	800b042 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	4619      	mov	r1, r3
 800b038:	2001      	movs	r0, #1
 800b03a:	f000 fa38 	bl	800b4ae <xQueueCreateMutexStatic>
 800b03e:	4603      	mov	r3, r0
 800b040:	e003      	b.n	800b04a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b042:	2001      	movs	r0, #1
 800b044:	f000 fa1b 	bl	800b47e <xQueueCreateMutex>
 800b048:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f103 0208 	add.w	r2, r3, #8
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f04f 32ff 	mov.w	r2, #4294967295
 800b06a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f103 0208 	add.w	r2, r3, #8
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f103 0208 	add.w	r2, r3, #8
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	689a      	ldr	r2, [r3, #8]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	601a      	str	r2, [r3, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d103      	bne.n	800b114 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e00c      	b.n	800b12e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3308      	adds	r3, #8
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	e002      	b.n	800b122 <vListInsert+0x2e>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	60fb      	str	r3, [r7, #12]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d2f6      	bcs.n	800b11c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b166:	b480      	push	{r7}
 800b168:	b085      	sub	sp, #20
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6892      	ldr	r2, [r2, #8]
 800b17c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	6852      	ldr	r2, [r2, #4]
 800b186:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d103      	bne.n	800b19a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	1e5a      	subs	r2, r3, #1
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10b      	bne.n	800b1e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	b672      	cpsid	i
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	b662      	cpsie	i
 800b1e4:	60bb      	str	r3, [r7, #8]
 800b1e6:	e7fe      	b.n	800b1e6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b1e8:	f001 fbce 	bl	800c988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f4:	68f9      	ldr	r1, [r7, #12]
 800b1f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1f8:	fb01 f303 	mul.w	r3, r1, r3
 800b1fc:	441a      	add	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b218:	3b01      	subs	r3, #1
 800b21a:	68f9      	ldr	r1, [r7, #12]
 800b21c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b21e:	fb01 f303 	mul.w	r3, r1, r3
 800b222:	441a      	add	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	22ff      	movs	r2, #255	; 0xff
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	22ff      	movs	r2, #255	; 0xff
 800b234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d114      	bne.n	800b268 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d01a      	beq.n	800b27c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3310      	adds	r3, #16
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 ffc8 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d012      	beq.n	800b27c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <xQueueGenericReset+0xd0>)
 800b258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	e009      	b.n	800b27c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3310      	adds	r3, #16
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff fef0 	bl	800b052 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3324      	adds	r3, #36	; 0x24
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff feeb 	bl	800b052 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b27c:	f001 fbb6 	bl	800c9ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b280:	2301      	movs	r3, #1
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08e      	sub	sp, #56	; 0x38
 800b294:	af02      	add	r7, sp, #8
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xQueueGenericCreateStatic+0x2c>
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	b672      	cpsid	i
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	b662      	cpsie	i
 800b2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ba:	e7fe      	b.n	800b2ba <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10b      	bne.n	800b2da <xQueueGenericCreateStatic+0x4a>
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	b672      	cpsid	i
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	b662      	cpsie	i
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d8:	e7fe      	b.n	800b2d8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <xQueueGenericCreateStatic+0x56>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <xQueueGenericCreateStatic+0x5a>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <xQueueGenericCreateStatic+0x5c>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10b      	bne.n	800b308 <xQueueGenericCreateStatic+0x78>
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	b672      	cpsid	i
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	b662      	cpsie	i
 800b304:	623b      	str	r3, [r7, #32]
 800b306:	e7fe      	b.n	800b306 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <xQueueGenericCreateStatic+0x84>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <xQueueGenericCreateStatic+0x88>
 800b314:	2301      	movs	r3, #1
 800b316:	e000      	b.n	800b31a <xQueueGenericCreateStatic+0x8a>
 800b318:	2300      	movs	r3, #0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <xQueueGenericCreateStatic+0xa6>
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	b672      	cpsid	i
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	b662      	cpsie	i
 800b332:	61fb      	str	r3, [r7, #28]
 800b334:	e7fe      	b.n	800b334 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b336:	2348      	movs	r3, #72	; 0x48
 800b338:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b48      	cmp	r3, #72	; 0x48
 800b33e:	d00b      	beq.n	800b358 <xQueueGenericCreateStatic+0xc8>
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	b672      	cpsid	i
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	b662      	cpsie	i
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	e7fe      	b.n	800b356 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b358:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00d      	beq.n	800b380 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b36c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4613      	mov	r3, r2
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f846 	bl	800b40c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b382:	4618      	mov	r0, r3
 800b384:	3730      	adds	r7, #48	; 0x30
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b08a      	sub	sp, #40	; 0x28
 800b38e:	af02      	add	r7, sp, #8
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	4613      	mov	r3, r2
 800b396:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10b      	bne.n	800b3b6 <xQueueGenericCreate+0x2c>
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	b672      	cpsid	i
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	b662      	cpsie	i
 800b3b2:	613b      	str	r3, [r7, #16]
 800b3b4:	e7fe      	b.n	800b3b4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e004      	b.n	800b3cc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	3348      	adds	r3, #72	; 0x48
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f001 fbb9 	bl	800cb48 <pvPortMalloc>
 800b3d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d011      	beq.n	800b402 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	3348      	adds	r3, #72	; 0x48
 800b3e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3f0:	79fa      	ldrb	r2, [r7, #7]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	68b9      	ldr	r1, [r7, #8]
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 f805 	bl	800b40c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b402:	69bb      	ldr	r3, [r7, #24]
	}
 800b404:	4618      	mov	r0, r3
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	e002      	b.n	800b42e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b43a:	2101      	movs	r1, #1
 800b43c:	69b8      	ldr	r0, [r7, #24]
 800b43e:	f7ff febd 	bl	800b1bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00e      	beq.n	800b476 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b46a:	2300      	movs	r3, #0
 800b46c:	2200      	movs	r2, #0
 800b46e:	2100      	movs	r1, #0
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 f837 	bl	800b4e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b476:	bf00      	nop
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b086      	sub	sp, #24
 800b482:	af00      	add	r7, sp, #0
 800b484:	4603      	mov	r3, r0
 800b486:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b488:	2301      	movs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	2300      	movs	r3, #0
 800b48e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	461a      	mov	r2, r3
 800b494:	6939      	ldr	r1, [r7, #16]
 800b496:	6978      	ldr	r0, [r7, #20]
 800b498:	f7ff ff77 	bl	800b38a <xQueueGenericCreate>
 800b49c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff ffd3 	bl	800b44a <prvInitialiseMutex>

		return xNewQueue;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
	}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af02      	add	r7, sp, #8
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	6039      	str	r1, [r7, #0]
 800b4b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	6939      	ldr	r1, [r7, #16]
 800b4cc:	6978      	ldr	r0, [r7, #20]
 800b4ce:	f7ff fedf 	bl	800b290 <xQueueGenericCreateStatic>
 800b4d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f7ff ffb8 	bl	800b44a <prvInitialiseMutex>

		return xNewQueue;
 800b4da:	68fb      	ldr	r3, [r7, #12]
	}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08e      	sub	sp, #56	; 0x38
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10b      	bne.n	800b518 <xQueueGenericSend+0x34>
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	b672      	cpsid	i
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	b662      	cpsie	i
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
 800b516:	e7fe      	b.n	800b516 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d103      	bne.n	800b526 <xQueueGenericSend+0x42>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <xQueueGenericSend+0x46>
 800b526:	2301      	movs	r3, #1
 800b528:	e000      	b.n	800b52c <xQueueGenericSend+0x48>
 800b52a:	2300      	movs	r3, #0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10b      	bne.n	800b548 <xQueueGenericSend+0x64>
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	b672      	cpsid	i
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	b662      	cpsie	i
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
 800b546:	e7fe      	b.n	800b546 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d103      	bne.n	800b556 <xQueueGenericSend+0x72>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <xQueueGenericSend+0x76>
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <xQueueGenericSend+0x78>
 800b55a:	2300      	movs	r3, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <xQueueGenericSend+0x94>
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	b672      	cpsid	i
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	b662      	cpsie	i
 800b574:	623b      	str	r3, [r7, #32]
 800b576:	e7fe      	b.n	800b576 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b578:	f000 fff0 	bl	800c55c <xTaskGetSchedulerState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <xQueueGenericSend+0xa4>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <xQueueGenericSend+0xa8>
 800b588:	2301      	movs	r3, #1
 800b58a:	e000      	b.n	800b58e <xQueueGenericSend+0xaa>
 800b58c:	2300      	movs	r3, #0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10b      	bne.n	800b5aa <xQueueGenericSend+0xc6>
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	b672      	cpsid	i
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	b662      	cpsie	i
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	e7fe      	b.n	800b5a8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5aa:	f001 f9ed 	bl	800c988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d302      	bcc.n	800b5c0 <xQueueGenericSend+0xdc>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d129      	bne.n	800b614 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5c6:	f000 f88f 	bl	800b6e8 <prvCopyDataToQueue>
 800b5ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d010      	beq.n	800b5f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	3324      	adds	r3, #36	; 0x24
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 fe01 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d013      	beq.n	800b60c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b5e4:	4b3f      	ldr	r3, [pc, #252]	; (800b6e4 <xQueueGenericSend+0x200>)
 800b5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	e00a      	b.n	800b60c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d007      	beq.n	800b60c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5fc:	4b39      	ldr	r3, [pc, #228]	; (800b6e4 <xQueueGenericSend+0x200>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b60c:	f001 f9ee 	bl	800c9ec <vPortExitCritical>
				return pdPASS;
 800b610:	2301      	movs	r3, #1
 800b612:	e063      	b.n	800b6dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d103      	bne.n	800b622 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b61a:	f001 f9e7 	bl	800c9ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	e05c      	b.n	800b6dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b624:	2b00      	cmp	r3, #0
 800b626:	d106      	bne.n	800b636 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b628:	f107 0314 	add.w	r3, r7, #20
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fe3b 	bl	800c2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b636:	f001 f9d9 	bl	800c9ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b63a:	f000 fbd9 	bl	800bdf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b63e:	f001 f9a3 	bl	800c988 <vPortEnterCritical>
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b648:	b25b      	sxtb	r3, r3
 800b64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64e:	d103      	bne.n	800b658 <xQueueGenericSend+0x174>
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b65e:	b25b      	sxtb	r3, r3
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b664:	d103      	bne.n	800b66e <xQueueGenericSend+0x18a>
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b66e:	f001 f9bd 	bl	800c9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b672:	1d3a      	adds	r2, r7, #4
 800b674:	f107 0314 	add.w	r3, r7, #20
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fe2a 	bl	800c2d4 <xTaskCheckForTimeOut>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d124      	bne.n	800b6d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b688:	f000 f8ea 	bl	800b860 <prvIsQueueFull>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d018      	beq.n	800b6c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	3310      	adds	r3, #16
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	4611      	mov	r1, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 fd7a 	bl	800c194 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6a2:	f000 f88b 	bl	800b7bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6a6:	f000 fbb1 	bl	800be0c <xTaskResumeAll>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f47f af7c 	bne.w	800b5aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b6b2:	4b0c      	ldr	r3, [pc, #48]	; (800b6e4 <xQueueGenericSend+0x200>)
 800b6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	e772      	b.n	800b5aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b6c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6c6:	f000 f879 	bl	800b7bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6ca:	f000 fb9f 	bl	800be0c <xTaskResumeAll>
 800b6ce:	e76c      	b.n	800b5aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d2:	f000 f873 	bl	800b7bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6d6:	f000 fb99 	bl	800be0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b6da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3738      	adds	r7, #56	; 0x38
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10d      	bne.n	800b722 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d14d      	bne.n	800b7aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	4618      	mov	r0, r3
 800b714:	f000 ff40 	bl	800c598 <xTaskPriorityDisinherit>
 800b718:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	609a      	str	r2, [r3, #8]
 800b720:	e043      	b.n	800b7aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d119      	bne.n	800b75c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6858      	ldr	r0, [r3, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	461a      	mov	r2, r3
 800b732:	68b9      	ldr	r1, [r7, #8]
 800b734:	f001 fc12 	bl	800cf5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	441a      	add	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d32b      	bcc.n	800b7aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	605a      	str	r2, [r3, #4]
 800b75a:	e026      	b.n	800b7aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68d8      	ldr	r0, [r3, #12]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b764:	461a      	mov	r2, r3
 800b766:	68b9      	ldr	r1, [r7, #8]
 800b768:	f001 fbf8 	bl	800cf5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b774:	425b      	negs	r3, r3
 800b776:	441a      	add	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	68da      	ldr	r2, [r3, #12]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d207      	bcs.n	800b798 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b790:	425b      	negs	r3, r3
 800b792:	441a      	add	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d105      	bne.n	800b7aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b7b2:	697b      	ldr	r3, [r7, #20]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7c4:	f001 f8e0 	bl	800c988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7d0:	e011      	b.n	800b7f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d012      	beq.n	800b800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3324      	adds	r3, #36	; 0x24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 fcfe 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b7ea:	f000 fdd7 	bl	800c39c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dce9      	bgt.n	800b7d2 <prvUnlockQueue+0x16>
 800b7fe:	e000      	b.n	800b802 <prvUnlockQueue+0x46>
					break;
 800b800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	22ff      	movs	r2, #255	; 0xff
 800b806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b80a:	f001 f8ef 	bl	800c9ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b80e:	f001 f8bb 	bl	800c988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b81a:	e011      	b.n	800b840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d012      	beq.n	800b84a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3310      	adds	r3, #16
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fcd9 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b834:	f000 fdb2 	bl	800c39c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b844:	2b00      	cmp	r3, #0
 800b846:	dce9      	bgt.n	800b81c <prvUnlockQueue+0x60>
 800b848:	e000      	b.n	800b84c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b84a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	22ff      	movs	r2, #255	; 0xff
 800b850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b854:	f001 f8ca 	bl	800c9ec <vPortExitCritical>
}
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b868:	f001 f88e 	bl	800c988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b874:	429a      	cmp	r2, r3
 800b876:	d102      	bne.n	800b87e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	e001      	b.n	800b882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b882:	f001 f8b3 	bl	800c9ec <vPortExitCritical>

	return xReturn;
 800b886:	68fb      	ldr	r3, [r7, #12]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b890:	b580      	push	{r7, lr}
 800b892:	b08e      	sub	sp, #56	; 0x38
 800b894:	af04      	add	r7, sp, #16
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10b      	bne.n	800b8bc <xTaskCreateStatic+0x2c>
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	b672      	cpsid	i
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	b662      	cpsie	i
 800b8b8:	623b      	str	r3, [r7, #32]
 800b8ba:	e7fe      	b.n	800b8ba <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10b      	bne.n	800b8da <xTaskCreateStatic+0x4a>
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	b672      	cpsid	i
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	b662      	cpsie	i
 800b8d6:	61fb      	str	r3, [r7, #28]
 800b8d8:	e7fe      	b.n	800b8d8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8da:	2354      	movs	r3, #84	; 0x54
 800b8dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2b54      	cmp	r3, #84	; 0x54
 800b8e2:	d00b      	beq.n	800b8fc <xTaskCreateStatic+0x6c>
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	b672      	cpsid	i
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	b662      	cpsie	i
 800b8f8:	61bb      	str	r3, [r7, #24]
 800b8fa:	e7fe      	b.n	800b8fa <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01e      	beq.n	800b942 <xTaskCreateStatic+0xb2>
 800b904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b906:	2b00      	cmp	r3, #0
 800b908:	d01b      	beq.n	800b942 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b912:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	2202      	movs	r2, #2
 800b918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b91c:	2300      	movs	r3, #0
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	9302      	str	r3, [sp, #8]
 800b924:	f107 0314 	add.w	r3, r7, #20
 800b928:	9301      	str	r3, [sp, #4]
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 f850 	bl	800b9da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b93a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b93c:	f000 f8d6 	bl	800baec <prvAddNewTaskToReadyList>
 800b940:	e001      	b.n	800b946 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b946:	697b      	ldr	r3, [r7, #20]
	}
 800b948:	4618      	mov	r0, r3
 800b94a:	3728      	adds	r7, #40	; 0x28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08c      	sub	sp, #48	; 0x30
 800b954:	af04      	add	r7, sp, #16
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4618      	mov	r0, r3
 800b966:	f001 f8ef 	bl	800cb48 <pvPortMalloc>
 800b96a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b972:	2054      	movs	r0, #84	; 0x54
 800b974:	f001 f8e8 	bl	800cb48 <pvPortMalloc>
 800b978:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	631a      	str	r2, [r3, #48]	; 0x30
 800b986:	e005      	b.n	800b994 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b988:	6978      	ldr	r0, [r7, #20]
 800b98a:	f001 f9a5 	bl	800ccd8 <vPortFree>
 800b98e:	e001      	b.n	800b994 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d017      	beq.n	800b9ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9a2:	88fa      	ldrh	r2, [r7, #6]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	9302      	str	r3, [sp, #8]
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	9301      	str	r3, [sp, #4]
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f80e 	bl	800b9da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9be:	69f8      	ldr	r0, [r7, #28]
 800b9c0:	f000 f894 	bl	800baec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	61bb      	str	r3, [r7, #24]
 800b9c8:	e002      	b.n	800b9d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9d0:	69bb      	ldr	r3, [r7, #24]
	}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b088      	sub	sp, #32
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b9f2:	440b      	add	r3, r1
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f023 0307 	bic.w	r3, r3, #7
 800ba00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00b      	beq.n	800ba24 <prvInitialiseNewTask+0x4a>
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	b672      	cpsid	i
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	b662      	cpsie	i
 800ba20:	617b      	str	r3, [r7, #20]
 800ba22:	e7fe      	b.n	800ba22 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d01f      	beq.n	800ba6a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	e012      	b.n	800ba56 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	4413      	add	r3, r2
 800ba36:	7819      	ldrb	r1, [r3, #0]
 800ba38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	3334      	adds	r3, #52	; 0x34
 800ba40:	460a      	mov	r2, r1
 800ba42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4413      	add	r3, r2
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3301      	adds	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	2b0f      	cmp	r3, #15
 800ba5a:	d9e9      	bls.n	800ba30 <prvInitialiseNewTask+0x56>
 800ba5c:	e000      	b.n	800ba60 <prvInitialiseNewTask+0x86>
			{
				break;
 800ba5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba68:	e003      	b.n	800ba72 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d901      	bls.n	800ba7c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba78:	2306      	movs	r3, #6
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff fafd 	bl	800b092 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	3318      	adds	r3, #24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff faf8 	bl	800b092 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	f1c3 0207 	rsb	r2, r3, #7
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68f9      	ldr	r1, [r7, #12]
 800baca:	69b8      	ldr	r0, [r7, #24]
 800bacc:	f000 fe52 	bl	800c774 <pxPortInitialiseStack>
 800bad0:	4602      	mov	r2, r0
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bae2:	bf00      	nop
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baf4:	f000 ff48 	bl	800c988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baf8:	4b2a      	ldr	r3, [pc, #168]	; (800bba4 <prvAddNewTaskToReadyList+0xb8>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3301      	adds	r3, #1
 800bafe:	4a29      	ldr	r2, [pc, #164]	; (800bba4 <prvAddNewTaskToReadyList+0xb8>)
 800bb00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb02:	4b29      	ldr	r3, [pc, #164]	; (800bba8 <prvAddNewTaskToReadyList+0xbc>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d109      	bne.n	800bb1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb0a:	4a27      	ldr	r2, [pc, #156]	; (800bba8 <prvAddNewTaskToReadyList+0xbc>)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb10:	4b24      	ldr	r3, [pc, #144]	; (800bba4 <prvAddNewTaskToReadyList+0xb8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d110      	bne.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb18:	f000 fc64 	bl	800c3e4 <prvInitialiseTaskLists>
 800bb1c:	e00d      	b.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb1e:	4b23      	ldr	r3, [pc, #140]	; (800bbac <prvAddNewTaskToReadyList+0xc0>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d109      	bne.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb26:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <prvAddNewTaskToReadyList+0xbc>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d802      	bhi.n	800bb3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb34:	4a1c      	ldr	r2, [pc, #112]	; (800bba8 <prvAddNewTaskToReadyList+0xbc>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <prvAddNewTaskToReadyList+0xc4>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	4a1b      	ldr	r2, [pc, #108]	; (800bbb0 <prvAddNewTaskToReadyList+0xc4>)
 800bb42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	2201      	movs	r2, #1
 800bb4a:	409a      	lsls	r2, r3
 800bb4c:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	4a18      	ldr	r2, [pc, #96]	; (800bbb4 <prvAddNewTaskToReadyList+0xc8>)
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <prvAddNewTaskToReadyList+0xcc>)
 800bb64:	441a      	add	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7ff fa9d 	bl	800b0ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb72:	f000 ff3b 	bl	800c9ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <prvAddNewTaskToReadyList+0xc0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00e      	beq.n	800bb9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <prvAddNewTaskToReadyList+0xbc>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d207      	bcs.n	800bb9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb8c:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <prvAddNewTaskToReadyList+0xd0>)
 800bb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20000674 	.word	0x20000674
 800bba8:	20000574 	.word	0x20000574
 800bbac:	20000680 	.word	0x20000680
 800bbb0:	20000690 	.word	0x20000690
 800bbb4:	2000067c 	.word	0x2000067c
 800bbb8:	20000578 	.word	0x20000578
 800bbbc:	e000ed04 	.word	0xe000ed04

0800bbc0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08a      	sub	sp, #40	; 0x28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10b      	bne.n	800bbec <vTaskDelayUntil+0x2c>
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	b672      	cpsid	i
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	b662      	cpsie	i
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e7fe      	b.n	800bbea <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <vTaskDelayUntil+0x4a>
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	b672      	cpsid	i
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	b662      	cpsie	i
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	e7fe      	b.n	800bc08 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800bc0a:	4b2a      	ldr	r3, [pc, #168]	; (800bcb4 <vTaskDelayUntil+0xf4>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00b      	beq.n	800bc2a <vTaskDelayUntil+0x6a>
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	b672      	cpsid	i
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	b662      	cpsie	i
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	e7fe      	b.n	800bc28 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800bc2a:	f000 f8e1 	bl	800bdf0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bc2e:	4b22      	ldr	r3, [pc, #136]	; (800bcb8 <vTaskDelayUntil+0xf8>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6a3a      	ldr	r2, [r7, #32]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d20b      	bcs.n	800bc60 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d211      	bcs.n	800bc76 <vTaskDelayUntil+0xb6>
 800bc52:	69fa      	ldr	r2, [r7, #28]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d90d      	bls.n	800bc76 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc5e:	e00a      	b.n	800bc76 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69fa      	ldr	r2, [r7, #28]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d303      	bcc.n	800bc72 <vTaskDelayUntil+0xb2>
 800bc6a:	69fa      	ldr	r2, [r7, #28]
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d901      	bls.n	800bc76 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800bc72:	2301      	movs	r3, #1
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69fa      	ldr	r2, [r7, #28]
 800bc7a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d006      	beq.n	800bc90 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bc82:	69fa      	ldr	r2, [r7, #28]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 fd0c 	bl	800c6a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bc90:	f000 f8bc 	bl	800be0c <xTaskResumeAll>
 800bc94:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d107      	bne.n	800bcac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800bc9c:	4b07      	ldr	r3, [pc, #28]	; (800bcbc <vTaskDelayUntil+0xfc>)
 800bc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcac:	bf00      	nop
 800bcae:	3728      	adds	r7, #40	; 0x28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	2000069c 	.word	0x2000069c
 800bcb8:	20000678 	.word	0x20000678
 800bcbc:	e000ed04 	.word	0xe000ed04

0800bcc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d018      	beq.n	800bd04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bcd2:	4b14      	ldr	r3, [pc, #80]	; (800bd24 <vTaskDelay+0x64>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <vTaskDelay+0x32>
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	b672      	cpsid	i
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	b662      	cpsie	i
 800bcee:	60bb      	str	r3, [r7, #8]
 800bcf0:	e7fe      	b.n	800bcf0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800bcf2:	f000 f87d 	bl	800bdf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fcd5 	bl	800c6a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcfe:	f000 f885 	bl	800be0c <xTaskResumeAll>
 800bd02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d107      	bne.n	800bd1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bd0a:	4b07      	ldr	r3, [pc, #28]	; (800bd28 <vTaskDelay+0x68>)
 800bd0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd1a:	bf00      	nop
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	2000069c 	.word	0x2000069c
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08a      	sub	sp, #40	; 0x28
 800bd30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd3a:	463a      	mov	r2, r7
 800bd3c:	1d39      	adds	r1, r7, #4
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f4 fc34 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	9202      	str	r2, [sp, #8]
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	2300      	movs	r3, #0
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	460a      	mov	r2, r1
 800bd5a:	491f      	ldr	r1, [pc, #124]	; (800bdd8 <vTaskStartScheduler+0xac>)
 800bd5c:	481f      	ldr	r0, [pc, #124]	; (800bddc <vTaskStartScheduler+0xb0>)
 800bd5e:	f7ff fd97 	bl	800b890 <xTaskCreateStatic>
 800bd62:	4602      	mov	r2, r0
 800bd64:	4b1e      	ldr	r3, [pc, #120]	; (800bde0 <vTaskStartScheduler+0xb4>)
 800bd66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd68:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <vTaskStartScheduler+0xb4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd70:	2301      	movs	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e001      	b.n	800bd7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d117      	bne.n	800bdb0 <vTaskStartScheduler+0x84>
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	b672      	cpsid	i
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	b662      	cpsie	i
 800bd94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd96:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <vTaskStartScheduler+0xb8>)
 800bd98:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd9e:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <vTaskStartScheduler+0xbc>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bda4:	4b11      	ldr	r3, [pc, #68]	; (800bdec <vTaskStartScheduler+0xc0>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bdaa:	f000 fd71 	bl	800c890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bdae:	e00f      	b.n	800bdd0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb6:	d10b      	bne.n	800bdd0 <vTaskStartScheduler+0xa4>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	e7fe      	b.n	800bdce <vTaskStartScheduler+0xa2>
}
 800bdd0:	bf00      	nop
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	0800d834 	.word	0x0800d834
 800bddc:	0800c3b5 	.word	0x0800c3b5
 800bde0:	20000698 	.word	0x20000698
 800bde4:	20000694 	.word	0x20000694
 800bde8:	20000680 	.word	0x20000680
 800bdec:	20000678 	.word	0x20000678

0800bdf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bdf4:	4b04      	ldr	r3, [pc, #16]	; (800be08 <vTaskSuspendAll+0x18>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	4a03      	ldr	r2, [pc, #12]	; (800be08 <vTaskSuspendAll+0x18>)
 800bdfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bdfe:	bf00      	nop
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	2000069c 	.word	0x2000069c

0800be0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be12:	2300      	movs	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be16:	2300      	movs	r3, #0
 800be18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be1a:	4b42      	ldr	r3, [pc, #264]	; (800bf24 <xTaskResumeAll+0x118>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d10b      	bne.n	800be3a <xTaskResumeAll+0x2e>
 800be22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be26:	b672      	cpsid	i
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	b662      	cpsie	i
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	e7fe      	b.n	800be38 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be3a:	f000 fda5 	bl	800c988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be3e:	4b39      	ldr	r3, [pc, #228]	; (800bf24 <xTaskResumeAll+0x118>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3b01      	subs	r3, #1
 800be44:	4a37      	ldr	r2, [pc, #220]	; (800bf24 <xTaskResumeAll+0x118>)
 800be46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be48:	4b36      	ldr	r3, [pc, #216]	; (800bf24 <xTaskResumeAll+0x118>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d161      	bne.n	800bf14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be50:	4b35      	ldr	r3, [pc, #212]	; (800bf28 <xTaskResumeAll+0x11c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d05d      	beq.n	800bf14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be58:	e02e      	b.n	800beb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be5a:	4b34      	ldr	r3, [pc, #208]	; (800bf2c <xTaskResumeAll+0x120>)
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3318      	adds	r3, #24
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff f97d 	bl	800b166 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3304      	adds	r3, #4
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff f978 	bl	800b166 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	2201      	movs	r2, #1
 800be7c:	409a      	lsls	r2, r3
 800be7e:	4b2c      	ldr	r3, [pc, #176]	; (800bf30 <xTaskResumeAll+0x124>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4313      	orrs	r3, r2
 800be84:	4a2a      	ldr	r2, [pc, #168]	; (800bf30 <xTaskResumeAll+0x124>)
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4a27      	ldr	r2, [pc, #156]	; (800bf34 <xTaskResumeAll+0x128>)
 800be96:	441a      	add	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f7ff f904 	bl	800b0ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	4b23      	ldr	r3, [pc, #140]	; (800bf38 <xTaskResumeAll+0x12c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	429a      	cmp	r2, r3
 800beb0:	d302      	bcc.n	800beb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800beb2:	4b22      	ldr	r3, [pc, #136]	; (800bf3c <xTaskResumeAll+0x130>)
 800beb4:	2201      	movs	r2, #1
 800beb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800beb8:	4b1c      	ldr	r3, [pc, #112]	; (800bf2c <xTaskResumeAll+0x120>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1cc      	bne.n	800be5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bec6:	f000 fb29 	bl	800c51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800beca:	4b1d      	ldr	r3, [pc, #116]	; (800bf40 <xTaskResumeAll+0x134>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d010      	beq.n	800bef8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bed6:	f000 f847 	bl	800bf68 <xTaskIncrementTick>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bee0:	4b16      	ldr	r3, [pc, #88]	; (800bf3c <xTaskResumeAll+0x130>)
 800bee2:	2201      	movs	r2, #1
 800bee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3b01      	subs	r3, #1
 800beea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1f1      	bne.n	800bed6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bef2:	4b13      	ldr	r3, [pc, #76]	; (800bf40 <xTaskResumeAll+0x134>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bef8:	4b10      	ldr	r3, [pc, #64]	; (800bf3c <xTaskResumeAll+0x130>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d009      	beq.n	800bf14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf00:	2301      	movs	r3, #1
 800bf02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <xTaskResumeAll+0x138>)
 800bf06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf14:	f000 fd6a 	bl	800c9ec <vPortExitCritical>

	return xAlreadyYielded;
 800bf18:	68bb      	ldr	r3, [r7, #8]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000069c 	.word	0x2000069c
 800bf28:	20000674 	.word	0x20000674
 800bf2c:	20000634 	.word	0x20000634
 800bf30:	2000067c 	.word	0x2000067c
 800bf34:	20000578 	.word	0x20000578
 800bf38:	20000574 	.word	0x20000574
 800bf3c:	20000688 	.word	0x20000688
 800bf40:	20000684 	.word	0x20000684
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf4e:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <xTaskGetTickCount+0x1c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf54:	687b      	ldr	r3, [r7, #4]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000678 	.word	0x20000678

0800bf68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf72:	4b4f      	ldr	r3, [pc, #316]	; (800c0b0 <xTaskIncrementTick+0x148>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f040 8089 	bne.w	800c08e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf7c:	4b4d      	ldr	r3, [pc, #308]	; (800c0b4 <xTaskIncrementTick+0x14c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3301      	adds	r3, #1
 800bf82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf84:	4a4b      	ldr	r2, [pc, #300]	; (800c0b4 <xTaskIncrementTick+0x14c>)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d121      	bne.n	800bfd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf90:	4b49      	ldr	r3, [pc, #292]	; (800c0b8 <xTaskIncrementTick+0x150>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <xTaskIncrementTick+0x4a>
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	b672      	cpsid	i
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	b662      	cpsie	i
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	e7fe      	b.n	800bfb0 <xTaskIncrementTick+0x48>
 800bfb2:	4b41      	ldr	r3, [pc, #260]	; (800c0b8 <xTaskIncrementTick+0x150>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <xTaskIncrementTick+0x154>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a3e      	ldr	r2, [pc, #248]	; (800c0b8 <xTaskIncrementTick+0x150>)
 800bfbe:	6013      	str	r3, [r2, #0]
 800bfc0:	4a3e      	ldr	r2, [pc, #248]	; (800c0bc <xTaskIncrementTick+0x154>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	4b3e      	ldr	r3, [pc, #248]	; (800c0c0 <xTaskIncrementTick+0x158>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	4a3c      	ldr	r2, [pc, #240]	; (800c0c0 <xTaskIncrementTick+0x158>)
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	f000 faa4 	bl	800c51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfd4:	4b3b      	ldr	r3, [pc, #236]	; (800c0c4 <xTaskIncrementTick+0x15c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d348      	bcc.n	800c070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfde:	4b36      	ldr	r3, [pc, #216]	; (800c0b8 <xTaskIncrementTick+0x150>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe8:	4b36      	ldr	r3, [pc, #216]	; (800c0c4 <xTaskIncrementTick+0x15c>)
 800bfea:	f04f 32ff 	mov.w	r2, #4294967295
 800bfee:	601a      	str	r2, [r3, #0]
					break;
 800bff0:	e03e      	b.n	800c070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff2:	4b31      	ldr	r3, [pc, #196]	; (800c0b8 <xTaskIncrementTick+0x150>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d203      	bcs.n	800c012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c00a:	4a2e      	ldr	r2, [pc, #184]	; (800c0c4 <xTaskIncrementTick+0x15c>)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c010:	e02e      	b.n	800c070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff f8a5 	bl	800b166 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	3318      	adds	r3, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff f89c 	bl	800b166 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	2201      	movs	r2, #1
 800c034:	409a      	lsls	r2, r3
 800c036:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <xTaskIncrementTick+0x160>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	4a22      	ldr	r2, [pc, #136]	; (800c0c8 <xTaskIncrementTick+0x160>)
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4a1f      	ldr	r2, [pc, #124]	; (800c0cc <xTaskIncrementTick+0x164>)
 800c04e:	441a      	add	r2, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3304      	adds	r3, #4
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7ff f828 	bl	800b0ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c060:	4b1b      	ldr	r3, [pc, #108]	; (800c0d0 <xTaskIncrementTick+0x168>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	429a      	cmp	r2, r3
 800c068:	d3b9      	bcc.n	800bfde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c06e:	e7b6      	b.n	800bfde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c070:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <xTaskIncrementTick+0x168>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c076:	4915      	ldr	r1, [pc, #84]	; (800c0cc <xTaskIncrementTick+0x164>)
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d907      	bls.n	800c098 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c088:	2301      	movs	r3, #1
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e004      	b.n	800c098 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c08e:	4b11      	ldr	r3, [pc, #68]	; (800c0d4 <xTaskIncrementTick+0x16c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a0f      	ldr	r2, [pc, #60]	; (800c0d4 <xTaskIncrementTick+0x16c>)
 800c096:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c098:	4b0f      	ldr	r3, [pc, #60]	; (800c0d8 <xTaskIncrementTick+0x170>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c0a4:	697b      	ldr	r3, [r7, #20]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	2000069c 	.word	0x2000069c
 800c0b4:	20000678 	.word	0x20000678
 800c0b8:	2000062c 	.word	0x2000062c
 800c0bc:	20000630 	.word	0x20000630
 800c0c0:	2000068c 	.word	0x2000068c
 800c0c4:	20000694 	.word	0x20000694
 800c0c8:	2000067c 	.word	0x2000067c
 800c0cc:	20000578 	.word	0x20000578
 800c0d0:	20000574 	.word	0x20000574
 800c0d4:	20000684 	.word	0x20000684
 800c0d8:	20000688 	.word	0x20000688

0800c0dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0e2:	4b27      	ldr	r3, [pc, #156]	; (800c180 <vTaskSwitchContext+0xa4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0ea:	4b26      	ldr	r3, [pc, #152]	; (800c184 <vTaskSwitchContext+0xa8>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0f0:	e040      	b.n	800c174 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c0f2:	4b24      	ldr	r3, [pc, #144]	; (800c184 <vTaskSwitchContext+0xa8>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f8:	4b23      	ldr	r3, [pc, #140]	; (800c188 <vTaskSwitchContext+0xac>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	fab3 f383 	clz	r3, r3
 800c104:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c106:	7afb      	ldrb	r3, [r7, #11]
 800c108:	f1c3 031f 	rsb	r3, r3, #31
 800c10c:	617b      	str	r3, [r7, #20]
 800c10e:	491f      	ldr	r1, [pc, #124]	; (800c18c <vTaskSwitchContext+0xb0>)
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	440b      	add	r3, r1
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10b      	bne.n	800c13a <vTaskSwitchContext+0x5e>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	b672      	cpsid	i
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	b662      	cpsie	i
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e7fe      	b.n	800c138 <vTaskSwitchContext+0x5c>
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	4613      	mov	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4a11      	ldr	r2, [pc, #68]	; (800c18c <vTaskSwitchContext+0xb0>)
 800c146:	4413      	add	r3, r2
 800c148:	613b      	str	r3, [r7, #16]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	605a      	str	r2, [r3, #4]
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	3308      	adds	r3, #8
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d104      	bne.n	800c16a <vTaskSwitchContext+0x8e>
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	605a      	str	r2, [r3, #4]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	4a07      	ldr	r2, [pc, #28]	; (800c190 <vTaskSwitchContext+0xb4>)
 800c172:	6013      	str	r3, [r2, #0]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr
 800c180:	2000069c 	.word	0x2000069c
 800c184:	20000688 	.word	0x20000688
 800c188:	2000067c 	.word	0x2000067c
 800c18c:	20000578 	.word	0x20000578
 800c190:	20000574 	.word	0x20000574

0800c194 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10b      	bne.n	800c1bc <vTaskPlaceOnEventList+0x28>
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	b672      	cpsid	i
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	b662      	cpsie	i
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e7fe      	b.n	800c1ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1bc:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <vTaskPlaceOnEventList+0x48>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3318      	adds	r3, #24
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7fe ff95 	bl	800b0f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	6838      	ldr	r0, [r7, #0]
 800c1ce:	f000 fa6b 	bl	800c6a8 <prvAddCurrentTaskToDelayedList>
}
 800c1d2:	bf00      	nop
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000574 	.word	0x20000574

0800c1e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10b      	bne.n	800c20e <xTaskRemoveFromEventList+0x2e>
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	b672      	cpsid	i
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	b662      	cpsie	i
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e7fe      	b.n	800c20c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3318      	adds	r3, #24
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe ffa7 	bl	800b166 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c218:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <xTaskRemoveFromEventList+0xb0>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d11c      	bne.n	800c25a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe ff9e 	bl	800b166 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	2201      	movs	r2, #1
 800c230:	409a      	lsls	r2, r3
 800c232:	4b18      	ldr	r3, [pc, #96]	; (800c294 <xTaskRemoveFromEventList+0xb4>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4313      	orrs	r3, r2
 800c238:	4a16      	ldr	r2, [pc, #88]	; (800c294 <xTaskRemoveFromEventList+0xb4>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4a13      	ldr	r2, [pc, #76]	; (800c298 <xTaskRemoveFromEventList+0xb8>)
 800c24a:	441a      	add	r2, r3
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7fe ff2a 	bl	800b0ac <vListInsertEnd>
 800c258:	e005      	b.n	800c266 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	3318      	adds	r3, #24
 800c25e:	4619      	mov	r1, r3
 800c260:	480e      	ldr	r0, [pc, #56]	; (800c29c <xTaskRemoveFromEventList+0xbc>)
 800c262:	f7fe ff23 	bl	800b0ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26a:	4b0d      	ldr	r3, [pc, #52]	; (800c2a0 <xTaskRemoveFromEventList+0xc0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	429a      	cmp	r2, r3
 800c272:	d905      	bls.n	800c280 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c274:	2301      	movs	r3, #1
 800c276:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <xTaskRemoveFromEventList+0xc4>)
 800c27a:	2201      	movs	r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	e001      	b.n	800c284 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c280:	2300      	movs	r3, #0
 800c282:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c284:	697b      	ldr	r3, [r7, #20]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	2000069c 	.word	0x2000069c
 800c294:	2000067c 	.word	0x2000067c
 800c298:	20000578 	.word	0x20000578
 800c29c:	20000634 	.word	0x20000634
 800c2a0:	20000574 	.word	0x20000574
 800c2a4:	20000688 	.word	0x20000688

0800c2a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <vTaskInternalSetTimeOutState+0x24>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2b8:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <vTaskInternalSetTimeOutState+0x28>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	605a      	str	r2, [r3, #4]
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	2000068c 	.word	0x2000068c
 800c2d0:	20000678 	.word	0x20000678

0800c2d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10b      	bne.n	800c2fc <xTaskCheckForTimeOut+0x28>
 800c2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e8:	b672      	cpsid	i
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	b662      	cpsie	i
 800c2f8:	613b      	str	r3, [r7, #16]
 800c2fa:	e7fe      	b.n	800c2fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10b      	bne.n	800c31a <xTaskCheckForTimeOut+0x46>
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	b672      	cpsid	i
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	b662      	cpsie	i
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e7fe      	b.n	800c318 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800c31a:	f000 fb35 	bl	800c988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c31e:	4b1d      	ldr	r3, [pc, #116]	; (800c394 <xTaskCheckForTimeOut+0xc0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	69ba      	ldr	r2, [r7, #24]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c336:	d102      	bne.n	800c33e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	61fb      	str	r3, [r7, #28]
 800c33c:	e023      	b.n	800c386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b15      	ldr	r3, [pc, #84]	; (800c398 <xTaskCheckForTimeOut+0xc4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d007      	beq.n	800c35a <xTaskCheckForTimeOut+0x86>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	429a      	cmp	r2, r3
 800c352:	d302      	bcc.n	800c35a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c354:	2301      	movs	r3, #1
 800c356:	61fb      	str	r3, [r7, #28]
 800c358:	e015      	b.n	800c386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	429a      	cmp	r2, r3
 800c362:	d20b      	bcs.n	800c37c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff ff99 	bl	800c2a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c376:	2300      	movs	r3, #0
 800c378:	61fb      	str	r3, [r7, #28]
 800c37a:	e004      	b.n	800c386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c382:	2301      	movs	r3, #1
 800c384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c386:	f000 fb31 	bl	800c9ec <vPortExitCritical>

	return xReturn;
 800c38a:	69fb      	ldr	r3, [r7, #28]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3720      	adds	r7, #32
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	20000678 	.word	0x20000678
 800c398:	2000068c 	.word	0x2000068c

0800c39c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <vTaskMissedYield+0x14>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]
}
 800c3a6:	bf00      	nop
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	20000688 	.word	0x20000688

0800c3b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3bc:	f000 f852 	bl	800c464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <prvIdleTask+0x28>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d9f9      	bls.n	800c3bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <prvIdleTask+0x2c>)
 800c3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3d8:	e7f0      	b.n	800c3bc <prvIdleTask+0x8>
 800c3da:	bf00      	nop
 800c3dc:	20000578 	.word	0x20000578
 800c3e0:	e000ed04 	.word	0xe000ed04

0800c3e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	607b      	str	r3, [r7, #4]
 800c3ee:	e00c      	b.n	800c40a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4a12      	ldr	r2, [pc, #72]	; (800c444 <prvInitialiseTaskLists+0x60>)
 800c3fc:	4413      	add	r3, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe fe27 	bl	800b052 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3301      	adds	r3, #1
 800c408:	607b      	str	r3, [r7, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b06      	cmp	r3, #6
 800c40e:	d9ef      	bls.n	800c3f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c410:	480d      	ldr	r0, [pc, #52]	; (800c448 <prvInitialiseTaskLists+0x64>)
 800c412:	f7fe fe1e 	bl	800b052 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c416:	480d      	ldr	r0, [pc, #52]	; (800c44c <prvInitialiseTaskLists+0x68>)
 800c418:	f7fe fe1b 	bl	800b052 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c41c:	480c      	ldr	r0, [pc, #48]	; (800c450 <prvInitialiseTaskLists+0x6c>)
 800c41e:	f7fe fe18 	bl	800b052 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c422:	480c      	ldr	r0, [pc, #48]	; (800c454 <prvInitialiseTaskLists+0x70>)
 800c424:	f7fe fe15 	bl	800b052 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c428:	480b      	ldr	r0, [pc, #44]	; (800c458 <prvInitialiseTaskLists+0x74>)
 800c42a:	f7fe fe12 	bl	800b052 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c42e:	4b0b      	ldr	r3, [pc, #44]	; (800c45c <prvInitialiseTaskLists+0x78>)
 800c430:	4a05      	ldr	r2, [pc, #20]	; (800c448 <prvInitialiseTaskLists+0x64>)
 800c432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvInitialiseTaskLists+0x7c>)
 800c436:	4a05      	ldr	r2, [pc, #20]	; (800c44c <prvInitialiseTaskLists+0x68>)
 800c438:	601a      	str	r2, [r3, #0]
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	20000578 	.word	0x20000578
 800c448:	20000604 	.word	0x20000604
 800c44c:	20000618 	.word	0x20000618
 800c450:	20000634 	.word	0x20000634
 800c454:	20000648 	.word	0x20000648
 800c458:	20000660 	.word	0x20000660
 800c45c:	2000062c 	.word	0x2000062c
 800c460:	20000630 	.word	0x20000630

0800c464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c46a:	e019      	b.n	800c4a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c46c:	f000 fa8c 	bl	800c988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c470:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <prvCheckTasksWaitingTermination+0x4c>)
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fe72 	bl	800b166 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c482:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <prvCheckTasksWaitingTermination+0x50>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3b01      	subs	r3, #1
 800c488:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <prvCheckTasksWaitingTermination+0x50>)
 800c48a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <prvCheckTasksWaitingTermination+0x54>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3b01      	subs	r3, #1
 800c492:	4a09      	ldr	r2, [pc, #36]	; (800c4b8 <prvCheckTasksWaitingTermination+0x54>)
 800c494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c496:	f000 faa9 	bl	800c9ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f80e 	bl	800c4bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4a0:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <prvCheckTasksWaitingTermination+0x54>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e1      	bne.n	800c46c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20000648 	.word	0x20000648
 800c4b4:	20000674 	.word	0x20000674
 800c4b8:	2000065c 	.word	0x2000065c

0800c4bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d108      	bne.n	800c4e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fc00 	bl	800ccd8 <vPortFree>
				vPortFree( pxTCB );
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fbfd 	bl	800ccd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4de:	e019      	b.n	800c514 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d103      	bne.n	800c4f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fbf4 	bl	800ccd8 <vPortFree>
	}
 800c4f0:	e010      	b.n	800c514 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d00b      	beq.n	800c514 <prvDeleteTCB+0x58>
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	b672      	cpsid	i
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	b662      	cpsie	i
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e7fe      	b.n	800c512 <prvDeleteTCB+0x56>
	}
 800c514:	bf00      	nop
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c522:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <prvResetNextTaskUnblockTime+0x38>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <prvResetNextTaskUnblockTime+0x3c>)
 800c52e:	f04f 32ff 	mov.w	r2, #4294967295
 800c532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c534:	e008      	b.n	800c548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c536:	4b07      	ldr	r3, [pc, #28]	; (800c554 <prvResetNextTaskUnblockTime+0x38>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4a04      	ldr	r2, [pc, #16]	; (800c558 <prvResetNextTaskUnblockTime+0x3c>)
 800c546:	6013      	str	r3, [r2, #0]
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	2000062c 	.word	0x2000062c
 800c558:	20000694 	.word	0x20000694

0800c55c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <xTaskGetSchedulerState+0x34>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c56a:	2301      	movs	r3, #1
 800c56c:	607b      	str	r3, [r7, #4]
 800c56e:	e008      	b.n	800c582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c570:	4b08      	ldr	r3, [pc, #32]	; (800c594 <xTaskGetSchedulerState+0x38>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c578:	2302      	movs	r3, #2
 800c57a:	607b      	str	r3, [r7, #4]
 800c57c:	e001      	b.n	800c582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c57e:	2300      	movs	r3, #0
 800c580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c582:	687b      	ldr	r3, [r7, #4]
	}
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	20000680 	.word	0x20000680
 800c594:	2000069c 	.word	0x2000069c

0800c598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d070      	beq.n	800c690 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5ae:	4b3b      	ldr	r3, [pc, #236]	; (800c69c <xTaskPriorityDisinherit+0x104>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d00b      	beq.n	800c5d0 <xTaskPriorityDisinherit+0x38>
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	b672      	cpsid	i
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	b662      	cpsie	i
 800c5cc:	60fb      	str	r3, [r7, #12]
 800c5ce:	e7fe      	b.n	800c5ce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10b      	bne.n	800c5f0 <xTaskPriorityDisinherit+0x58>
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	b672      	cpsid	i
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	b662      	cpsie	i
 800c5ec:	60bb      	str	r3, [r7, #8]
 800c5ee:	e7fe      	b.n	800c5ee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5f4:	1e5a      	subs	r2, r3, #1
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c602:	429a      	cmp	r2, r3
 800c604:	d044      	beq.n	800c690 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d140      	bne.n	800c690 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	3304      	adds	r3, #4
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe fda7 	bl	800b166 <uxListRemove>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d115      	bne.n	800c64a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c622:	491f      	ldr	r1, [pc, #124]	; (800c6a0 <xTaskPriorityDisinherit+0x108>)
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	440b      	add	r3, r1
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xTaskPriorityDisinherit+0xb2>
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	2201      	movs	r2, #1
 800c63a:	fa02 f303 	lsl.w	r3, r2, r3
 800c63e:	43da      	mvns	r2, r3
 800c640:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <xTaskPriorityDisinherit+0x10c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4013      	ands	r3, r2
 800c646:	4a17      	ldr	r2, [pc, #92]	; (800c6a4 <xTaskPriorityDisinherit+0x10c>)
 800c648:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c656:	f1c3 0207 	rsb	r2, r3, #7
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c662:	2201      	movs	r2, #1
 800c664:	409a      	lsls	r2, r3
 800c666:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <xTaskPriorityDisinherit+0x10c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	4a0d      	ldr	r2, [pc, #52]	; (800c6a4 <xTaskPriorityDisinherit+0x10c>)
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c674:	4613      	mov	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4a08      	ldr	r2, [pc, #32]	; (800c6a0 <xTaskPriorityDisinherit+0x108>)
 800c67e:	441a      	add	r2, r3
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	3304      	adds	r3, #4
 800c684:	4619      	mov	r1, r3
 800c686:	4610      	mov	r0, r2
 800c688:	f7fe fd10 	bl	800b0ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c68c:	2301      	movs	r3, #1
 800c68e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c690:	697b      	ldr	r3, [r7, #20]
	}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	20000574 	.word	0x20000574
 800c6a0:	20000578 	.word	0x20000578
 800c6a4:	2000067c 	.word	0x2000067c

0800c6a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6b2:	4b29      	ldr	r3, [pc, #164]	; (800c758 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6b8:	4b28      	ldr	r3, [pc, #160]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fd51 	bl	800b166 <uxListRemove>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10b      	bne.n	800c6e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c6ca:	4b24      	ldr	r3, [pc, #144]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d6:	43da      	mvns	r2, r3
 800c6d8:	4b21      	ldr	r3, [pc, #132]	; (800c760 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4013      	ands	r3, r2
 800c6de:	4a20      	ldr	r2, [pc, #128]	; (800c760 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e8:	d10a      	bne.n	800c700 <prvAddCurrentTaskToDelayedList+0x58>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d007      	beq.n	800c700 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6f0:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	481a      	ldr	r0, [pc, #104]	; (800c764 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c6fa:	f7fe fcd7 	bl	800b0ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6fe:	e026      	b.n	800c74e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4413      	add	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c708:	4b14      	ldr	r3, [pc, #80]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	429a      	cmp	r2, r3
 800c716:	d209      	bcs.n	800c72c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c718:	4b13      	ldr	r3, [pc, #76]	; (800c768 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3304      	adds	r3, #4
 800c722:	4619      	mov	r1, r3
 800c724:	4610      	mov	r0, r2
 800c726:	f7fe fce5 	bl	800b0f4 <vListInsert>
}
 800c72a:	e010      	b.n	800c74e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c72c:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3304      	adds	r3, #4
 800c736:	4619      	mov	r1, r3
 800c738:	4610      	mov	r0, r2
 800c73a:	f7fe fcdb 	bl	800b0f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c73e:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	429a      	cmp	r2, r3
 800c746:	d202      	bcs.n	800c74e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c748:	4a09      	ldr	r2, [pc, #36]	; (800c770 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6013      	str	r3, [r2, #0]
}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20000678 	.word	0x20000678
 800c75c:	20000574 	.word	0x20000574
 800c760:	2000067c 	.word	0x2000067c
 800c764:	20000660 	.word	0x20000660
 800c768:	20000630 	.word	0x20000630
 800c76c:	2000062c 	.word	0x2000062c
 800c770:	20000694 	.word	0x20000694

0800c774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3b04      	subs	r3, #4
 800c784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3b04      	subs	r3, #4
 800c792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f023 0201 	bic.w	r2, r3, #1
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3b04      	subs	r3, #4
 800c7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7a4:	4a0c      	ldr	r2, [pc, #48]	; (800c7d8 <pxPortInitialiseStack+0x64>)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3b14      	subs	r3, #20
 800c7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f06f 0202 	mvn.w	r2, #2
 800c7c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3b20      	subs	r3, #32
 800c7c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	0800c7dd 	.word	0x0800c7dd

0800c7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7e6:	4b13      	ldr	r3, [pc, #76]	; (800c834 <prvTaskExitError+0x58>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ee:	d00b      	beq.n	800c808 <prvTaskExitError+0x2c>
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	b672      	cpsid	i
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	b662      	cpsie	i
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	e7fe      	b.n	800c806 <prvTaskExitError+0x2a>
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	b672      	cpsid	i
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	b662      	cpsie	i
 800c81c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c81e:	bf00      	nop
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0fc      	beq.n	800c820 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c826:	bf00      	nop
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	20000054 	.word	0x20000054
	...

0800c840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <pxCurrentTCBConst2>)
 800c842:	6819      	ldr	r1, [r3, #0]
 800c844:	6808      	ldr	r0, [r1, #0]
 800c846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84a:	f380 8809 	msr	PSP, r0
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f04f 0000 	mov.w	r0, #0
 800c856:	f380 8811 	msr	BASEPRI, r0
 800c85a:	4770      	bx	lr
 800c85c:	f3af 8000 	nop.w

0800c860 <pxCurrentTCBConst2>:
 800c860:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c868:	4808      	ldr	r0, [pc, #32]	; (800c88c <prvPortStartFirstTask+0x24>)
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	6800      	ldr	r0, [r0, #0]
 800c86e:	f380 8808 	msr	MSP, r0
 800c872:	f04f 0000 	mov.w	r0, #0
 800c876:	f380 8814 	msr	CONTROL, r0
 800c87a:	b662      	cpsie	i
 800c87c:	b661      	cpsie	f
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	df00      	svc	0
 800c888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c88a:	bf00      	nop
 800c88c:	e000ed08 	.word	0xe000ed08

0800c890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c896:	4b36      	ldr	r3, [pc, #216]	; (800c970 <xPortStartScheduler+0xe0>)
 800c898:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	22ff      	movs	r2, #255	; 0xff
 800c8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <xPortStartScheduler+0xe4>)
 800c8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8be:	4b2e      	ldr	r3, [pc, #184]	; (800c978 <xPortStartScheduler+0xe8>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8c4:	e009      	b.n	800c8da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c8c6:	4b2c      	ldr	r3, [pc, #176]	; (800c978 <xPortStartScheduler+0xe8>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4a2a      	ldr	r2, [pc, #168]	; (800c978 <xPortStartScheduler+0xe8>)
 800c8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e2:	2b80      	cmp	r3, #128	; 0x80
 800c8e4:	d0ef      	beq.n	800c8c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8e6:	4b24      	ldr	r3, [pc, #144]	; (800c978 <xPortStartScheduler+0xe8>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f1c3 0307 	rsb	r3, r3, #7
 800c8ee:	2b04      	cmp	r3, #4
 800c8f0:	d00b      	beq.n	800c90a <xPortStartScheduler+0x7a>
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	b672      	cpsid	i
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	b662      	cpsie	i
 800c906:	60bb      	str	r3, [r7, #8]
 800c908:	e7fe      	b.n	800c908 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c90a:	4b1b      	ldr	r3, [pc, #108]	; (800c978 <xPortStartScheduler+0xe8>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	4a19      	ldr	r2, [pc, #100]	; (800c978 <xPortStartScheduler+0xe8>)
 800c912:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c914:	4b18      	ldr	r3, [pc, #96]	; (800c978 <xPortStartScheduler+0xe8>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c91c:	4a16      	ldr	r2, [pc, #88]	; (800c978 <xPortStartScheduler+0xe8>)
 800c91e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	b2da      	uxtb	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c928:	4b14      	ldr	r3, [pc, #80]	; (800c97c <xPortStartScheduler+0xec>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a13      	ldr	r2, [pc, #76]	; (800c97c <xPortStartScheduler+0xec>)
 800c92e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c932:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c934:	4b11      	ldr	r3, [pc, #68]	; (800c97c <xPortStartScheduler+0xec>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a10      	ldr	r2, [pc, #64]	; (800c97c <xPortStartScheduler+0xec>)
 800c93a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c93e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c940:	f000 f8d4 	bl	800caec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c944:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <xPortStartScheduler+0xf0>)
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c94a:	f000 f8f3 	bl	800cb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <xPortStartScheduler+0xf4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a0c      	ldr	r2, [pc, #48]	; (800c984 <xPortStartScheduler+0xf4>)
 800c954:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c958:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c95a:	f7ff ff85 	bl	800c868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c95e:	f7ff fbbd 	bl	800c0dc <vTaskSwitchContext>
	prvTaskExitError();
 800c962:	f7ff ff3b 	bl	800c7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	e000e400 	.word	0xe000e400
 800c974:	200006a0 	.word	0x200006a0
 800c978:	200006a4 	.word	0x200006a4
 800c97c:	e000ed20 	.word	0xe000ed20
 800c980:	20000054 	.word	0x20000054
 800c984:	e000ef34 	.word	0xe000ef34

0800c988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	b672      	cpsid	i
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	b662      	cpsie	i
 800c9a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9a4:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <vPortEnterCritical+0x5c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	4a0e      	ldr	r2, [pc, #56]	; (800c9e4 <vPortEnterCritical+0x5c>)
 800c9ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9ae:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <vPortEnterCritical+0x5c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d110      	bne.n	800c9d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <vPortEnterCritical+0x60>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00b      	beq.n	800c9d8 <vPortEnterCritical+0x50>
 800c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c4:	b672      	cpsid	i
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	b662      	cpsie	i
 800c9d4:	603b      	str	r3, [r7, #0]
 800c9d6:	e7fe      	b.n	800c9d6 <vPortEnterCritical+0x4e>
	}
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	20000054 	.word	0x20000054
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9f2:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <vPortExitCritical+0x50>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10b      	bne.n	800ca12 <vPortExitCritical+0x26>
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	b672      	cpsid	i
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	b662      	cpsie	i
 800ca0e:	607b      	str	r3, [r7, #4]
 800ca10:	e7fe      	b.n	800ca10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ca12:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <vPortExitCritical+0x50>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	4a08      	ldr	r2, [pc, #32]	; (800ca3c <vPortExitCritical+0x50>)
 800ca1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca1c:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <vPortExitCritical+0x50>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d104      	bne.n	800ca2e <vPortExitCritical+0x42>
 800ca24:	2300      	movs	r3, #0
 800ca26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca2e:	bf00      	nop
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	20000054 	.word	0x20000054

0800ca40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca40:	f3ef 8009 	mrs	r0, PSP
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <pxCurrentTCBConst>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	f01e 0f10 	tst.w	lr, #16
 800ca50:	bf08      	it	eq
 800ca52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	6010      	str	r0, [r2, #0]
 800ca5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca64:	b672      	cpsid	i
 800ca66:	f380 8811 	msr	BASEPRI, r0
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	b662      	cpsie	i
 800ca74:	f7ff fb32 	bl	800c0dc <vTaskSwitchContext>
 800ca78:	f04f 0000 	mov.w	r0, #0
 800ca7c:	f380 8811 	msr	BASEPRI, r0
 800ca80:	bc09      	pop	{r0, r3}
 800ca82:	6819      	ldr	r1, [r3, #0]
 800ca84:	6808      	ldr	r0, [r1, #0]
 800ca86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8a:	f01e 0f10 	tst.w	lr, #16
 800ca8e:	bf08      	it	eq
 800ca90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca94:	f380 8809 	msr	PSP, r0
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop

0800caa0 <pxCurrentTCBConst>:
 800caa0:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop

0800caa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	b672      	cpsid	i
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	b662      	cpsie	i
 800cac2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cac4:	f7ff fa50 	bl	800bf68 <xTaskIncrementTick>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cace:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <SysTick_Handler+0x40>)
 800cad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	2300      	movs	r3, #0
 800cad8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <vPortSetupTimerInterrupt+0x38>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <vPortSetupTimerInterrupt+0x3c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a0a      	ldr	r2, [pc, #40]	; (800cb2c <vPortSetupTimerInterrupt+0x40>)
 800cb02:	fba2 2303 	umull	r2, r3, r2, r3
 800cb06:	099b      	lsrs	r3, r3, #6
 800cb08:	4a09      	ldr	r2, [pc, #36]	; (800cb30 <vPortSetupTimerInterrupt+0x44>)
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb0e:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <vPortSetupTimerInterrupt+0x34>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
}
 800cb14:	bf00      	nop
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	e000e010 	.word	0xe000e010
 800cb24:	e000e018 	.word	0xe000e018
 800cb28:	20000048 	.word	0x20000048
 800cb2c:	10624dd3 	.word	0x10624dd3
 800cb30:	e000e014 	.word	0xe000e014

0800cb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb44 <vPortEnableVFP+0x10>
 800cb38:	6801      	ldr	r1, [r0, #0]
 800cb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb3e:	6001      	str	r1, [r0, #0]
 800cb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb42:	bf00      	nop
 800cb44:	e000ed88 	.word	0xe000ed88

0800cb48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08a      	sub	sp, #40	; 0x28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb50:	2300      	movs	r3, #0
 800cb52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb54:	f7ff f94c 	bl	800bdf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb58:	4b5a      	ldr	r3, [pc, #360]	; (800ccc4 <pvPortMalloc+0x17c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb60:	f000 f916 	bl	800cd90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb64:	4b58      	ldr	r3, [pc, #352]	; (800ccc8 <pvPortMalloc+0x180>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f040 8090 	bne.w	800cc92 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01e      	beq.n	800cbb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb78:	2208      	movs	r2, #8
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d015      	beq.n	800cbb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f023 0307 	bic.w	r3, r3, #7
 800cb90:	3308      	adds	r3, #8
 800cb92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <pvPortMalloc+0x6e>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	b672      	cpsid	i
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	b662      	cpsie	i
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e7fe      	b.n	800cbb4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d06a      	beq.n	800cc92 <pvPortMalloc+0x14a>
 800cbbc:	4b43      	ldr	r3, [pc, #268]	; (800cccc <pvPortMalloc+0x184>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d865      	bhi.n	800cc92 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbc6:	4b42      	ldr	r3, [pc, #264]	; (800ccd0 <pvPortMalloc+0x188>)
 800cbc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbca:	4b41      	ldr	r3, [pc, #260]	; (800ccd0 <pvPortMalloc+0x188>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd0:	e004      	b.n	800cbdc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d903      	bls.n	800cbee <pvPortMalloc+0xa6>
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1f1      	bne.n	800cbd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbee:	4b35      	ldr	r3, [pc, #212]	; (800ccc4 <pvPortMalloc+0x17c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d04c      	beq.n	800cc92 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	4413      	add	r3, r2
 800cc00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	685a      	ldr	r2, [r3, #4]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	1ad2      	subs	r2, r2, r3
 800cc12:	2308      	movs	r3, #8
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d920      	bls.n	800cc5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4413      	add	r3, r2
 800cc20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	f003 0307 	and.w	r3, r3, #7
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00b      	beq.n	800cc44 <pvPortMalloc+0xfc>
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	b672      	cpsid	i
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	b662      	cpsie	i
 800cc40:	613b      	str	r3, [r7, #16]
 800cc42:	e7fe      	b.n	800cc42 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	1ad2      	subs	r2, r2, r3
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc56:	69b8      	ldr	r0, [r7, #24]
 800cc58:	f000 f8fc 	bl	800ce54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc5c:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <pvPortMalloc+0x184>)
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	4a19      	ldr	r2, [pc, #100]	; (800cccc <pvPortMalloc+0x184>)
 800cc68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc6a:	4b18      	ldr	r3, [pc, #96]	; (800cccc <pvPortMalloc+0x184>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	4b19      	ldr	r3, [pc, #100]	; (800ccd4 <pvPortMalloc+0x18c>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d203      	bcs.n	800cc7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc76:	4b15      	ldr	r3, [pc, #84]	; (800cccc <pvPortMalloc+0x184>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a16      	ldr	r2, [pc, #88]	; (800ccd4 <pvPortMalloc+0x18c>)
 800cc7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	4b11      	ldr	r3, [pc, #68]	; (800ccc8 <pvPortMalloc+0x180>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	431a      	orrs	r2, r3
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc92:	f7ff f8bb 	bl	800be0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	f003 0307 	and.w	r3, r3, #7
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <pvPortMalloc+0x170>
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	b672      	cpsid	i
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	b662      	cpsie	i
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e7fe      	b.n	800ccb6 <pvPortMalloc+0x16e>
	return pvReturn;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3728      	adds	r7, #40	; 0x28
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200086b0 	.word	0x200086b0
 800ccc8:	200086bc 	.word	0x200086bc
 800cccc:	200086b4 	.word	0x200086b4
 800ccd0:	200086a8 	.word	0x200086a8
 800ccd4:	200086b8 	.word	0x200086b8

0800ccd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d04a      	beq.n	800cd80 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccea:	2308      	movs	r3, #8
 800ccec:	425b      	negs	r3, r3
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	4b22      	ldr	r3, [pc, #136]	; (800cd88 <vPortFree+0xb0>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4013      	ands	r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <vPortFree+0x46>
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	b672      	cpsid	i
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	b662      	cpsie	i
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	e7fe      	b.n	800cd1c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00b      	beq.n	800cd3e <vPortFree+0x66>
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	b672      	cpsid	i
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	b662      	cpsie	i
 800cd3a:	60bb      	str	r3, [r7, #8]
 800cd3c:	e7fe      	b.n	800cd3c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	4b11      	ldr	r3, [pc, #68]	; (800cd88 <vPortFree+0xb0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4013      	ands	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d019      	beq.n	800cd80 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d115      	bne.n	800cd80 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	4b0b      	ldr	r3, [pc, #44]	; (800cd88 <vPortFree+0xb0>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	401a      	ands	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd64:	f7ff f844 	bl	800bdf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <vPortFree+0xb4>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4413      	add	r3, r2
 800cd72:	4a06      	ldr	r2, [pc, #24]	; (800cd8c <vPortFree+0xb4>)
 800cd74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd76:	6938      	ldr	r0, [r7, #16]
 800cd78:	f000 f86c 	bl	800ce54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd7c:	f7ff f846 	bl	800be0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd80:	bf00      	nop
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200086bc 	.word	0x200086bc
 800cd8c:	200086b4 	.word	0x200086b4

0800cd90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd9c:	4b27      	ldr	r3, [pc, #156]	; (800ce3c <prvHeapInit+0xac>)
 800cd9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00c      	beq.n	800cdc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3307      	adds	r3, #7
 800cdae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f023 0307 	bic.w	r3, r3, #7
 800cdb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdb8:	68ba      	ldr	r2, [r7, #8]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	4a1f      	ldr	r2, [pc, #124]	; (800ce3c <prvHeapInit+0xac>)
 800cdc0:	4413      	add	r3, r2
 800cdc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdc8:	4a1d      	ldr	r2, [pc, #116]	; (800ce40 <prvHeapInit+0xb0>)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdce:	4b1c      	ldr	r3, [pc, #112]	; (800ce40 <prvHeapInit+0xb0>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	4413      	add	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cddc:	2208      	movs	r2, #8
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0307 	bic.w	r3, r3, #7
 800cdea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	4a15      	ldr	r2, [pc, #84]	; (800ce44 <prvHeapInit+0xb4>)
 800cdf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdf2:	4b14      	ldr	r3, [pc, #80]	; (800ce44 <prvHeapInit+0xb4>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdfa:	4b12      	ldr	r3, [pc, #72]	; (800ce44 <prvHeapInit+0xb4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	1ad2      	subs	r2, r2, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce10:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <prvHeapInit+0xb4>)
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	4a0a      	ldr	r2, [pc, #40]	; (800ce48 <prvHeapInit+0xb8>)
 800ce1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	4a09      	ldr	r2, [pc, #36]	; (800ce4c <prvHeapInit+0xbc>)
 800ce26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce28:	4b09      	ldr	r3, [pc, #36]	; (800ce50 <prvHeapInit+0xc0>)
 800ce2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce2e:	601a      	str	r2, [r3, #0]
}
 800ce30:	bf00      	nop
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	200006a8 	.word	0x200006a8
 800ce40:	200086a8 	.word	0x200086a8
 800ce44:	200086b0 	.word	0x200086b0
 800ce48:	200086b8 	.word	0x200086b8
 800ce4c:	200086b4 	.word	0x200086b4
 800ce50:	200086bc 	.word	0x200086bc

0800ce54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce5c:	4b28      	ldr	r3, [pc, #160]	; (800cf00 <prvInsertBlockIntoFreeList+0xac>)
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	e002      	b.n	800ce68 <prvInsertBlockIntoFreeList+0x14>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d8f7      	bhi.n	800ce62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d108      	bne.n	800ce96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	441a      	add	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	441a      	add	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d118      	bne.n	800cedc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <prvInsertBlockIntoFreeList+0xb0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d00d      	beq.n	800ced2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	441a      	add	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	e008      	b.n	800cee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <prvInsertBlockIntoFreeList+0xb0>)
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	e003      	b.n	800cee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d002      	beq.n	800cef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cef2:	bf00      	nop
 800cef4:	3714      	adds	r7, #20
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	200086a8 	.word	0x200086a8
 800cf04:	200086b0 	.word	0x200086b0

0800cf08 <__errno>:
 800cf08:	4b01      	ldr	r3, [pc, #4]	; (800cf10 <__errno+0x8>)
 800cf0a:	6818      	ldr	r0, [r3, #0]
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20000058 	.word	0x20000058

0800cf14 <__libc_init_array>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	4e0d      	ldr	r6, [pc, #52]	; (800cf4c <__libc_init_array+0x38>)
 800cf18:	4c0d      	ldr	r4, [pc, #52]	; (800cf50 <__libc_init_array+0x3c>)
 800cf1a:	1ba4      	subs	r4, r4, r6
 800cf1c:	10a4      	asrs	r4, r4, #2
 800cf1e:	2500      	movs	r5, #0
 800cf20:	42a5      	cmp	r5, r4
 800cf22:	d109      	bne.n	800cf38 <__libc_init_array+0x24>
 800cf24:	4e0b      	ldr	r6, [pc, #44]	; (800cf54 <__libc_init_array+0x40>)
 800cf26:	4c0c      	ldr	r4, [pc, #48]	; (800cf58 <__libc_init_array+0x44>)
 800cf28:	f000 fc28 	bl	800d77c <_init>
 800cf2c:	1ba4      	subs	r4, r4, r6
 800cf2e:	10a4      	asrs	r4, r4, #2
 800cf30:	2500      	movs	r5, #0
 800cf32:	42a5      	cmp	r5, r4
 800cf34:	d105      	bne.n	800cf42 <__libc_init_array+0x2e>
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf3c:	4798      	blx	r3
 800cf3e:	3501      	adds	r5, #1
 800cf40:	e7ee      	b.n	800cf20 <__libc_init_array+0xc>
 800cf42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf46:	4798      	blx	r3
 800cf48:	3501      	adds	r5, #1
 800cf4a:	e7f2      	b.n	800cf32 <__libc_init_array+0x1e>
 800cf4c:	0800f7c4 	.word	0x0800f7c4
 800cf50:	0800f7c4 	.word	0x0800f7c4
 800cf54:	0800f7c4 	.word	0x0800f7c4
 800cf58:	0800f7c8 	.word	0x0800f7c8

0800cf5c <memcpy>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	1e43      	subs	r3, r0, #1
 800cf60:	440a      	add	r2, r1
 800cf62:	4291      	cmp	r1, r2
 800cf64:	d100      	bne.n	800cf68 <memcpy+0xc>
 800cf66:	bd10      	pop	{r4, pc}
 800cf68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf70:	e7f7      	b.n	800cf62 <memcpy+0x6>

0800cf72 <memset>:
 800cf72:	4402      	add	r2, r0
 800cf74:	4603      	mov	r3, r0
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d100      	bne.n	800cf7c <memset+0xa>
 800cf7a:	4770      	bx	lr
 800cf7c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf80:	e7f9      	b.n	800cf76 <memset+0x4>
	...

0800cf84 <siprintf>:
 800cf84:	b40e      	push	{r1, r2, r3}
 800cf86:	b500      	push	{lr}
 800cf88:	b09c      	sub	sp, #112	; 0x70
 800cf8a:	ab1d      	add	r3, sp, #116	; 0x74
 800cf8c:	9002      	str	r0, [sp, #8]
 800cf8e:	9006      	str	r0, [sp, #24]
 800cf90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf94:	4809      	ldr	r0, [pc, #36]	; (800cfbc <siprintf+0x38>)
 800cf96:	9107      	str	r1, [sp, #28]
 800cf98:	9104      	str	r1, [sp, #16]
 800cf9a:	4909      	ldr	r1, [pc, #36]	; (800cfc0 <siprintf+0x3c>)
 800cf9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfa0:	9105      	str	r1, [sp, #20]
 800cfa2:	6800      	ldr	r0, [r0, #0]
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	a902      	add	r1, sp, #8
 800cfa8:	f000 f866 	bl	800d078 <_svfiprintf_r>
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	701a      	strb	r2, [r3, #0]
 800cfb2:	b01c      	add	sp, #112	; 0x70
 800cfb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfb8:	b003      	add	sp, #12
 800cfba:	4770      	bx	lr
 800cfbc:	20000058 	.word	0x20000058
 800cfc0:	ffff0208 	.word	0xffff0208

0800cfc4 <__ssputs_r>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	688e      	ldr	r6, [r1, #8]
 800cfca:	429e      	cmp	r6, r3
 800cfcc:	4682      	mov	sl, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	4690      	mov	r8, r2
 800cfd2:	4699      	mov	r9, r3
 800cfd4:	d837      	bhi.n	800d046 <__ssputs_r+0x82>
 800cfd6:	898a      	ldrh	r2, [r1, #12]
 800cfd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfdc:	d031      	beq.n	800d042 <__ssputs_r+0x7e>
 800cfde:	6825      	ldr	r5, [r4, #0]
 800cfe0:	6909      	ldr	r1, [r1, #16]
 800cfe2:	1a6f      	subs	r7, r5, r1
 800cfe4:	6965      	ldr	r5, [r4, #20]
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfec:	fb95 f5f3 	sdiv	r5, r5, r3
 800cff0:	f109 0301 	add.w	r3, r9, #1
 800cff4:	443b      	add	r3, r7
 800cff6:	429d      	cmp	r5, r3
 800cff8:	bf38      	it	cc
 800cffa:	461d      	movcc	r5, r3
 800cffc:	0553      	lsls	r3, r2, #21
 800cffe:	d530      	bpl.n	800d062 <__ssputs_r+0x9e>
 800d000:	4629      	mov	r1, r5
 800d002:	f000 fb21 	bl	800d648 <_malloc_r>
 800d006:	4606      	mov	r6, r0
 800d008:	b950      	cbnz	r0, 800d020 <__ssputs_r+0x5c>
 800d00a:	230c      	movs	r3, #12
 800d00c:	f8ca 3000 	str.w	r3, [sl]
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d020:	463a      	mov	r2, r7
 800d022:	6921      	ldr	r1, [r4, #16]
 800d024:	f7ff ff9a 	bl	800cf5c <memcpy>
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d032:	81a3      	strh	r3, [r4, #12]
 800d034:	6126      	str	r6, [r4, #16]
 800d036:	6165      	str	r5, [r4, #20]
 800d038:	443e      	add	r6, r7
 800d03a:	1bed      	subs	r5, r5, r7
 800d03c:	6026      	str	r6, [r4, #0]
 800d03e:	60a5      	str	r5, [r4, #8]
 800d040:	464e      	mov	r6, r9
 800d042:	454e      	cmp	r6, r9
 800d044:	d900      	bls.n	800d048 <__ssputs_r+0x84>
 800d046:	464e      	mov	r6, r9
 800d048:	4632      	mov	r2, r6
 800d04a:	4641      	mov	r1, r8
 800d04c:	6820      	ldr	r0, [r4, #0]
 800d04e:	f000 fa93 	bl	800d578 <memmove>
 800d052:	68a3      	ldr	r3, [r4, #8]
 800d054:	1b9b      	subs	r3, r3, r6
 800d056:	60a3      	str	r3, [r4, #8]
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	441e      	add	r6, r3
 800d05c:	6026      	str	r6, [r4, #0]
 800d05e:	2000      	movs	r0, #0
 800d060:	e7dc      	b.n	800d01c <__ssputs_r+0x58>
 800d062:	462a      	mov	r2, r5
 800d064:	f000 fb4a 	bl	800d6fc <_realloc_r>
 800d068:	4606      	mov	r6, r0
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d1e2      	bne.n	800d034 <__ssputs_r+0x70>
 800d06e:	6921      	ldr	r1, [r4, #16]
 800d070:	4650      	mov	r0, sl
 800d072:	f000 fa9b 	bl	800d5ac <_free_r>
 800d076:	e7c8      	b.n	800d00a <__ssputs_r+0x46>

0800d078 <_svfiprintf_r>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	461d      	mov	r5, r3
 800d07e:	898b      	ldrh	r3, [r1, #12]
 800d080:	061f      	lsls	r7, r3, #24
 800d082:	b09d      	sub	sp, #116	; 0x74
 800d084:	4680      	mov	r8, r0
 800d086:	460c      	mov	r4, r1
 800d088:	4616      	mov	r6, r2
 800d08a:	d50f      	bpl.n	800d0ac <_svfiprintf_r+0x34>
 800d08c:	690b      	ldr	r3, [r1, #16]
 800d08e:	b96b      	cbnz	r3, 800d0ac <_svfiprintf_r+0x34>
 800d090:	2140      	movs	r1, #64	; 0x40
 800d092:	f000 fad9 	bl	800d648 <_malloc_r>
 800d096:	6020      	str	r0, [r4, #0]
 800d098:	6120      	str	r0, [r4, #16]
 800d09a:	b928      	cbnz	r0, 800d0a8 <_svfiprintf_r+0x30>
 800d09c:	230c      	movs	r3, #12
 800d09e:	f8c8 3000 	str.w	r3, [r8]
 800d0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a6:	e0c8      	b.n	800d23a <_svfiprintf_r+0x1c2>
 800d0a8:	2340      	movs	r3, #64	; 0x40
 800d0aa:	6163      	str	r3, [r4, #20]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b0:	2320      	movs	r3, #32
 800d0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b6:	2330      	movs	r3, #48	; 0x30
 800d0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0bc:	9503      	str	r5, [sp, #12]
 800d0be:	f04f 0b01 	mov.w	fp, #1
 800d0c2:	4637      	mov	r7, r6
 800d0c4:	463d      	mov	r5, r7
 800d0c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0ca:	b10b      	cbz	r3, 800d0d0 <_svfiprintf_r+0x58>
 800d0cc:	2b25      	cmp	r3, #37	; 0x25
 800d0ce:	d13e      	bne.n	800d14e <_svfiprintf_r+0xd6>
 800d0d0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d0d4:	d00b      	beq.n	800d0ee <_svfiprintf_r+0x76>
 800d0d6:	4653      	mov	r3, sl
 800d0d8:	4632      	mov	r2, r6
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4640      	mov	r0, r8
 800d0de:	f7ff ff71 	bl	800cfc4 <__ssputs_r>
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	f000 80a4 	beq.w	800d230 <_svfiprintf_r+0x1b8>
 800d0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ea:	4453      	add	r3, sl
 800d0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ee:	783b      	ldrb	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 809d 	beq.w	800d230 <_svfiprintf_r+0x1b8>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	9307      	str	r3, [sp, #28]
 800d104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d108:	931a      	str	r3, [sp, #104]	; 0x68
 800d10a:	462f      	mov	r7, r5
 800d10c:	2205      	movs	r2, #5
 800d10e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d112:	4850      	ldr	r0, [pc, #320]	; (800d254 <_svfiprintf_r+0x1dc>)
 800d114:	f7f3 f87c 	bl	8000210 <memchr>
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	b9d0      	cbnz	r0, 800d152 <_svfiprintf_r+0xda>
 800d11c:	06d9      	lsls	r1, r3, #27
 800d11e:	bf44      	itt	mi
 800d120:	2220      	movmi	r2, #32
 800d122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d126:	071a      	lsls	r2, r3, #28
 800d128:	bf44      	itt	mi
 800d12a:	222b      	movmi	r2, #43	; 0x2b
 800d12c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d130:	782a      	ldrb	r2, [r5, #0]
 800d132:	2a2a      	cmp	r2, #42	; 0x2a
 800d134:	d015      	beq.n	800d162 <_svfiprintf_r+0xea>
 800d136:	9a07      	ldr	r2, [sp, #28]
 800d138:	462f      	mov	r7, r5
 800d13a:	2000      	movs	r0, #0
 800d13c:	250a      	movs	r5, #10
 800d13e:	4639      	mov	r1, r7
 800d140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d144:	3b30      	subs	r3, #48	; 0x30
 800d146:	2b09      	cmp	r3, #9
 800d148:	d94d      	bls.n	800d1e6 <_svfiprintf_r+0x16e>
 800d14a:	b1b8      	cbz	r0, 800d17c <_svfiprintf_r+0x104>
 800d14c:	e00f      	b.n	800d16e <_svfiprintf_r+0xf6>
 800d14e:	462f      	mov	r7, r5
 800d150:	e7b8      	b.n	800d0c4 <_svfiprintf_r+0x4c>
 800d152:	4a40      	ldr	r2, [pc, #256]	; (800d254 <_svfiprintf_r+0x1dc>)
 800d154:	1a80      	subs	r0, r0, r2
 800d156:	fa0b f000 	lsl.w	r0, fp, r0
 800d15a:	4318      	orrs	r0, r3
 800d15c:	9004      	str	r0, [sp, #16]
 800d15e:	463d      	mov	r5, r7
 800d160:	e7d3      	b.n	800d10a <_svfiprintf_r+0x92>
 800d162:	9a03      	ldr	r2, [sp, #12]
 800d164:	1d11      	adds	r1, r2, #4
 800d166:	6812      	ldr	r2, [r2, #0]
 800d168:	9103      	str	r1, [sp, #12]
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	db01      	blt.n	800d172 <_svfiprintf_r+0xfa>
 800d16e:	9207      	str	r2, [sp, #28]
 800d170:	e004      	b.n	800d17c <_svfiprintf_r+0x104>
 800d172:	4252      	negs	r2, r2
 800d174:	f043 0302 	orr.w	r3, r3, #2
 800d178:	9207      	str	r2, [sp, #28]
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	783b      	ldrb	r3, [r7, #0]
 800d17e:	2b2e      	cmp	r3, #46	; 0x2e
 800d180:	d10c      	bne.n	800d19c <_svfiprintf_r+0x124>
 800d182:	787b      	ldrb	r3, [r7, #1]
 800d184:	2b2a      	cmp	r3, #42	; 0x2a
 800d186:	d133      	bne.n	800d1f0 <_svfiprintf_r+0x178>
 800d188:	9b03      	ldr	r3, [sp, #12]
 800d18a:	1d1a      	adds	r2, r3, #4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	9203      	str	r2, [sp, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfb8      	it	lt
 800d194:	f04f 33ff 	movlt.w	r3, #4294967295
 800d198:	3702      	adds	r7, #2
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	4d2e      	ldr	r5, [pc, #184]	; (800d258 <_svfiprintf_r+0x1e0>)
 800d19e:	7839      	ldrb	r1, [r7, #0]
 800d1a0:	2203      	movs	r2, #3
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f7f3 f834 	bl	8000210 <memchr>
 800d1a8:	b138      	cbz	r0, 800d1ba <_svfiprintf_r+0x142>
 800d1aa:	2340      	movs	r3, #64	; 0x40
 800d1ac:	1b40      	subs	r0, r0, r5
 800d1ae:	fa03 f000 	lsl.w	r0, r3, r0
 800d1b2:	9b04      	ldr	r3, [sp, #16]
 800d1b4:	4303      	orrs	r3, r0
 800d1b6:	3701      	adds	r7, #1
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	7839      	ldrb	r1, [r7, #0]
 800d1bc:	4827      	ldr	r0, [pc, #156]	; (800d25c <_svfiprintf_r+0x1e4>)
 800d1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1c2:	2206      	movs	r2, #6
 800d1c4:	1c7e      	adds	r6, r7, #1
 800d1c6:	f7f3 f823 	bl	8000210 <memchr>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d038      	beq.n	800d240 <_svfiprintf_r+0x1c8>
 800d1ce:	4b24      	ldr	r3, [pc, #144]	; (800d260 <_svfiprintf_r+0x1e8>)
 800d1d0:	bb13      	cbnz	r3, 800d218 <_svfiprintf_r+0x1a0>
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	3307      	adds	r3, #7
 800d1d6:	f023 0307 	bic.w	r3, r3, #7
 800d1da:	3308      	adds	r3, #8
 800d1dc:	9303      	str	r3, [sp, #12]
 800d1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e0:	444b      	add	r3, r9
 800d1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e4:	e76d      	b.n	800d0c2 <_svfiprintf_r+0x4a>
 800d1e6:	fb05 3202 	mla	r2, r5, r2, r3
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	460f      	mov	r7, r1
 800d1ee:	e7a6      	b.n	800d13e <_svfiprintf_r+0xc6>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	3701      	adds	r7, #1
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	250a      	movs	r5, #10
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d200:	3a30      	subs	r2, #48	; 0x30
 800d202:	2a09      	cmp	r2, #9
 800d204:	d903      	bls.n	800d20e <_svfiprintf_r+0x196>
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0c8      	beq.n	800d19c <_svfiprintf_r+0x124>
 800d20a:	9105      	str	r1, [sp, #20]
 800d20c:	e7c6      	b.n	800d19c <_svfiprintf_r+0x124>
 800d20e:	fb05 2101 	mla	r1, r5, r1, r2
 800d212:	2301      	movs	r3, #1
 800d214:	4607      	mov	r7, r0
 800d216:	e7f0      	b.n	800d1fa <_svfiprintf_r+0x182>
 800d218:	ab03      	add	r3, sp, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	4622      	mov	r2, r4
 800d21e:	4b11      	ldr	r3, [pc, #68]	; (800d264 <_svfiprintf_r+0x1ec>)
 800d220:	a904      	add	r1, sp, #16
 800d222:	4640      	mov	r0, r8
 800d224:	f3af 8000 	nop.w
 800d228:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d22c:	4681      	mov	r9, r0
 800d22e:	d1d6      	bne.n	800d1de <_svfiprintf_r+0x166>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	065b      	lsls	r3, r3, #25
 800d234:	f53f af35 	bmi.w	800d0a2 <_svfiprintf_r+0x2a>
 800d238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d23a:	b01d      	add	sp, #116	; 0x74
 800d23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d240:	ab03      	add	r3, sp, #12
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	4622      	mov	r2, r4
 800d246:	4b07      	ldr	r3, [pc, #28]	; (800d264 <_svfiprintf_r+0x1ec>)
 800d248:	a904      	add	r1, sp, #16
 800d24a:	4640      	mov	r0, r8
 800d24c:	f000 f882 	bl	800d354 <_printf_i>
 800d250:	e7ea      	b.n	800d228 <_svfiprintf_r+0x1b0>
 800d252:	bf00      	nop
 800d254:	0800f788 	.word	0x0800f788
 800d258:	0800f78e 	.word	0x0800f78e
 800d25c:	0800f792 	.word	0x0800f792
 800d260:	00000000 	.word	0x00000000
 800d264:	0800cfc5 	.word	0x0800cfc5

0800d268 <_printf_common>:
 800d268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26c:	4691      	mov	r9, r2
 800d26e:	461f      	mov	r7, r3
 800d270:	688a      	ldr	r2, [r1, #8]
 800d272:	690b      	ldr	r3, [r1, #16]
 800d274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d278:	4293      	cmp	r3, r2
 800d27a:	bfb8      	it	lt
 800d27c:	4613      	movlt	r3, r2
 800d27e:	f8c9 3000 	str.w	r3, [r9]
 800d282:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d286:	4606      	mov	r6, r0
 800d288:	460c      	mov	r4, r1
 800d28a:	b112      	cbz	r2, 800d292 <_printf_common+0x2a>
 800d28c:	3301      	adds	r3, #1
 800d28e:	f8c9 3000 	str.w	r3, [r9]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	0699      	lsls	r1, r3, #26
 800d296:	bf42      	ittt	mi
 800d298:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d29c:	3302      	addmi	r3, #2
 800d29e:	f8c9 3000 	strmi.w	r3, [r9]
 800d2a2:	6825      	ldr	r5, [r4, #0]
 800d2a4:	f015 0506 	ands.w	r5, r5, #6
 800d2a8:	d107      	bne.n	800d2ba <_printf_common+0x52>
 800d2aa:	f104 0a19 	add.w	sl, r4, #25
 800d2ae:	68e3      	ldr	r3, [r4, #12]
 800d2b0:	f8d9 2000 	ldr.w	r2, [r9]
 800d2b4:	1a9b      	subs	r3, r3, r2
 800d2b6:	42ab      	cmp	r3, r5
 800d2b8:	dc28      	bgt.n	800d30c <_printf_common+0xa4>
 800d2ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d2be:	6822      	ldr	r2, [r4, #0]
 800d2c0:	3300      	adds	r3, #0
 800d2c2:	bf18      	it	ne
 800d2c4:	2301      	movne	r3, #1
 800d2c6:	0692      	lsls	r2, r2, #26
 800d2c8:	d42d      	bmi.n	800d326 <_printf_common+0xbe>
 800d2ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	47c0      	blx	r8
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d020      	beq.n	800d31a <_printf_common+0xb2>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	68e5      	ldr	r5, [r4, #12]
 800d2dc:	f8d9 2000 	ldr.w	r2, [r9]
 800d2e0:	f003 0306 	and.w	r3, r3, #6
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	bf08      	it	eq
 800d2e8:	1aad      	subeq	r5, r5, r2
 800d2ea:	68a3      	ldr	r3, [r4, #8]
 800d2ec:	6922      	ldr	r2, [r4, #16]
 800d2ee:	bf0c      	ite	eq
 800d2f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2f4:	2500      	movne	r5, #0
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	bfc4      	itt	gt
 800d2fa:	1a9b      	subgt	r3, r3, r2
 800d2fc:	18ed      	addgt	r5, r5, r3
 800d2fe:	f04f 0900 	mov.w	r9, #0
 800d302:	341a      	adds	r4, #26
 800d304:	454d      	cmp	r5, r9
 800d306:	d11a      	bne.n	800d33e <_printf_common+0xd6>
 800d308:	2000      	movs	r0, #0
 800d30a:	e008      	b.n	800d31e <_printf_common+0xb6>
 800d30c:	2301      	movs	r3, #1
 800d30e:	4652      	mov	r2, sl
 800d310:	4639      	mov	r1, r7
 800d312:	4630      	mov	r0, r6
 800d314:	47c0      	blx	r8
 800d316:	3001      	adds	r0, #1
 800d318:	d103      	bne.n	800d322 <_printf_common+0xba>
 800d31a:	f04f 30ff 	mov.w	r0, #4294967295
 800d31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d322:	3501      	adds	r5, #1
 800d324:	e7c3      	b.n	800d2ae <_printf_common+0x46>
 800d326:	18e1      	adds	r1, r4, r3
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	2030      	movs	r0, #48	; 0x30
 800d32c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d330:	4422      	add	r2, r4
 800d332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d33a:	3302      	adds	r3, #2
 800d33c:	e7c5      	b.n	800d2ca <_printf_common+0x62>
 800d33e:	2301      	movs	r3, #1
 800d340:	4622      	mov	r2, r4
 800d342:	4639      	mov	r1, r7
 800d344:	4630      	mov	r0, r6
 800d346:	47c0      	blx	r8
 800d348:	3001      	adds	r0, #1
 800d34a:	d0e6      	beq.n	800d31a <_printf_common+0xb2>
 800d34c:	f109 0901 	add.w	r9, r9, #1
 800d350:	e7d8      	b.n	800d304 <_printf_common+0x9c>
	...

0800d354 <_printf_i>:
 800d354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d358:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d35c:	460c      	mov	r4, r1
 800d35e:	7e09      	ldrb	r1, [r1, #24]
 800d360:	b085      	sub	sp, #20
 800d362:	296e      	cmp	r1, #110	; 0x6e
 800d364:	4617      	mov	r7, r2
 800d366:	4606      	mov	r6, r0
 800d368:	4698      	mov	r8, r3
 800d36a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d36c:	f000 80b3 	beq.w	800d4d6 <_printf_i+0x182>
 800d370:	d822      	bhi.n	800d3b8 <_printf_i+0x64>
 800d372:	2963      	cmp	r1, #99	; 0x63
 800d374:	d036      	beq.n	800d3e4 <_printf_i+0x90>
 800d376:	d80a      	bhi.n	800d38e <_printf_i+0x3a>
 800d378:	2900      	cmp	r1, #0
 800d37a:	f000 80b9 	beq.w	800d4f0 <_printf_i+0x19c>
 800d37e:	2958      	cmp	r1, #88	; 0x58
 800d380:	f000 8083 	beq.w	800d48a <_printf_i+0x136>
 800d384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d388:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d38c:	e032      	b.n	800d3f4 <_printf_i+0xa0>
 800d38e:	2964      	cmp	r1, #100	; 0x64
 800d390:	d001      	beq.n	800d396 <_printf_i+0x42>
 800d392:	2969      	cmp	r1, #105	; 0x69
 800d394:	d1f6      	bne.n	800d384 <_printf_i+0x30>
 800d396:	6820      	ldr	r0, [r4, #0]
 800d398:	6813      	ldr	r3, [r2, #0]
 800d39a:	0605      	lsls	r5, r0, #24
 800d39c:	f103 0104 	add.w	r1, r3, #4
 800d3a0:	d52a      	bpl.n	800d3f8 <_printf_i+0xa4>
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6011      	str	r1, [r2, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da03      	bge.n	800d3b2 <_printf_i+0x5e>
 800d3aa:	222d      	movs	r2, #45	; 0x2d
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d3b2:	486f      	ldr	r0, [pc, #444]	; (800d570 <_printf_i+0x21c>)
 800d3b4:	220a      	movs	r2, #10
 800d3b6:	e039      	b.n	800d42c <_printf_i+0xd8>
 800d3b8:	2973      	cmp	r1, #115	; 0x73
 800d3ba:	f000 809d 	beq.w	800d4f8 <_printf_i+0x1a4>
 800d3be:	d808      	bhi.n	800d3d2 <_printf_i+0x7e>
 800d3c0:	296f      	cmp	r1, #111	; 0x6f
 800d3c2:	d020      	beq.n	800d406 <_printf_i+0xb2>
 800d3c4:	2970      	cmp	r1, #112	; 0x70
 800d3c6:	d1dd      	bne.n	800d384 <_printf_i+0x30>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	f043 0320 	orr.w	r3, r3, #32
 800d3ce:	6023      	str	r3, [r4, #0]
 800d3d0:	e003      	b.n	800d3da <_printf_i+0x86>
 800d3d2:	2975      	cmp	r1, #117	; 0x75
 800d3d4:	d017      	beq.n	800d406 <_printf_i+0xb2>
 800d3d6:	2978      	cmp	r1, #120	; 0x78
 800d3d8:	d1d4      	bne.n	800d384 <_printf_i+0x30>
 800d3da:	2378      	movs	r3, #120	; 0x78
 800d3dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3e0:	4864      	ldr	r0, [pc, #400]	; (800d574 <_printf_i+0x220>)
 800d3e2:	e055      	b.n	800d490 <_printf_i+0x13c>
 800d3e4:	6813      	ldr	r3, [r2, #0]
 800d3e6:	1d19      	adds	r1, r3, #4
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6011      	str	r1, [r2, #0]
 800d3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e08c      	b.n	800d512 <_printf_i+0x1be>
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6011      	str	r1, [r2, #0]
 800d3fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d400:	bf18      	it	ne
 800d402:	b21b      	sxthne	r3, r3
 800d404:	e7cf      	b.n	800d3a6 <_printf_i+0x52>
 800d406:	6813      	ldr	r3, [r2, #0]
 800d408:	6825      	ldr	r5, [r4, #0]
 800d40a:	1d18      	adds	r0, r3, #4
 800d40c:	6010      	str	r0, [r2, #0]
 800d40e:	0628      	lsls	r0, r5, #24
 800d410:	d501      	bpl.n	800d416 <_printf_i+0xc2>
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	e002      	b.n	800d41c <_printf_i+0xc8>
 800d416:	0668      	lsls	r0, r5, #25
 800d418:	d5fb      	bpl.n	800d412 <_printf_i+0xbe>
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	4854      	ldr	r0, [pc, #336]	; (800d570 <_printf_i+0x21c>)
 800d41e:	296f      	cmp	r1, #111	; 0x6f
 800d420:	bf14      	ite	ne
 800d422:	220a      	movne	r2, #10
 800d424:	2208      	moveq	r2, #8
 800d426:	2100      	movs	r1, #0
 800d428:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d42c:	6865      	ldr	r5, [r4, #4]
 800d42e:	60a5      	str	r5, [r4, #8]
 800d430:	2d00      	cmp	r5, #0
 800d432:	f2c0 8095 	blt.w	800d560 <_printf_i+0x20c>
 800d436:	6821      	ldr	r1, [r4, #0]
 800d438:	f021 0104 	bic.w	r1, r1, #4
 800d43c:	6021      	str	r1, [r4, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d13d      	bne.n	800d4be <_printf_i+0x16a>
 800d442:	2d00      	cmp	r5, #0
 800d444:	f040 808e 	bne.w	800d564 <_printf_i+0x210>
 800d448:	4665      	mov	r5, ip
 800d44a:	2a08      	cmp	r2, #8
 800d44c:	d10b      	bne.n	800d466 <_printf_i+0x112>
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	07db      	lsls	r3, r3, #31
 800d452:	d508      	bpl.n	800d466 <_printf_i+0x112>
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	6862      	ldr	r2, [r4, #4]
 800d458:	429a      	cmp	r2, r3
 800d45a:	bfde      	ittt	le
 800d45c:	2330      	movle	r3, #48	; 0x30
 800d45e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d462:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d466:	ebac 0305 	sub.w	r3, ip, r5
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	f8cd 8000 	str.w	r8, [sp]
 800d470:	463b      	mov	r3, r7
 800d472:	aa03      	add	r2, sp, #12
 800d474:	4621      	mov	r1, r4
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff fef6 	bl	800d268 <_printf_common>
 800d47c:	3001      	adds	r0, #1
 800d47e:	d14d      	bne.n	800d51c <_printf_i+0x1c8>
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	b005      	add	sp, #20
 800d486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d48a:	4839      	ldr	r0, [pc, #228]	; (800d570 <_printf_i+0x21c>)
 800d48c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d490:	6813      	ldr	r3, [r2, #0]
 800d492:	6821      	ldr	r1, [r4, #0]
 800d494:	1d1d      	adds	r5, r3, #4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6015      	str	r5, [r2, #0]
 800d49a:	060a      	lsls	r2, r1, #24
 800d49c:	d50b      	bpl.n	800d4b6 <_printf_i+0x162>
 800d49e:	07ca      	lsls	r2, r1, #31
 800d4a0:	bf44      	itt	mi
 800d4a2:	f041 0120 	orrmi.w	r1, r1, #32
 800d4a6:	6021      	strmi	r1, [r4, #0]
 800d4a8:	b91b      	cbnz	r3, 800d4b2 <_printf_i+0x15e>
 800d4aa:	6822      	ldr	r2, [r4, #0]
 800d4ac:	f022 0220 	bic.w	r2, r2, #32
 800d4b0:	6022      	str	r2, [r4, #0]
 800d4b2:	2210      	movs	r2, #16
 800d4b4:	e7b7      	b.n	800d426 <_printf_i+0xd2>
 800d4b6:	064d      	lsls	r5, r1, #25
 800d4b8:	bf48      	it	mi
 800d4ba:	b29b      	uxthmi	r3, r3
 800d4bc:	e7ef      	b.n	800d49e <_printf_i+0x14a>
 800d4be:	4665      	mov	r5, ip
 800d4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4c4:	fb02 3311 	mls	r3, r2, r1, r3
 800d4c8:	5cc3      	ldrb	r3, [r0, r3]
 800d4ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	d1f5      	bne.n	800d4c0 <_printf_i+0x16c>
 800d4d4:	e7b9      	b.n	800d44a <_printf_i+0xf6>
 800d4d6:	6813      	ldr	r3, [r2, #0]
 800d4d8:	6825      	ldr	r5, [r4, #0]
 800d4da:	6961      	ldr	r1, [r4, #20]
 800d4dc:	1d18      	adds	r0, r3, #4
 800d4de:	6010      	str	r0, [r2, #0]
 800d4e0:	0628      	lsls	r0, r5, #24
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	d501      	bpl.n	800d4ea <_printf_i+0x196>
 800d4e6:	6019      	str	r1, [r3, #0]
 800d4e8:	e002      	b.n	800d4f0 <_printf_i+0x19c>
 800d4ea:	066a      	lsls	r2, r5, #25
 800d4ec:	d5fb      	bpl.n	800d4e6 <_printf_i+0x192>
 800d4ee:	8019      	strh	r1, [r3, #0]
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	6123      	str	r3, [r4, #16]
 800d4f4:	4665      	mov	r5, ip
 800d4f6:	e7b9      	b.n	800d46c <_printf_i+0x118>
 800d4f8:	6813      	ldr	r3, [r2, #0]
 800d4fa:	1d19      	adds	r1, r3, #4
 800d4fc:	6011      	str	r1, [r2, #0]
 800d4fe:	681d      	ldr	r5, [r3, #0]
 800d500:	6862      	ldr	r2, [r4, #4]
 800d502:	2100      	movs	r1, #0
 800d504:	4628      	mov	r0, r5
 800d506:	f7f2 fe83 	bl	8000210 <memchr>
 800d50a:	b108      	cbz	r0, 800d510 <_printf_i+0x1bc>
 800d50c:	1b40      	subs	r0, r0, r5
 800d50e:	6060      	str	r0, [r4, #4]
 800d510:	6863      	ldr	r3, [r4, #4]
 800d512:	6123      	str	r3, [r4, #16]
 800d514:	2300      	movs	r3, #0
 800d516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d51a:	e7a7      	b.n	800d46c <_printf_i+0x118>
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	462a      	mov	r2, r5
 800d520:	4639      	mov	r1, r7
 800d522:	4630      	mov	r0, r6
 800d524:	47c0      	blx	r8
 800d526:	3001      	adds	r0, #1
 800d528:	d0aa      	beq.n	800d480 <_printf_i+0x12c>
 800d52a:	6823      	ldr	r3, [r4, #0]
 800d52c:	079b      	lsls	r3, r3, #30
 800d52e:	d413      	bmi.n	800d558 <_printf_i+0x204>
 800d530:	68e0      	ldr	r0, [r4, #12]
 800d532:	9b03      	ldr	r3, [sp, #12]
 800d534:	4298      	cmp	r0, r3
 800d536:	bfb8      	it	lt
 800d538:	4618      	movlt	r0, r3
 800d53a:	e7a3      	b.n	800d484 <_printf_i+0x130>
 800d53c:	2301      	movs	r3, #1
 800d53e:	464a      	mov	r2, r9
 800d540:	4639      	mov	r1, r7
 800d542:	4630      	mov	r0, r6
 800d544:	47c0      	blx	r8
 800d546:	3001      	adds	r0, #1
 800d548:	d09a      	beq.n	800d480 <_printf_i+0x12c>
 800d54a:	3501      	adds	r5, #1
 800d54c:	68e3      	ldr	r3, [r4, #12]
 800d54e:	9a03      	ldr	r2, [sp, #12]
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	42ab      	cmp	r3, r5
 800d554:	dcf2      	bgt.n	800d53c <_printf_i+0x1e8>
 800d556:	e7eb      	b.n	800d530 <_printf_i+0x1dc>
 800d558:	2500      	movs	r5, #0
 800d55a:	f104 0919 	add.w	r9, r4, #25
 800d55e:	e7f5      	b.n	800d54c <_printf_i+0x1f8>
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1ac      	bne.n	800d4be <_printf_i+0x16a>
 800d564:	7803      	ldrb	r3, [r0, #0]
 800d566:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d56a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d56e:	e76c      	b.n	800d44a <_printf_i+0xf6>
 800d570:	0800f799 	.word	0x0800f799
 800d574:	0800f7aa 	.word	0x0800f7aa

0800d578 <memmove>:
 800d578:	4288      	cmp	r0, r1
 800d57a:	b510      	push	{r4, lr}
 800d57c:	eb01 0302 	add.w	r3, r1, r2
 800d580:	d807      	bhi.n	800d592 <memmove+0x1a>
 800d582:	1e42      	subs	r2, r0, #1
 800d584:	4299      	cmp	r1, r3
 800d586:	d00a      	beq.n	800d59e <memmove+0x26>
 800d588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d58c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d590:	e7f8      	b.n	800d584 <memmove+0xc>
 800d592:	4283      	cmp	r3, r0
 800d594:	d9f5      	bls.n	800d582 <memmove+0xa>
 800d596:	1881      	adds	r1, r0, r2
 800d598:	1ad2      	subs	r2, r2, r3
 800d59a:	42d3      	cmn	r3, r2
 800d59c:	d100      	bne.n	800d5a0 <memmove+0x28>
 800d59e:	bd10      	pop	{r4, pc}
 800d5a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d5a8:	e7f7      	b.n	800d59a <memmove+0x22>
	...

0800d5ac <_free_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	d045      	beq.n	800d640 <_free_r+0x94>
 800d5b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b8:	1f0c      	subs	r4, r1, #4
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	bfb8      	it	lt
 800d5be:	18e4      	addlt	r4, r4, r3
 800d5c0:	f000 f8d2 	bl	800d768 <__malloc_lock>
 800d5c4:	4a1f      	ldr	r2, [pc, #124]	; (800d644 <_free_r+0x98>)
 800d5c6:	6813      	ldr	r3, [r2, #0]
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	b933      	cbnz	r3, 800d5da <_free_r+0x2e>
 800d5cc:	6063      	str	r3, [r4, #4]
 800d5ce:	6014      	str	r4, [r2, #0]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5d6:	f000 b8c8 	b.w	800d76a <__malloc_unlock>
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	d90c      	bls.n	800d5f8 <_free_r+0x4c>
 800d5de:	6821      	ldr	r1, [r4, #0]
 800d5e0:	1862      	adds	r2, r4, r1
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	bf04      	itt	eq
 800d5e6:	681a      	ldreq	r2, [r3, #0]
 800d5e8:	685b      	ldreq	r3, [r3, #4]
 800d5ea:	6063      	str	r3, [r4, #4]
 800d5ec:	bf04      	itt	eq
 800d5ee:	1852      	addeq	r2, r2, r1
 800d5f0:	6022      	streq	r2, [r4, #0]
 800d5f2:	6004      	str	r4, [r0, #0]
 800d5f4:	e7ec      	b.n	800d5d0 <_free_r+0x24>
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	b10a      	cbz	r2, 800d600 <_free_r+0x54>
 800d5fc:	42a2      	cmp	r2, r4
 800d5fe:	d9fa      	bls.n	800d5f6 <_free_r+0x4a>
 800d600:	6819      	ldr	r1, [r3, #0]
 800d602:	1858      	adds	r0, r3, r1
 800d604:	42a0      	cmp	r0, r4
 800d606:	d10b      	bne.n	800d620 <_free_r+0x74>
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	4401      	add	r1, r0
 800d60c:	1858      	adds	r0, r3, r1
 800d60e:	4282      	cmp	r2, r0
 800d610:	6019      	str	r1, [r3, #0]
 800d612:	d1dd      	bne.n	800d5d0 <_free_r+0x24>
 800d614:	6810      	ldr	r0, [r2, #0]
 800d616:	6852      	ldr	r2, [r2, #4]
 800d618:	605a      	str	r2, [r3, #4]
 800d61a:	4401      	add	r1, r0
 800d61c:	6019      	str	r1, [r3, #0]
 800d61e:	e7d7      	b.n	800d5d0 <_free_r+0x24>
 800d620:	d902      	bls.n	800d628 <_free_r+0x7c>
 800d622:	230c      	movs	r3, #12
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	e7d3      	b.n	800d5d0 <_free_r+0x24>
 800d628:	6820      	ldr	r0, [r4, #0]
 800d62a:	1821      	adds	r1, r4, r0
 800d62c:	428a      	cmp	r2, r1
 800d62e:	bf04      	itt	eq
 800d630:	6811      	ldreq	r1, [r2, #0]
 800d632:	6852      	ldreq	r2, [r2, #4]
 800d634:	6062      	str	r2, [r4, #4]
 800d636:	bf04      	itt	eq
 800d638:	1809      	addeq	r1, r1, r0
 800d63a:	6021      	streq	r1, [r4, #0]
 800d63c:	605c      	str	r4, [r3, #4]
 800d63e:	e7c7      	b.n	800d5d0 <_free_r+0x24>
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	bf00      	nop
 800d644:	200086c0 	.word	0x200086c0

0800d648 <_malloc_r>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	1ccd      	adds	r5, r1, #3
 800d64c:	f025 0503 	bic.w	r5, r5, #3
 800d650:	3508      	adds	r5, #8
 800d652:	2d0c      	cmp	r5, #12
 800d654:	bf38      	it	cc
 800d656:	250c      	movcc	r5, #12
 800d658:	2d00      	cmp	r5, #0
 800d65a:	4606      	mov	r6, r0
 800d65c:	db01      	blt.n	800d662 <_malloc_r+0x1a>
 800d65e:	42a9      	cmp	r1, r5
 800d660:	d903      	bls.n	800d66a <_malloc_r+0x22>
 800d662:	230c      	movs	r3, #12
 800d664:	6033      	str	r3, [r6, #0]
 800d666:	2000      	movs	r0, #0
 800d668:	bd70      	pop	{r4, r5, r6, pc}
 800d66a:	f000 f87d 	bl	800d768 <__malloc_lock>
 800d66e:	4a21      	ldr	r2, [pc, #132]	; (800d6f4 <_malloc_r+0xac>)
 800d670:	6814      	ldr	r4, [r2, #0]
 800d672:	4621      	mov	r1, r4
 800d674:	b991      	cbnz	r1, 800d69c <_malloc_r+0x54>
 800d676:	4c20      	ldr	r4, [pc, #128]	; (800d6f8 <_malloc_r+0xb0>)
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	b91b      	cbnz	r3, 800d684 <_malloc_r+0x3c>
 800d67c:	4630      	mov	r0, r6
 800d67e:	f000 f863 	bl	800d748 <_sbrk_r>
 800d682:	6020      	str	r0, [r4, #0]
 800d684:	4629      	mov	r1, r5
 800d686:	4630      	mov	r0, r6
 800d688:	f000 f85e 	bl	800d748 <_sbrk_r>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d124      	bne.n	800d6da <_malloc_r+0x92>
 800d690:	230c      	movs	r3, #12
 800d692:	6033      	str	r3, [r6, #0]
 800d694:	4630      	mov	r0, r6
 800d696:	f000 f868 	bl	800d76a <__malloc_unlock>
 800d69a:	e7e4      	b.n	800d666 <_malloc_r+0x1e>
 800d69c:	680b      	ldr	r3, [r1, #0]
 800d69e:	1b5b      	subs	r3, r3, r5
 800d6a0:	d418      	bmi.n	800d6d4 <_malloc_r+0x8c>
 800d6a2:	2b0b      	cmp	r3, #11
 800d6a4:	d90f      	bls.n	800d6c6 <_malloc_r+0x7e>
 800d6a6:	600b      	str	r3, [r1, #0]
 800d6a8:	50cd      	str	r5, [r1, r3]
 800d6aa:	18cc      	adds	r4, r1, r3
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f000 f85c 	bl	800d76a <__malloc_unlock>
 800d6b2:	f104 000b 	add.w	r0, r4, #11
 800d6b6:	1d23      	adds	r3, r4, #4
 800d6b8:	f020 0007 	bic.w	r0, r0, #7
 800d6bc:	1ac3      	subs	r3, r0, r3
 800d6be:	d0d3      	beq.n	800d668 <_malloc_r+0x20>
 800d6c0:	425a      	negs	r2, r3
 800d6c2:	50e2      	str	r2, [r4, r3]
 800d6c4:	e7d0      	b.n	800d668 <_malloc_r+0x20>
 800d6c6:	428c      	cmp	r4, r1
 800d6c8:	684b      	ldr	r3, [r1, #4]
 800d6ca:	bf16      	itet	ne
 800d6cc:	6063      	strne	r3, [r4, #4]
 800d6ce:	6013      	streq	r3, [r2, #0]
 800d6d0:	460c      	movne	r4, r1
 800d6d2:	e7eb      	b.n	800d6ac <_malloc_r+0x64>
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	6849      	ldr	r1, [r1, #4]
 800d6d8:	e7cc      	b.n	800d674 <_malloc_r+0x2c>
 800d6da:	1cc4      	adds	r4, r0, #3
 800d6dc:	f024 0403 	bic.w	r4, r4, #3
 800d6e0:	42a0      	cmp	r0, r4
 800d6e2:	d005      	beq.n	800d6f0 <_malloc_r+0xa8>
 800d6e4:	1a21      	subs	r1, r4, r0
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	f000 f82e 	bl	800d748 <_sbrk_r>
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	d0cf      	beq.n	800d690 <_malloc_r+0x48>
 800d6f0:	6025      	str	r5, [r4, #0]
 800d6f2:	e7db      	b.n	800d6ac <_malloc_r+0x64>
 800d6f4:	200086c0 	.word	0x200086c0
 800d6f8:	200086c4 	.word	0x200086c4

0800d6fc <_realloc_r>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	4607      	mov	r7, r0
 800d700:	4614      	mov	r4, r2
 800d702:	460e      	mov	r6, r1
 800d704:	b921      	cbnz	r1, 800d710 <_realloc_r+0x14>
 800d706:	4611      	mov	r1, r2
 800d708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d70c:	f7ff bf9c 	b.w	800d648 <_malloc_r>
 800d710:	b922      	cbnz	r2, 800d71c <_realloc_r+0x20>
 800d712:	f7ff ff4b 	bl	800d5ac <_free_r>
 800d716:	4625      	mov	r5, r4
 800d718:	4628      	mov	r0, r5
 800d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d71c:	f000 f826 	bl	800d76c <_malloc_usable_size_r>
 800d720:	42a0      	cmp	r0, r4
 800d722:	d20f      	bcs.n	800d744 <_realloc_r+0x48>
 800d724:	4621      	mov	r1, r4
 800d726:	4638      	mov	r0, r7
 800d728:	f7ff ff8e 	bl	800d648 <_malloc_r>
 800d72c:	4605      	mov	r5, r0
 800d72e:	2800      	cmp	r0, #0
 800d730:	d0f2      	beq.n	800d718 <_realloc_r+0x1c>
 800d732:	4631      	mov	r1, r6
 800d734:	4622      	mov	r2, r4
 800d736:	f7ff fc11 	bl	800cf5c <memcpy>
 800d73a:	4631      	mov	r1, r6
 800d73c:	4638      	mov	r0, r7
 800d73e:	f7ff ff35 	bl	800d5ac <_free_r>
 800d742:	e7e9      	b.n	800d718 <_realloc_r+0x1c>
 800d744:	4635      	mov	r5, r6
 800d746:	e7e7      	b.n	800d718 <_realloc_r+0x1c>

0800d748 <_sbrk_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4c06      	ldr	r4, [pc, #24]	; (800d764 <_sbrk_r+0x1c>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4605      	mov	r5, r0
 800d750:	4608      	mov	r0, r1
 800d752:	6023      	str	r3, [r4, #0]
 800d754:	f7f6 ff28 	bl	80045a8 <_sbrk>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_sbrk_r+0x1a>
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_sbrk_r+0x1a>
 800d760:	602b      	str	r3, [r5, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	20008d98 	.word	0x20008d98

0800d768 <__malloc_lock>:
 800d768:	4770      	bx	lr

0800d76a <__malloc_unlock>:
 800d76a:	4770      	bx	lr

0800d76c <_malloc_usable_size_r>:
 800d76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d770:	1f18      	subs	r0, r3, #4
 800d772:	2b00      	cmp	r3, #0
 800d774:	bfbc      	itt	lt
 800d776:	580b      	ldrlt	r3, [r1, r0]
 800d778:	18c0      	addlt	r0, r0, r3
 800d77a:	4770      	bx	lr

0800d77c <_init>:
 800d77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77e:	bf00      	nop
 800d780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d782:	bc08      	pop	{r3}
 800d784:	469e      	mov	lr, r3
 800d786:	4770      	bx	lr

0800d788 <_fini>:
 800d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78a:	bf00      	nop
 800d78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78e:	bc08      	pop	{r3}
 800d790:	469e      	mov	lr, r3
 800d792:	4770      	bx	lr
