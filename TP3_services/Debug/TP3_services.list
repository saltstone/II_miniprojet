
TP3_services.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000206c  0800e064  0800e064  0001e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100d0  080100d0  000300bc  2**0
                  CONTENTS
  4 .ARM          00000008  080100d0  080100d0  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100d8  080100d8  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100d8  080100d8  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100dc  080100dc  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080100e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c80  200000bc  0801019c  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d3c  0801019c  00038d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c4c7  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054f2  00000000  00000000  0005c5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002598  00000000  00000000  00061aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002300  00000000  00000000  00064040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e3d6  00000000  00000000  00066340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f311  00000000  00000000  00094716  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114e54  00000000  00000000  000b3a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c887b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1fc  00000000  00000000  001c88f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e04c 	.word	0x0800e04c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c0 	.word	0x200000c0
 800020c:	0800e04c 	.word	0x0800e04c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8
 80005e0:	2000012c 	.word	0x2000012c

080005e4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f002 f8ec 	bl	80027cc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f4:	f000 f9b4 	bl	8000960 <ft5336_I2C_InitializeIfRequired>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000628:	2300      	movs	r3, #0
 800062a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800062c:	f000 f998 	bl	8000960 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e010      	b.n	8000658 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	21a8      	movs	r1, #168	; 0xa8
 800063c:	4618      	mov	r0, r3
 800063e:	f002 f8a7 	bl	8002790 <TS_IO_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b51      	cmp	r3, #81	; 0x51
 800064c:	d101      	bne.n	8000652 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	3301      	adds	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d802      	bhi.n	8000664 <ft5336_ReadID+0x4e>
 800065e:	7bbb      	ldrb	r3, [r7, #14]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0e8      	beq.n	8000636 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f97e 	bl	8000980 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f932 	bl	80008f0 <ft5336_TS_DisableIT>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f871 	bl	8002790 <TS_IO_Read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	d901      	bls.n	80006ca <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	b2db      	uxtb	r3, r3
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000032c 	.word	0x2000032c

080006e8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800070c:	789a      	ldrb	r2, [r3, #2]
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 8000710:	785b      	ldrb	r3, [r3, #1]
 8000712:	429a      	cmp	r2, r3
 8000714:	f080 80cf 	bcs.w	80008b6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000718:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	2b09      	cmp	r3, #9
 800071e:	d871      	bhi.n	8000804 <ft5336_TS_GetXY+0x11c>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <ft5336_TS_GetXY+0x40>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000751 	.word	0x08000751
 800072c:	08000763 	.word	0x08000763
 8000730:	08000775 	.word	0x08000775
 8000734:	08000787 	.word	0x08000787
 8000738:	08000799 	.word	0x08000799
 800073c:	080007ab 	.word	0x080007ab
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007cf 	.word	0x080007cf
 8000748:	080007e1 	.word	0x080007e1
 800074c:	080007f3 	.word	0x080007f3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000750:	2304      	movs	r3, #4
 8000752:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000754:	2303      	movs	r3, #3
 8000756:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000758:	2306      	movs	r3, #6
 800075a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800075c:	2305      	movs	r3, #5
 800075e:	753b      	strb	r3, [r7, #20]
      break;
 8000760:	e051      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000762:	230a      	movs	r3, #10
 8000764:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000766:	2309      	movs	r3, #9
 8000768:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076a:	230c      	movs	r3, #12
 800076c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800076e:	230b      	movs	r3, #11
 8000770:	753b      	strb	r3, [r7, #20]
      break;
 8000772:	e048      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000774:	2310      	movs	r3, #16
 8000776:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000778:	230f      	movs	r3, #15
 800077a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800077c:	2312      	movs	r3, #18
 800077e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000780:	2311      	movs	r3, #17
 8000782:	753b      	strb	r3, [r7, #20]
      break;
 8000784:	e03f      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000786:	2316      	movs	r3, #22
 8000788:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078a:	2315      	movs	r3, #21
 800078c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800078e:	2318      	movs	r3, #24
 8000790:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000792:	2317      	movs	r3, #23
 8000794:	753b      	strb	r3, [r7, #20]
      break;
 8000796:	e036      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000798:	231c      	movs	r3, #28
 800079a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800079c:	231b      	movs	r3, #27
 800079e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a0:	231e      	movs	r3, #30
 80007a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a4:	231d      	movs	r3, #29
 80007a6:	753b      	strb	r3, [r7, #20]
      break;
 80007a8:	e02d      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007aa:	2322      	movs	r3, #34	; 0x22
 80007ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b2:	2324      	movs	r3, #36	; 0x24
 80007b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007b6:	2323      	movs	r3, #35	; 0x23
 80007b8:	753b      	strb	r3, [r7, #20]
      break;
 80007ba:	e024      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c0:	2327      	movs	r3, #39	; 0x27
 80007c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c4:	232a      	movs	r3, #42	; 0x2a
 80007c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007c8:	2329      	movs	r3, #41	; 0x29
 80007ca:	753b      	strb	r3, [r7, #20]
      break;
 80007cc:	e01b      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007ce:	232e      	movs	r3, #46	; 0x2e
 80007d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d2:	232d      	movs	r3, #45	; 0x2d
 80007d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007d6:	2330      	movs	r3, #48	; 0x30
 80007d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007da:	232f      	movs	r3, #47	; 0x2f
 80007dc:	753b      	strb	r3, [r7, #20]
      break;
 80007de:	e012      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e4:	2333      	movs	r3, #51	; 0x33
 80007e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007e8:	2336      	movs	r3, #54	; 0x36
 80007ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007ec:	2335      	movs	r3, #53	; 0x35
 80007ee:	753b      	strb	r3, [r7, #20]
      break;
 80007f0:	e009      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f2:	233a      	movs	r3, #58	; 0x3a
 80007f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007f6:	2339      	movs	r3, #57	; 0x39
 80007f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fa:	233c      	movs	r3, #60	; 0x3c
 80007fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007fe:	233b      	movs	r3, #59	; 0x3b
 8000800:	753b      	strb	r3, [r7, #20]
      break;
 8000802:	e000      	b.n	8000806 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000804:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	7dfa      	ldrb	r2, [r7, #23]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f001 ffbe 	bl	8002790 <TS_IO_Read>
 8000814:	4603      	mov	r3, r0
 8000816:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000820:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000822:	89fb      	ldrh	r3, [r7, #14]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	7dba      	ldrb	r2, [r7, #22]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f001 ffb0 	bl	8002790 <TS_IO_Read>
 8000830:	4603      	mov	r3, r0
 8000832:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800083e:	b21a      	sxth	r2, r3
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21b      	sxth	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 800084e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000852:	881a      	ldrh	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	7d7a      	ldrb	r2, [r7, #21]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f001 ff95 	bl	8002790 <TS_IO_Read>
 8000866:	4603      	mov	r3, r0
 8000868:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000872:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	7d3a      	ldrb	r2, [r7, #20]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ff87 	bl	8002790 <TS_IO_Read>
 8000882:	4603      	mov	r3, r0
 8000884:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000886:	7cfb      	ldrb	r3, [r7, #19]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a0:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <ft5336_TS_GetXY+0x1d8>)
 80008b4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000032c 	.word	0x2000032c
 80008c4:	20000330 	.word	0x20000330

080008c8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	21a4      	movs	r1, #164	; 0xa4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ff3a 	bl	800275c <TS_IO_Write>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	7bfa      	ldrb	r2, [r7, #15]
 8000908:	21a4      	movs	r1, #164	; 0xa4
 800090a:	4618      	mov	r0, r3
 800090c:	f001 ff26 	bl	800275c <TS_IO_Write>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800094e:	781b      	ldrb	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000032c 	.word	0x2000032c

08000960 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000964:	f7ff fff0 	bl	8000948 <ft5336_Get_I2C_InitializedStatus>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800096e:	f001 feeb 	bl	8002748 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000972:	4b02      	ldr	r3, [pc, #8]	; (800097c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
  }
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000032c 	.word	0x2000032c

08000980 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b0aa      	sub	sp, #168	; 0xa8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f003 fcb2 	bl	800430a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f8ff 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 ffa1 	bl	80018f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009ae:	f000 f9fd 	bl	8000dac <MX_ADC3_Init>
  MX_I2C1_Init();
 80009b2:	f000 faa9 	bl	8000f08 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009b6:	f000 fae7 	bl	8000f88 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009ba:	f000 fb25 	bl	8001008 <MX_LTDC_Init>
  MX_RTC_Init();
 80009be:	f000 fba5 	bl	800110c <MX_RTC_Init>
  MX_SPI2_Init();
 80009c2:	f000 fc49 	bl	8001258 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009c6:	f000 fc85 	bl	80012d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ca:	f000 fcd7 	bl	800137c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ce:	f000 fd23 	bl	8001418 <MX_TIM3_Init>
  MX_TIM5_Init();
 80009d2:	f000 fdaf 	bl	8001534 <MX_TIM5_Init>
  MX_TIM8_Init();
 80009d6:	f000 fdfb 	bl	80015d0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80009da:	f000 fed3 	bl	8001784 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009de:	f000 ff09 	bl	80017f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80009e2:	f000 f991 	bl	8000d08 <MX_ADC1_Init>
  MX_DAC_Init();
 80009e6:	f000 fa33 	bl	8000e50 <MX_DAC_Init>
  MX_UART7_Init();
 80009ea:	f000 fe9b 	bl	8001724 <MX_UART7_Init>
  MX_FMC_Init();
 80009ee:	f000 ff31 	bl	8001854 <MX_FMC_Init>
  MX_DMA2D_Init();
 80009f2:	f000 fa57 	bl	8000ea4 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 80009f6:	f001 fef5 	bl	80027e4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80009fe:	2000      	movs	r0, #0
 8000a00:	f001 ff88 	bl	8002914 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a04:	f001 ff5e 	bl	80028c4 <BSP_LCD_GetXSize>
 8000a08:	4604      	mov	r4, r0
 8000a0a:	f001 ff6f 	bl	80028ec <BSP_LCD_GetYSize>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a14:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f001 ff79 	bl	8002914 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a22:	f002 fa25 	bl	8002e70 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f001 ffd4 	bl	80029d4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f002 f82c 	bl	8002a8c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000a34:	484c      	ldr	r0, [pc, #304]	; (8000b68 <main+0x1cc>)
 8000a36:	f002 f80f 	bl	8002a58 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000a3a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000a3e:	f001 ffd9 	bl	80029f4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
 8000a46:	f001 ffed 	bl	8002a24 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a4a:	f001 ff3b 	bl	80028c4 <BSP_LCD_GetXSize>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29c      	uxth	r4, r3
 8000a52:	f001 ff4b 	bl	80028ec <BSP_LCD_GetYSize>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f002 fdd5 	bl	800360c <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1, rxbuffer, 1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	4941      	ldr	r1, [pc, #260]	; (8000b6c <main+0x1d0>)
 8000a66:	4842      	ldr	r0, [pc, #264]	; (8000b70 <main+0x1d4>)
 8000a68:	f009 fa9a 	bl	8009fa0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000a78:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00a fb08 	bl	800b092 <osMutexCreate>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <main+0x1d8>)
 8000a86:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Horloge_Souris */
  osMessageQDef(Horloge_Souris, 1, uint32_t);
 8000a88:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <main+0x1dc>)
 8000a8a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Horloge_SourisHandle = osMessageCreate(osMessageQ(Horloge_Souris), NULL);
 8000a94:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00a fb11 	bl	800b0c2 <osMessageCreate>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <main+0x1e0>)
 8000aa4:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <main+0x1e4>)
 8000aa8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000aac:	461d      	mov	r5, r3
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00a fa86 	bl	800afd2 <osThreadCreate>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <main+0x1e8>)
 8000aca:	601a      	str	r2, [r3, #0]

  /* definition and creation of Horloge */
  osThreadDef(Horloge, horloge, osPriorityBelowNormal, 0, 1024);
 8000acc:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <main+0x1ec>)
 8000ace:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ad2:	461d      	mov	r5, r3
 8000ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HorlogeHandle = osThreadCreate(osThread(Horloge), NULL);
 8000ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00a fa73 	bl	800afd2 <osThreadCreate>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <main+0x1f0>)
 8000af0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Souris */
  osThreadDef(Souris, souris, osPriorityNormal, 0, 1024);
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <main+0x1f4>)
 8000af4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000af8:	461d      	mov	r5, r3
 8000afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SourisHandle = osThreadCreate(osThread(Souris), NULL);
 8000b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00a fa60 	bl	800afd2 <osThreadCreate>
 8000b12:	4602      	mov	r2, r0
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <main+0x1f8>)
 8000b16:	601a      	str	r2, [r3, #0]

  /* definition and creation of Chat */
  osThreadDef(Chat, chat, osPriorityNormal, 0, 1024);
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <main+0x1fc>)
 8000b1a:	f107 0420 	add.w	r4, r7, #32
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChatHandle = osThreadCreate(osThread(Chat), NULL);
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00a fa4d 	bl	800afd2 <osThreadCreate>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <main+0x200>)
 8000b3c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Manager */
  osThreadDef(Manager, manager, osPriorityHigh, 0, 1024);
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <main+0x204>)
 8000b40:	1d3c      	adds	r4, r7, #4
 8000b42:	461d      	mov	r5, r3
 8000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ManagerHandle = osThreadCreate(osThread(Manager), NULL);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00a fa3c 	bl	800afd2 <osThreadCreate>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <main+0x208>)
 8000b5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b60:	f00a fa30 	bl	800afc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b64:	e7fe      	b.n	8000b64 <main+0x1c8>
 8000b66:	bf00      	nop
 8000b68:	2000003c 	.word	0x2000003c
 8000b6c:	20008c0c 	.word	0x20008c0c
 8000b70:	200089d4 	.word	0x200089d4
 8000b74:	20008c08 	.word	0x20008c08
 8000b78:	0800e064 	.word	0x0800e064
 8000b7c:	20008a6c 	.word	0x20008a6c
 8000b80:	0800e080 	.word	0x0800e080
 8000b84:	20008658 	.word	0x20008658
 8000b88:	0800e0a4 	.word	0x0800e0a4
 8000b8c:	20008c04 	.word	0x20008c04
 8000b90:	0800e0c8 	.word	0x0800e0c8
 8000b94:	20008654 	.word	0x20008654
 8000b98:	0800e0ec 	.word	0x0800e0ec
 8000b9c:	20008a54 	.word	0x20008a54
 8000ba0:	0800e110 	.word	0x0800e110
 8000ba4:	20008818 	.word	0x20008818

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0b4      	sub	sp, #208	; 0xd0
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00c fe43 	bl	800d842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2284      	movs	r2, #132	; 0x84
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00c fe34 	bl	800d842 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bda:	f006 f9cf 	bl	8006f7c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <SystemClock_Config+0x154>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a46      	ldr	r2, [pc, #280]	; (8000cfc <SystemClock_Config+0x154>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <SystemClock_Config+0x154>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <SystemClock_Config+0x158>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a41      	ldr	r2, [pc, #260]	; (8000d00 <SystemClock_Config+0x158>)
 8000bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <SystemClock_Config+0x158>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c30:	2319      	movs	r3, #25
 8000c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c44:	2309      	movs	r3, #9
 8000c46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 f9f4 	bl	800703c <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c5a:	f001 fc1b 	bl	8002494 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c5e:	f006 f99d 	bl	8006f9c <HAL_PWREx_EnableOverDrive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c68:	f001 fc14 	bl	8002494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c92:	2106      	movs	r1, #6
 8000c94:	4618      	mov	r0, r3
 8000c96:	f006 fc75 	bl	8007584 <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000ca0:	f001 fbf8 	bl	8002494 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <SystemClock_Config+0x15c>)
 8000ca6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000ca8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fe52 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000cee:	f001 fbd1 	bl	8002494 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	37d0      	adds	r7, #208	; 0xd0
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000
 8000d04:	00015868 	.word	0x00015868

08000d08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_ADC1_Init+0x9c>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC1_Init+0xa0>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d6a:	f003 fb1d 	bl	80043a8 <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d74:	f001 fb8e 	bl	8002494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC1_Init+0x98>)
 8000d8a:	f003 fca3 	bl	80046d4 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d94:	f001 fb7e 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20008944 	.word	0x20008944
 8000da4:	40012000 	.word	0x40012000
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_ADC3_Init+0x9c>)
 8000dc2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <MX_ADC3_Init+0xa0>)
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000e0e:	f003 facb 	bl	80043a8 <HAL_ADC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e18:	f001 fb3c 	bl	8002494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_ADC3_Init+0x98>)
 8000e2e:	f003 fc51 	bl	80046d4 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e38:	f001 fb2c 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000898c 	.word	0x2000898c
 8000e48:	40012200 	.word	0x40012200
 8000e4c:	0f000001 	.word	0x0f000001

08000e50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_DAC_Init+0x4c>)
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <MX_DAC_Init+0x50>)
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_DAC_Init+0x4c>)
 8000e66:	f003 ff5b 	bl	8004d20 <HAL_DAC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e70:	f001 fb10 	bl	8002494 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_DAC_Init+0x4c>)
 8000e84:	f003 ffc2 	bl	8004e0c <HAL_DAC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e8e:	f001 fb01 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20008a58 	.word	0x20008a58
 8000ea0:	40007400 	.word	0x40007400

08000ea4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <MX_DMA2D_Init+0x60>)
 8000eac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000eda:	f004 f9cd 	bl	8005278 <HAL_DMA2D_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ee4:	f001 fad6 	bl	8002494 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_DMA2D_Init+0x5c>)
 8000eec:	f004 fb22 	bl	8005534 <HAL_DMA2D_ConfigLayer>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ef6:	f001 facd 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20008b50 	.word	0x20008b50
 8000f04:	4002b000 	.word	0x4002b000

08000f08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MX_I2C1_Init+0x78>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_I2C1_Init+0x7c>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f44:	f004 fef2 	bl	8005d2c <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f4e:	f001 faa1 	bl	8002494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f56:	f005 fc01 	bl	800675c <HAL_I2CEx_ConfigAnalogFilter>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f001 fa98 	bl	8002494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_I2C1_Init+0x74>)
 8000f68:	f005 fc43 	bl	80067f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f001 fa8f 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200087cc 	.word	0x200087cc
 8000f80:	40005400 	.word	0x40005400
 8000f84:	00c0eaff 	.word	0x00c0eaff

08000f88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <MX_I2C3_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_I2C3_Init+0x7c>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fc4:	f004 feb2 	bl	8005d2c <HAL_I2C_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f001 fa61 	bl	8002494 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fd6:	f005 fbc1 	bl	800675c <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fe0:	f001 fa58 	bl	8002494 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_I2C3_Init+0x74>)
 8000fe8:	f005 fc03 	bl	80067f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f001 fa4f 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000865c 	.word	0x2000865c
 8001000:	40005c00 	.word	0x40005c00
 8001004:	00c0eaff 	.word	0x00c0eaff

08001008 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2234      	movs	r2, #52	; 0x34
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00c fc14 	bl	800d842 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800101a:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <MX_LTDC_Init+0xfc>)
 800101c:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <MX_LTDC_Init+0x100>)
 800101e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <MX_LTDC_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001038:	4b32      	ldr	r3, [pc, #200]	; (8001104 <MX_LTDC_Init+0xfc>)
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001040:	2209      	movs	r2, #9
 8001042:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001046:	2235      	movs	r2, #53	; 0x35
 8001048:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_LTDC_Init+0xfc>)
 800104c:	220b      	movs	r2, #11
 800104e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001052:	f240 2215 	movw	r2, #533	; 0x215
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <MX_LTDC_Init+0xfc>)
 800105a:	f240 121b 	movw	r2, #283	; 0x11b
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001062:	f240 2235 	movw	r2, #565	; 0x235
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_LTDC_Init+0xfc>)
 800106a:	f240 121d 	movw	r2, #285	; 0x11d
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_LTDC_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_LTDC_Init+0xfc>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <MX_LTDC_Init+0xfc>)
 800108a:	f005 fbff 	bl	800688c <HAL_LTDC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001094:	f001 f9fe 	bl	8002494 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800109c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010aa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010bc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010c2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80010c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80010ce:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_LTDC_Init+0xfc>)
 80010ee:	f005 fd5f 	bl	8006bb0 <HAL_LTDC_ConfigLayer>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80010f8:	f001 f9cc 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000889c 	.word	0x2000889c
 8001108:	40016800 	.word	0x40016800

0800110c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b092      	sub	sp, #72	; 0x48
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	222c      	movs	r2, #44	; 0x2c
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f00c fb87 	bl	800d842 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <MX_RTC_Init+0x144>)
 8001136:	4a47      	ldr	r2, [pc, #284]	; (8001254 <MX_RTC_Init+0x148>)
 8001138:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <MX_RTC_Init+0x144>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <MX_RTC_Init+0x144>)
 8001142:	227f      	movs	r2, #127	; 0x7f
 8001144:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <MX_RTC_Init+0x144>)
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <MX_RTC_Init+0x144>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <MX_RTC_Init+0x144>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <MX_RTC_Init+0x144>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115e:	483c      	ldr	r0, [pc, #240]	; (8001250 <MX_RTC_Init+0x144>)
 8001160:	f007 f802 	bl	8008168 <HAL_RTC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800116a:	f001 f993 	bl	8002494 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001180:	2300      	movs	r3, #0
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001188:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <MX_RTC_Init+0x144>)
 8001192:	f007 f865 	bl	8008260 <HAL_RTC_SetTime>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800119c:	f001 f97a 	bl	8002494 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	2201      	movs	r2, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <MX_RTC_Init+0x144>)
 80011c2:	f007 f969 	bl	8008498 <HAL_RTC_SetDate>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011cc:	f001 f962 	bl	8002494 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80011d8:	2300      	movs	r3, #0
 80011da:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_RTC_Init+0x144>)
 8001208:	f007 fa3e 	bl	8008688 <HAL_RTC_SetAlarm>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001212:	f001 f93f 	bl	8002494 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <MX_RTC_Init+0x144>)
 8001224:	f007 fa30 	bl	8008688 <HAL_RTC_SetAlarm>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800122e:	f001 f931 	bl	8002494 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001232:	2202      	movs	r2, #2
 8001234:	2100      	movs	r1, #0
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_RTC_Init+0x144>)
 8001238:	f007 fbce 	bl	80089d8 <HAL_RTCEx_SetTimeStamp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001242:	f001 f927 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3748      	adds	r7, #72	; 0x48
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20008a70 	.word	0x20008a70
 8001254:	40002800 	.word	0x40002800

08001258 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_SPI2_Init+0x74>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_SPI2_Init+0x78>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_SPI2_Init+0x74>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_SPI2_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_SPI2_Init+0x74>)
 8001272:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001276:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_SPI2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_SPI2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_SPI2_Init+0x74>)
 8001286:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800128a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_SPI2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_SPI2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SPI2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_SPI2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SPI2_Init+0x74>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_SPI2_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_SPI2_Init+0x74>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_SPI2_Init+0x74>)
 80012b8:	f007 fc63 	bl	8008b82 <HAL_SPI_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f001 f8e7 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200086a8 	.word	0x200086a8
 80012d0:	40003800 	.word	0x40003800

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_TIM1_Init+0xa0>)
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <MX_TIM1_Init+0xa4>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM1_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM1_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM1_Init+0xa0>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001320:	f007 fcc1 	bl	8008ca6 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800132a:	f001 f8b3 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <MX_TIM1_Init+0xa0>)
 800133c:	f007 ff74 	bl	8009228 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001346:	f001 f8a5 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM1_Init+0xa0>)
 800135c:	f008 fca8 	bl	8009cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001366:	f001 f895 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20008a90 	.word	0x20008a90
 8001378:	40010000 	.word	0x40010000

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM2_Init+0x98>)
 800139c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_TIM2_Init+0x98>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_TIM2_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013c2:	4814      	ldr	r0, [pc, #80]	; (8001414 <MX_TIM2_Init+0x98>)
 80013c4:	f007 fc6f 	bl	8008ca6 <HAL_TIM_Base_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ce:	f001 f861 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_TIM2_Init+0x98>)
 80013e0:	f007 ff22 	bl	8009228 <HAL_TIM_ConfigClockSource>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ea:	f001 f853 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_TIM2_Init+0x98>)
 80013fc:	f008 fc58 	bl	8009cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001406:	f001 f845 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20008b90 	.word	0x20008b90

08001418 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	; 0x50
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <MX_TIM3_Init+0x114>)
 800145c:	4a34      	ldr	r2, [pc, #208]	; (8001530 <MX_TIM3_Init+0x118>)
 800145e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <MX_TIM3_Init+0x114>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <MX_TIM3_Init+0x114>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <MX_TIM3_Init+0x114>)
 800146e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <MX_TIM3_Init+0x114>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <MX_TIM3_Init+0x114>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	482a      	ldr	r0, [pc, #168]	; (800152c <MX_TIM3_Init+0x114>)
 8001482:	f007 fc10 	bl	8008ca6 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800148c:	f001 f802 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800149a:	4619      	mov	r1, r3
 800149c:	4823      	ldr	r0, [pc, #140]	; (800152c <MX_TIM3_Init+0x114>)
 800149e:	f007 fec3 	bl	8009228 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014a8:	f000 fff4 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <MX_TIM3_Init+0x114>)
 80014ae:	f007 fc4f 	bl	8008d50 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80014b8:	f000 ffec 	bl	8002494 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <MX_TIM3_Init+0x114>)
 80014cc:	f007 ff66 	bl	800939c <HAL_TIM_SlaveConfigSynchro>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80014d6:	f000 ffdd 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <MX_TIM3_Init+0x114>)
 80014ea:	f008 fbe1 	bl	8009cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80014f4:	f000 ffce 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f8:	2360      	movs	r3, #96	; 0x60
 80014fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM3_Init+0x114>)
 8001510:	f007 fd72 	bl	8008ff8 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800151a:	f000 ffbb 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM3_Init+0x114>)
 8001520:	f002 fc28 	bl	8003d74 <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000885c 	.word	0x2000885c
 8001530:	40000400 	.word	0x40000400

08001534 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM5_Init+0x94>)
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <MX_TIM5_Init+0x98>)
 8001556:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM5_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM5_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM5_Init+0x94>)
 8001566:	f04f 32ff 	mov.w	r2, #4294967295
 800156a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_TIM5_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM5_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_TIM5_Init+0x94>)
 800157a:	f007 fb94 	bl	8008ca6 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001584:	f000 ff86 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM5_Init+0x94>)
 8001596:	f007 fe47 	bl	8009228 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015a0:	f000 ff78 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM5_Init+0x94>)
 80015b2:	f008 fb7d 	bl	8009cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f000 ff6a 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000881c 	.word	0x2000881c
 80015cc:	40000c00 	.word	0x40000c00

080015d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	; 0x68
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	222c      	movs	r2, #44	; 0x2c
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00c f919 	bl	800d842 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_TIM8_Init+0x14c>)
 8001612:	4a43      	ldr	r2, [pc, #268]	; (8001720 <MX_TIM8_Init+0x150>)
 8001614:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <MX_TIM8_Init+0x14c>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_TIM8_Init+0x14c>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <MX_TIM8_Init+0x14c>)
 8001624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001628:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <MX_TIM8_Init+0x14c>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <MX_TIM8_Init+0x14c>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <MX_TIM8_Init+0x14c>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800163c:	4837      	ldr	r0, [pc, #220]	; (800171c <MX_TIM8_Init+0x14c>)
 800163e:	f007 fb32 	bl	8008ca6 <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001648:	f000 ff24 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001652:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001656:	4619      	mov	r1, r3
 8001658:	4830      	ldr	r0, [pc, #192]	; (800171c <MX_TIM8_Init+0x14c>)
 800165a:	f007 fde5 	bl	8009228 <HAL_TIM_ConfigClockSource>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001664:	f000 ff16 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <MX_TIM8_Init+0x14c>)
 800166a:	f007 fb71 	bl	8008d50 <HAL_TIM_PWM_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001674:	f000 ff0e 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001684:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001688:	4619      	mov	r1, r3
 800168a:	4824      	ldr	r0, [pc, #144]	; (800171c <MX_TIM8_Init+0x14c>)
 800168c:	f008 fb10 	bl	8009cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001696:	f000 fefd 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	; 0x60
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b6:	220c      	movs	r2, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_TIM8_Init+0x14c>)
 80016bc:	f007 fc9c 	bl	8008ff8 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80016c6:	f000 fee5 	bl	8002494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM8_Init+0x14c>)
 8001700:	f008 fb64 	bl	8009dcc <HAL_TIMEx_ConfigBreakDeadTime>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800170a:	f000 fec3 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM8_Init+0x14c>)
 8001710:	f002 fb30 	bl	8003d74 <HAL_TIM_MspPostInit>

}
 8001714:	bf00      	nop
 8001716:	3768      	adds	r7, #104	; 0x68
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000878c 	.word	0x2000878c
 8001720:	40010400 	.word	0x40010400

08001724 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_UART7_Init+0x58>)
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <MX_UART7_Init+0x5c>)
 800172c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_UART7_Init+0x58>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_UART7_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_UART7_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_UART7_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_UART7_Init+0x58>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_UART7_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_UART7_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_UART7_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_UART7_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_UART7_Init+0x58>)
 8001768:	f008 fbcc 	bl	8009f04 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 fe8f 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000870c 	.word	0x2000870c
 8001780:	40007800 	.word	0x40007800

08001784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_USART1_UART_Init+0x68>)
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <MX_USART1_UART_Init+0x6c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_USART1_UART_Init+0x68>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_USART1_UART_Init+0x68>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART1_UART_Init+0x68>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART1_UART_Init+0x68>)
 80017d8:	f008 fb94 	bl	8009f04 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80017e2:	f000 fe57 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200089d4 	.word	0x200089d4
 80017f0:	40011000 	.word	0x40011000

080017f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART6_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART6_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART6_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART6_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART6_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001838:	f008 fb64 	bl	8009f04 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 fe27 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20008ad0 	.word	0x20008ad0
 8001850:	40011400 	.word	0x40011400

08001854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_FMC_Init+0x94>)
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <MX_FMC_Init+0x98>)
 8001870:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_FMC_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_FMC_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_FMC_Init+0x94>)
 8001880:	2204      	movs	r2, #4
 8001882:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_FMC_Init+0x94>)
 8001886:	2210      	movs	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_FMC_Init+0x94>)
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_FMC_Init+0x94>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_FMC_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_FMC_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_FMC_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_FMC_Init+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80018ae:	2310      	movs	r3, #16
 80018b0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80018b2:	2310      	movs	r3, #16
 80018b4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80018b6:	2310      	movs	r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80018ba:	2310      	movs	r3, #16
 80018bc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80018be:	2310      	movs	r3, #16
 80018c0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80018c2:	2310      	movs	r3, #16
 80018c4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_FMC_Init+0x94>)
 80018d0:	f007 f8d8 	bl	8008a84 <HAL_SDRAM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80018da:	f000 fddb 	bl	8002494 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20008bd0 	.word	0x20008bd0
 80018ec:	a0000140 	.word	0xa0000140

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b090      	sub	sp, #64	; 0x40
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4bb0      	ldr	r3, [pc, #704]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4aaf      	ldr	r2, [pc, #700]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4bad      	ldr	r3, [pc, #692]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4baa      	ldr	r3, [pc, #680]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4aa9      	ldr	r2, [pc, #676]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4aa3      	ldr	r2, [pc, #652]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4ba1      	ldr	r3, [pc, #644]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a9d      	ldr	r2, [pc, #628]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001966:	4b98      	ldr	r3, [pc, #608]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a97      	ldr	r2, [pc, #604]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800196c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a8b      	ldr	r2, [pc, #556]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a73      	ldr	r2, [pc, #460]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2160      	movs	r1, #96	; 0x60
 8001a12:	486e      	ldr	r0, [pc, #440]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001a14:	f004 f970 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a1e:	f004 f96b 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2108      	movs	r1, #8
 8001a26:	486a      	ldr	r0, [pc, #424]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a28:	f004 f966 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4868      	ldr	r0, [pc, #416]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a32:	f004 f961 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4867      	ldr	r0, [pc, #412]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a3c:	f004 f95c 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	4863      	ldr	r0, [pc, #396]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a48:	f004 f956 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a52:	4862      	ldr	r0, [pc, #392]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001a54:	f004 f950 	bl	8005cf8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2108      	movs	r1, #8
 8001a5c:	4860      	ldr	r0, [pc, #384]	; (8001be0 <MX_GPIO_Init+0x2f0>)
 8001a5e:	f004 f94b 	bl	8005cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a62:	2308      	movs	r3, #8
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4855      	ldr	r0, [pc, #340]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001a76:	f003 fe8b 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001a7a:	f643 0323 	movw	r3, #14371	; 0x3823
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	4853      	ldr	r0, [pc, #332]	; (8001be4 <MX_GPIO_Init+0x2f4>)
 8001a98:	f003 fe7a 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001a9c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	484d      	ldr	r0, [pc, #308]	; (8001be8 <MX_GPIO_Init+0x2f8>)
 8001ab2:	f003 fe6d 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001ab6:	2360      	movs	r3, #96	; 0x60
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	4619      	mov	r1, r3
 8001acc:	483f      	ldr	r0, [pc, #252]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001ace:	f003 fe5f 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4841      	ldr	r0, [pc, #260]	; (8001bec <MX_GPIO_Init+0x2fc>)
 8001ae8:	f003 fe52 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001aec:	2340      	movs	r3, #64	; 0x40
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <MX_GPIO_Init+0x300>)
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4834      	ldr	r0, [pc, #208]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001b00:	f003 fe46 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b04:	2328      	movs	r3, #40	; 0x28
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482d      	ldr	r0, [pc, #180]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001b1c:	f003 fe38 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001b20:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b36:	4619      	mov	r1, r3
 8001b38:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001b3a:	f003 fe29 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b50:	4619      	mov	r1, r3
 8001b52:	4828      	ldr	r0, [pc, #160]	; (8001bf4 <MX_GPIO_Init+0x304>)
 8001b54:	f003 fe1c 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481a      	ldr	r0, [pc, #104]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001b70:	f003 fe0e 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b74:	2310      	movs	r3, #16
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b84:	4619      	mov	r1, r3
 8001b86:	4812      	ldr	r0, [pc, #72]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001b88:	f003 fe02 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b8c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001ba2:	f003 fdf5 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001ba6:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001bc0:	f003 fde6 	bl	8005790 <HAL_GPIO_Init>
 8001bc4:	e018      	b.n	8001bf8 <MX_GPIO_Init+0x308>
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40022800 	.word	0x40022800
 8001bdc:	40021c00 	.word	0x40021c00
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40022400 	.word	0x40022400
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_GPIO_Init+0x3c0>)
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4829      	ldr	r0, [pc, #164]	; (8001cb4 <MX_GPIO_Init+0x3c4>)
 8001c0e:	f003 fdbf 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c12:	2310      	movs	r3, #16
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c22:	230a      	movs	r3, #10
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4822      	ldr	r0, [pc, #136]	; (8001cb8 <MX_GPIO_Init+0x3c8>)
 8001c2e:	f003 fdaf 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001c32:	2384      	movs	r3, #132	; 0x84
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c42:	4619      	mov	r1, r3
 8001c44:	481d      	ldr	r0, [pc, #116]	; (8001cbc <MX_GPIO_Init+0x3cc>)
 8001c46:	f003 fda3 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MX_GPIO_Init+0x3d0>)
 8001c66:	f003 fd93 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_GPIO_Init+0x3cc>)
 8001c82:	f003 fd85 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001c86:	2328      	movs	r3, #40	; 0x28
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c96:	230a      	movs	r3, #10
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <MX_GPIO_Init+0x3d4>)
 8001ca2:	f003 fd75 	bl	8005790 <HAL_GPIO_Init>

}
 8001ca6:	bf00      	nop
 8001ca8:	3740      	adds	r7, #64	; 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021c00 	.word	0x40021c00
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

	// Commandes_chatHandle

	if (rxbuffer[0] == 'z')
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b7a      	cmp	r3, #122	; 0x7a
 8001cd6:	d104      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0x1a>
		commandes_chat[0] = 4095;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001cda:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	e00b      	b.n	8001cfa <HAL_UART_RxCpltCallback+0x32>
	else if (rxbuffer[0] == 's')
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b73      	cmp	r3, #115	; 0x73
 8001ce8:	d103      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x2a>
		commandes_chat[0] = 0;
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	e003      	b.n	8001cfa <HAL_UART_RxCpltCallback+0x32>
	else
		commandes_chat[0] = 2077;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001cf4:	f640 021d 	movw	r2, #2077	; 0x81d
 8001cf8:	801a      	strh	r2, [r3, #0]

	if (rxbuffer[0] == 'd')
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d103      	bne.n	8001d0a <HAL_UART_RxCpltCallback+0x42>
		commandes_chat[1] = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	805a      	strh	r2, [r3, #2]
 8001d08:	e00c      	b.n	8001d24 <HAL_UART_RxCpltCallback+0x5c>
	else if (rxbuffer[0] == 'q')
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b71      	cmp	r3, #113	; 0x71
 8001d10:	d104      	bne.n	8001d1c <HAL_UART_RxCpltCallback+0x54>
		commandes_chat[1] = 4095;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001d14:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d18:	805a      	strh	r2, [r3, #2]
 8001d1a:	e003      	b.n	8001d24 <HAL_UART_RxCpltCallback+0x5c>
	else
		commandes_chat[1] = 2077;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001d1e:	f640 021d 	movw	r2, #2077	; 0x81d
 8001d22:	805a      	strh	r2, [r3, #2]

	HAL_UART_Receive_IT(&huart1, rxbuffer, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	4904      	ldr	r1, [pc, #16]	; (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_UART_RxCpltCallback+0x78>)
 8001d2a:	f008 f939 	bl	8009fa0 <HAL_UART_Receive_IT>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20008c0c 	.word	0x20008c0c
 8001d3c:	20000030 	.word	0x20000030
 8001d40:	200089d4 	.word	0x200089d4

08001d44 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f009 f98c 	bl	800b06a <osDelay>
 8001d52:	e7fb      	b.n	8001d4c <StartDefaultTask+0x8>

08001d54 <horloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_horloge */
void horloge(void const * argument)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN horloge */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 8001d60:	f00a fc28 	bl	800c5b4 <xTaskGetTickCount>
 8001d64:	4603      	mov	r3, r0
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t positions[2];

	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <horloge+0x88>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	210a      	movs	r1, #10
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f009 fdfc 	bl	800b96c <xQueueSemaphoreTake>

		xQueueReceive(Horloge_SourisHandle, &positions, 10);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <horloge+0x8c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	220a      	movs	r2, #10
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f009 fd12 	bl	800b7a8 <xQueueReceive>

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <horloge+0x90>)
 8001d8e:	f006 fb25 	bl	80083dc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2200      	movs	r2, #0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <horloge+0x90>)
 8001d9c:	f006 fc24 	bl	80085e8 <HAL_RTC_GetDate>
		sprintf(text, "X=%03u Y=%03u", positions[0], positions[1]); //"%2u:%02u:%02u", time.Hours, time.Minutes, time.Seconds);
 8001da0:	893b      	ldrh	r3, [r7, #8]
 8001da2:	461a      	mov	r2, r3
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001daa:	490f      	ldr	r1, [pc, #60]	; (8001de8 <horloge+0x94>)
 8001dac:	f00b fd52 	bl	800d854 <siprintf>

		BSP_LCD_DisplayStringAt(260, 24, (uint8_t*) text, RIGHT_MODE);
 8001db0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001db4:	2302      	movs	r3, #2
 8001db6:	2118      	movs	r1, #24
 8001db8:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001dbc:	f000 fed2 	bl	8002b64 <BSP_LCD_DisplayStringAt>

		xSemaphoreGive(myMutex01Handle);
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <horloge+0x88>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f009 fbeb 	bl	800b5a4 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00a fa29 	bl	800c22c <vTaskDelayUntil>
		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 8001dda:	e7c5      	b.n	8001d68 <horloge+0x14>
 8001ddc:	20008c08 	.word	0x20008c08
 8001de0:	20008a6c 	.word	0x20008a6c
 8001de4:	20008a70 	.word	0x20008a70
 8001de8:	0800e12c 	.word	0x0800e12c

08001dec <souris>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_souris */
void souris(void const * argument)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b097      	sub	sp, #92	; 0x5c
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN souris */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8001df4:	2314      	movs	r3, #20
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
	xLastWakeTime = xTaskGetTickCount();
 8001df8:	f00a fbdc 	bl	800c5b4 <xTaskGetTickCount>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	61fb      	str	r3, [r7, #28]

	uint32_t joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

	uint8_t lisseur_X = 3;
 8001e16:	2303      	movs	r3, #3
 8001e18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t iterateur;
	uint16_t liste_lissage_X[lisseur_X];
 8001e1c:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8001e20:	4603      	mov	r3, r0
 8001e22:	3b01      	subs	r3, #1
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e26:	b2c1      	uxtb	r1, r0
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	f04f 0400 	mov.w	r4, #0
 8001e34:	0114      	lsls	r4, r2, #4
 8001e36:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001e3a:	010b      	lsls	r3, r1, #4
 8001e3c:	b2c1      	uxtb	r1, r0
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	0114      	lsls	r4, r2, #4
 8001e4c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001e50:	010b      	lsls	r3, r1, #4
 8001e52:	4603      	mov	r3, r0
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	3301      	adds	r3, #1
 8001e58:	3307      	adds	r3, #7
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e62:	466b      	mov	r3, sp
 8001e64:	3301      	adds	r3, #1
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t joystick_X_lisse;
	for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001e72:	e00b      	b.n	8001e8c <souris+0xa0>
		liste_lissage_X[iterateur] = 2080;
 8001e74:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001e7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 8001e82:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e86:	3301      	adds	r3, #1
 8001e88:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001e8c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3ed      	bcc.n	8001e74 <souris+0x88>
	for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001e9e:	e00e      	b.n	8001ebe <souris+0xd2>
		joystick_X_lisse = joystick_X_lisse + liste_lissage_X[iterateur];
 8001ea0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001eaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001eae:	4413      	add	r3, r2
 8001eb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 8001eb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001ebe:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3ea      	bcc.n	8001ea0 <souris+0xb4>

	uint8_t lisseur_Y = 3;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t liste_lissage_Y[lisseur_Y];
 8001ed0:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eda:	b2c1      	uxtb	r1, r0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f04f 0400 	mov.w	r4, #0
 8001ee8:	0114      	lsls	r4, r2, #4
 8001eea:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001eee:	010b      	lsls	r3, r1, #4
 8001ef0:	b2c1      	uxtb	r1, r0
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	0114      	lsls	r4, r2, #4
 8001f00:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001f04:	010b      	lsls	r3, r1, #4
 8001f06:	4603      	mov	r3, r0
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	3307      	adds	r3, #7
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	ebad 0d03 	sub.w	sp, sp, r3
 8001f16:	466b      	mov	r3, sp
 8001f18:	3301      	adds	r3, #1
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t joystick_Y_lisse;
	for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001f26:	e00b      	b.n	8001f40 <souris+0x154>
		liste_lissage_Y[iterateur] = 2080;
 8001f28:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001f32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8001f36:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001f40:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d3ed      	bcc.n	8001f28 <souris+0x13c>
	for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001f52:	e00e      	b.n	8001f72 <souris+0x186>
		joystick_Y_lisse = joystick_Y_lisse + liste_lissage_Y[iterateur];
 8001f54:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f62:	4413      	add	r3, r2
 8001f64:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8001f68:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001f72:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3ea      	bcc.n	8001f54 <souris+0x168>

	uint16_t Xpos = 140;
 8001f7e:	238c      	movs	r3, #140	; 0x8c
 8001f80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t Ypos = 136;
 8001f84:	2388      	movs	r3, #136	; 0x88
 8001f86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t Xpos_old = 20;
 8001f8a:	2314      	movs	r3, #20
 8001f8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Ypos_old = 20;
 8001f90:	2314      	movs	r3, #20
 8001f92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t Width = 20;
 8001f96:	2314      	movs	r3, #20
 8001f98:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t Height = 20;
 8001f9a:	2314      	movs	r3, #20
 8001f9c:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t positions[2] = { 140, 136 };
 8001f9e:	4bac      	ldr	r3, [pc, #688]	; (8002250 <souris+0x464>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60bb      	str	r3, [r7, #8]
	//char text[32];
	/* Infinite loop */
	for (;;) {


		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 8001fa4:	4bab      	ldr	r3, [pc, #684]	; (8002254 <souris+0x468>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	210a      	movs	r1, #10
 8001faa:	4618      	mov	r0, r3
 8001fac:	f009 fcde 	bl	800b96c <xQueueSemaphoreTake>



		sConfig.Channel = ADC_CHANNEL_8;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	48a7      	ldr	r0, [pc, #668]	; (8002258 <souris+0x46c>)
 8001fbc:	f002 fb8a 	bl	80046d4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001fc0:	48a5      	ldr	r0, [pc, #660]	; (8002258 <souris+0x46c>)
 8001fc2:	f002 fa35 	bl	8004430 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001fc6:	bf00      	nop
 8001fc8:	2164      	movs	r1, #100	; 0x64
 8001fca:	48a3      	ldr	r0, [pc, #652]	; (8002258 <souris+0x46c>)
 8001fcc:	f002 faf0 	bl	80045b0 <HAL_ADC_PollForConversion>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f8      	bne.n	8001fc8 <souris+0x1dc>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001fd6:	48a0      	ldr	r0, [pc, #640]	; (8002258 <souris+0x46c>)
 8001fd8:	f002 fb6e 	bl	80046b8 <HAL_ADC_GetValue>
 8001fdc:	6278      	str	r0, [r7, #36]	; 0x24

		HAL_ADC_Start(&hadc1);
 8001fde:	489f      	ldr	r0, [pc, #636]	; (800225c <souris+0x470>)
 8001fe0:	f002 fa26 	bl	8004430 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001fe4:	bf00      	nop
 8001fe6:	2164      	movs	r1, #100	; 0x64
 8001fe8:	489c      	ldr	r0, [pc, #624]	; (800225c <souris+0x470>)
 8001fea:	f002 fae1 	bl	80045b0 <HAL_ADC_PollForConversion>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f8      	bne.n	8001fe6 <souris+0x1fa>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001ff4:	4899      	ldr	r0, [pc, #612]	; (800225c <souris+0x470>)
 8001ff6:	f002 fb5f 	bl	80046b8 <HAL_ADC_GetValue>
 8001ffa:	6238      	str	r0, [r7, #32]

		//moyenne des output du joystick

		//moyenne Y
		for (iterateur = 0; iterateur < lisseur_Y - 1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8002002:	e00f      	b.n	8002024 <souris+0x238>
				iterateur = iterateur + 1) {
			liste_lissage_Y[iterateur] = liste_lissage_Y[iterateur + 1];
 8002004:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002008:	1c59      	adds	r1, r3, #1
 800200a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				iterateur = iterateur + 1) {
 800201a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800201e:	3301      	adds	r3, #1
 8002020:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for (iterateur = 0; iterateur < lisseur_Y - 1;
 8002024:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800202c:	3b01      	subs	r3, #1
 800202e:	429a      	cmp	r2, r3
 8002030:	dbe8      	blt.n	8002004 <souris+0x218>
		}
		liste_lissage_Y[lisseur_Y - 1] = joystick_v;
 8002032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	b299      	uxth	r1, r3
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		joystick_Y_lisse = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800204e:	e014      	b.n	800207a <souris+0x28e>
			joystick_Y_lisse = joystick_Y_lisse
					+ liste_lissage_Y[iterateur] / lisseur_Y;
 8002050:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800205a:	461a      	mov	r2, r3
 800205c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002060:	fb92 f3f3 	sdiv	r3, r2, r3
 8002064:	b29a      	uxth	r2, r3
			joystick_Y_lisse = joystick_Y_lisse
 8002066:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800206a:	4413      	add	r3, r2
 800206c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		for (iterateur = 0; iterateur < lisseur_Y; iterateur = iterateur + 1)
 8002070:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002074:	3301      	adds	r3, #1
 8002076:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800207a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800207e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002082:	429a      	cmp	r2, r3
 8002084:	d3e4      	bcc.n	8002050 <souris+0x264>

		//moyenne X
		for (iterateur = 0; iterateur < lisseur_X - 1;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800208c:	e00f      	b.n	80020ae <souris+0x2c2>
				iterateur = iterateur + 1) {
			liste_lissage_X[iterateur] = liste_lissage_X[iterateur + 1];
 800208e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002092:	1c59      	adds	r1, r3, #1
 8002094:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				iterateur = iterateur + 1) {
 80020a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020a8:	3301      	adds	r3, #1
 80020aa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		for (iterateur = 0; iterateur < lisseur_X - 1;
 80020ae:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80020b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020b6:	3b01      	subs	r3, #1
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbe8      	blt.n	800208e <souris+0x2a2>
		}
		liste_lissage_X[lisseur_X - 1] = joystick_h;
 80020bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	b299      	uxth	r1, r3
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		joystick_X_lisse = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80020d8:	e014      	b.n	8002104 <souris+0x318>
			joystick_X_lisse = joystick_X_lisse
					+ liste_lissage_X[iterateur] / lisseur_X;
 80020da:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80020de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ee:	b29a      	uxth	r2, r3
			joystick_X_lisse = joystick_X_lisse
 80020f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020f4:	4413      	add	r3, r2
 80020f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		for (iterateur = 0; iterateur < lisseur_X; iterateur = iterateur + 1)
 80020fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020fe:	3301      	adds	r3, #1
 8002100:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8002104:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002108:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800210c:	429a      	cmp	r2, r3
 800210e:	d3e4      	bcc.n	80020da <souris+0x2ee>
		// fin moyenne output

		//sprintf(text, "X = %02u Y =%02u", joystick_X_lisse, joystick_Y_lisse);
		//BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) text, RIGHT_MODE);

		Xpos = Xpos - (joystick_X_lisse - 2077) * 20 * 270 / (1000 * 2077);
 8002110:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002114:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 8002118:	f241 5218 	movw	r2, #5400	; 0x1518
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <souris+0x474>)
 8002122:	fb82 1203 	smull	r1, r2, r2, r3
 8002126:	441a      	add	r2, r3
 8002128:	1512      	asrs	r2, r2, #20
 800212a:	17db      	asrs	r3, r3, #31
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	b29a      	uxth	r2, r3
 8002130:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002134:	4413      	add	r3, r2
 8002136:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		Ypos = Ypos - (joystick_Y_lisse - 2077) * 20 * 270 / (1000 * 2077);
 800213a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800213e:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 8002142:	f241 5218 	movw	r2, #5400	; 0x1518
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a45      	ldr	r2, [pc, #276]	; (8002260 <souris+0x474>)
 800214c:	fb82 1203 	smull	r1, r2, r2, r3
 8002150:	441a      	add	r2, r3
 8002152:	1512      	asrs	r2, r2, #20
 8002154:	17db      	asrs	r3, r3, #31
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	b29a      	uxth	r2, r3
 800215a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800215e:	4413      	add	r3, r2
 8002160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if (Xpos > 65000)
 8002164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002168:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800216c:	4293      	cmp	r3, r2
 800216e:	d903      	bls.n	8002178 <souris+0x38c>
			Xpos = 480;
 8002170:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002174:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		if (Xpos > 480)
 8002178:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800217c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002180:	d902      	bls.n	8002188 <souris+0x39c>
			Xpos = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		if (Ypos > 65000)
 8002188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002190:	4293      	cmp	r3, r2
 8002192:	d903      	bls.n	800219c <souris+0x3b0>
			Ypos = 272;
 8002194:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002198:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		if (Ypos > 272)
 800219c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021a0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80021a4:	d902      	bls.n	80021ac <souris+0x3c0>
			Ypos = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		taskENTER_CRITICAL( );
 80021ac:	f00b f854 	bl	800d258 <vPortEnterCritical>
		positions_chat_souris[2] = Xpos;
 80021b0:	4a2c      	ldr	r2, [pc, #176]	; (8002264 <souris+0x478>)
 80021b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021b6:	8093      	strh	r3, [r2, #4]
		positions_chat_souris[3] = Ypos;
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <souris+0x478>)
 80021ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021be:	80d3      	strh	r3, [r2, #6]
		taskEXIT_CRITICAL( );
 80021c0:	f00b f87c 	bl	800d2bc <vPortExitCritical>
		positions[0] = Xpos;
 80021c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021c8:	813b      	strh	r3, [r7, #8]
		positions[1] = Ypos;
 80021ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ce:	817b      	strh	r3, [r7, #10]

		xQueueSend(Horloge_SourisHandle, positions, 0);
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <souris+0x47c>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f107 0108 	add.w	r1, r7, #8
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	f009 f9e2 	bl	800b5a4 <xQueueGenericSend>

		BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 80021e0:	4822      	ldr	r0, [pc, #136]	; (800226c <souris+0x480>)
 80021e2:	f000 fc07 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 80021e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80021ea:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 80021ee:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 80021f2:	f000 fdc3 	bl	8002d7c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	f000 fbfb 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos_old, Ypos_old, Width, Height);
 80021fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002200:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002202:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002206:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800220a:	f000 fdb7 	bl	8002d7c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 800220e:	4817      	ldr	r0, [pc, #92]	; (800226c <souris+0x480>)
 8002210:	f000 fbf0 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 8002214:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002216:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002218:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800221c:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8002220:	f000 fdac 	bl	8002d7c <BSP_LCD_FillRect>

		Xpos_old = Xpos;
 8002224:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002228:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		Ypos_old = Ypos;
 800222c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002230:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a


		xSemaphoreGive(myMutex01Handle);
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <souris+0x468>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	f009 f9b1 	bl	800b5a4 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002248:	4618      	mov	r0, r3
 800224a:	f009 ffef 	bl	800c22c <vTaskDelayUntil>
		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 800224e:	e6a9      	b.n	8001fa4 <souris+0x1b8>
 8002250:	0800e13c 	.word	0x0800e13c
 8002254:	20008c08 	.word	0x20008c08
 8002258:	2000898c 	.word	0x2000898c
 800225c:	20008944 	.word	0x20008944
 8002260:	813dee19 	.word	0x813dee19
 8002264:	20000028 	.word	0x20000028
 8002268:	20008a6c 	.word	0x20008a6c
 800226c:	ff808080 	.word	0xff808080

08002270 <chat>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_chat */
void chat(void const * argument)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN chat */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8002278:	2314      	movs	r3, #20
 800227a:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 800227c:	f00a f99a 	bl	800c5b4 <xTaskGetTickCount>
 8002280:	4603      	mov	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]

	uint16_t Xpos = 200;
 8002284:	23c8      	movs	r3, #200	; 0xc8
 8002286:	83fb      	strh	r3, [r7, #30]
	uint16_t Ypos = 200;
 8002288:	23c8      	movs	r3, #200	; 0xc8
 800228a:	83bb      	strh	r3, [r7, #28]
	uint16_t Xpos_old = 200;
 800228c:	23c8      	movs	r3, #200	; 0xc8
 800228e:	837b      	strh	r3, [r7, #26]
	uint16_t Ypos_old = 200;
 8002290:	23c8      	movs	r3, #200	; 0xc8
 8002292:	833b      	strh	r3, [r7, #24]
	uint16_t Width = 30;
 8002294:	231e      	movs	r3, #30
 8002296:	827b      	strh	r3, [r7, #18]
	uint16_t Height = 30;
 8002298:	231e      	movs	r3, #30
 800229a:	823b      	strh	r3, [r7, #16]
	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 800229c:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <chat+0x130>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	210a      	movs	r1, #10
 80022a2:	4618      	mov	r0, r3
 80022a4:	f009 fb62 	bl	800b96c <xQueueSemaphoreTake>

		// fin moyenne output

		Xpos = Xpos - (commandes_chat[1] - 2077) * 20 * 270 / (1000 * 2077);
 80022a8:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <chat+0x134>)
 80022aa:	885b      	ldrh	r3, [r3, #2]
 80022ac:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 80022b0:	f241 5218 	movw	r2, #5400	; 0x1518
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <chat+0x138>)
 80022ba:	fb82 1203 	smull	r1, r2, r2, r3
 80022be:	441a      	add	r2, r3
 80022c0:	1512      	asrs	r2, r2, #20
 80022c2:	17db      	asrs	r3, r3, #31
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	8bfb      	ldrh	r3, [r7, #30]
 80022ca:	4413      	add	r3, r2
 80022cc:	83fb      	strh	r3, [r7, #30]

		Ypos = Ypos - (commandes_chat[0] - 2077) * 20 * 270 / (1000 * 2077);
 80022ce:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <chat+0x134>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 80022d6:	f241 5218 	movw	r2, #5400	; 0x1518
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <chat+0x138>)
 80022e0:	fb82 1203 	smull	r1, r2, r2, r3
 80022e4:	441a      	add	r2, r3
 80022e6:	1512      	asrs	r2, r2, #20
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	8bbb      	ldrh	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	83bb      	strh	r3, [r7, #28]

		if (Xpos > 65000)
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d902      	bls.n	8002304 <chat+0x94>
			Xpos = 480;
 80022fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002302:	83fb      	strh	r3, [r7, #30]
		if (Xpos > 480)
 8002304:	8bfb      	ldrh	r3, [r7, #30]
 8002306:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800230a:	d901      	bls.n	8002310 <chat+0xa0>
			Xpos = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	83fb      	strh	r3, [r7, #30]

		if (Ypos > 65000)
 8002310:	8bbb      	ldrh	r3, [r7, #28]
 8002312:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002316:	4293      	cmp	r3, r2
 8002318:	d902      	bls.n	8002320 <chat+0xb0>
			Ypos = 272;
 800231a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800231e:	83bb      	strh	r3, [r7, #28]
		if (Ypos > 272)
 8002320:	8bbb      	ldrh	r3, [r7, #28]
 8002322:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002326:	d901      	bls.n	800232c <chat+0xbc>
			Ypos = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	83bb      	strh	r3, [r7, #28]

		taskENTER_CRITICAL( );
 800232c:	f00a ff94 	bl	800d258 <vPortEnterCritical>
		positions_chat_souris[0] = Xpos;
 8002330:	4a1e      	ldr	r2, [pc, #120]	; (80023ac <chat+0x13c>)
 8002332:	8bfb      	ldrh	r3, [r7, #30]
 8002334:	8013      	strh	r3, [r2, #0]
		positions_chat_souris[1] = Ypos;
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <chat+0x13c>)
 8002338:	8bbb      	ldrh	r3, [r7, #28]
 800233a:	8053      	strh	r3, [r2, #2]
		taskEXIT_CRITICAL();
 800233c:	f00a ffbe 	bl	800d2bc <vPortExitCritical>

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002340:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002344:	f000 fb56 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 8002348:	8a3b      	ldrh	r3, [r7, #16]
 800234a:	8a7a      	ldrh	r2, [r7, #18]
 800234c:	8bb9      	ldrh	r1, [r7, #28]
 800234e:	8bf8      	ldrh	r0, [r7, #30]
 8002350:	f000 fd14 	bl	8002d7c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f000 fb4c 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos_old, Ypos_old, Width, Height);
 800235c:	8a3b      	ldrh	r3, [r7, #16]
 800235e:	8a7a      	ldrh	r2, [r7, #18]
 8002360:	8b39      	ldrh	r1, [r7, #24]
 8002362:	8b78      	ldrh	r0, [r7, #26]
 8002364:	f000 fd0a 	bl	8002d7c <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002368:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800236c:	f000 fb42 	bl	80029f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(Xpos, Ypos, Width, Height);
 8002370:	8a3b      	ldrh	r3, [r7, #16]
 8002372:	8a7a      	ldrh	r2, [r7, #18]
 8002374:	8bb9      	ldrh	r1, [r7, #28]
 8002376:	8bf8      	ldrh	r0, [r7, #30]
 8002378:	f000 fd00 	bl	8002d7c <BSP_LCD_FillRect>

		Xpos_old = Xpos;
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	837b      	strh	r3, [r7, #26]
		Ypos_old = Ypos;
 8002380:	8bbb      	ldrh	r3, [r7, #28]
 8002382:	833b      	strh	r3, [r7, #24]

		xSemaphoreGive(myMutex01Handle);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <chat+0x130>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	f009 f909 	bl	800b5a4 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	6979      	ldr	r1, [r7, #20]
 8002398:	4618      	mov	r0, r3
 800239a:	f009 ff47 	bl	800c22c <vTaskDelayUntil>
		xSemaphoreTake(myMutex01Handle, (TickType_t ) 10);
 800239e:	e77d      	b.n	800229c <chat+0x2c>
 80023a0:	20008c08 	.word	0x20008c08
 80023a4:	20000030 	.word	0x20000030
 80023a8:	813dee19 	.word	0x813dee19
 80023ac:	20000028 	.word	0x20000028

080023b0 <manager>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_manager */
void manager(void const * argument)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN manager */

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5;
 80023b8:	2305      	movs	r3, #5
 80023ba:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80023bc:	f00a f8fa 	bl	800c5b4 <xTaskGetTickCount>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		xSemaphoreTake(myMutex01Handle, (TickType_t ) 5);
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <manager+0xb0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2105      	movs	r1, #5
 80023ca:	4618      	mov	r0, r3
 80023cc:	f009 face 	bl	800b96c <xQueueSemaphoreTake>

		if (positions_chat_souris[0] < positions_chat_souris[2] + 20 &&
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <manager+0xb4>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <manager+0xb4>)
 80023d8:	889b      	ldrh	r3, [r3, #4]
 80023da:	3314      	adds	r3, #20
 80023dc:	429a      	cmp	r2, r3
 80023de:	da30      	bge.n	8002442 <manager+0x92>
				positions_chat_souris[0] + 30 > positions_chat_souris[2] &&
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <manager+0xb4>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	331e      	adds	r3, #30
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <manager+0xb4>)
 80023e8:	8892      	ldrh	r2, [r2, #4]
		if (positions_chat_souris[0] < positions_chat_souris[2] + 20 &&
 80023ea:	4293      	cmp	r3, r2
 80023ec:	dd29      	ble.n	8002442 <manager+0x92>
				positions_chat_souris[1] < positions_chat_souris[3] + 20 &&
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <manager+0xb4>)
 80023f0:	885b      	ldrh	r3, [r3, #2]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <manager+0xb4>)
 80023f6:	88db      	ldrh	r3, [r3, #6]
 80023f8:	3314      	adds	r3, #20
				positions_chat_souris[0] + 30 > positions_chat_souris[2] &&
 80023fa:	429a      	cmp	r2, r3
 80023fc:	da21      	bge.n	8002442 <manager+0x92>
				positions_chat_souris[1] + 30 > positions_chat_souris[3])
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <manager+0xb4>)
 8002400:	885b      	ldrh	r3, [r3, #2]
 8002402:	331e      	adds	r3, #30
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <manager+0xb4>)
 8002406:	88d2      	ldrh	r2, [r2, #6]
				positions_chat_souris[1] < positions_chat_souris[3] + 20 &&
 8002408:	4293      	cmp	r3, r2
 800240a:	dd1a      	ble.n	8002442 <manager+0x92>
		{
			BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "bonk",1);
 800240c:	2301      	movs	r3, #1
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <manager+0xb8>)
 8002410:	2100      	movs	r1, #0
 8002412:	2000      	movs	r0, #0
 8002414:	f000 fba6 	bl	8002b64 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 faea 	bl	80029f4 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(positions_chat_souris[2], positions_chat_souris[3], 20, 20);
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <manager+0xb4>)
 8002422:	8898      	ldrh	r0, [r3, #4]
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <manager+0xb4>)
 8002426:	88d9      	ldrh	r1, [r3, #6]
 8002428:	2314      	movs	r3, #20
 800242a:	2214      	movs	r2, #20
 800242c:	f000 fca6 	bl	8002d7c <BSP_LCD_FillRect>
			positions_chat_souris[2] = 1000;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <manager+0xb4>)
 8002432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002436:	809a      	strh	r2, [r3, #4]
			vTaskDelete(SourisHandle);
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <manager+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f009 fe65 	bl	800c10c <vTaskDelete>
		}




		xSemaphoreGive(myMutex01Handle);
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <manager+0xb0>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	f009 f8aa 	bl	800b5a4 <xQueueGenericSend>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f009 fee8 	bl	800c22c <vTaskDelayUntil>
		xSemaphoreTake(myMutex01Handle, (TickType_t ) 5);
 800245c:	e7b2      	b.n	80023c4 <manager+0x14>
 800245e:	bf00      	nop
 8002460:	20008c08 	.word	0x20008c08
 8002464:	20000028 	.word	0x20000028
 8002468:	0800e140 	.word	0x0800e140
 800246c:	20008654 	.word	0x20008654

08002470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002482:	f001 ff4f 	bl	8004324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40001000 	.word	0x40001000

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800249a:	e7fe      	b.n	800249a <Error_Handler+0x6>

0800249c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a51      	ldr	r2, [pc, #324]	; (80025ec <I2Cx_MspInit+0x150>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d14d      	bne.n	8002548 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <I2Cx_MspInit+0x154>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <I2Cx_MspInit+0x154>)
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	6313      	str	r3, [r2, #48]	; 0x30
 80024b8:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <I2Cx_MspInit+0x154>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80024d4:	2304      	movs	r3, #4
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	4845      	ldr	r0, [pc, #276]	; (80025f4 <I2Cx_MspInit+0x158>)
 80024e0:	f003 f956 	bl	8005790 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80024e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	4840      	ldr	r0, [pc, #256]	; (80025f4 <I2Cx_MspInit+0x158>)
 80024f2:	f003 f94d 	bl	8005790 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <I2Cx_MspInit+0x154>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a3d      	ldr	r2, [pc, #244]	; (80025f0 <I2Cx_MspInit+0x154>)
 80024fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a37      	ldr	r2, [pc, #220]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002518:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <I2Cx_MspInit+0x154>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a34      	ldr	r2, [pc, #208]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002524:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	210f      	movs	r1, #15
 800252a:	2048      	movs	r0, #72	; 0x48
 800252c:	f002 fbce 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002530:	2048      	movs	r0, #72	; 0x48
 8002532:	f002 fbe7 	bl	8004d04 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	210f      	movs	r1, #15
 800253a:	2049      	movs	r0, #73	; 0x49
 800253c:	f002 fbc6 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002540:	2049      	movs	r0, #73	; 0x49
 8002542:	f002 fbdf 	bl	8004d04 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002546:	e04d      	b.n	80025e4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <I2Cx_MspInit+0x154>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <I2Cx_MspInit+0x154>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6313      	str	r3, [r2, #48]	; 0x30
 8002554:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002564:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002566:	2312      	movs	r3, #18
 8002568:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800256e:	2302      	movs	r3, #2
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002572:	2304      	movs	r3, #4
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	481e      	ldr	r0, [pc, #120]	; (80025f8 <I2Cx_MspInit+0x15c>)
 800257e:	f003 f907 	bl	8005790 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	481a      	ldr	r0, [pc, #104]	; (80025f8 <I2Cx_MspInit+0x15c>)
 8002590:	f003 f8fe 	bl	8005790 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <I2Cx_MspInit+0x154>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <I2Cx_MspInit+0x154>)
 800259a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <I2Cx_MspInit+0x154>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <I2Cx_MspInit+0x154>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <I2Cx_MspInit+0x154>)
 80025b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <I2Cx_MspInit+0x154>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <I2Cx_MspInit+0x154>)
 80025be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	210f      	movs	r1, #15
 80025c8:	201f      	movs	r0, #31
 80025ca:	f002 fb7f 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80025ce:	201f      	movs	r0, #31
 80025d0:	f002 fb98 	bl	8004d04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	210f      	movs	r1, #15
 80025d8:	2020      	movs	r0, #32
 80025da:	f002 fb77 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80025de:	2020      	movs	r0, #32
 80025e0:	f002 fb90 	bl	8004d04 <HAL_NVIC_EnableIRQ>
}
 80025e4:	bf00      	nop
 80025e6:	3730      	adds	r7, #48	; 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000334 	.word	0x20000334
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40020400 	.word	0x40020400

080025fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f003 fe7f 	bl	8006308 <HAL_I2C_GetState>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d125      	bne.n	800265c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <I2Cx_Init+0x68>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a13      	ldr	r2, [pc, #76]	; (8002668 <I2Cx_Init+0x6c>)
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e002      	b.n	8002626 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <I2Cx_Init+0x70>)
 8002624:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <I2Cx_Init+0x74>)
 800262a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff23 	bl	800249c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f003 fb68 	bl	8005d2c <HAL_I2C_Init>
  }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000334 	.word	0x20000334
 8002668:	40005c00 	.word	0x40005c00
 800266c:	40005400 	.word	0x40005400
 8002670:	40912732 	.word	0x40912732

08002674 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af04      	add	r7, sp, #16
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	72fb      	strb	r3, [r7, #11]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	b299      	uxth	r1, r3
 8002696:	88f8      	ldrh	r0, [r7, #6]
 8002698:	893a      	ldrh	r2, [r7, #8]
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4603      	mov	r3, r0
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f003 fd12 	bl	80060d4 <HAL_I2C_Mem_Read>
 80026b0:	4603      	mov	r3, r0
 80026b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	4619      	mov	r1, r3
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f832 	bl	8002728 <I2Cx_Error>
  }
  return status;    
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08a      	sub	sp, #40	; 0x28
 80026d2:	af04      	add	r7, sp, #16
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	4608      	mov	r0, r1
 80026d8:	4611      	mov	r1, r2
 80026da:	461a      	mov	r2, r3
 80026dc:	4603      	mov	r3, r0
 80026de:	72fb      	strb	r3, [r7, #11]
 80026e0:	460b      	mov	r3, r1
 80026e2:	813b      	strh	r3, [r7, #8]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	b299      	uxth	r1, r3
 80026f0:	88f8      	ldrh	r0, [r7, #6]
 80026f2:	893a      	ldrh	r2, [r7, #8]
 80026f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f8:	9302      	str	r3, [sp, #8]
 80026fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	4603      	mov	r3, r0
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f003 fbd1 	bl	8005eac <HAL_I2C_Mem_Write>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	4619      	mov	r1, r3
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f805 	bl	8002728 <I2Cx_Error>
  }
  return status;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f003 fb89 	bl	8005e4c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff5e 	bl	80025fc <I2Cx_Init>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <TS_IO_Init+0x10>)
 800274e:	f7ff ff55 	bl	80025fc <I2Cx_Init>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000334 	.word	0x20000334

0800275c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af02      	add	r7, sp, #8
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	460b      	mov	r3, r1
 8002768:	71bb      	strb	r3, [r7, #6]
 800276a:	4613      	mov	r3, r2
 800276c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	b29a      	uxth	r2, r3
 8002772:	79f9      	ldrb	r1, [r7, #7]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	1d7b      	adds	r3, r7, #5
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <TS_IO_Write+0x30>)
 8002780:	f7ff ffa5 	bl	80026ce <I2Cx_WriteMultiple>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000334 	.word	0x20000334

08002790 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	4613      	mov	r3, r2
 800279e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	79f9      	ldrb	r1, [r7, #7]
 80027aa:	2301      	movs	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	f107 030f 	add.w	r3, r7, #15
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2301      	movs	r3, #1
 80027b6:	4804      	ldr	r0, [pc, #16]	; (80027c8 <TS_IO_Read+0x38>)
 80027b8:	f7ff ff5c 	bl	8002674 <I2Cx_ReadMultiple>

  return read_value;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000334 	.word	0x20000334

080027cc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 fdc5 	bl	8004364 <HAL_Delay>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <BSP_LCD_Init+0xcc>)
 80027ea:	2228      	movs	r2, #40	; 0x28
 80027ec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <BSP_LCD_Init+0xcc>)
 80027f0:	2209      	movs	r2, #9
 80027f2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <BSP_LCD_Init+0xcc>)
 80027f6:	2235      	movs	r2, #53	; 0x35
 80027f8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <BSP_LCD_Init+0xcc>)
 80027fc:	220b      	movs	r2, #11
 80027fe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002802:	f240 121b 	movw	r2, #283	; 0x11b
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800280a:	f240 2215 	movw	r2, #533	; 0x215
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002812:	f240 121d 	movw	r2, #285	; 0x11d
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800281a:	f240 2235 	movw	r2, #565	; 0x235
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002820:	2100      	movs	r1, #0
 8002822:	4823      	ldr	r0, [pc, #140]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002824:	f000 fc1c 	bl	8003060 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800282a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800282e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002832:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002836:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002852:	2200      	movs	r2, #0
 8002854:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <BSP_LCD_Init+0xd0>)
 800286c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002870:	f004 f9dc 	bl	8006c2c <HAL_LTDC_GetState>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800287a:	2100      	movs	r1, #0
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <BSP_LCD_Init+0xcc>)
 800287e:	f000 fb15 	bl	8002eac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002882:	480b      	ldr	r0, [pc, #44]	; (80028b0 <BSP_LCD_Init+0xcc>)
 8002884:	f004 f802 	bl	800688c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288e:	480a      	ldr	r0, [pc, #40]	; (80028b8 <BSP_LCD_Init+0xd4>)
 8002890:	f003 fa32 	bl	8005cf8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	2108      	movs	r1, #8
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <BSP_LCD_Init+0xd8>)
 800289a:	f003 fa2d 	bl	8005cf8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800289e:	f000 fcff 	bl	80032a0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <BSP_LCD_Init+0xdc>)
 80028a4:	f000 f8d8 	bl	8002a58 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20008c18 	.word	0x20008c18
 80028b4:	40016800 	.word	0x40016800
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40022800 	.word	0x40022800
 80028c0:	20000034 	.word	0x20000034

080028c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <BSP_LCD_GetXSize+0x20>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <BSP_LCD_GetXSize+0x24>)
 80028ce:	2134      	movs	r1, #52	; 0x34
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	681b      	ldr	r3, [r3, #0]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	200003c0 	.word	0x200003c0
 80028e8:	20008c18 	.word	0x20008c18

080028ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <BSP_LCD_GetYSize+0x20>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a06      	ldr	r2, [pc, #24]	; (8002910 <BSP_LCD_GetYSize+0x24>)
 80028f6:	2134      	movs	r1, #52	; 0x34
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3364      	adds	r3, #100	; 0x64
 8002900:	681b      	ldr	r3, [r3, #0]
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	200003c0 	.word	0x200003c0
 8002910:	20008c18 	.word	0x20008c18

08002914 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002914:	b580      	push	{r7, lr}
 8002916:	b090      	sub	sp, #64	; 0x40
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002924:	f7ff ffce 	bl	80028c4 <BSP_LCD_GetXSize>
 8002928:	4603      	mov	r3, r0
 800292a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002930:	f7ff ffdc 	bl	80028ec <BSP_LCD_GetYSize>
 8002934:	4603      	mov	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002940:	23ff      	movs	r3, #255	; 0xff
 8002942:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800295a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002960:	2307      	movs	r3, #7
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002964:	f7ff ffae 	bl	80028c4 <BSP_LCD_GetXSize>
 8002968:	4603      	mov	r3, r0
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800296c:	f7ff ffbe 	bl	80028ec <BSP_LCD_GetYSize>
 8002970:	4603      	mov	r3, r0
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	4619      	mov	r1, r3
 800297c:	4812      	ldr	r0, [pc, #72]	; (80029c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800297e:	f004 f917 	bl	8006bb0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	4911      	ldr	r1, [pc, #68]	; (80029cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	f04f 32ff 	mov.w	r2, #4294967295
 8002996:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	490c      	ldr	r1, [pc, #48]	; (80029cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3308      	adds	r3, #8
 80029a8:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	4907      	ldr	r1, [pc, #28]	; (80029cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3740      	adds	r7, #64	; 0x40
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20008c18 	.word	0x20008c18
 80029cc:	200003c4 	.word	0x200003c4
 80029d0:	20000034 	.word	0x20000034

080029d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <BSP_LCD_SelectLayer+0x1c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
} 
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200003c0 	.word	0x200003c0

080029f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <BSP_LCD_SetTextColor+0x28>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <BSP_LCD_SetTextColor+0x2c>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	200003c0 	.word	0x200003c0
 8002a20:	200003c4 	.word	0x200003c4

08002a24 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <BSP_LCD_SetBackColor+0x2c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4908      	ldr	r1, [pc, #32]	; (8002a54 <BSP_LCD_SetBackColor+0x30>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200003c0 	.word	0x200003c0
 8002a54:	200003c4 	.word	0x200003c4

08002a58 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <BSP_LCD_SetFont+0x2c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4908      	ldr	r1, [pc, #32]	; (8002a88 <BSP_LCD_SetFont+0x30>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3308      	adds	r3, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	200003c0 	.word	0x200003c0
 8002a88:	200003c4 	.word	0x200003c4

08002a8c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <BSP_LCD_Clear+0x48>)
 8002a96:	681c      	ldr	r4, [r3, #0]
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <BSP_LCD_Clear+0x48>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <BSP_LCD_Clear+0x4c>)
 8002a9e:	2134      	movs	r1, #52	; 0x34
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461d      	mov	r5, r3
 8002aac:	f7ff ff0a 	bl	80028c4 <BSP_LCD_GetXSize>
 8002ab0:	4606      	mov	r6, r0
 8002ab2:	f7ff ff1b 	bl	80028ec <BSP_LCD_GetYSize>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	4632      	mov	r2, r6
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f000 fb9e 	bl	8003208 <LL_FillBuffer>
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad4:	200003c0 	.word	0x200003c0
 8002ad8:	20008c18 	.word	0x20008c18

08002adc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	80bb      	strh	r3, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <BSP_LCD_DisplayChar+0x80>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <BSP_LCD_DisplayChar+0x84>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3308      	adds	r3, #8
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <BSP_LCD_DisplayChar+0x80>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4c14      	ldr	r4, [pc, #80]	; (8002b60 <BSP_LCD_DisplayChar+0x84>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4423      	add	r3, r4
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b20:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <BSP_LCD_DisplayChar+0x80>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <BSP_LCD_DisplayChar+0x84>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4423      	add	r3, r4
 8002b34:	3308      	adds	r3, #8
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	889b      	ldrh	r3, [r3, #4]
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da00      	bge.n	8002b42 <BSP_LCD_DisplayChar+0x66>
 8002b40:	3307      	adds	r3, #7
 8002b42:	10db      	asrs	r3, r3, #3
 8002b44:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b48:	18ca      	adds	r2, r1, r3
 8002b4a:	88b9      	ldrh	r1, [r7, #4]
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 faa2 	bl	8003098 <DrawChar>
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	200003c0 	.word	0x200003c0
 8002b60:	200003c4 	.word	0x200003c4

08002b64 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60ba      	str	r2, [r7, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	81fb      	strh	r3, [r7, #14]
 8002b72:	460b      	mov	r3, r1
 8002b74:	81bb      	strh	r3, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	83fb      	strh	r3, [r7, #30]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b8e:	e002      	b.n	8002b96 <BSP_LCD_DisplayStringAt+0x32>
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3301      	adds	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	617a      	str	r2, [r7, #20]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f6      	bne.n	8002b90 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ba2:	f7ff fe8f 	bl	80028c4 <BSP_LCD_GetXSize>
 8002ba6:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	494f      	ldr	r1, [pc, #316]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	889b      	ldrh	r3, [r3, #4]
 8002bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d01c      	beq.n	8002c02 <BSP_LCD_DisplayStringAt+0x9e>
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <BSP_LCD_DisplayStringAt+0x98>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d12e      	bne.n	8002c2e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad1      	subs	r1, r2, r3
 8002bd6:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4843      	ldr	r0, [pc, #268]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4403      	add	r3, r0
 8002be6:	3308      	adds	r3, #8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	889b      	ldrh	r3, [r3, #4]
 8002bec:	fb03 f301 	mul.w	r3, r3, r1
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	83fb      	strh	r3, [r7, #30]
      break;
 8002bfa:	e01b      	b.n	8002c34 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	83fb      	strh	r3, [r7, #30]
      break;
 8002c00:	e018      	b.n	8002c34 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4836      	ldr	r0, [pc, #216]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4403      	add	r3, r0
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	889b      	ldrh	r3, [r3, #4]
 8002c20:	fb11 f303 	smulbb	r3, r1, r3
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c2c:	e002      	b.n	8002c34 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	83fb      	strh	r3, [r7, #30]
      break;
 8002c32:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002c34:	8bfb      	ldrh	r3, [r7, #30]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <BSP_LCD_DisplayStringAt+0xde>
 8002c3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da1d      	bge.n	8002c7e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c46:	e01a      	b.n	8002c7e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781a      	ldrb	r2, [r3, #0]
 8002c4c:	89b9      	ldrh	r1, [r7, #12]
 8002c4e:	8bfb      	ldrh	r3, [r7, #30]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff43 	bl	8002adc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002c56:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4923      	ldr	r1, [pc, #140]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3308      	adds	r3, #8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	889a      	ldrh	r2, [r3, #4]
 8002c6c:	8bfb      	ldrh	r3, [r7, #30]
 8002c6e:	4413      	add	r3, r2
 8002c70:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
    i++;
 8002c78:	8bbb      	ldrh	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2dc      	uxtb	r4, r3
 8002c8c:	f7ff fe1a 	bl	80028c4 <BSP_LCD_GetXSize>
 8002c90:	4605      	mov	r5, r0
 8002c92:	8bb9      	ldrh	r1, [r7, #28]
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	889b      	ldrh	r3, [r3, #4]
 8002caa:	fb03 f301 	mul.w	r3, r3, r1
 8002cae:	1aeb      	subs	r3, r5, r3
 8002cb0:	b299      	uxth	r1, r3
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <BSP_LCD_DisplayStringAt+0x180>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <BSP_LCD_DisplayStringAt+0x184>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4403      	add	r3, r0
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	889b      	ldrh	r3, [r3, #4]
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	bf2c      	ite	cs
 8002ccc:	2301      	movcs	r3, #1
 8002cce:	2300      	movcc	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4023      	ands	r3, r4
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1b6      	bne.n	8002c48 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002cda:	bf00      	nop
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200003c0 	.word	0x200003c0
 8002ce8:	200003c4 	.word	0x200003c4

08002cec <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002cec:	b5b0      	push	{r4, r5, r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	603a      	str	r2, [r7, #0]
 8002cf6:	80fb      	strh	r3, [r7, #6]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <BSP_LCD_DrawPixel+0x88>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <BSP_LCD_DrawPixel+0x8c>)
 8002d02:	2134      	movs	r1, #52	; 0x34
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3348      	adds	r3, #72	; 0x48
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d116      	bne.n	8002d40 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <BSP_LCD_DrawPixel+0x88>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <BSP_LCD_DrawPixel+0x8c>)
 8002d18:	2134      	movs	r1, #52	; 0x34
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	681c      	ldr	r4, [r3, #0]
 8002d24:	88bd      	ldrh	r5, [r7, #4]
 8002d26:	f7ff fdcd 	bl	80028c4 <BSP_LCD_GetXSize>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	fb03 f205 	mul.w	r2, r3, r5
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4423      	add	r3, r4
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002d3e:	e015      	b.n	8002d6c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <BSP_LCD_DrawPixel+0x88>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <BSP_LCD_DrawPixel+0x8c>)
 8002d46:	2134      	movs	r1, #52	; 0x34
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	335c      	adds	r3, #92	; 0x5c
 8002d50:	681c      	ldr	r4, [r3, #0]
 8002d52:	88bd      	ldrh	r5, [r7, #4]
 8002d54:	f7ff fdb6 	bl	80028c4 <BSP_LCD_GetXSize>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	fb03 f205 	mul.w	r2, r3, r5
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4423      	add	r3, r4
 8002d66:	461a      	mov	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}
 8002d74:	200003c0 	.word	0x200003c0
 8002d78:	20008c18 	.word	0x20008c18

08002d7c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	4604      	mov	r4, r0
 8002d86:	4608      	mov	r0, r1
 8002d88:	4611      	mov	r1, r2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	80fb      	strh	r3, [r7, #6]
 8002d90:	4603      	mov	r3, r0
 8002d92:	80bb      	strh	r3, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4930      	ldr	r1, [pc, #192]	; (8002e68 <BSP_LCD_FillRect+0xec>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fe1e 	bl	80029f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <BSP_LCD_FillRect+0xf0>)
 8002dbe:	2134      	movs	r1, #52	; 0x34
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3348      	adds	r3, #72	; 0x48
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d114      	bne.n	8002df8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <BSP_LCD_FillRect+0xf0>)
 8002dd4:	2134      	movs	r1, #52	; 0x34
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	f7ff fd70 	bl	80028c4 <BSP_LCD_GetXSize>
 8002de4:	4602      	mov	r2, r0
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	fb03 f202 	mul.w	r2, r3, r2
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4413      	add	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4423      	add	r3, r4
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e013      	b.n	8002e20 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <BSP_LCD_FillRect+0xf0>)
 8002dfe:	2134      	movs	r1, #52	; 0x34
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	681c      	ldr	r4, [r3, #0]
 8002e0a:	f7ff fd5b 	bl	80028c4 <BSP_LCD_GetXSize>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	88bb      	ldrh	r3, [r7, #4]
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4423      	add	r3, r4
 8002e1e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002e22:	681c      	ldr	r4, [r3, #0]
 8002e24:	68fd      	ldr	r5, [r7, #12]
 8002e26:	887e      	ldrh	r6, [r7, #2]
 8002e28:	f8b7 8000 	ldrh.w	r8, [r7]
 8002e2c:	f7ff fd4a 	bl	80028c4 <BSP_LCD_GetXSize>
 8002e30:	4602      	mov	r2, r0
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	1ad1      	subs	r1, r2, r3
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <BSP_LCD_FillRect+0xe8>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	480b      	ldr	r0, [pc, #44]	; (8002e68 <BSP_LCD_FillRect+0xec>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4403      	add	r3, r0
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	9100      	str	r1, [sp, #0]
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	4632      	mov	r2, r6
 8002e50:	4629      	mov	r1, r5
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f9d8 	bl	8003208 <LL_FillBuffer>
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e62:	bf00      	nop
 8002e64:	200003c0 	.word	0x200003c0
 8002e68:	200003c4 	.word	0x200003c4
 8002e6c:	20008c18 	.word	0x20008c18

08002e70 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <BSP_LCD_DisplayOn+0x30>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <BSP_LCD_DisplayOn+0x30>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e8a:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <BSP_LCD_DisplayOn+0x34>)
 8002e8c:	f002 ff34 	bl	8005cf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e90:	2201      	movs	r2, #1
 8002e92:	2108      	movs	r1, #8
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <BSP_LCD_DisplayOn+0x38>)
 8002e96:	f002 ff2f 	bl	8005cf8 <HAL_GPIO_WritePin>
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20008c18 	.word	0x20008c18
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40022800 	.word	0x40022800

08002eac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b090      	sub	sp, #64	; 0x40
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002eb6:	4b64      	ldr	r3, [pc, #400]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a63      	ldr	r2, [pc, #396]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b61      	ldr	r3, [pc, #388]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a5d      	ldr	r2, [pc, #372]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee6:	4b58      	ldr	r3, [pc, #352]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a57      	ldr	r2, [pc, #348]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002eec:	f043 0310 	orr.w	r3, r3, #16
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b55      	ldr	r3, [pc, #340]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002efe:	4b52      	ldr	r3, [pc, #328]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a51      	ldr	r2, [pc, #324]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a4b      	ldr	r2, [pc, #300]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b49      	ldr	r3, [pc, #292]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f2e:	4b46      	ldr	r3, [pc, #280]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a45      	ldr	r2, [pc, #276]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f46:	4b40      	ldr	r3, [pc, #256]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a3f      	ldr	r2, [pc, #252]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a39      	ldr	r2, [pc, #228]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b37      	ldr	r3, [pc, #220]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f76:	4b34      	ldr	r3, [pc, #208]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a33      	ldr	r2, [pc, #204]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <BSP_LCD_MspInit+0x19c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4828      	ldr	r0, [pc, #160]	; (800304c <BSP_LCD_MspInit+0x1a0>)
 8002faa:	f002 fbf1 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002fb8:	2309      	movs	r3, #9
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4823      	ldr	r0, [pc, #140]	; (8003050 <BSP_LCD_MspInit+0x1a4>)
 8002fc4:	f002 fbe4 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002fc8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fd2:	230e      	movs	r3, #14
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fda:	4619      	mov	r1, r3
 8002fdc:	481d      	ldr	r0, [pc, #116]	; (8003054 <BSP_LCD_MspInit+0x1a8>)
 8002fde:	f002 fbd7 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002fe2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fec:	230e      	movs	r3, #14
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4818      	ldr	r0, [pc, #96]	; (8003058 <BSP_LCD_MspInit+0x1ac>)
 8002ff8:	f002 fbca 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002ffc:	23f7      	movs	r3, #247	; 0xf7
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003004:	230e      	movs	r3, #14
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	4619      	mov	r1, r3
 800300e:	4813      	ldr	r0, [pc, #76]	; (800305c <BSP_LCD_MspInit+0x1b0>)
 8003010:	f002 fbbe 	bl	8005790 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800301a:	2301      	movs	r3, #1
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800301e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <BSP_LCD_MspInit+0x1a8>)
 8003026:	f002 fbb3 	bl	8005790 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800302a:	2308      	movs	r3, #8
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003036:	4619      	mov	r1, r3
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <BSP_LCD_MspInit+0x1b0>)
 800303a:	f002 fba9 	bl	8005790 <HAL_GPIO_Init>
}
 800303e:	bf00      	nop
 8003040:	3740      	adds	r7, #64	; 0x40
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40021000 	.word	0x40021000
 8003050:	40021800 	.word	0x40021800
 8003054:	40022000 	.word	0x40022000
 8003058:	40022400 	.word	0x40022400
 800305c:	40022800 	.word	0x40022800

08003060 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <BSP_LCD_ClockConfig+0x34>)
 800306c:	2208      	movs	r2, #8
 800306e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <BSP_LCD_ClockConfig+0x34>)
 8003072:	22c0      	movs	r2, #192	; 0xc0
 8003074:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <BSP_LCD_ClockConfig+0x34>)
 8003078:	2205      	movs	r2, #5
 800307a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <BSP_LCD_ClockConfig+0x34>)
 800307e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <BSP_LCD_ClockConfig+0x34>)
 8003086:	f004 fc81 	bl	800798c <HAL_RCCEx_PeriphCLKConfig>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200003dc 	.word	0x200003dc

08003098 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	603a      	str	r2, [r7, #0]
 80030a2:	80fb      	strh	r3, [r7, #6]
 80030a4:	460b      	mov	r3, r1
 80030a6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <DrawChar+0x168>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4953      	ldr	r1, [pc, #332]	; (8003204 <DrawChar+0x16c>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3308      	adds	r3, #8
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	88db      	ldrh	r3, [r3, #6]
 80030c6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <DrawChar+0x168>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	494d      	ldr	r1, [pc, #308]	; (8003204 <DrawChar+0x16c>)
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3308      	adds	r3, #8
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	889b      	ldrh	r3, [r3, #4]
 80030de:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80030e0:	8a3b      	ldrh	r3, [r7, #16]
 80030e2:	3307      	adds	r3, #7
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da00      	bge.n	80030ea <DrawChar+0x52>
 80030e8:	3307      	adds	r3, #7
 80030ea:	10db      	asrs	r3, r3, #3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	8a3b      	ldrh	r3, [r7, #16]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e076      	b.n	80031ee <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003100:	8a3b      	ldrh	r3, [r7, #16]
 8003102:	3307      	adds	r3, #7
 8003104:	2b00      	cmp	r3, #0
 8003106:	da00      	bge.n	800310a <DrawChar+0x72>
 8003108:	3307      	adds	r3, #7
 800310a:	10db      	asrs	r3, r3, #3
 800310c:	461a      	mov	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fb03 f302 	mul.w	r3, r3, r2
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800311a:	8a3b      	ldrh	r3, [r7, #16]
 800311c:	3307      	adds	r3, #7
 800311e:	2b00      	cmp	r3, #0
 8003120:	da00      	bge.n	8003124 <DrawChar+0x8c>
 8003122:	3307      	adds	r3, #7
 8003124:	10db      	asrs	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d002      	beq.n	8003130 <DrawChar+0x98>
 800312a:	2b02      	cmp	r3, #2
 800312c:	d004      	beq.n	8003138 <DrawChar+0xa0>
 800312e:	e00c      	b.n	800314a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
      break;
 8003136:	e016      	b.n	8003166 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	3201      	adds	r2, #1
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
      break;
 8003148:	e00d      	b.n	8003166 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	041a      	lsls	r2, r3, #16
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	4313      	orrs	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	3202      	adds	r2, #2
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
      break;
 8003164:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e036      	b.n	80031da <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800316c:	8a3a      	ldrh	r2, [r7, #16]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1ad2      	subs	r2, r2, r3
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	4413      	add	r3, r2
 8003176:	3b01      	subs	r3, #1
 8003178:	2201      	movs	r2, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	461a      	mov	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	b29a      	uxth	r2, r3
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4413      	add	r3, r2
 8003190:	b298      	uxth	r0, r3
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <DrawChar+0x168>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	491b      	ldr	r1, [pc, #108]	; (8003204 <DrawChar+0x16c>)
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	88bb      	ldrh	r3, [r7, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7ff fda0 	bl	8002cec <BSP_LCD_DrawPixel>
 80031ac:	e012      	b.n	80031d4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4413      	add	r3, r2
 80031b6:	b298      	uxth	r0, r3
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <DrawChar+0x168>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4911      	ldr	r1, [pc, #68]	; (8003204 <DrawChar+0x16c>)
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3304      	adds	r3, #4
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	88bb      	ldrh	r3, [r7, #4]
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7ff fd8c 	bl	8002cec <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	8a3b      	ldrh	r3, [r7, #16]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3c4      	bcc.n	800316c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80031e2:	88bb      	ldrh	r3, [r7, #4]
 80031e4:	3301      	adds	r3, #1
 80031e6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	8a7b      	ldrh	r3, [r7, #18]
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d384      	bcc.n	8003100 <DrawChar+0x68>
  }
}
 80031f6:	bf00      	nop
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200003c0 	.word	0x200003c0
 8003204:	200003c4 	.word	0x200003c4

08003208 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <LL_FillBuffer+0x88>)
 8003218:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800321c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <LL_FillBuffer+0x8c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <LL_FillBuffer+0x90>)
 8003224:	2134      	movs	r1, #52	; 0x34
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3348      	adds	r3, #72	; 0x48
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d103      	bne.n	800323c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <LL_FillBuffer+0x88>)
 8003236:	2202      	movs	r2, #2
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	e002      	b.n	8003242 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <LL_FillBuffer+0x88>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <LL_FillBuffer+0x88>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <LL_FillBuffer+0x88>)
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <LL_FillBuffer+0x94>)
 800324c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800324e:	4810      	ldr	r0, [pc, #64]	; (8003290 <LL_FillBuffer+0x88>)
 8003250:	f002 f812 	bl	8005278 <HAL_DMA2D_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	480c      	ldr	r0, [pc, #48]	; (8003290 <LL_FillBuffer+0x88>)
 800325e:	f002 f969 	bl	8005534 <HAL_DMA2D_ConfigLayer>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69f9      	ldr	r1, [r7, #28]
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <LL_FillBuffer+0x88>)
 8003274:	f002 f84a 	bl	800530c <HAL_DMA2D_Start>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800327e:	210a      	movs	r1, #10
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <LL_FillBuffer+0x88>)
 8003282:	f002 f86e 	bl	8005362 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000380 	.word	0x20000380
 8003294:	200003c0 	.word	0x200003c0
 8003298:	20008c18 	.word	0x20008c18
 800329c:	4002b000 	.word	0x4002b000

080032a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032a6:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <BSP_SDRAM_Init+0xb0>)
 80032a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032ac:	2202      	movs	r2, #2
 80032ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032b2:	2207      	movs	r2, #7
 80032b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032b8:	2204      	movs	r2, #4
 80032ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032be:	2207      	movs	r2, #7
 80032c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 80032d0:	2202      	movs	r2, #2
 80032d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032e2:	2204      	movs	r2, #4
 80032e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80032e6:	4b19      	ldr	r3, [pc, #100]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032e8:	2210      	movs	r2, #16
 80032ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032ee:	2240      	movs	r2, #64	; 0x40
 80032f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <BSP_SDRAM_Init+0xac>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <BSP_SDRAM_Init+0xac>)
 8003302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003306:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <BSP_SDRAM_Init+0xac>)
 800330a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <BSP_SDRAM_Init+0xac>)
 8003312:	2200      	movs	r2, #0
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003316:	2100      	movs	r1, #0
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <BSP_SDRAM_Init+0xac>)
 800331a:	f000 f87f 	bl	800341c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800331e:	490d      	ldr	r1, [pc, #52]	; (8003354 <BSP_SDRAM_Init+0xb4>)
 8003320:	480a      	ldr	r0, [pc, #40]	; (800334c <BSP_SDRAM_Init+0xac>)
 8003322:	f005 fbaf 	bl	8008a84 <HAL_SDRAM_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <BSP_SDRAM_Init+0xb8>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e002      	b.n	800333a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <BSP_SDRAM_Init+0xb8>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800333a:	f240 6003 	movw	r0, #1539	; 0x603
 800333e:	f000 f80d 	bl	800335c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <BSP_SDRAM_Init+0xb8>)
 8003344:	781b      	ldrb	r3, [r3, #0]
}
 8003346:	4618      	mov	r0, r3
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20008cc0 	.word	0x20008cc0
 8003350:	a0000140 	.word	0xa0000140
 8003354:	20000460 	.word	0x20000460
 8003358:	20000044 	.word	0x20000044

0800335c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003368:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003370:	2210      	movs	r2, #16
 8003372:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003376:	2201      	movs	r2, #1
 8003378:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800337a:	4b26      	ldr	r3, [pc, #152]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003384:	4923      	ldr	r1, [pc, #140]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003386:	4824      	ldr	r0, [pc, #144]	; (8003418 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003388:	f005 fbb0 	bl	8008aec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f000 ffe9 	bl	8004364 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339a:	2210      	movs	r2, #16
 800339c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80033aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ae:	4919      	ldr	r1, [pc, #100]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b0:	4819      	ldr	r0, [pc, #100]	; (8003418 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033b2:	f005 fb9b 	bl	8008aec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b8:	2203      	movs	r2, #3
 80033ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033be:	2210      	movs	r2, #16
 80033c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c4:	2208      	movs	r2, #8
 80033c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d2:	4910      	ldr	r1, [pc, #64]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d4:	4810      	ldr	r0, [pc, #64]	; (8003418 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033d6:	f005 fb89 	bl	8008aec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80033da:	f44f 7308 	mov.w	r3, #544	; 0x220
 80033de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e2:	2204      	movs	r2, #4
 80033e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e8:	2210      	movs	r2, #16
 80033ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a07      	ldr	r2, [pc, #28]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033fc:	4905      	ldr	r1, [pc, #20]	; (8003414 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003400:	f005 fb74 	bl	8008aec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4804      	ldr	r0, [pc, #16]	; (8003418 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003408:	f005 fb9b 	bl	8008b42 <HAL_SDRAM_ProgramRefreshRate>
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000047c 	.word	0x2000047c
 8003418:	20008cc0 	.word	0x20008cc0

0800341c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800341c:	b580      	push	{r7, lr}
 800341e:	b090      	sub	sp, #64	; 0x40
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6393      	str	r3, [r2, #56]	; 0x38
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003456:	4b64      	ldr	r3, [pc, #400]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a63      	ldr	r2, [pc, #396]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800346e:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003486:	4b58      	ldr	r3, [pc, #352]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a57      	ldr	r2, [pc, #348]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 800348c:	f043 0310 	orr.w	r3, r3, #16
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800349e:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034b6:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ce:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a45      	ldr	r2, [pc, #276]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <BSP_SDRAM_MspInit+0x1cc>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80034ee:	2302      	movs	r3, #2
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80034f2:	230c      	movs	r3, #12
 80034f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80034f6:	2308      	movs	r3, #8
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034fe:	4619      	mov	r1, r3
 8003500:	483a      	ldr	r0, [pc, #232]	; (80035ec <BSP_SDRAM_MspInit+0x1d0>)
 8003502:	f002 f945 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003506:	f24c 7303 	movw	r3, #50947	; 0xc703
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800350c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	4837      	ldr	r0, [pc, #220]	; (80035f0 <BSP_SDRAM_MspInit+0x1d4>)
 8003514:	f002 f93c 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003518:	f64f 7383 	movw	r3, #65411	; 0xff83
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800351e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003522:	4619      	mov	r1, r3
 8003524:	4833      	ldr	r0, [pc, #204]	; (80035f4 <BSP_SDRAM_MspInit+0x1d8>)
 8003526:	f002 f933 	bl	8005790 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800352a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003534:	4619      	mov	r1, r3
 8003536:	4830      	ldr	r0, [pc, #192]	; (80035f8 <BSP_SDRAM_MspInit+0x1dc>)
 8003538:	f002 f92a 	bl	8005790 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800353c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003546:	4619      	mov	r1, r3
 8003548:	482c      	ldr	r0, [pc, #176]	; (80035fc <BSP_SDRAM_MspInit+0x1e0>)
 800354a:	f002 f921 	bl	8005790 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800354e:	2328      	movs	r3, #40	; 0x28
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	4829      	ldr	r0, [pc, #164]	; (8003600 <BSP_SDRAM_MspInit+0x1e4>)
 800355a:	f002 f919 	bl	8005790 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 8003560:	2200      	movs	r2, #0
 8003562:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 800356c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003570:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 8003574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003578:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 800357c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003580:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 8003584:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003588:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 800358c:	2200      	movs	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 8003592:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003596:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 800359a:	2200      	movs	r2, #0
 800359c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800359e:	4b19      	ldr	r3, [pc, #100]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035a0:	2203      	movs	r2, #3
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <BSP_SDRAM_MspInit+0x1ec>)
 80035b4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
 80035bc:	4a11      	ldr	r2, [pc, #68]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80035c2:	4810      	ldr	r0, [pc, #64]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035c4:	f001 fd28 	bl	8005018 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80035c8:	480e      	ldr	r0, [pc, #56]	; (8003604 <BSP_SDRAM_MspInit+0x1e8>)
 80035ca:	f001 fc77 	bl	8004ebc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	210f      	movs	r1, #15
 80035d2:	2038      	movs	r0, #56	; 0x38
 80035d4:	f001 fb7a 	bl	8004ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80035d8:	2038      	movs	r0, #56	; 0x38
 80035da:	f001 fb93 	bl	8004d04 <HAL_NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3740      	adds	r7, #64	; 0x40
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40020800 	.word	0x40020800
 80035f0:	40020c00 	.word	0x40020c00
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40021400 	.word	0x40021400
 80035fc:	40021800 	.word	0x40021800
 8003600:	40021c00 	.word	0x40021c00
 8003604:	2000048c 	.word	0x2000048c
 8003608:	40026410 	.word	0x40026410

0800360c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	460a      	mov	r2, r1
 8003616:	80fb      	strh	r3, [r7, #6]
 8003618:	4613      	mov	r3, r2
 800361a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003620:	4a14      	ldr	r2, [pc, #80]	; (8003674 <BSP_TS_Init+0x68>)
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003626:	4a14      	ldr	r2, [pc, #80]	; (8003678 <BSP_TS_Init+0x6c>)
 8003628:	88bb      	ldrh	r3, [r7, #4]
 800362a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <BSP_TS_Init+0x70>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2070      	movs	r0, #112	; 0x70
 8003632:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <BSP_TS_Init+0x70>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2070      	movs	r0, #112	; 0x70
 800363a:	4798      	blx	r3
 800363c:	4603      	mov	r3, r0
 800363e:	2b51      	cmp	r3, #81	; 0x51
 8003640:	d111      	bne.n	8003666 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <BSP_TS_Init+0x74>)
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <BSP_TS_Init+0x70>)
 8003646:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <BSP_TS_Init+0x78>)
 800364a:	2270      	movs	r2, #112	; 0x70
 800364c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <BSP_TS_Init+0x7c>)
 8003650:	2208      	movs	r2, #8
 8003652:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <BSP_TS_Init+0x74>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <BSP_TS_Init+0x78>)
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	b292      	uxth	r2, r2
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
 8003664:	e001      	b.n	800366a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003666:	2303      	movs	r3, #3
 8003668:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	200004f0 	.word	0x200004f0
 8003678:	200004f2 	.word	0x200004f2
 800367c:	20000000 	.word	0x20000000
 8003680:	200004ec 	.word	0x200004ec
 8003684:	200004f5 	.word	0x200004f5
 8003688:	200004f4 	.word	0x200004f4

0800368c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_MspInit+0x4c>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_MspInit+0x4c>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_MspInit+0x4c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_MspInit+0x4c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <HAL_MspInit+0x4c>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_MspInit+0x4c>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	210f      	movs	r1, #15
 80036c6:	f06f 0001 	mvn.w	r0, #1
 80036ca:	f001 faff 	bl	8004ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_ADC_MspInit+0xc8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d124      	bne.n	8003748 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800372e:	2301      	movs	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003732:	2303      	movs	r3, #3
 8003734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	4619      	mov	r1, r3
 8003740:	481a      	ldr	r0, [pc, #104]	; (80037ac <HAL_ADC_MspInit+0xd0>)
 8003742:	f002 f825 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003746:	e029      	b.n	800379c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <HAL_ADC_MspInit+0xd4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d124      	bne.n	800379c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003770:	f043 0320 	orr.w	r3, r3, #32
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_ADC_MspInit+0xcc>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003782:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003788:	2303      	movs	r3, #3
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003790:	f107 031c 	add.w	r3, r7, #28
 8003794:	4619      	mov	r1, r3
 8003796:	4807      	ldr	r0, [pc, #28]	; (80037b4 <HAL_ADC_MspInit+0xd8>)
 8003798:	f001 fffa 	bl	8005790 <HAL_GPIO_Init>
}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40012000 	.word	0x40012000
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40012200 	.word	0x40012200
 80037b4:	40021400 	.word	0x40021400

080037b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_DAC_MspInit+0x84>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d12b      	bne.n	8003832 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_DAC_MspInit+0x88>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_DAC_MspInit+0x88>)
 80037e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_DAC_MspInit+0x88>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_DAC_MspInit+0x88>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <HAL_DAC_MspInit+0x88>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_DAC_MspInit+0x88>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800380a:	2310      	movs	r3, #16
 800380c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380e:	2303      	movs	r3, #3
 8003810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4619      	mov	r1, r3
 800381c:	4809      	ldr	r0, [pc, #36]	; (8003844 <HAL_DAC_MspInit+0x8c>)
 800381e:	f001 ffb7 	bl	8005790 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	2036      	movs	r0, #54	; 0x36
 8003828:	f001 fa50 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800382c:	2036      	movs	r0, #54	; 0x36
 800382e:	f001 fa69 	bl	8004d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40007400 	.word	0x40007400
 8003840:	40023800 	.word	0x40023800
 8003844:	40020000 	.word	0x40020000

08003848 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_DMA2D_MspInit+0x38>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10b      	bne.n	8003872 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_DMA2D_MspInit+0x3c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_DMA2D_MspInit+0x3c>)
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_DMA2D_MspInit+0x3c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	4002b000 	.word	0x4002b000
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <HAL_I2C_MspInit+0xdc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d129      	bne.n	80038fe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80038c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038c8:	2312      	movs	r3, #18
 80038ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038d4:	2304      	movs	r3, #4
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	4823      	ldr	r0, [pc, #140]	; (800396c <HAL_I2C_MspInit+0xe4>)
 80038e0:	f001 ff56 	bl	8005790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038fc:	e02d      	b.n	800395a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_I2C_MspInit+0xe8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d128      	bne.n	800395a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	6313      	str	r3, [r2, #48]	; 0x30
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003920:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003926:	2312      	movs	r3, #18
 8003928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	2301      	movs	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	2303      	movs	r3, #3
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003932:	2304      	movs	r3, #4
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	4619      	mov	r1, r3
 800393c:	480d      	ldr	r0, [pc, #52]	; (8003974 <HAL_I2C_MspInit+0xec>)
 800393e:	f001 ff27 	bl	8005790 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003942:	4b09      	ldr	r3, [pc, #36]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 8003948:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_I2C_MspInit+0xe0>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	3730      	adds	r7, #48	; 0x30
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40005400 	.word	0x40005400
 8003968:	40023800 	.word	0x40023800
 800396c:	40020400 	.word	0x40020400
 8003970:	40005c00 	.word	0x40005c00
 8003974:	40021c00 	.word	0x40021c00

08003978 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_I2C_MspDeInit+0x64>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d110      	bne.n	80039ac <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_I2C_MspDeInit+0x68>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_I2C_MspDeInit+0x68>)
 8003990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800399a:	4812      	ldr	r0, [pc, #72]	; (80039e4 <HAL_I2C_MspDeInit+0x6c>)
 800399c:	f002 f8a2 	bl	8005ae4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80039a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039a4:	480f      	ldr	r0, [pc, #60]	; (80039e4 <HAL_I2C_MspDeInit+0x6c>)
 80039a6:	f002 f89d 	bl	8005ae4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80039aa:	e013      	b.n	80039d4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <HAL_I2C_MspDeInit+0x70>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10e      	bne.n	80039d4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_I2C_MspDeInit+0x68>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_I2C_MspDeInit+0x68>)
 80039bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <HAL_I2C_MspDeInit+0x74>)
 80039c6:	f002 f88d 	bl	8005ae4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80039ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039ce:	4807      	ldr	r0, [pc, #28]	; (80039ec <HAL_I2C_MspDeInit+0x74>)
 80039d0:	f002 f888 	bl	8005ae4 <HAL_GPIO_DeInit>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40005400 	.word	0x40005400
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40020400 	.word	0x40020400
 80039e8:	40005c00 	.word	0x40005c00
 80039ec:	40021c00 	.word	0x40021c00

080039f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	; 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a55      	ldr	r2, [pc, #340]	; (8003b64 <HAL_LTDC_MspInit+0x174>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	f040 80a3 	bne.w	8003b5a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a14:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	4a53      	ldr	r2, [pc, #332]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a20:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a2c:	4b4e      	ldr	r3, [pc, #312]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4a4d      	ldr	r2, [pc, #308]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a32:	f043 0310 	orr.w	r3, r3, #16
 8003a36:	6313      	str	r3, [r2, #48]	; 0x30
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003a44:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4a47      	ldr	r2, [pc, #284]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a50:	4b45      	ldr	r3, [pc, #276]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003a5c:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4a41      	ldr	r2, [pc, #260]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a66:	6313      	str	r3, [r2, #48]	; 0x30
 8003a68:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a74:	4b3c      	ldr	r3, [pc, #240]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6313      	str	r3, [r2, #48]	; 0x30
 8003a98:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_LTDC_MspInit+0x178>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ab4:	230e      	movs	r3, #14
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abc:	4619      	mov	r1, r3
 8003abe:	482b      	ldr	r0, [pc, #172]	; (8003b6c <HAL_LTDC_MspInit+0x17c>)
 8003ac0:	f001 fe66 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003ac4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ad6:	230e      	movs	r3, #14
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4823      	ldr	r0, [pc, #140]	; (8003b70 <HAL_LTDC_MspInit+0x180>)
 8003ae2:	f001 fe55 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003ae6:	23f7      	movs	r3, #247	; 0xf7
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003af6:	230e      	movs	r3, #14
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	481c      	ldr	r0, [pc, #112]	; (8003b74 <HAL_LTDC_MspInit+0x184>)
 8003b02:	f001 fe45 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b18:	2309      	movs	r3, #9
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b20:	4619      	mov	r1, r3
 8003b22:	4815      	ldr	r0, [pc, #84]	; (8003b78 <HAL_LTDC_MspInit+0x188>)
 8003b24:	f001 fe34 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003b28:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b36:	2300      	movs	r3, #0
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b3a:	230e      	movs	r3, #14
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b42:	4619      	mov	r1, r3
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <HAL_LTDC_MspInit+0x18c>)
 8003b46:	f001 fe23 	bl	8005790 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2105      	movs	r1, #5
 8003b4e:	2058      	movs	r0, #88	; 0x58
 8003b50:	f001 f8bc 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003b54:	2058      	movs	r0, #88	; 0x58
 8003b56:	f001 f8d5 	bl	8004d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003b5a:	bf00      	nop
 8003b5c:	3738      	adds	r7, #56	; 0x38
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40016800 	.word	0x40016800
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40022400 	.word	0x40022400
 8003b74:	40022800 	.word	0x40022800
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	40022000 	.word	0x40022000

08003b80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a07      	ldr	r2, [pc, #28]	; (8003bac <HAL_RTC_MspInit+0x2c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d105      	bne.n	8003b9e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_RTC_MspInit+0x30>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a06      	ldr	r2, [pc, #24]	; (8003bb0 <HAL_RTC_MspInit+0x30>)
 8003b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40002800 	.word	0x40002800
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_SPI_MspInit+0xd4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d154      	bne.n	8003c80 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_SPI_MspInit+0xd8>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c2e:	2305      	movs	r3, #5
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	4619      	mov	r1, r3
 8003c38:	4815      	ldr	r0, [pc, #84]	; (8003c90 <HAL_SPI_MspInit+0xdc>)
 8003c3a:	f001 fda9 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c4e:	2305      	movs	r3, #5
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <HAL_SPI_MspInit+0xdc>)
 8003c5a:	f001 fd99 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003c5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c70:	2305      	movs	r3, #5
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <HAL_SPI_MspInit+0xe0>)
 8003c7c:	f001 fd88 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40020400 	.word	0x40020400

08003c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	; (8003d60 <HAL_TIM_Base_MspInit+0xc8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003caa:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003cc2:	e046      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cce:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
}
 8003ce6:	e034      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_TIM_Base_MspInit+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697b      	ldr	r3, [r7, #20]
}
 8003d0a:	e022      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_TIM_Base_MspInit+0xd4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d16:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d1c:	f043 0308 	orr.w	r3, r3, #8
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	693b      	ldr	r3, [r7, #16]
}
 8003d2e:	e010      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <HAL_TIM_Base_MspInit+0xd8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10b      	bne.n	8003d52 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_TIM_Base_MspInit+0xcc>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40010400 	.word	0x40010400

08003d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_TIM_MspPostInit+0xa8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d11c      	bne.n	8003dd0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003dae:	2310      	movs	r3, #16
 8003db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4816      	ldr	r0, [pc, #88]	; (8003e24 <HAL_TIM_MspPostInit+0xb0>)
 8003dca:	f001 fce1 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003dce:	e020      	b.n	8003e12 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <HAL_TIM_MspPostInit+0xb4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11b      	bne.n	8003e12 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_TIM_MspPostInit+0xac>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003df2:	2304      	movs	r3, #4
 8003df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e02:	2303      	movs	r3, #3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e06:	f107 0314 	add.w	r3, r7, #20
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4807      	ldr	r0, [pc, #28]	; (8003e2c <HAL_TIM_MspPostInit+0xb8>)
 8003e0e:	f001 fcbf 	bl	8005790 <HAL_GPIO_Init>
}
 8003e12:	bf00      	nop
 8003e14:	3728      	adds	r7, #40	; 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40020400 	.word	0x40020400
 8003e28:	40010400 	.word	0x40010400
 8003e2c:	40022000 	.word	0x40022000

08003e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a57      	ldr	r2, [pc, #348]	; (8003fac <HAL_UART_MspInit+0x17c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d128      	bne.n	8003ea4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003e52:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a56      	ldr	r2, [pc, #344]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e6a:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e70:	f043 0320 	orr.w	r3, r3, #32
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b4e      	ldr	r3, [pc, #312]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003e92:	2308      	movs	r3, #8
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4845      	ldr	r0, [pc, #276]	; (8003fb4 <HAL_UART_MspInit+0x184>)
 8003e9e:	f001 fc77 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ea2:	e07f      	b.n	8003fa4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_UART_MspInit+0x188>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d14d      	bne.n	8003f4a <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eae:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a39      	ldr	r2, [pc, #228]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a33      	ldr	r2, [pc, #204]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efa:	2302      	movs	r3, #2
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f02:	2300      	movs	r3, #0
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f06:	2307      	movs	r3, #7
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f0e:	4619      	mov	r1, r3
 8003f10:	482a      	ldr	r0, [pc, #168]	; (8003fbc <HAL_UART_MspInit+0x18c>)
 8003f12:	f001 fc3d 	bl	8005790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f24:	2300      	movs	r3, #0
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f28:	2307      	movs	r3, #7
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f30:	4619      	mov	r1, r3
 8003f32:	4823      	ldr	r0, [pc, #140]	; (8003fc0 <HAL_UART_MspInit+0x190>)
 8003f34:	f001 fc2c 	bl	8005790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2107      	movs	r1, #7
 8003f3c:	2025      	movs	r0, #37	; 0x25
 8003f3e:	f000 fec5 	bl	8004ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f42:	2025      	movs	r0, #37	; 0x25
 8003f44:	f000 fede 	bl	8004d04 <HAL_NVIC_EnableIRQ>
}
 8003f48:	e02c      	b.n	8003fa4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_UART_MspInit+0x194>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d127      	bne.n	8003fa4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f54:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f5a:	f043 0320 	orr.w	r3, r3, #32
 8003f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6313      	str	r3, [r2, #48]	; 0x30
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_UART_MspInit+0x180>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003f84:	23c0      	movs	r3, #192	; 0xc0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f90:	2303      	movs	r3, #3
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f94:	2308      	movs	r3, #8
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	480a      	ldr	r0, [pc, #40]	; (8003fc8 <HAL_UART_MspInit+0x198>)
 8003fa0:	f001 fbf6 	bl	8005790 <HAL_GPIO_Init>
}
 8003fa4:	bf00      	nop
 8003fa6:	3738      	adds	r7, #56	; 0x38
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40007800 	.word	0x40007800
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40021400 	.word	0x40021400
 8003fb8:	40011000 	.word	0x40011000
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40011400 	.word	0x40011400
 8003fc8:	40020800 	.word	0x40020800

08003fcc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_FMC_MspInit+0x100>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d16d      	bne.n	80040c4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HAL_FMC_MspInit+0x100>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <HAL_FMC_MspInit+0x104>)
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <HAL_FMC_MspInit+0x104>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6393      	str	r3, [r2, #56]	; 0x38
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <HAL_FMC_MspInit+0x104>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004006:	f64f 7383 	movw	r3, #65411	; 0xff83
 800400a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004018:	230c      	movs	r3, #12
 800401a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	4619      	mov	r1, r3
 8004020:	482c      	ldr	r0, [pc, #176]	; (80040d4 <HAL_FMC_MspInit+0x108>)
 8004022:	f001 fbb5 	bl	8005790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004026:	f248 1333 	movw	r3, #33075	; 0x8133
 800402a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004038:	230c      	movs	r3, #12
 800403a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4825      	ldr	r0, [pc, #148]	; (80040d8 <HAL_FMC_MspInit+0x10c>)
 8004042:	f001 fba5 	bl	8005790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004046:	f24c 7303 	movw	r3, #50947	; 0xc703
 800404a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004058:	230c      	movs	r3, #12
 800405a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	4619      	mov	r1, r3
 8004060:	481e      	ldr	r0, [pc, #120]	; (80040dc <HAL_FMC_MspInit+0x110>)
 8004062:	f001 fb95 	bl	8005790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004066:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800406a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004078:	230c      	movs	r3, #12
 800407a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4817      	ldr	r0, [pc, #92]	; (80040e0 <HAL_FMC_MspInit+0x114>)
 8004082:	f001 fb85 	bl	8005790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004086:	2328      	movs	r3, #40	; 0x28
 8004088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004092:	2303      	movs	r3, #3
 8004094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004096:	230c      	movs	r3, #12
 8004098:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4811      	ldr	r0, [pc, #68]	; (80040e4 <HAL_FMC_MspInit+0x118>)
 80040a0:	f001 fb76 	bl	8005790 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040a4:	2308      	movs	r3, #8
 80040a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040b4:	230c      	movs	r3, #12
 80040b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	480a      	ldr	r0, [pc, #40]	; (80040e8 <HAL_FMC_MspInit+0x11c>)
 80040be:	f001 fb67 	bl	8005790 <HAL_GPIO_Init>
 80040c2:	e000      	b.n	80040c6 <HAL_FMC_MspInit+0xfa>
    return;
 80040c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200004f8 	.word	0x200004f8
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40021800 	.word	0x40021800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40021c00 	.word	0x40021c00
 80040e8:	40020800 	.word	0x40020800

080040ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80040f4:	f7ff ff6a 	bl	8003fcc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	; 0x30
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004110:	2200      	movs	r2, #0
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	2036      	movs	r0, #54	; 0x36
 8004116:	f000 fdd9 	bl	8004ccc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800411a:	2036      	movs	r0, #54	; 0x36
 800411c:	f000 fdf2 	bl	8004d04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <HAL_InitTick+0xa0>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_InitTick+0xa0>)
 8004126:	f043 0310 	orr.w	r3, r3, #16
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_InitTick+0xa0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004138:	f107 0210 	add.w	r2, r7, #16
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f003 fbf0 	bl	8007928 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004148:	f003 fbc6 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 800414c:	4603      	mov	r3, r0
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_InitTick+0xa4>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0c9b      	lsrs	r3, r3, #18
 800415c:	3b01      	subs	r3, #1
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_InitTick+0xa8>)
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_InitTick+0xac>)
 8004164:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_InitTick+0xa8>)
 8004168:	f240 32e7 	movw	r2, #999	; 0x3e7
 800416c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_InitTick+0xa8>)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_InitTick+0xa8>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_InitTick+0xa8>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004180:	4809      	ldr	r0, [pc, #36]	; (80041a8 <HAL_InitTick+0xa8>)
 8004182:	f004 fd90 	bl	8008ca6 <HAL_TIM_Base_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800418c:	4806      	ldr	r0, [pc, #24]	; (80041a8 <HAL_InitTick+0xa8>)
 800418e:	f004 fdb5 	bl	8008cfc <HAL_TIM_Base_Start_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	431bde83 	.word	0x431bde83
 80041a8:	20008cf4 	.word	0x20008cf4
 80041ac:	40001000 	.word	0x40001000

080041b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <NMI_Handler+0x4>

080041b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ba:	e7fe      	b.n	80041ba <HardFault_Handler+0x4>

080041bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <MemManage_Handler+0x4>

080041c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler+0x4>

080041c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <UsageFault_Handler+0x4>

080041ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <USART1_IRQHandler+0x10>)
 80041e2:	f005 ff7f 	bl	800a0e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200089d4 	.word	0x200089d4

080041f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80041f4:	4803      	ldr	r0, [pc, #12]	; (8004204 <TIM6_DAC_IRQHandler+0x14>)
 80041f6:	f000 fdb5 	bl	8004d64 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80041fa:	4803      	ldr	r0, [pc, #12]	; (8004208 <TIM6_DAC_IRQHandler+0x18>)
 80041fc:	f004 fddd 	bl	8008dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20008a58 	.word	0x20008a58
 8004208:	20008cf4 	.word	0x20008cf4

0800420c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <LTDC_IRQHandler+0x10>)
 8004212:	f002 fc0b 	bl	8006a2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000889c 	.word	0x2000889c

08004220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <_sbrk+0x5c>)
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <_sbrk+0x60>)
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <_sbrk+0x64>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <_sbrk+0x64>)
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <_sbrk+0x68>)
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <_sbrk+0x64>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	429a      	cmp	r2, r3
 800424e:	d207      	bcs.n	8004260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004250:	f009 fac2 	bl	800d7d8 <__errno>
 8004254:	4602      	mov	r2, r0
 8004256:	230c      	movs	r3, #12
 8004258:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	e009      	b.n	8004274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <_sbrk+0x64>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	4a05      	ldr	r2, [pc, #20]	; (8004284 <_sbrk+0x64>)
 8004270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004272:	68fb      	ldr	r3, [r7, #12]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20050000 	.word	0x20050000
 8004280:	00000400 	.word	0x00000400
 8004284:	200004fc 	.word	0x200004fc
 8004288:	20008d40 	.word	0x20008d40

0800428c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <SystemInit+0x28>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <SystemInit+0x28>)
 8004298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800429c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SystemInit+0x28>)
 80042a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042a6:	609a      	str	r2, [r3, #8]
#endif
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042be:	e003      	b.n	80042c8 <LoopCopyDataInit>

080042c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042c6:	3104      	adds	r1, #4

080042c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042c8:	480b      	ldr	r0, [pc, #44]	; (80042f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042d0:	d3f6      	bcc.n	80042c0 <CopyDataInit>
  ldr  r2, =_sbss
 80042d2:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042d4:	e002      	b.n	80042dc <LoopFillZerobss>

080042d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042d8:	f842 3b04 	str.w	r3, [r2], #4

080042dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042e0:	d3f9      	bcc.n	80042d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042e2:	f7ff ffd3 	bl	800428c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042e6:	f009 fa7d 	bl	800d7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ea:	f7fc fb57 	bl	800099c <main>
  bx  lr    
 80042ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80042f4:	080100e0 	.word	0x080100e0
  ldr  r0, =_sdata
 80042f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042fc:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8004300:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8004304:	20008d3c 	.word	0x20008d3c

08004308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004308:	e7fe      	b.n	8004308 <ADC_IRQHandler>

0800430a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800430e:	2003      	movs	r0, #3
 8004310:	f000 fcd1 	bl	8004cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004314:	2000      	movs	r0, #0
 8004316:	f7ff fef3 	bl	8004100 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800431a:	f7ff f9b7 	bl	800368c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_IncTick+0x20>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_IncTick+0x24>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4413      	add	r3, r2
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_IncTick+0x24>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000050 	.word	0x20000050
 8004348:	20008d34 	.word	0x20008d34

0800434c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return uwTick;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_GetTick+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20008d34 	.word	0x20008d34

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff ffee 	bl	800434c <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_Delay+0x40>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800438a:	bf00      	nop
 800438c:	f7ff ffde 	bl	800434c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000050 	.word	0x20000050

080043a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e031      	b.n	8004422 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff f988 	bl	80036dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_ADC_Init+0x84>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	f043 0202 	orr.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fab6 	bl	8004968 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
 8004412:	e001      	b.n	8004418 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	ffffeefd 	.word	0xffffeefd

08004430 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_ADC_Start+0x1a>
 8004446:	2302      	movs	r3, #2
 8004448:	e0a0      	b.n	800458c <HAL_ADC_Start+0x15c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d018      	beq.n	8004492 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004470:	4b49      	ldr	r3, [pc, #292]	; (8004598 <HAL_ADC_Start+0x168>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a49      	ldr	r2, [pc, #292]	; (800459c <HAL_ADC_Start+0x16c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	0c9a      	lsrs	r2, r3, #18
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004484:	e002      	b.n	800448c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b01      	subs	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f9      	bne.n	8004486 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d174      	bne.n	800458a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <HAL_ADC_Start+0x170>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d106      	bne.n	80044ea <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	f023 0206 	bic.w	r2, r3, #6
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	645a      	str	r2, [r3, #68]	; 0x44
 80044e8:	e002      	b.n	80044f0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004500:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <HAL_ADC_Start+0x174>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d136      	bne.n	800458a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	e02d      	b.n	800458a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_ADC_Start+0x178>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10e      	bne.n	8004556 <HAL_ADC_Start+0x126>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004554:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_ADC_Start+0x174>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HAL_ADC_Start+0x17c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10e      	bne.n	800458a <HAL_ADC_Start+0x15a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004588:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000048 	.word	0x20000048
 800459c:	431bde83 	.word	0x431bde83
 80045a0:	fffff8fe 	.word	0xfffff8fe
 80045a4:	40012300 	.word	0x40012300
 80045a8:	40012000 	.word	0x40012000
 80045ac:	40012200 	.word	0x40012200

080045b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045cc:	d113      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d10b      	bne.n	80045f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e05c      	b.n	80046b0 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80045f6:	f7ff fea9 	bl	800434c <HAL_GetTick>
 80045fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045fc:	e01a      	b.n	8004634 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d016      	beq.n	8004634 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_ADC_PollForConversion+0x6c>
 800460c:	f7ff fe9e 	bl	800434c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d20b      	bcs.n	8004634 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0204 	orr.w	r2, r3, #4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03d      	b.n	80046b0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d1dd      	bne.n	80045fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0212 	mvn.w	r2, #18
 800464a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d123      	bne.n	80046ae <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11f      	bne.n	80046ae <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004686:	2b00      	cmp	r3, #0
 8004688:	d111      	bne.n	80046ae <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e12a      	b.n	8004946 <HAL_ADC_ConfigChannel+0x272>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	d93a      	bls.n	8004776 <HAL_ADC_ConfigChannel+0xa2>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004708:	d035      	beq.n	8004776 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68d9      	ldr	r1, [r3, #12]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	3b1e      	subs	r3, #30
 8004720:	2207      	movs	r2, #7
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	400a      	ands	r2, r1
 800472e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a87      	ldr	r2, [pc, #540]	; (8004954 <HAL_ADC_ConfigChannel+0x280>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10a      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	061a      	lsls	r2, r3, #24
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800474e:	e035      	b.n	80047bc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68d9      	ldr	r1, [r3, #12]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	4603      	mov	r3, r0
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4403      	add	r3, r0
 8004768:	3b1e      	subs	r3, #30
 800476a:	409a      	lsls	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004774:	e022      	b.n	80047bc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6919      	ldr	r1, [r3, #16]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	2207      	movs	r2, #7
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43da      	mvns	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	400a      	ands	r2, r1
 8004798:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6919      	ldr	r1, [r3, #16]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	4603      	mov	r3, r0
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4403      	add	r3, r0
 80047b2:	409a      	lsls	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d824      	bhi.n	800480e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	3b05      	subs	r3, #5
 80047d6:	221f      	movs	r2, #31
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43da      	mvns	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	400a      	ands	r2, r1
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	4618      	mov	r0, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	3b05      	subs	r3, #5
 8004800:	fa00 f203 	lsl.w	r2, r0, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	635a      	str	r2, [r3, #52]	; 0x34
 800480c:	e04c      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d824      	bhi.n	8004860 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	3b23      	subs	r3, #35	; 0x23
 8004828:	221f      	movs	r2, #31
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	400a      	ands	r2, r1
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	3b23      	subs	r3, #35	; 0x23
 8004852:	fa00 f203 	lsl.w	r2, r0, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
 800485e:	e023      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	3b41      	subs	r3, #65	; 0x41
 8004872:	221f      	movs	r2, #31
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	43da      	mvns	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	400a      	ands	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	4618      	mov	r0, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	3b41      	subs	r3, #65	; 0x41
 800489c:	fa00 f203 	lsl.w	r2, r0, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <HAL_ADC_ConfigChannel+0x284>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10a      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1f4>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ba:	d105      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80048bc:	4b27      	ldr	r3, [pc, #156]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 80048c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80048c6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a22      	ldr	r2, [pc, #136]	; (8004958 <HAL_ADC_ConfigChannel+0x284>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d109      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x212>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b12      	cmp	r3, #18
 80048d8:	d105      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 80048e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_ADC_ConfigChannel+0x284>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d125      	bne.n	800493c <HAL_ADC_ConfigChannel+0x268>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <HAL_ADC_ConfigChannel+0x280>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x22e>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b11      	cmp	r3, #17
 8004900:	d11c      	bne.n	800493c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_ADC_ConfigChannel+0x288>)
 8004908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800490c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <HAL_ADC_ConfigChannel+0x280>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d111      	bne.n	800493c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_ADC_ConfigChannel+0x28c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a11      	ldr	r2, [pc, #68]	; (8004964 <HAL_ADC_ConfigChannel+0x290>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0c9a      	lsrs	r2, r3, #18
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800492e:	e002      	b.n	8004936 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f9      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	10000012 	.word	0x10000012
 8004958:	40012000 	.word	0x40012000
 800495c:	40012300 	.word	0x40012300
 8004960:	20000048 	.word	0x20000048
 8004964:	431bde83 	.word	0x431bde83

08004968 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004970:	4b78      	ldr	r3, [pc, #480]	; (8004b54 <ADC_Init+0x1ec>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <ADC_Init+0x1ec>)
 8004976:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800497a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800497c:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <ADC_Init+0x1ec>)
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4973      	ldr	r1, [pc, #460]	; (8004b54 <ADC_Init+0x1ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	4a58      	ldr	r2, [pc, #352]	; (8004b58 <ADC_Init+0x1f0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6899      	ldr	r1, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	e00f      	b.n	8004a62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0202 	bic.w	r2, r2, #2
 8004a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	005a      	lsls	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	3b01      	subs	r3, #1
 8004abc:	035a      	lsls	r2, r3, #13
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e007      	b.n	8004ad8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	051a      	lsls	r2, r3, #20
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b1a:	025a      	lsls	r2, r3, #9
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	029a      	lsls	r2, r3, #10
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012300 	.word	0x40012300
 8004b58:	0f000001 	.word	0x0f000001

08004b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <__NVIC_SetPriorityGrouping+0x40>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <__NVIC_SetPriorityGrouping+0x40>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00
 8004ba0:	05fa0000 	.word	0x05fa0000

08004ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <__NVIC_GetPriorityGrouping+0x18>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	f003 0307 	and.w	r3, r3, #7
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	db0b      	blt.n	8004bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	4907      	ldr	r1, [pc, #28]	; (8004bf8 <__NVIC_EnableIRQ+0x38>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2001      	movs	r0, #1
 8004be2:	fa00 f202 	lsl.w	r2, r0, r2
 8004be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000e100 	.word	0xe000e100

08004bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	6039      	str	r1, [r7, #0]
 8004c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	db0a      	blt.n	8004c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	490c      	ldr	r1, [pc, #48]	; (8004c48 <__NVIC_SetPriority+0x4c>)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	0112      	lsls	r2, r2, #4
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c24:	e00a      	b.n	8004c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4908      	ldr	r1, [pc, #32]	; (8004c4c <__NVIC_SetPriority+0x50>)
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	3b04      	subs	r3, #4
 8004c34:	0112      	lsls	r2, r2, #4
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	440b      	add	r3, r1
 8004c3a:	761a      	strb	r2, [r3, #24]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	e000e100 	.word	0xe000e100
 8004c4c:	e000ed00 	.word	0xe000ed00

08004c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f1c3 0307 	rsb	r3, r3, #7
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	bf28      	it	cs
 8004c6e:	2304      	movcs	r3, #4
 8004c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d902      	bls.n	8004c80 <NVIC_EncodePriority+0x30>
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3b03      	subs	r3, #3
 8004c7e:	e000      	b.n	8004c82 <NVIC_EncodePriority+0x32>
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43da      	mvns	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	401a      	ands	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c98:	f04f 31ff 	mov.w	r1, #4294967295
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca2:	43d9      	mvns	r1, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca8:	4313      	orrs	r3, r2
         );
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3724      	adds	r7, #36	; 0x24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff4c 	bl	8004b5c <__NVIC_SetPriorityGrouping>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cde:	f7ff ff61 	bl	8004ba4 <__NVIC_GetPriorityGrouping>
 8004ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	6978      	ldr	r0, [r7, #20]
 8004cea:	f7ff ffb1 	bl	8004c50 <NVIC_EncodePriority>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff80 	bl	8004bfc <__NVIC_SetPriority>
}
 8004cfc:	bf00      	nop
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff54 	bl	8004bc0 <__NVIC_EnableIRQ>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e014      	b.n	8004d5c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	791b      	ldrb	r3, [r3, #4]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe fd38 	bl	80037b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	d118      	bne.n	8004dae <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004da6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f825 	bl	8004df8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbc:	d118      	bne.n	8004df0 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f043 0202 	orr.w	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004de8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f85b 	bl	8004ea6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	795b      	ldrb	r3, [r3, #5]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_DAC_ConfigChannel+0x20>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e036      	b.n	8004e9a <HAL_DAC_ConfigChannel+0x8e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004e40:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	22c0      	movs	r2, #192	; 0xc0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	400a      	ands	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ec8:	f7ff fa40 	bl	800434c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e099      	b.n	800500c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ef8:	e00f      	b.n	8004f1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004efa:	f7ff fa27 	bl	800434c <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d908      	bls.n	8004f1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2203      	movs	r2, #3
 8004f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e078      	b.n	800500c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e8      	bne.n	8004efa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <HAL_DMA_Init+0x158>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d107      	bne.n	8004f84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d117      	bne.n	8004fde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8df 	bl	8005184 <DMA_CheckFifoParam>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2240      	movs	r2, #64	; 0x40
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e016      	b.n	800500c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f896 	bl	8005118 <DMA_CalcBaseAndBitshift>
 8004fec:	4603      	mov	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	223f      	movs	r2, #63	; 0x3f
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	f010803f 	.word	0xf010803f

08005018 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e050      	b.n	80050cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d101      	bne.n	800503a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	e048      	b.n	80050cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2221      	movs	r2, #33	; 0x21
 8005078:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f84c 	bl	8005118 <DMA_CalcBaseAndBitshift>
 8005080:	4603      	mov	r3, r0
 8005082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	223f      	movs	r2, #63	; 0x3f
 800508a:	409a      	lsls	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d004      	beq.n	80050f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e00c      	b.n	800510c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2205      	movs	r2, #5
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	3b10      	subs	r3, #16
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <DMA_CalcBaseAndBitshift+0x60>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <DMA_CalcBaseAndBitshift+0x64>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d908      	bls.n	8005158 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <DMA_CalcBaseAndBitshift+0x68>)
 800514e:	4013      	ands	r3, r2
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	659a      	str	r2, [r3, #88]	; 0x58
 8005156:	e006      	b.n	8005166 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <DMA_CalcBaseAndBitshift+0x68>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	aaaaaaab 	.word	0xaaaaaaab
 800517c:	08010094 	.word	0x08010094
 8005180:	fffffc00 	.word	0xfffffc00

08005184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11f      	bne.n	80051de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d855      	bhi.n	8005250 <DMA_CheckFifoParam+0xcc>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <DMA_CheckFifoParam+0x28>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051cf 	.word	0x080051cf
 80051b4:	080051bd 	.word	0x080051bd
 80051b8:	08005251 	.word	0x08005251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d045      	beq.n	8005254 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051cc:	e042      	b.n	8005254 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051d6:	d13f      	bne.n	8005258 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051dc:	e03c      	b.n	8005258 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e6:	d121      	bne.n	800522c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d836      	bhi.n	800525c <DMA_CheckFifoParam+0xd8>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <DMA_CheckFifoParam+0x70>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005205 	.word	0x08005205
 80051f8:	0800520b 	.word	0x0800520b
 80051fc:	08005205 	.word	0x08005205
 8005200:	0800521d 	.word	0x0800521d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e02f      	b.n	800526a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d024      	beq.n	8005260 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521a:	e021      	b.n	8005260 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005224:	d11e      	bne.n	8005264 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800522a:	e01b      	b.n	8005264 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d902      	bls.n	8005238 <DMA_CheckFifoParam+0xb4>
 8005232:	2b03      	cmp	r3, #3
 8005234:	d003      	beq.n	800523e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005236:	e018      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
      break;
 800523c:	e015      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
      break;
 800524e:	e00b      	b.n	8005268 <DMA_CheckFifoParam+0xe4>
      break;
 8005250:	bf00      	nop
 8005252:	e00a      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;
 8005254:	bf00      	nop
 8005256:	e008      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;
 8005258:	bf00      	nop
 800525a:	e006      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;
 800525c:	bf00      	nop
 800525e:	e004      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;
 8005260:	bf00      	nop
 8005262:	e002      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;   
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <DMA_CheckFifoParam+0xe6>
      break;
 8005268:	bf00      	nop
    }
  } 
  
  return status; 
 800526a:	7bfb      	ldrb	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e039      	b.n	80052fe <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fe fad2 	bl	8003848 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c8:	f023 0107 	bic.w	r1, r3, #7
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_DMA2D_Init+0x90>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68d1      	ldr	r1, [r2, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	ffffc000 	.word	0xffffc000

0800530c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_DMA2D_Start+0x1c>
 8005324:	2302      	movs	r3, #2
 8005326:	e018      	b.n	800535a <HAL_DMA2D_Start+0x4e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f988 	bl	8005658 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d056      	beq.n	800542c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800537e:	f7fe ffe5 	bl	800434c <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005384:	e04b      	b.n	800541e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005394:	2b00      	cmp	r3, #0
 8005396:	d023      	beq.n	80053e0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	f043 0202 	orr.w	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2221      	movs	r2, #33	; 0x21
 80053ca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0a5      	b.n	800552c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d01a      	beq.n	800541e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80053e8:	f7fe ffb0 	bl	800434c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <HAL_DMA2D_PollForTransfer+0x9c>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10f      	bne.n	800541e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2203      	movs	r2, #3
 800540e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e086      	b.n	800552c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ac      	beq.n	8005386 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d061      	beq.n	8005512 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800544e:	f7fe ff7d 	bl	800434c <HAL_GetTick>
 8005452:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005454:	e056      	b.n	8005504 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02e      	beq.n	80054c6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	f043 0204 	orr.w	r2, r3, #4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	f043 0202 	orr.w	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2229      	movs	r2, #41	; 0x29
 80054b0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2204      	movs	r2, #4
 80054b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e032      	b.n	800552c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d01a      	beq.n	8005504 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80054ce:	f7fe ff3d 	bl	800434c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <HAL_DMA2D_PollForTransfer+0x182>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2203      	movs	r2, #3
 80054f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e013      	b.n	800552c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0a1      	beq.n	8005456 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2212      	movs	r2, #18
 8005518:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_DMA2D_ConfigLayer+0x20>
 8005550:	2302      	movs	r3, #2
 8005552:	e079      	b.n	8005648 <HAL_DMA2D_ConfigLayer+0x114>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	3318      	adds	r3, #24
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800557e:	4b35      	ldr	r3, [pc, #212]	; (8005654 <HAL_DMA2D_ConfigLayer+0x120>)
 8005580:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b0a      	cmp	r3, #10
 8005588:	d003      	beq.n	8005592 <HAL_DMA2D_ConfigLayer+0x5e>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d107      	bne.n	80055a2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e005      	b.n	80055ae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d120      	bne.n	80055f6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	43db      	mvns	r3, r3
 80055be:	ea02 0103 	and.w	r1, r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b0a      	cmp	r3, #10
 80055dc:	d003      	beq.n	80055e6 <HAL_DMA2D_ConfigLayer+0xb2>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d127      	bne.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
 80055f4:	e01f      	b.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	43db      	mvns	r3, r3
 8005600:	ea02 0103 	and.w	r1, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b0a      	cmp	r3, #10
 800561e:	d003      	beq.n	8005628 <HAL_DMA2D_ConfigLayer+0xf4>
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b09      	cmp	r3, #9
 8005626:	d106      	bne.n	8005636 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005634:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	ff03000f 	.word	0xff03000f

08005658 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005658:	b480      	push	{r7}
 800565a:	b08b      	sub	sp, #44	; 0x2c
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	041a      	lsls	r2, r3, #16
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	431a      	orrs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005690:	d174      	bne.n	800577c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005698:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056a8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	431a      	orrs	r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
 80056c8:	e053      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	e048      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d111      	bne.n	800570c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	0cdb      	lsrs	r3, r3, #19
 80056ec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	0a9b      	lsrs	r3, r3, #10
 80056f2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	08db      	lsrs	r3, r3, #3
 80056f8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	02db      	lsls	r3, r3, #11
 8005702:	4313      	orrs	r3, r2
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	e032      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d117      	bne.n	8005744 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	0fdb      	lsrs	r3, r3, #31
 8005718:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	0cdb      	lsrs	r3, r3, #19
 800571e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	0adb      	lsrs	r3, r3, #11
 8005724:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	431a      	orrs	r2, r3
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	03db      	lsls	r3, r3, #15
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e016      	b.n	8005772 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	0f1b      	lsrs	r3, r3, #28
 8005748:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	0d1b      	lsrs	r3, r3, #20
 800574e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	0b1b      	lsrs	r3, r3, #12
 8005754:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	011a      	lsls	r2, r3, #4
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	431a      	orrs	r2, r3
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	031b      	lsls	r3, r3, #12
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800577a:	e003      	b.n	8005784 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	60da      	str	r2, [r3, #12]
}
 8005784:	bf00      	nop
 8005786:	372c      	adds	r7, #44	; 0x2c
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e175      	b.n	8005a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80057b0:	2201      	movs	r2, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	f040 8164 	bne.w	8005a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d00b      	beq.n	80057ee <HAL_GPIO_Init+0x5e>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d007      	beq.n	80057ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e2:	2b11      	cmp	r3, #17
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b12      	cmp	r3, #18
 80057ec:	d130      	bne.n	8005850 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2203      	movs	r2, #3
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x100>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b12      	cmp	r3, #18
 800588e:	d123      	bne.n	80058d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	08da      	lsrs	r2, r3, #3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3208      	adds	r2, #8
 8005898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	220f      	movs	r2, #15
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	08da      	lsrs	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3208      	adds	r2, #8
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	2203      	movs	r2, #3
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0203 	and.w	r2, r3, #3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80be 	beq.w	8005a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800591a:	4b65      	ldr	r3, [pc, #404]	; (8005ab0 <HAL_GPIO_Init+0x320>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	4a64      	ldr	r2, [pc, #400]	; (8005ab0 <HAL_GPIO_Init+0x320>)
 8005920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005924:	6453      	str	r3, [r2, #68]	; 0x44
 8005926:	4b62      	ldr	r3, [pc, #392]	; (8005ab0 <HAL_GPIO_Init+0x320>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005932:	4a60      	ldr	r2, [pc, #384]	; (8005ab4 <HAL_GPIO_Init+0x324>)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	220f      	movs	r2, #15
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <HAL_GPIO_Init+0x328>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d037      	beq.n	80059ce <HAL_GPIO_Init+0x23e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a56      	ldr	r2, [pc, #344]	; (8005abc <HAL_GPIO_Init+0x32c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d031      	beq.n	80059ca <HAL_GPIO_Init+0x23a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a55      	ldr	r2, [pc, #340]	; (8005ac0 <HAL_GPIO_Init+0x330>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02b      	beq.n	80059c6 <HAL_GPIO_Init+0x236>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a54      	ldr	r2, [pc, #336]	; (8005ac4 <HAL_GPIO_Init+0x334>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d025      	beq.n	80059c2 <HAL_GPIO_Init+0x232>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a53      	ldr	r2, [pc, #332]	; (8005ac8 <HAL_GPIO_Init+0x338>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01f      	beq.n	80059be <HAL_GPIO_Init+0x22e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a52      	ldr	r2, [pc, #328]	; (8005acc <HAL_GPIO_Init+0x33c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d019      	beq.n	80059ba <HAL_GPIO_Init+0x22a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a51      	ldr	r2, [pc, #324]	; (8005ad0 <HAL_GPIO_Init+0x340>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_GPIO_Init+0x226>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a50      	ldr	r2, [pc, #320]	; (8005ad4 <HAL_GPIO_Init+0x344>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00d      	beq.n	80059b2 <HAL_GPIO_Init+0x222>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a4f      	ldr	r2, [pc, #316]	; (8005ad8 <HAL_GPIO_Init+0x348>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <HAL_GPIO_Init+0x21e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a4e      	ldr	r2, [pc, #312]	; (8005adc <HAL_GPIO_Init+0x34c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_GPIO_Init+0x21a>
 80059a6:	2309      	movs	r3, #9
 80059a8:	e012      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059aa:	230a      	movs	r3, #10
 80059ac:	e010      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059ae:	2308      	movs	r3, #8
 80059b0:	e00e      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059b2:	2307      	movs	r3, #7
 80059b4:	e00c      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059b6:	2306      	movs	r3, #6
 80059b8:	e00a      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059ba:	2305      	movs	r3, #5
 80059bc:	e008      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059be:	2304      	movs	r3, #4
 80059c0:	e006      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059c2:	2303      	movs	r3, #3
 80059c4:	e004      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e002      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <HAL_GPIO_Init+0x240>
 80059ce:	2300      	movs	r3, #0
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	f002 0203 	and.w	r2, r2, #3
 80059d6:	0092      	lsls	r2, r2, #2
 80059d8:	4093      	lsls	r3, r2
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059e0:	4934      	ldr	r1, [pc, #208]	; (8005ab4 <HAL_GPIO_Init+0x324>)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	3302      	adds	r3, #2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059ee:	4b3c      	ldr	r3, [pc, #240]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a12:	4a33      	ldr	r2, [pc, #204]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a18:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a42:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <HAL_GPIO_Init+0x350>)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	f67f ae86 	bls.w	80057b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005aa4:	bf00      	nop
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	40013800 	.word	0x40013800
 8005ab8:	40020000 	.word	0x40020000
 8005abc:	40020400 	.word	0x40020400
 8005ac0:	40020800 	.word	0x40020800
 8005ac4:	40020c00 	.word	0x40020c00
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40021400 	.word	0x40021400
 8005ad0:	40021800 	.word	0x40021800
 8005ad4:	40021c00 	.word	0x40021c00
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	40022400 	.word	0x40022400
 8005ae0:	40013c00 	.word	0x40013c00

08005ae4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e0d9      	b.n	8005cb4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b00:	2201      	movs	r2, #1
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	f040 80c9 	bne.w	8005cae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005b1c:	4a6a      	ldr	r2, [pc, #424]	; (8005cc8 <HAL_GPIO_DeInit+0x1e4>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	089b      	lsrs	r3, r3, #2
 8005b22:	3302      	adds	r3, #2
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	220f      	movs	r2, #15
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a62      	ldr	r2, [pc, #392]	; (8005ccc <HAL_GPIO_DeInit+0x1e8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d037      	beq.n	8005bb6 <HAL_GPIO_DeInit+0xd2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a61      	ldr	r2, [pc, #388]	; (8005cd0 <HAL_GPIO_DeInit+0x1ec>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d031      	beq.n	8005bb2 <HAL_GPIO_DeInit+0xce>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a60      	ldr	r2, [pc, #384]	; (8005cd4 <HAL_GPIO_DeInit+0x1f0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02b      	beq.n	8005bae <HAL_GPIO_DeInit+0xca>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a5f      	ldr	r2, [pc, #380]	; (8005cd8 <HAL_GPIO_DeInit+0x1f4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d025      	beq.n	8005baa <HAL_GPIO_DeInit+0xc6>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <HAL_GPIO_DeInit+0x1f8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01f      	beq.n	8005ba6 <HAL_GPIO_DeInit+0xc2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a5d      	ldr	r2, [pc, #372]	; (8005ce0 <HAL_GPIO_DeInit+0x1fc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d019      	beq.n	8005ba2 <HAL_GPIO_DeInit+0xbe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a5c      	ldr	r2, [pc, #368]	; (8005ce4 <HAL_GPIO_DeInit+0x200>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_GPIO_DeInit+0xba>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a5b      	ldr	r2, [pc, #364]	; (8005ce8 <HAL_GPIO_DeInit+0x204>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00d      	beq.n	8005b9a <HAL_GPIO_DeInit+0xb6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a5a      	ldr	r2, [pc, #360]	; (8005cec <HAL_GPIO_DeInit+0x208>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <HAL_GPIO_DeInit+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_GPIO_DeInit+0x20c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_GPIO_DeInit+0xae>
 8005b8e:	2309      	movs	r3, #9
 8005b90:	e012      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005b92:	230a      	movs	r3, #10
 8005b94:	e010      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005b96:	2308      	movs	r3, #8
 8005b98:	e00e      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005b9a:	2307      	movs	r3, #7
 8005b9c:	e00c      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	e00a      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005ba2:	2305      	movs	r3, #5
 8005ba4:	e008      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e006      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005baa:	2303      	movs	r3, #3
 8005bac:	e004      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e002      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_GPIO_DeInit+0xd4>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	f002 0203 	and.w	r2, r2, #3
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4093      	lsls	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d132      	bne.n	8005c2e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005bc8:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	4948      	ldr	r1, [pc, #288]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bd6:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	4945      	ldr	r1, [pc, #276]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	4941      	ldr	r1, [pc, #260]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bf2:	4b40      	ldr	r3, [pc, #256]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	493e      	ldr	r1, [pc, #248]	; (8005cf4 <HAL_GPIO_DeInit+0x210>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	220f      	movs	r2, #15
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_GPIO_DeInit+0x1e4>)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	3302      	adds	r3, #2
 8005c18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	4829      	ldr	r0, [pc, #164]	; (8005cc8 <HAL_GPIO_DeInit+0x1e4>)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	400a      	ands	r2, r1
 8005c28:	3302      	adds	r3, #2
 8005c2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	2103      	movs	r1, #3
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	401a      	ands	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	08da      	lsrs	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3208      	adds	r2, #8
 8005c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	220f      	movs	r2, #15
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	08d2      	lsrs	r2, r2, #3
 8005c64:	4019      	ands	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3208      	adds	r2, #8
 8005c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2103      	movs	r1, #3
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	401a      	ands	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	2103      	movs	r1, #3
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	f67f af22 	bls.w	8005b00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40013800 	.word	0x40013800
 8005ccc:	40020000 	.word	0x40020000
 8005cd0:	40020400 	.word	0x40020400
 8005cd4:	40020800 	.word	0x40020800
 8005cd8:	40020c00 	.word	0x40020c00
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	40021400 	.word	0x40021400
 8005ce4:	40021800 	.word	0x40021800
 8005ce8:	40021c00 	.word	0x40021c00
 8005cec:	40022000 	.word	0x40022000
 8005cf0:	40022400 	.word	0x40022400
 8005cf4:	40013c00 	.word	0x40013c00

08005cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
 8005d04:	4613      	mov	r3, r2
 8005d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d08:	787b      	ldrb	r3, [r7, #1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d14:	e003      	b.n	8005d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	041a      	lsls	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	619a      	str	r2, [r3, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fd fd98 	bl	8003888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	e006      	b.n	8005db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d104      	bne.n	8005dc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <HAL_I2C_Init+0x11c>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	ea42 0103 	orr.w	r1, r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	02008000 	.word	0x02008000

08005e4c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e021      	b.n	8005ea2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2224      	movs	r2, #36	; 0x24
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fd fd7e 	bl	8003978 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	817b      	strh	r3, [r7, #10]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	813b      	strh	r3, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	f040 80f9 	bne.w	80060c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_I2C_Mem_Write+0x34>
 8005eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0ed      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_Mem_Write+0x4e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e0e6      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f02:	f7fe fa23 	bl	800434c <HAL_GetTick>
 8005f06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2319      	movs	r3, #25
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fad1 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0d1      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2221      	movs	r2, #33	; 0x21
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a3a      	ldr	r2, [r7, #32]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f4c:	88f8      	ldrh	r0, [r7, #6]
 8005f4e:	893a      	ldrh	r2, [r7, #8]
 8005f50:	8979      	ldrh	r1, [r7, #10]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f9e1 	bl	8006324 <I2C_RequestMemoryWrite>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0a9      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2bff      	cmp	r3, #255	; 0xff
 8005f7c:	d90e      	bls.n	8005f9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	22ff      	movs	r2, #255	; 0xff
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	8979      	ldrh	r1, [r7, #10]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fbb3 	bl	8006700 <I2C_TransferConfig>
 8005f9a:	e00f      	b.n	8005fbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	8979      	ldrh	r1, [r7, #10]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fba2 	bl	8006700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fabb 	bl	800653c <I2C_WaitOnTXISFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e07b      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d034      	beq.n	8006074 <HAL_I2C_Mem_Write+0x1c8>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d130      	bne.n	8006074 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2200      	movs	r2, #0
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fa4d 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e04d      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2bff      	cmp	r3, #255	; 0xff
 8006034:	d90e      	bls.n	8006054 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006040:	b2da      	uxtb	r2, r3
 8006042:	8979      	ldrh	r1, [r7, #10]
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fb57 	bl	8006700 <I2C_TransferConfig>
 8006052:	e00f      	b.n	8006074 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	b2da      	uxtb	r2, r3
 8006064:	8979      	ldrh	r1, [r7, #10]
 8006066:	2300      	movs	r3, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fb46 	bl	8006700 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d19e      	bne.n	8005fbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fa9a 	bl	80065bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e01a      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2220      	movs	r2, #32
 8006098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <HAL_I2C_Mem_Write+0x224>)
 80060a6:	400b      	ands	r3, r1
 80060a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e000      	b.n	80060c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	fe00e800 	.word	0xfe00e800

080060d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	817b      	strh	r3, [r7, #10]
 80060e6:	460b      	mov	r3, r1
 80060e8:	813b      	strh	r3, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	f040 80fd 	bne.w	80062f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_I2C_Mem_Read+0x34>
 8006102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0f1      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_I2C_Mem_Read+0x4e>
 800611e:	2302      	movs	r3, #2
 8006120:	e0ea      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800612a:	f7fe f90f 	bl	800434c <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2319      	movs	r3, #25
 8006136:	2201      	movs	r2, #1
 8006138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f9bd 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0d5      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2222      	movs	r2, #34	; 0x22
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2240      	movs	r2, #64	; 0x40
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800616c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006174:	88f8      	ldrh	r0, [r7, #6]
 8006176:	893a      	ldrh	r2, [r7, #8]
 8006178:	8979      	ldrh	r1, [r7, #10]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	4603      	mov	r3, r0
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f921 	bl	80063cc <I2C_RequestMemoryRead>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0ad      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d90e      	bls.n	80061c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	8979      	ldrh	r1, [r7, #10]
 80061b4:	4b52      	ldr	r3, [pc, #328]	; (8006300 <HAL_I2C_Mem_Read+0x22c>)
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fa9f 	bl	8006700 <I2C_TransferConfig>
 80061c2:	e00f      	b.n	80061e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	8979      	ldrh	r1, [r7, #10]
 80061d6:	4b4a      	ldr	r3, [pc, #296]	; (8006300 <HAL_I2C_Mem_Read+0x22c>)
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa8e 	bl	8006700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	2200      	movs	r2, #0
 80061ec:	2104      	movs	r1, #4
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f964 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07c      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d034      	beq.n	80062a4 <HAL_I2C_Mem_Read+0x1d0>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d130      	bne.n	80062a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	2200      	movs	r2, #0
 800624a:	2180      	movs	r1, #128	; 0x80
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f935 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04d      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2bff      	cmp	r3, #255	; 0xff
 8006264:	d90e      	bls.n	8006284 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006270:	b2da      	uxtb	r2, r3
 8006272:	8979      	ldrh	r1, [r7, #10]
 8006274:	2300      	movs	r3, #0
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fa3f 	bl	8006700 <I2C_TransferConfig>
 8006282:	e00f      	b.n	80062a4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006292:	b2da      	uxtb	r2, r3
 8006294:	8979      	ldrh	r1, [r7, #10]
 8006296:	2300      	movs	r3, #0
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fa2e 	bl	8006700 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d19a      	bne.n	80061e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f982 	bl	80065bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e01a      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2220      	movs	r2, #32
 80062c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <HAL_I2C_Mem_Read+0x230>)
 80062d6:	400b      	ands	r3, r1
 80062d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80062f6:	2302      	movs	r3, #2
  }
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	80002400 	.word	0x80002400
 8006304:	fe00e800 	.word	0xfe00e800

08006308 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006316:	b2db      	uxtb	r3, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	461a      	mov	r2, r3
 8006332:	4603      	mov	r3, r0
 8006334:	817b      	strh	r3, [r7, #10]
 8006336:	460b      	mov	r3, r1
 8006338:	813b      	strh	r3, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	8979      	ldrh	r1, [r7, #10]
 8006344:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <I2C_RequestMemoryWrite+0xa4>)
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f9d7 	bl	8006700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f8f0 	bl	800653c <I2C_WaitOnTXISFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e02c      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800636c:	893b      	ldrh	r3, [r7, #8]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
 8006376:	e015      	b.n	80063a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006378:	893b      	ldrh	r3, [r7, #8]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	b29b      	uxth	r3, r3
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f8d6 	bl	800653c <I2C_WaitOnTXISFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e012      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800639a:	893b      	ldrh	r3, [r7, #8]
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f884 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	80002000 	.word	0x80002000

080063cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <I2C_RequestMemoryRead+0xa4>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f984 	bl	8006700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	69b9      	ldr	r1, [r7, #24]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f89d 	bl	800653c <I2C_WaitOnTXISFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e02c      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
 800641c:	e015      	b.n	800644a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800641e:	893b      	ldrh	r3, [r7, #8]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	b29b      	uxth	r3, r3
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f883 	bl	800653c <I2C_WaitOnTXISFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e012      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2200      	movs	r2, #0
 8006452:	2140      	movs	r1, #64	; 0x40
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f831 	bl	80064bc <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	80002000 	.word	0x80002000

08006474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d103      	bne.n	8006492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d007      	beq.n	80064b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	619a      	str	r2, [r3, #24]
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064cc:	e022      	b.n	8006514 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d01e      	beq.n	8006514 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fd ff39 	bl	800434c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d113      	bne.n	8006514 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e00f      	b.n	8006534 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	429a      	cmp	r2, r3
 8006530:	d0cd      	beq.n	80064ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006548:	e02c      	b.n	80065a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f870 	bl	8006634 <I2C_IsAcknowledgeFailed>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e02a      	b.n	80065b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d01e      	beq.n	80065a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fd fef1 	bl	800434c <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d113      	bne.n	80065a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e007      	b.n	80065b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d1cb      	bne.n	800654a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c8:	e028      	b.n	800661c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f830 	bl	8006634 <I2C_IsAcknowledgeFailed>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e026      	b.n	800662c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fd feb5 	bl	800434c <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d113      	bne.n	800661c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f8:	f043 0220 	orr.w	r2, r3, #32
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e007      	b.n	800662c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b20      	cmp	r3, #32
 8006628:	d1cf      	bne.n	80065ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b10      	cmp	r3, #16
 800664c:	d151      	bne.n	80066f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800664e:	e022      	b.n	8006696 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d01e      	beq.n	8006696 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006658:	f7fd fe78 	bl	800434c <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <I2C_IsAcknowledgeFailed+0x3a>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d113      	bne.n	8006696 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e02e      	b.n	80066f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d1d5      	bne.n	8006650 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2210      	movs	r2, #16
 80066aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2220      	movs	r2, #32
 80066b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fedd 	bl	8006474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <I2C_IsAcknowledgeFailed+0xc8>)
 80066c6:	400b      	ands	r3, r1
 80066c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f043 0204 	orr.w	r2, r3, #4
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	fe00e800 	.word	0xfe00e800

08006700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	817b      	strh	r3, [r7, #10]
 800670e:	4613      	mov	r3, r2
 8006710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	0d5b      	lsrs	r3, r3, #21
 800671c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <I2C_TransferConfig+0x58>)
 8006722:	430b      	orrs	r3, r1
 8006724:	43db      	mvns	r3, r3
 8006726:	ea02 0103 	and.w	r1, r2, r3
 800672a:	897b      	ldrh	r3, [r7, #10]
 800672c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006730:	7a7b      	ldrb	r3, [r7, #9]
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	431a      	orrs	r2, r3
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	03ff63ff 	.word	0x03ff63ff

0800675c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b20      	cmp	r3, #32
 8006770:	d138      	bne.n	80067e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800677c:	2302      	movs	r3, #2
 800677e:	e032      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2224      	movs	r2, #36	; 0x24
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b20      	cmp	r3, #32
 8006806:	d139      	bne.n	800687c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006812:	2302      	movs	r3, #2
 8006814:	e033      	b.n	800687e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2224      	movs	r2, #36	; 0x24
 8006822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0201 	bic.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006844:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0bf      	b.n	8006a1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fd f89c 	bl	80039f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80068ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6899      	ldr	r1, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <HAL_LTDC_Init+0x19c>)
 8006900:	400b      	ands	r3, r1
 8006902:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6899      	ldr	r1, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4b3e      	ldr	r3, [pc, #248]	; (8006a28 <HAL_LTDC_Init+0x19c>)
 800692e:	400b      	ands	r3, r1
 8006930:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68d9      	ldr	r1, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6919      	ldr	r1, [r3, #16]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <HAL_LTDC_Init+0x19c>)
 800695c:	400b      	ands	r3, r1
 800695e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6919      	ldr	r1, [r3, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b27      	ldr	r3, [pc, #156]	; (8006a28 <HAL_LTDC_Init+0x19c>)
 800698a:	400b      	ands	r3, r1
 800698c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6959      	ldr	r1, [r3, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0206 	orr.w	r2, r2, #6
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	f000f800 	.word	0xf000f800

08006a2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d023      	beq.n	8006a96 <HAL_LTDC_IRQHandler+0x6a>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01e      	beq.n	8006a96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0204 	bic.w	r2, r2, #4
 8006a66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2204      	movs	r2, #4
 8006a84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f86f 	bl	8006b74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d023      	beq.n	8006ae8 <HAL_LTDC_IRQHandler+0xbc>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01e      	beq.n	8006ae8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0202 	bic.w	r2, r2, #2
 8006ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ac8:	f043 0202 	orr.w	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f846 	bl	8006b74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01b      	beq.n	8006b2a <HAL_LTDC_IRQHandler+0xfe>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d016      	beq.n	8006b2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f82f 	bl	8006b88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01b      	beq.n	8006b6c <HAL_LTDC_IRQHandler+0x140>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0208 	bic.w	r2, r2, #8
 8006b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2208      	movs	r2, #8
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f818 	bl	8006b9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bb0:	b5b0      	push	{r4, r5, r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_LTDC_ConfigLayer+0x1a>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e02c      	b.n	8006c24 <HAL_LTDC_ConfigLayer+0x74>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2134      	movs	r1, #52	; 0x34
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f81f 	bl	8006c48 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bdb0      	pop	{r4, r5, r7, pc}

08006c2c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c3a:	b2db      	uxtb	r3, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b089      	sub	sp, #36	; 0x24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c64:	4413      	add	r3, r2
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	01db      	lsls	r3, r3, #7
 8006c74:	4413      	add	r3, r2
 8006c76:	3384      	adds	r3, #132	; 0x84
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	01d2      	lsls	r2, r2, #7
 8006c84:	440a      	add	r2, r1
 8006c86:	3284      	adds	r2, #132	; 0x84
 8006c88:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c8c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c9e:	4413      	add	r3, r2
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	440b      	add	r3, r1
 8006cae:	3384      	adds	r3, #132	; 0x84
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cc6:	4413      	add	r3, r2
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	01db      	lsls	r3, r3, #7
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3384      	adds	r3, #132	; 0x84
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	01d2      	lsls	r2, r2, #7
 8006ce6:	440a      	add	r2, r1
 8006ce8:	3284      	adds	r2, #132	; 0x84
 8006cea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cfe:	4413      	add	r3, r2
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	01db      	lsls	r3, r3, #7
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3384      	adds	r3, #132	; 0x84
 8006d10:	4619      	mov	r1, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	4413      	add	r3, r2
 8006d24:	3384      	adds	r3, #132	; 0x84
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	01d2      	lsls	r2, r2, #7
 8006d32:	440a      	add	r2, r1
 8006d34:	3284      	adds	r2, #132	; 0x84
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	01db      	lsls	r3, r3, #7
 8006d46:	4413      	add	r3, r2
 8006d48:	3384      	adds	r3, #132	; 0x84
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	061b      	lsls	r3, r3, #24
 8006d6c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	01db      	lsls	r3, r3, #7
 8006d78:	4413      	add	r3, r2
 8006d7a:	3384      	adds	r3, #132	; 0x84
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	01db      	lsls	r3, r3, #7
 8006d88:	4413      	add	r3, r2
 8006d8a:	3384      	adds	r3, #132	; 0x84
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d98:	461a      	mov	r2, r3
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	01db      	lsls	r3, r3, #7
 8006dac:	440b      	add	r3, r1
 8006dae:	3384      	adds	r3, #132	; 0x84
 8006db0:	4619      	mov	r1, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	01db      	lsls	r3, r3, #7
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3384      	adds	r3, #132	; 0x84
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	4611      	mov	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	01d2      	lsls	r2, r2, #7
 8006dd2:	440a      	add	r2, r1
 8006dd4:	3284      	adds	r2, #132	; 0x84
 8006dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dda:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	01db      	lsls	r3, r3, #7
 8006de6:	4413      	add	r3, r2
 8006de8:	3384      	adds	r3, #132	; 0x84
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3384      	adds	r3, #132	; 0x84
 8006e00:	69da      	ldr	r2, [r3, #28]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	01db      	lsls	r3, r3, #7
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3384      	adds	r3, #132	; 0x84
 8006e10:	4619      	mov	r1, r3
 8006e12:	4b58      	ldr	r3, [pc, #352]	; (8006f74 <LTDC_SetConfig+0x32c>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	68f9      	ldr	r1, [r7, #12]
 8006e22:	6809      	ldr	r1, [r1, #0]
 8006e24:	4608      	mov	r0, r1
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	01c9      	lsls	r1, r1, #7
 8006e2a:	4401      	add	r1, r0
 8006e2c:	3184      	adds	r1, #132	; 0x84
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	01db      	lsls	r3, r3, #7
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3384      	adds	r3, #132	; 0x84
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	01db      	lsls	r3, r3, #7
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3384      	adds	r3, #132	; 0x84
 8006e50:	461a      	mov	r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	01db      	lsls	r3, r3, #7
 8006e60:	4413      	add	r3, r2
 8006e62:	3384      	adds	r3, #132	; 0x84
 8006e64:	461a      	mov	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e74:	2304      	movs	r3, #4
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e01b      	b.n	8006eb2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d102      	bne.n	8006e88 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e82:	2303      	movs	r3, #3
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	e014      	b.n	8006eb2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d00b      	beq.n	8006ea8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d007      	beq.n	8006ea8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d003      	beq.n	8006ea8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	d102      	bne.n	8006eae <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e001      	b.n	8006eb2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	01db      	lsls	r3, r3, #7
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3384      	adds	r3, #132	; 0x84
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	01d2      	lsls	r2, r2, #7
 8006ecc:	440a      	add	r2, r1
 8006ece:	3284      	adds	r2, #132	; 0x84
 8006ed0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	1acb      	subs	r3, r1, r3
 8006eec:	69f9      	ldr	r1, [r7, #28]
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	3303      	adds	r3, #3
 8006ef4:	68f9      	ldr	r1, [r7, #12]
 8006ef6:	6809      	ldr	r1, [r1, #0]
 8006ef8:	4608      	mov	r0, r1
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	01c9      	lsls	r1, r1, #7
 8006efe:	4401      	add	r1, r0
 8006f00:	3184      	adds	r1, #132	; 0x84
 8006f02:	4313      	orrs	r3, r2
 8006f04:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	01db      	lsls	r3, r3, #7
 8006f10:	4413      	add	r3, r2
 8006f12:	3384      	adds	r3, #132	; 0x84
 8006f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	01db      	lsls	r3, r3, #7
 8006f20:	440b      	add	r3, r1
 8006f22:	3384      	adds	r3, #132	; 0x84
 8006f24:	4619      	mov	r1, r3
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <LTDC_SetConfig+0x330>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	01db      	lsls	r3, r3, #7
 8006f36:	4413      	add	r3, r2
 8006f38:	3384      	adds	r3, #132	; 0x84
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	01db      	lsls	r3, r3, #7
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3384      	adds	r3, #132	; 0x84
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4611      	mov	r1, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	01d2      	lsls	r2, r2, #7
 8006f5c:	440a      	add	r2, r1
 8006f5e:	3284      	adds	r2, #132	; 0x84
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6013      	str	r3, [r2, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3724      	adds	r7, #36	; 0x24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	fffff8f8 	.word	0xfffff8f8
 8006f78:	fffff800 	.word	0xfffff800

08006f7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8a:	6013      	str	r3, [r2, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40007000 	.word	0x40007000

08006f9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006fa6:	4b23      	ldr	r3, [pc, #140]	; (8007034 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb2:	4b20      	ldr	r3, [pc, #128]	; (8007034 <HAL_PWREx_EnableOverDrive+0x98>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006fbe:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fca:	f7fd f9bf 	bl	800434c <HAL_GetTick>
 8006fce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fd0:	e009      	b.n	8006fe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fd2:	f7fd f9bb 	bl	800434c <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fe0:	d901      	bls.n	8006fe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e022      	b.n	800702c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff2:	d1ee      	bne.n	8006fd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ff4:	4b10      	ldr	r3, [pc, #64]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007000:	f7fd f9a4 	bl	800434c <HAL_GetTick>
 8007004:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007006:	e009      	b.n	800701c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007008:	f7fd f9a0 	bl	800434c <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007016:	d901      	bls.n	800701c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e007      	b.n	800702c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <HAL_PWREx_EnableOverDrive+0x9c>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007028:	d1ee      	bne.n	8007008 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40023800 	.word	0x40023800
 8007038:	40007000 	.word	0x40007000

0800703c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007044:	2300      	movs	r3, #0
 8007046:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e291      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8087 	beq.w	800716e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007060:	4b96      	ldr	r3, [pc, #600]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 030c 	and.w	r3, r3, #12
 8007068:	2b04      	cmp	r3, #4
 800706a:	d00c      	beq.n	8007086 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800706c:	4b93      	ldr	r3, [pc, #588]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b08      	cmp	r3, #8
 8007076:	d112      	bne.n	800709e <HAL_RCC_OscConfig+0x62>
 8007078:	4b90      	ldr	r3, [pc, #576]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007084:	d10b      	bne.n	800709e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007086:	4b8d      	ldr	r3, [pc, #564]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d06c      	beq.n	800716c <HAL_RCC_OscConfig+0x130>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d168      	bne.n	800716c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e26b      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a6:	d106      	bne.n	80070b6 <HAL_RCC_OscConfig+0x7a>
 80070a8:	4b84      	ldr	r3, [pc, #528]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a83      	ldr	r2, [pc, #524]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e02e      	b.n	8007114 <HAL_RCC_OscConfig+0xd8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCC_OscConfig+0x9c>
 80070be:	4b7f      	ldr	r3, [pc, #508]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a7e      	ldr	r2, [pc, #504]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b7c      	ldr	r3, [pc, #496]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a7b      	ldr	r2, [pc, #492]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e01d      	b.n	8007114 <HAL_RCC_OscConfig+0xd8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070e0:	d10c      	bne.n	80070fc <HAL_RCC_OscConfig+0xc0>
 80070e2:	4b76      	ldr	r3, [pc, #472]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a75      	ldr	r2, [pc, #468]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4b73      	ldr	r3, [pc, #460]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a72      	ldr	r2, [pc, #456]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e00b      	b.n	8007114 <HAL_RCC_OscConfig+0xd8>
 80070fc:	4b6f      	ldr	r3, [pc, #444]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a6e      	ldr	r2, [pc, #440]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4b6c      	ldr	r3, [pc, #432]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6b      	ldr	r2, [pc, #428]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800710e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711c:	f7fd f916 	bl	800434c <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007124:	f7fd f912 	bl	800434c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	; 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e21f      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007136:	4b61      	ldr	r3, [pc, #388]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0xe8>
 8007142:	e014      	b.n	800716e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7fd f902 	bl	800434c <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7fd f8fe 	bl	800434c <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e20b      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800715e:	4b57      	ldr	r3, [pc, #348]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0x110>
 800716a:	e000      	b.n	800716e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d069      	beq.n	800724e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800717a:	4b50      	ldr	r3, [pc, #320]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007186:	4b4d      	ldr	r3, [pc, #308]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
 800718e:	2b08      	cmp	r3, #8
 8007190:	d11c      	bne.n	80071cc <HAL_RCC_OscConfig+0x190>
 8007192:	4b4a      	ldr	r3, [pc, #296]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d116      	bne.n	80071cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719e:	4b47      	ldr	r3, [pc, #284]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RCC_OscConfig+0x17a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d001      	beq.n	80071b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e1df      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b6:	4b41      	ldr	r3, [pc, #260]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	493d      	ldr	r1, [pc, #244]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ca:	e040      	b.n	800724e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d023      	beq.n	800721c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d4:	4b39      	ldr	r3, [pc, #228]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a38      	ldr	r2, [pc, #224]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fd f8b4 	bl	800434c <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e8:	f7fd f8b0 	bl	800434c <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e1bd      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071fa:	4b30      	ldr	r3, [pc, #192]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007206:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4929      	ldr	r1, [pc, #164]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007216:	4313      	orrs	r3, r2
 8007218:	600b      	str	r3, [r1, #0]
 800721a:	e018      	b.n	800724e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800721c:	4b27      	ldr	r3, [pc, #156]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a26      	ldr	r2, [pc, #152]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fd f890 	bl	800434c <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007230:	f7fd f88c 	bl	800434c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e199      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007242:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f0      	bne.n	8007230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d038      	beq.n	80072cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d019      	beq.n	8007296 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726e:	f7fd f86d 	bl	800434c <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007276:	f7fd f869 	bl	800434c <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e176      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007288:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800728a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f0      	beq.n	8007276 <HAL_RCC_OscConfig+0x23a>
 8007294:	e01a      	b.n	80072cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 8007298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729a:	4a08      	ldr	r2, [pc, #32]	; (80072bc <HAL_RCC_OscConfig+0x280>)
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a2:	f7fd f853 	bl	800434c <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a8:	e00a      	b.n	80072c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072aa:	f7fd f84f 	bl	800434c <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d903      	bls.n	80072c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e15c      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
 80072bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c0:	4b91      	ldr	r3, [pc, #580]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80072c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1ee      	bne.n	80072aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80a4 	beq.w	8007422 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072da:	4b8b      	ldr	r3, [pc, #556]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10d      	bne.n	8007302 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e6:	4b88      	ldr	r3, [pc, #544]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	4a87      	ldr	r2, [pc, #540]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f0:	6413      	str	r3, [r2, #64]	; 0x40
 80072f2:	4b85      	ldr	r3, [pc, #532]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fe:	2301      	movs	r3, #1
 8007300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007302:	4b82      	ldr	r3, [pc, #520]	; (800750c <HAL_RCC_OscConfig+0x4d0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d118      	bne.n	8007340 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800730e:	4b7f      	ldr	r3, [pc, #508]	; (800750c <HAL_RCC_OscConfig+0x4d0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a7e      	ldr	r2, [pc, #504]	; (800750c <HAL_RCC_OscConfig+0x4d0>)
 8007314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800731a:	f7fd f817 	bl	800434c <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007322:	f7fd f813 	bl	800434c <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b64      	cmp	r3, #100	; 0x64
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e120      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007334:	4b75      	ldr	r3, [pc, #468]	; (800750c <HAL_RCC_OscConfig+0x4d0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d106      	bne.n	8007356 <HAL_RCC_OscConfig+0x31a>
 8007348:	4b6f      	ldr	r3, [pc, #444]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	4a6e      	ldr	r2, [pc, #440]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	6713      	str	r3, [r2, #112]	; 0x70
 8007354:	e02d      	b.n	80073b2 <HAL_RCC_OscConfig+0x376>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0x33c>
 800735e:	4b6a      	ldr	r3, [pc, #424]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	4a69      	ldr	r2, [pc, #420]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	6713      	str	r3, [r2, #112]	; 0x70
 800736a:	4b67      	ldr	r3, [pc, #412]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	4a66      	ldr	r2, [pc, #408]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007370:	f023 0304 	bic.w	r3, r3, #4
 8007374:	6713      	str	r3, [r2, #112]	; 0x70
 8007376:	e01c      	b.n	80073b2 <HAL_RCC_OscConfig+0x376>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b05      	cmp	r3, #5
 800737e:	d10c      	bne.n	800739a <HAL_RCC_OscConfig+0x35e>
 8007380:	4b61      	ldr	r3, [pc, #388]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	4a60      	ldr	r2, [pc, #384]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007386:	f043 0304 	orr.w	r3, r3, #4
 800738a:	6713      	str	r3, [r2, #112]	; 0x70
 800738c:	4b5e      	ldr	r3, [pc, #376]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800738e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007390:	4a5d      	ldr	r2, [pc, #372]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	6713      	str	r3, [r2, #112]	; 0x70
 8007398:	e00b      	b.n	80073b2 <HAL_RCC_OscConfig+0x376>
 800739a:	4b5b      	ldr	r3, [pc, #364]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739e:	4a5a      	ldr	r2, [pc, #360]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	6713      	str	r3, [r2, #112]	; 0x70
 80073a6:	4b58      	ldr	r3, [pc, #352]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	4a57      	ldr	r2, [pc, #348]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80073ac:	f023 0304 	bic.w	r3, r3, #4
 80073b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d015      	beq.n	80073e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ba:	f7fc ffc7 	bl	800434c <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c0:	e00a      	b.n	80073d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c2:	f7fc ffc3 	bl	800434c <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e0ce      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d8:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ee      	beq.n	80073c2 <HAL_RCC_OscConfig+0x386>
 80073e4:	e014      	b.n	8007410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e6:	f7fc ffb1 	bl	800434c <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073ec:	e00a      	b.n	8007404 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ee:	f7fc ffad 	bl	800434c <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e0b8      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007404:	4b40      	ldr	r3, [pc, #256]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ee      	bne.n	80073ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d105      	bne.n	8007422 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007416:	4b3c      	ldr	r3, [pc, #240]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	4a3b      	ldr	r2, [pc, #236]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800741c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80a4 	beq.w	8007574 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800742c:	4b36      	ldr	r3, [pc, #216]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 030c 	and.w	r3, r3, #12
 8007434:	2b08      	cmp	r3, #8
 8007436:	d06b      	beq.n	8007510 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d149      	bne.n	80074d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007440:	4b31      	ldr	r3, [pc, #196]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a30      	ldr	r2, [pc, #192]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fc ff7e 	bl	800434c <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fc ff7a 	bl	800434c <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e087      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007466:	4b28      	ldr	r3, [pc, #160]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	019b      	lsls	r3, r3, #6
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	3b01      	subs	r3, #1
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	061b      	lsls	r3, r3, #24
 8007496:	4313      	orrs	r3, r2
 8007498:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 800749a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800749e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a18      	ldr	r2, [pc, #96]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fc ff4e 	bl	800434c <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fc ff4a 	bl	800434c <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e057      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x478>
 80074d2:	e04f      	b.n	8007574 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d4:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0b      	ldr	r2, [pc, #44]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e0:	f7fc ff34 	bl	800434c <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fc ff30 	bl	800434c <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e03d      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fa:	4b03      	ldr	r3, [pc, #12]	; (8007508 <HAL_RCC_OscConfig+0x4cc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_OscConfig+0x4ac>
 8007506:	e035      	b.n	8007574 <HAL_RCC_OscConfig+0x538>
 8007508:	40023800 	.word	0x40023800
 800750c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <HAL_RCC_OscConfig+0x544>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d028      	beq.n	8007570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007528:	429a      	cmp	r2, r3
 800752a:	d121      	bne.n	8007570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d11a      	bne.n	8007570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007540:	4013      	ands	r3, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007546:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007548:	4293      	cmp	r3, r2
 800754a:	d111      	bne.n	8007570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	3b01      	subs	r3, #1
 800755a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800755c:	429a      	cmp	r2, r3
 800755e:	d107      	bne.n	8007570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800756c:	429a      	cmp	r2, r3
 800756e:	d001      	beq.n	8007574 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e000      	b.n	8007576 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40023800 	.word	0x40023800

08007584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e0d0      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800759c:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d910      	bls.n	80075cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075aa:	4b67      	ldr	r3, [pc, #412]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 020f 	bic.w	r2, r3, #15
 80075b2:	4965      	ldr	r1, [pc, #404]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ba:	4b63      	ldr	r3, [pc, #396]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d001      	beq.n	80075cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e0b8      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e4:	4b59      	ldr	r3, [pc, #356]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a58      	ldr	r2, [pc, #352]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075fc:	4b53      	ldr	r3, [pc, #332]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	4a52      	ldr	r2, [pc, #328]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007608:	4b50      	ldr	r3, [pc, #320]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	494d      	ldr	r1, [pc, #308]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d040      	beq.n	80076a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d107      	bne.n	800763e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	4b47      	ldr	r3, [pc, #284]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d115      	bne.n	8007666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e07f      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d107      	bne.n	8007656 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007646:	4b41      	ldr	r3, [pc, #260]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e073      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007656:	4b3d      	ldr	r3, [pc, #244]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e06b      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007666:	4b39      	ldr	r3, [pc, #228]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f023 0203 	bic.w	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	4936      	ldr	r1, [pc, #216]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007674:	4313      	orrs	r3, r2
 8007676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007678:	f7fc fe68 	bl	800434c <HAL_GetTick>
 800767c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767e:	e00a      	b.n	8007696 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007680:	f7fc fe64 	bl	800434c <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	f241 3288 	movw	r2, #5000	; 0x1388
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e053      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007696:	4b2d      	ldr	r3, [pc, #180]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 020c 	and.w	r2, r3, #12
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d1eb      	bne.n	8007680 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d210      	bcs.n	80076d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b6:	4b24      	ldr	r3, [pc, #144]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 020f 	bic.w	r2, r3, #15
 80076be:	4922      	ldr	r1, [pc, #136]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b20      	ldr	r3, [pc, #128]	; (8007748 <HAL_RCC_ClockConfig+0x1c4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e032      	b.n	800773e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4916      	ldr	r1, [pc, #88]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0308 	and.w	r3, r3, #8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	490e      	ldr	r1, [pc, #56]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 8007712:	4313      	orrs	r3, r2
 8007714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007716:	f000 f821 	bl	800775c <HAL_RCC_GetSysClockFreq>
 800771a:	4601      	mov	r1, r0
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <HAL_RCC_ClockConfig+0x1c8>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	091b      	lsrs	r3, r3, #4
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	4a0a      	ldr	r2, [pc, #40]	; (8007750 <HAL_RCC_ClockConfig+0x1cc>)
 8007728:	5cd3      	ldrb	r3, [r2, r3]
 800772a:	fa21 f303 	lsr.w	r3, r1, r3
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <HAL_RCC_ClockConfig+0x1d0>)
 8007730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <HAL_RCC_ClockConfig+0x1d4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc fce2 	bl	8004100 <HAL_InitTick>

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40023c00 	.word	0x40023c00
 800774c:	40023800 	.word	0x40023800
 8007750:	0801007c 	.word	0x0801007c
 8007754:	20000048 	.word	0x20000048
 8007758:	2000004c 	.word	0x2000004c

0800775c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	2300      	movs	r3, #0
 800776c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007772:	4b50      	ldr	r3, [pc, #320]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b04      	cmp	r3, #4
 800777c:	d007      	beq.n	800778e <HAL_RCC_GetSysClockFreq+0x32>
 800777e:	2b08      	cmp	r3, #8
 8007780:	d008      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x38>
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 808d 	bne.w	80078a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007788:	4b4b      	ldr	r3, [pc, #300]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800778a:	60bb      	str	r3, [r7, #8]
      break;
 800778c:	e08c      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800778e:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCC_GetSysClockFreq+0x160>)
 8007790:	60bb      	str	r3, [r7, #8]
      break;
 8007792:	e089      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007794:	4b47      	ldr	r3, [pc, #284]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800779e:	4b45      	ldr	r3, [pc, #276]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d023      	beq.n	80077f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077aa:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	099b      	lsrs	r3, r3, #6
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	ea03 0501 	and.w	r5, r3, r1
 80077c0:	ea04 0602 	and.w	r6, r4, r2
 80077c4:	4a3d      	ldr	r2, [pc, #244]	; (80078bc <HAL_RCC_GetSysClockFreq+0x160>)
 80077c6:	fb02 f106 	mul.w	r1, r2, r6
 80077ca:	2200      	movs	r2, #0
 80077cc:	fb02 f205 	mul.w	r2, r2, r5
 80077d0:	440a      	add	r2, r1
 80077d2:	493a      	ldr	r1, [pc, #232]	; (80078bc <HAL_RCC_GetSysClockFreq+0x160>)
 80077d4:	fba5 0101 	umull	r0, r1, r5, r1
 80077d8:	1853      	adds	r3, r2, r1
 80077da:	4619      	mov	r1, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	461a      	mov	r2, r3
 80077e4:	4623      	mov	r3, r4
 80077e6:	f7f8 fd63 	bl	80002b0 <__aeabi_uldivmod>
 80077ea:	4603      	mov	r3, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e049      	b.n	8007886 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077f2:	4b30      	ldr	r3, [pc, #192]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	f04f 0400 	mov.w	r4, #0
 80077fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	ea03 0501 	and.w	r5, r3, r1
 8007808:	ea04 0602 	and.w	r6, r4, r2
 800780c:	4629      	mov	r1, r5
 800780e:	4632      	mov	r2, r6
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	0154      	lsls	r4, r2, #5
 800781a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800781e:	014b      	lsls	r3, r1, #5
 8007820:	4619      	mov	r1, r3
 8007822:	4622      	mov	r2, r4
 8007824:	1b49      	subs	r1, r1, r5
 8007826:	eb62 0206 	sbc.w	r2, r2, r6
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	f04f 0400 	mov.w	r4, #0
 8007832:	0194      	lsls	r4, r2, #6
 8007834:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007838:	018b      	lsls	r3, r1, #6
 800783a:	1a5b      	subs	r3, r3, r1
 800783c:	eb64 0402 	sbc.w	r4, r4, r2
 8007840:	f04f 0100 	mov.w	r1, #0
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	00e2      	lsls	r2, r4, #3
 800784a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800784e:	00d9      	lsls	r1, r3, #3
 8007850:	460b      	mov	r3, r1
 8007852:	4614      	mov	r4, r2
 8007854:	195b      	adds	r3, r3, r5
 8007856:	eb44 0406 	adc.w	r4, r4, r6
 800785a:	f04f 0100 	mov.w	r1, #0
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	02a2      	lsls	r2, r4, #10
 8007864:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007868:	0299      	lsls	r1, r3, #10
 800786a:	460b      	mov	r3, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4618      	mov	r0, r3
 8007870:	4621      	mov	r1, r4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f04f 0400 	mov.w	r4, #0
 8007878:	461a      	mov	r2, r3
 800787a:	4623      	mov	r3, r4
 800787c:	f7f8 fd18 	bl	80002b0 <__aeabi_uldivmod>
 8007880:	4603      	mov	r3, r0
 8007882:	460c      	mov	r4, r1
 8007884:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	3301      	adds	r3, #1
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	fbb2 f3f3 	udiv	r3, r2, r3
 800789e:	60bb      	str	r3, [r7, #8]
      break;
 80078a0:	e002      	b.n	80078a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078a2:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80078a4:	60bb      	str	r3, [r7, #8]
      break;
 80078a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078a8:	68bb      	ldr	r3, [r7, #8]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800
 80078b8:	00f42400 	.word	0x00f42400
 80078bc:	017d7840 	.word	0x017d7840

080078c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078c6:	681b      	ldr	r3, [r3, #0]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20000048 	.word	0x20000048

080078d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078dc:	f7ff fff0 	bl	80078c0 <HAL_RCC_GetHCLKFreq>
 80078e0:	4601      	mov	r1, r0
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	0a9b      	lsrs	r3, r3, #10
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	4a03      	ldr	r2, [pc, #12]	; (80078fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ee:	5cd3      	ldrb	r3, [r2, r3]
 80078f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40023800 	.word	0x40023800
 80078fc:	0801008c 	.word	0x0801008c

08007900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007904:	f7ff ffdc 	bl	80078c0 <HAL_RCC_GetHCLKFreq>
 8007908:	4601      	mov	r1, r0
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	0b5b      	lsrs	r3, r3, #13
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4a03      	ldr	r2, [pc, #12]	; (8007924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007916:	5cd3      	ldrb	r3, [r2, r3]
 8007918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40023800 	.word	0x40023800
 8007924:	0801008c 	.word	0x0801008c

08007928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	220f      	movs	r2, #15
 8007936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 0203 	and.w	r2, r3, #3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCC_GetClockConfig+0x5c>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	08db      	lsrs	r3, r3, #3
 8007962:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <HAL_RCC_GetClockConfig+0x60>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 020f 	and.w	r2, r3, #15
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40023800 	.word	0x40023800
 8007988:	40023c00 	.word	0x40023c00

0800798c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d012      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4a68      	ldr	r2, [pc, #416]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079be:	6093      	str	r3, [r2, #8]
 80079c0:	4b66      	ldr	r3, [pc, #408]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	4964      	ldr	r1, [pc, #400]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d017      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079e6:	4b5d      	ldr	r3, [pc, #372]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	4959      	ldr	r1, [pc, #356]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a04:	d101      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a22:	4b4e      	ldr	r3, [pc, #312]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	494a      	ldr	r1, [pc, #296]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a40:	d101      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 808b 	beq.w	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a70:	4b3a      	ldr	r3, [pc, #232]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	4a39      	ldr	r2, [pc, #228]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8007a7c:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a88:	4b35      	ldr	r3, [pc, #212]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a34      	ldr	r2, [pc, #208]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a94:	f7fc fc5a 	bl	800434c <HAL_GetTick>
 8007a98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9c:	f7fc fc56 	bl	800434c <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b64      	cmp	r3, #100	; 0x64
 8007aa8:	d901      	bls.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e355      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aae:	4b2c      	ldr	r3, [pc, #176]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007aba:	4b28      	ldr	r3, [pc, #160]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d035      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d02e      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ae2:	4b1e      	ldr	r3, [pc, #120]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b00:	4b16      	ldr	r3, [pc, #88]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d114      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0c:	f7fc fc1e 	bl	800434c <HAL_GetTick>
 8007b10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b12:	e00a      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b14:	f7fc fc1a 	bl	800434c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e317      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0ee      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b42:	d111      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b52:	400b      	ands	r3, r1
 8007b54:	4901      	ldr	r1, [pc, #4]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
 8007b5a:	e00b      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40007000 	.word	0x40007000
 8007b64:	0ffffcff 	.word	0x0ffffcff
 8007b68:	4bb0      	ldr	r3, [pc, #704]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	4aaf      	ldr	r2, [pc, #700]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b72:	6093      	str	r3, [r2, #8]
 8007b74:	4bad      	ldr	r3, [pc, #692]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b80:	49aa      	ldr	r1, [pc, #680]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d010      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b92:	4ba6      	ldr	r3, [pc, #664]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	4aa4      	ldr	r2, [pc, #656]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ba2:	4ba2      	ldr	r3, [pc, #648]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ba4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	499f      	ldr	r1, [pc, #636]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bc0:	4b9a      	ldr	r3, [pc, #616]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bce:	4997      	ldr	r1, [pc, #604]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007be2:	4b92      	ldr	r3, [pc, #584]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf0:	498e      	ldr	r1, [pc, #568]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c04:	4b89      	ldr	r3, [pc, #548]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c12:	4986      	ldr	r1, [pc, #536]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c26:	4b81      	ldr	r3, [pc, #516]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c34:	497d      	ldr	r1, [pc, #500]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c48:	4b78      	ldr	r3, [pc, #480]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f023 0203 	bic.w	r2, r3, #3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	4975      	ldr	r1, [pc, #468]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c6a:	4b70      	ldr	r3, [pc, #448]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c70:	f023 020c 	bic.w	r2, r3, #12
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c78:	496c      	ldr	r1, [pc, #432]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c8c:	4b67      	ldr	r3, [pc, #412]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	4964      	ldr	r1, [pc, #400]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cae:	4b5f      	ldr	r3, [pc, #380]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	495b      	ldr	r1, [pc, #364]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cd0:	4b56      	ldr	r3, [pc, #344]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cde:	4953      	ldr	r1, [pc, #332]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007cf2:	4b4e      	ldr	r3, [pc, #312]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d00:	494a      	ldr	r1, [pc, #296]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d14:	4b45      	ldr	r3, [pc, #276]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d22:	4942      	ldr	r1, [pc, #264]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d36:	4b3d      	ldr	r3, [pc, #244]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	4939      	ldr	r1, [pc, #228]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d58:	4b34      	ldr	r3, [pc, #208]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d66:	4931      	ldr	r1, [pc, #196]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d011      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d7a:	4b2c      	ldr	r3, [pc, #176]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d88:	4928      	ldr	r1, [pc, #160]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d98:	d101      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dba:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc8:	4918      	ldr	r1, [pc, #96]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dec:	490f      	ldr	r1, [pc, #60]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d005      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e02:	f040 80d8 	bne.w	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e06:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e12:	f7fc fa9b 	bl	800434c <HAL_GetTick>
 8007e16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e18:	e00a      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e1a:	f7fc fa97 	bl	800434c <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b64      	cmp	r3, #100	; 0x64
 8007e26:	d903      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e196      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007e2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e30:	4b6c      	ldr	r3, [pc, #432]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1ee      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d021      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d11d      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e50:	4b64      	ldr	r3, [pc, #400]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e5e:	4b61      	ldr	r3, [pc, #388]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e64:	0e1b      	lsrs	r3, r3, #24
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	019a      	lsls	r2, r3, #6
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	431a      	orrs	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	071b      	lsls	r3, r3, #28
 8007e84:	4957      	ldr	r1, [pc, #348]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea0:	d00a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb6:	d129      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007eb8:	4b4a      	ldr	r3, [pc, #296]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ec6:	4b47      	ldr	r3, [pc, #284]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ecc:	0f1b      	lsrs	r3, r3, #28
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	019a      	lsls	r2, r3, #6
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	061b      	lsls	r3, r3, #24
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	071b      	lsls	r3, r3, #28
 8007eec:	493d      	ldr	r1, [pc, #244]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ef4:	4b3b      	ldr	r3, [pc, #236]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007efa:	f023 021f 	bic.w	r2, r3, #31
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	3b01      	subs	r3, #1
 8007f04:	4937      	ldr	r1, [pc, #220]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01d      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f18:	4b32      	ldr	r3, [pc, #200]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1e:	0e1b      	lsrs	r3, r3, #24
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f26:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2c:	0f1b      	lsrs	r3, r3, #28
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	019a      	lsls	r2, r3, #6
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	431a      	orrs	r2, r3
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	061b      	lsls	r3, r3, #24
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	071b      	lsls	r3, r3, #28
 8007f4c:	4925      	ldr	r1, [pc, #148]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d011      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	019a      	lsls	r2, r3, #6
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	071b      	lsls	r3, r3, #28
 8007f7c:	4919      	ldr	r1, [pc, #100]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f84:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a16      	ldr	r2, [pc, #88]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f90:	f7fc f9dc 	bl	800434c <HAL_GetTick>
 8007f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f96:	e008      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f98:	f7fc f9d8 	bl	800434c <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b64      	cmp	r3, #100	; 0x64
 8007fa4:	d901      	bls.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e0d7      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0f0      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	f040 80cd 	bne.w	8008158 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a08      	ldr	r2, [pc, #32]	; (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fca:	f7fc f9bf 	bl	800434c <HAL_GetTick>
 8007fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd0:	e00a      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fd2:	f7fc f9bb 	bl	800434c <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b64      	cmp	r3, #100	; 0x64
 8007fde:	d903      	bls.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e0ba      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007fe4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fe8:	4b5e      	ldr	r3, [pc, #376]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d0ed      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02e      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d12a      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800801e:	4b51      	ldr	r3, [pc, #324]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800802c:	4b4d      	ldr	r3, [pc, #308]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008032:	0f1b      	lsrs	r3, r3, #28
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	019a      	lsls	r2, r3, #6
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	061b      	lsls	r3, r3, #24
 800804c:	431a      	orrs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	071b      	lsls	r3, r3, #28
 8008052:	4944      	ldr	r1, [pc, #272]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800805a:	4b42      	ldr	r3, [pc, #264]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800805c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008060:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	3b01      	subs	r3, #1
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	493d      	ldr	r1, [pc, #244]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d022      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008088:	d11d      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800808a:	4b36      	ldr	r3, [pc, #216]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008098:	4b32      	ldr	r3, [pc, #200]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	0f1b      	lsrs	r3, r3, #28
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	019a      	lsls	r2, r3, #6
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	431a      	orrs	r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	431a      	orrs	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	071b      	lsls	r3, r3, #28
 80080be:	4929      	ldr	r1, [pc, #164]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d028      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080d2:	4b24      	ldr	r3, [pc, #144]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d8:	0e1b      	lsrs	r3, r3, #24
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080e0:	4b20      	ldr	r3, [pc, #128]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	019a      	lsls	r2, r3, #6
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	431a      	orrs	r2, r3
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	061b      	lsls	r3, r3, #24
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	071b      	lsls	r3, r3, #28
 8008106:	4917      	ldr	r1, [pc, #92]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008108:	4313      	orrs	r3, r2
 800810a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800810e:	4b15      	ldr	r3, [pc, #84]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	4911      	ldr	r1, [pc, #68]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008124:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a0e      	ldr	r2, [pc, #56]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800812a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008130:	f7fc f90c 	bl	800434c <HAL_GetTick>
 8008134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008136:	e008      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008138:	f7fc f908 	bl	800434c <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b64      	cmp	r3, #100	; 0x64
 8008144:	d901      	bls.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e007      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800814a:	4b06      	ldr	r3, [pc, #24]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008156:	d1ef      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800

08008168 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e06b      	b.n	8008252 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7f5b      	ldrb	r3, [r3, #29]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb fcf8 	bl	8003b80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	22ca      	movs	r2, #202	; 0xca
 800819c:	625a      	str	r2, [r3, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2253      	movs	r2, #83	; 0x53
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fbae 	bl	8008908 <RTC_EnterInitMode>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	22ff      	movs	r2, #255	; 0xff
 80081b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2204      	movs	r2, #4
 80081be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e046      	b.n	8008252 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6899      	ldr	r1, [r3, #8]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b23      	ldr	r3, [pc, #140]	; (800825c <HAL_RTC_Init+0xf4>)
 80081d0:	400b      	ands	r3, r1
 80081d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6899      	ldr	r1, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	68d2      	ldr	r2, [r2, #12]
 80081fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6919      	ldr	r1, [r3, #16]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	041a      	lsls	r2, r3, #16
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800821e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0208 	bic.w	r2, r2, #8
 800822e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	22ff      	movs	r2, #255	; 0xff
 8008248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008250:	2300      	movs	r3, #0
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	ff8fffbf 	.word	0xff8fffbf

08008260 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008260:	b590      	push	{r4, r7, lr}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	7f1b      	ldrb	r3, [r3, #28]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_RTC_SetTime+0x1c>
 8008278:	2302      	movs	r3, #2
 800827a:	e0a8      	b.n	80083ce <HAL_RTC_SetTime+0x16e>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d126      	bne.n	80082dc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d102      	bne.n	80082a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2200      	movs	r2, #0
 80082a0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fb5a 	bl	8008960 <RTC_ByteToBcd2>
 80082ac:	4603      	mov	r3, r0
 80082ae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fb53 	bl	8008960 <RTC_ByteToBcd2>
 80082ba:	4603      	mov	r3, r0
 80082bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082be:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	789b      	ldrb	r3, [r3, #2]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fb4b 	bl	8008960 <RTC_ByteToBcd2>
 80082ca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80082cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	7b1b      	ldrb	r3, [r3, #12]
 80082d4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	e018      	b.n	800830e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d102      	bne.n	80082f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082fc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008302:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	7b1b      	ldrb	r3, [r3, #12]
 8008308:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	22ca      	movs	r2, #202	; 0xca
 8008314:	625a      	str	r2, [r3, #36]	; 0x24
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2253      	movs	r2, #83	; 0x53
 800831c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 faf2 	bl	8008908 <RTC_EnterInitMode>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ff      	movs	r2, #255	; 0xff
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2204      	movs	r2, #4
 8008336:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e045      	b.n	80083ce <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	6979      	ldr	r1, [r7, #20]
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <HAL_RTC_SetTime+0x178>)
 800834a:	400b      	ands	r3, r1
 800834c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800835c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6899      	ldr	r1, [r3, #8]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	431a      	orrs	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008384:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d111      	bne.n	80083b8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fa8f 	bl	80088b8 <HAL_RTC_WaitForSynchro>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	22ff      	movs	r2, #255	; 0xff
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2204      	movs	r2, #4
 80083ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e00a      	b.n	80083ce <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	22ff      	movs	r2, #255	; 0xff
 80083be:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80083cc:	2300      	movs	r3, #0
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd90      	pop	{r4, r7, pc}
 80083d6:	bf00      	nop
 80083d8:	007f7f7f 	.word	0x007f7f7f

080083dc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b22      	ldr	r3, [pc, #136]	; (8008494 <HAL_RTC_GetTime+0xb8>)
 800840c:	4013      	ands	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800841a:	b2da      	uxtb	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842a:	b2da      	uxtb	r2, r3
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008438:	b2da      	uxtb	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	0c1b      	lsrs	r3, r3, #16
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	b2da      	uxtb	r2, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11a      	bne.n	800848a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fa9f 	bl	800899c <RTC_Bcd2ToByte>
 800845e:	4603      	mov	r3, r0
 8008460:	461a      	mov	r2, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fa96 	bl	800899c <RTC_Bcd2ToByte>
 8008470:	4603      	mov	r3, r0
 8008472:	461a      	mov	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa8d 	bl	800899c <RTC_Bcd2ToByte>
 8008482:	4603      	mov	r3, r0
 8008484:	461a      	mov	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	007f7f7f 	.word	0x007f7f7f

08008498 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008498:	b590      	push	{r4, r7, lr}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	7f1b      	ldrb	r3, [r3, #28]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_RTC_SetDate+0x1c>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e092      	b.n	80085da <HAL_RTC_SetDate+0x142>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2202      	movs	r2, #2
 80084be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10e      	bne.n	80084e4 <HAL_RTC_SetDate+0x4c>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	f023 0310 	bic.w	r3, r3, #16
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	330a      	adds	r3, #10
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d11c      	bne.n	8008524 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fa36 	bl	8008960 <RTC_ByteToBcd2>
 80084f4:	4603      	mov	r3, r0
 80084f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fa2f 	bl	8008960 <RTC_ByteToBcd2>
 8008502:	4603      	mov	r3, r0
 8008504:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008506:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	789b      	ldrb	r3, [r3, #2]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fa27 	bl	8008960 <RTC_ByteToBcd2>
 8008512:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008514:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e00e      	b.n	8008542 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008530:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008536:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	22ca      	movs	r2, #202	; 0xca
 8008548:	625a      	str	r2, [r3, #36]	; 0x24
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2253      	movs	r2, #83	; 0x53
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f9d8 	bl	8008908 <RTC_EnterInitMode>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	22ff      	movs	r2, #255	; 0xff
 8008564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2204      	movs	r2, #4
 800856a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e031      	b.n	80085da <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	6979      	ldr	r1, [r7, #20]
 800857c:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_RTC_SetDate+0x14c>)
 800857e:	400b      	ands	r3, r1
 8008580:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008590:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d111      	bne.n	80085c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f989 	bl	80088b8 <HAL_RTC_WaitForSynchro>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	22ff      	movs	r2, #255	; 0xff
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2204      	movs	r2, #4
 80085b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e00a      	b.n	80085da <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	22ff      	movs	r2, #255	; 0xff
 80085ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80085d8:	2300      	movs	r3, #0
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd90      	pop	{r4, r7, pc}
 80085e2:	bf00      	nop
 80085e4:	00ffff3f 	.word	0x00ffff3f

080085e8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	4b21      	ldr	r3, [pc, #132]	; (8008684 <HAL_RTC_GetDate+0x9c>)
 8008600:	4013      	ands	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	b2da      	uxtb	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	b2da      	uxtb	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	0b5b      	lsrs	r3, r3, #13
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d11a      	bne.n	8008678 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f9a8 	bl	800899c <RTC_Bcd2ToByte>
 800864c:	4603      	mov	r3, r0
 800864e:	461a      	mov	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f99f 	bl	800899c <RTC_Bcd2ToByte>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	789b      	ldrb	r3, [r3, #2]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f996 	bl	800899c <RTC_Bcd2ToByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	00ffff3f 	.word	0x00ffff3f

08008688 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008688:	b590      	push	{r4, r7, lr}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7f1b      	ldrb	r3, [r3, #28]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d101      	bne.n	80086ac <HAL_RTC_SetAlarm+0x24>
 80086a8:	2302      	movs	r3, #2
 80086aa:	e101      	b.n	80088b0 <HAL_RTC_SetAlarm+0x228>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2202      	movs	r2, #2
 80086b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d137      	bne.n	800872e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d102      	bne.n	80086d2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f942 	bl	8008960 <RTC_ByteToBcd2>
 80086dc:	4603      	mov	r3, r0
 80086de:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f93b 	bl	8008960 <RTC_ByteToBcd2>
 80086ea:	4603      	mov	r3, r0
 80086ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086ee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	789b      	ldrb	r3, [r3, #2]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f933 	bl	8008960 <RTC_ByteToBcd2>
 80086fa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086fc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	7b1b      	ldrb	r3, [r3, #12]
 8008704:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008706:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f925 	bl	8008960 <RTC_ByteToBcd2>
 8008716:	4603      	mov	r3, r0
 8008718:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800871a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008722:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008728:	4313      	orrs	r3, r2
 800872a:	61fb      	str	r3, [r7, #28]
 800872c:	e023      	b.n	8008776 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800874e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008754:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	7b1b      	ldrb	r3, [r3, #12]
 800875a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800875c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008764:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008766:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800876c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008772:	4313      	orrs	r3, r2
 8008774:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	22ca      	movs	r2, #202	; 0xca
 8008788:	625a      	str	r2, [r3, #36]	; 0x24
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2253      	movs	r2, #83	; 0x53
 8008790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879a:	d13f      	bne.n	800881c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087bc:	f7fb fdc6 	bl	800434c <HAL_GetTick>
 80087c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087c2:	e013      	b.n	80087ec <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087c4:	f7fb fdc2 	bl	800434c <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087d2:	d90b      	bls.n	80087ec <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	22ff      	movs	r2, #255	; 0xff
 80087da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2203      	movs	r2, #3
 80087e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e061      	b.n	80088b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0e4      	beq.n	80087c4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008818:	609a      	str	r2, [r3, #8]
 800881a:	e03e      	b.n	800889a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800882a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689a      	ldr	r2, [r3, #8]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800883a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800883c:	f7fb fd86 	bl	800434c <HAL_GetTick>
 8008840:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008842:	e013      	b.n	800886c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008844:	f7fb fd82 	bl	800434c <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008852:	d90b      	bls.n	800886c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	22ff      	movs	r2, #255	; 0xff
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2203      	movs	r2, #3
 8008860:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e021      	b.n	80088b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0e4      	beq.n	8008844 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008898:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ff      	movs	r2, #255	; 0xff
 80088a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3724      	adds	r7, #36	; 0x24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd90      	pop	{r4, r7, pc}

080088b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088d4:	f7fb fd3a 	bl	800434c <HAL_GetTick>
 80088d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088da:	e009      	b.n	80088f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088dc:	f7fb fd36 	bl	800434c <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ea:	d901      	bls.n	80088f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e007      	b.n	8008900 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0ee      	beq.n	80088dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d119      	bne.n	8008956 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800892c:	f7fb fd0e 	bl	800434c <HAL_GetTick>
 8008930:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008932:	e009      	b.n	8008948 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008934:	f7fb fd0a 	bl	800434c <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008942:	d901      	bls.n	8008948 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e007      	b.n	8008958 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0ee      	beq.n	8008934 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800896e:	e005      	b.n	800897c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3301      	adds	r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008976:	79fb      	ldrb	r3, [r7, #7]
 8008978:	3b0a      	subs	r3, #10
 800897a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	2b09      	cmp	r3, #9
 8008980:	d8f6      	bhi.n	8008970 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	b2da      	uxtb	r2, r3
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	4313      	orrs	r3, r2
 800898e:	b2db      	uxtb	r3, r3
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	b2db      	uxtb	r3, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7f1b      	ldrb	r3, [r3, #28]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e03e      	b.n	8008a72 <HAL_RTCEx_SetTimeStamp+0x9a>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2202      	movs	r2, #2
 80089fe:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	22ca      	movs	r2, #202	; 0xca
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2253      	movs	r2, #83	; 0x53
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0206 	bic.w	r2, r2, #6
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	fffff7f7 	.word	0xfffff7f7

08008a84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e025      	b.n	8008ae4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7fb fb1d 	bl	80040ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f002 f93f 	bl	800ad48 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	f002 f9a9 	bl	800ae2c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d101      	bne.n	8008b08 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
 8008b06:	e018      	b.n	8008b3a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f002 fa07 	bl	800af2c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d104      	bne.n	8008b30 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008b2e:	e003      	b.n	8008b38 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d101      	bne.n	8008b5c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e00e      	b.n	8008b7a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 f9ff 	bl	800af6e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e084      	b.n	8008c9e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fb f800 	bl	8003bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bd4:	d902      	bls.n	8008bdc <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	e002      	b.n	8008be2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008be0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008bea:	d007      	beq.n	8008bfc <HAL_SPI_Init+0x7a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bf4:	d002      	beq.n	8008bfc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c0c:	d903      	bls.n	8008c16 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2202      	movs	r2, #2
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30
 8008c14:	e002      	b.n	8008c1c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	431a      	orrs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	ea42 0103 	orr.w	r1, r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	f003 0204 	and.w	r2, r3, #4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	ea42 0103 	orr.w	r1, r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e01d      	b.n	8008cf4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7fa ffe3 	bl	8003c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	f000 fbc3 	bl	8009470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <HAL_TIM_Base_Start_IT+0x50>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d00b      	beq.n	8008d3e <HAL_TIM_Base_Start_IT+0x42>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d2c:	d007      	beq.n	8008d3e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0201 	orr.w	r2, r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	00010007 	.word	0x00010007

08008d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e01d      	b.n	8008d9e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f815 	bl	8008da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f000 fb6e 	bl	8009470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d122      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d11b      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f06f 0202 	mvn.w	r2, #2
 8008de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fb19 	bl	8009434 <HAL_TIM_IC_CaptureCallback>
 8008e02:	e005      	b.n	8008e10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fb0b 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fb1c 	bl	8009448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d122      	bne.n	8008e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d11b      	bne.n	8008e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f06f 0204 	mvn.w	r2, #4
 8008e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 faef 	bl	8009434 <HAL_TIM_IC_CaptureCallback>
 8008e56:	e005      	b.n	8008e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fae1 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 faf2 	bl	8009448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0308 	and.w	r3, r3, #8
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d122      	bne.n	8008ebe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d11b      	bne.n	8008ebe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f06f 0208 	mvn.w	r2, #8
 8008e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2204      	movs	r2, #4
 8008e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fac5 	bl	8009434 <HAL_TIM_IC_CaptureCallback>
 8008eaa:	e005      	b.n	8008eb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fab7 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fac8 	bl	8009448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b10      	cmp	r3, #16
 8008eca:	d122      	bne.n	8008f12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d11b      	bne.n	8008f12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f06f 0210 	mvn.w	r2, #16
 8008ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa9b 	bl	8009434 <HAL_TIM_IC_CaptureCallback>
 8008efe:	e005      	b.n	8008f0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa8d 	bl	8009420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa9e 	bl	8009448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d10e      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d107      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f06f 0201 	mvn.w	r2, #1
 8008f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7f9 fa99 	bl	8002470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d10e      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f56:	2b80      	cmp	r3, #128	; 0x80
 8008f58:	d107      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 ffb9 	bl	8009edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f78:	d10e      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ffac 	bl	8009ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d10e      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b40      	cmp	r3, #64	; 0x40
 8008fb2:	d107      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa4c 	bl	800945c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	d10e      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d107      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0220 	mvn.w	r2, #32
 8008fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 ff6c 	bl	8009ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800900e:	2302      	movs	r3, #2
 8009010:	e105      	b.n	800921e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b14      	cmp	r3, #20
 8009026:	f200 80f0 	bhi.w	800920a <HAL_TIM_PWM_ConfigChannel+0x212>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009085 	.word	0x08009085
 8009034:	0800920b 	.word	0x0800920b
 8009038:	0800920b 	.word	0x0800920b
 800903c:	0800920b 	.word	0x0800920b
 8009040:	080090c5 	.word	0x080090c5
 8009044:	0800920b 	.word	0x0800920b
 8009048:	0800920b 	.word	0x0800920b
 800904c:	0800920b 	.word	0x0800920b
 8009050:	08009107 	.word	0x08009107
 8009054:	0800920b 	.word	0x0800920b
 8009058:	0800920b 	.word	0x0800920b
 800905c:	0800920b 	.word	0x0800920b
 8009060:	08009147 	.word	0x08009147
 8009064:	0800920b 	.word	0x0800920b
 8009068:	0800920b 	.word	0x0800920b
 800906c:	0800920b 	.word	0x0800920b
 8009070:	08009189 	.word	0x08009189
 8009074:	0800920b 	.word	0x0800920b
 8009078:	0800920b 	.word	0x0800920b
 800907c:	0800920b 	.word	0x0800920b
 8009080:	080091c9 	.word	0x080091c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fa90 	bl	80095b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	699a      	ldr	r2, [r3, #24]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0208 	orr.w	r2, r2, #8
 800909e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0204 	bic.w	r2, r2, #4
 80090ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6999      	ldr	r1, [r3, #24]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	619a      	str	r2, [r3, #24]
      break;
 80090c2:	e0a3      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fae2 	bl	8009694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699a      	ldr	r2, [r3, #24]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6999      	ldr	r1, [r3, #24]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	021a      	lsls	r2, r3, #8
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	619a      	str	r2, [r3, #24]
      break;
 8009104:	e082      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fb39 	bl	8009784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69da      	ldr	r2, [r3, #28]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f042 0208 	orr.w	r2, r2, #8
 8009120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0204 	bic.w	r2, r2, #4
 8009130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	61da      	str	r2, [r3, #28]
      break;
 8009144:	e062      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fb8f 	bl	8009870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69da      	ldr	r2, [r3, #28]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69d9      	ldr	r1, [r3, #28]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	021a      	lsls	r2, r3, #8
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	61da      	str	r2, [r3, #28]
      break;
 8009186:	e041      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68b9      	ldr	r1, [r7, #8]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fbc6 	bl	8009920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0208 	orr.w	r2, r2, #8
 80091a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0204 	bic.w	r2, r2, #4
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091c6:	e021      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fbf8 	bl	80099c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	021a      	lsls	r2, r3, #8
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009208:	e000      	b.n	800920c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800920a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop

08009228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIM_ConfigClockSource+0x18>
 800923c:	2302      	movs	r3, #2
 800923e:	e0a6      	b.n	800938e <HAL_TIM_ConfigClockSource+0x166>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4b4f      	ldr	r3, [pc, #316]	; (8009398 <HAL_TIM_ConfigClockSource+0x170>)
 800925c:	4013      	ands	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009266:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d067      	beq.n	8009348 <HAL_TIM_ConfigClockSource+0x120>
 8009278:	2b40      	cmp	r3, #64	; 0x40
 800927a:	d80b      	bhi.n	8009294 <HAL_TIM_ConfigClockSource+0x6c>
 800927c:	2b10      	cmp	r3, #16
 800927e:	d073      	beq.n	8009368 <HAL_TIM_ConfigClockSource+0x140>
 8009280:	2b10      	cmp	r3, #16
 8009282:	d802      	bhi.n	800928a <HAL_TIM_ConfigClockSource+0x62>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d06f      	beq.n	8009368 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009288:	e078      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800928a:	2b20      	cmp	r3, #32
 800928c:	d06c      	beq.n	8009368 <HAL_TIM_ConfigClockSource+0x140>
 800928e:	2b30      	cmp	r3, #48	; 0x30
 8009290:	d06a      	beq.n	8009368 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009292:	e073      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009294:	2b70      	cmp	r3, #112	; 0x70
 8009296:	d00d      	beq.n	80092b4 <HAL_TIM_ConfigClockSource+0x8c>
 8009298:	2b70      	cmp	r3, #112	; 0x70
 800929a:	d804      	bhi.n	80092a6 <HAL_TIM_ConfigClockSource+0x7e>
 800929c:	2b50      	cmp	r3, #80	; 0x50
 800929e:	d033      	beq.n	8009308 <HAL_TIM_ConfigClockSource+0xe0>
 80092a0:	2b60      	cmp	r3, #96	; 0x60
 80092a2:	d041      	beq.n	8009328 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80092a4:	e06a      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092aa:	d066      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x152>
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b0:	d017      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80092b2:	e063      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	6899      	ldr	r1, [r3, #8]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f000 fcd4 	bl	8009c70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	609a      	str	r2, [r3, #8]
      break;
 80092e0:	e04c      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	6899      	ldr	r1, [r3, #8]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f000 fcbd 	bl	8009c70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009304:	609a      	str	r2, [r3, #8]
      break;
 8009306:	e039      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	6859      	ldr	r1, [r3, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	461a      	mov	r2, r3
 8009316:	f000 fc31 	bl	8009b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2150      	movs	r1, #80	; 0x50
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fc8a 	bl	8009c3a <TIM_ITRx_SetConfig>
      break;
 8009326:	e029      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6818      	ldr	r0, [r3, #0]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	6859      	ldr	r1, [r3, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	461a      	mov	r2, r3
 8009336:	f000 fc50 	bl	8009bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2160      	movs	r1, #96	; 0x60
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fc7a 	bl	8009c3a <TIM_ITRx_SetConfig>
      break;
 8009346:	e019      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	6859      	ldr	r1, [r3, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	461a      	mov	r2, r3
 8009356:	f000 fc11 	bl	8009b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2140      	movs	r1, #64	; 0x40
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fc6a 	bl	8009c3a <TIM_ITRx_SetConfig>
      break;
 8009366:	e009      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4619      	mov	r1, r3
 8009372:	4610      	mov	r0, r2
 8009374:	f000 fc61 	bl	8009c3a <TIM_ITRx_SetConfig>
      break;
 8009378:	e000      	b.n	800937c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800937a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	fffeff88 	.word	0xfffeff88

0800939c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e031      	b.n	8009418 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fb50 	bl	8009a6c <TIM_SlaveTimer_SetConfig>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d009      	beq.n	80093e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e018      	b.n	8009418 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009404:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a40      	ldr	r2, [pc, #256]	; (8009584 <TIM_Base_SetConfig+0x114>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d013      	beq.n	80094b0 <TIM_Base_SetConfig+0x40>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948e:	d00f      	beq.n	80094b0 <TIM_Base_SetConfig+0x40>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a3d      	ldr	r2, [pc, #244]	; (8009588 <TIM_Base_SetConfig+0x118>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00b      	beq.n	80094b0 <TIM_Base_SetConfig+0x40>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a3c      	ldr	r2, [pc, #240]	; (800958c <TIM_Base_SetConfig+0x11c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d007      	beq.n	80094b0 <TIM_Base_SetConfig+0x40>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a3b      	ldr	r2, [pc, #236]	; (8009590 <TIM_Base_SetConfig+0x120>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_Base_SetConfig+0x40>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a3a      	ldr	r2, [pc, #232]	; (8009594 <TIM_Base_SetConfig+0x124>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d108      	bne.n	80094c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2f      	ldr	r2, [pc, #188]	; (8009584 <TIM_Base_SetConfig+0x114>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d02b      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d0:	d027      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a2c      	ldr	r2, [pc, #176]	; (8009588 <TIM_Base_SetConfig+0x118>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d023      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2b      	ldr	r2, [pc, #172]	; (800958c <TIM_Base_SetConfig+0x11c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d01f      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a2a      	ldr	r2, [pc, #168]	; (8009590 <TIM_Base_SetConfig+0x120>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d01b      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a29      	ldr	r2, [pc, #164]	; (8009594 <TIM_Base_SetConfig+0x124>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d017      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a28      	ldr	r2, [pc, #160]	; (8009598 <TIM_Base_SetConfig+0x128>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d013      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a27      	ldr	r2, [pc, #156]	; (800959c <TIM_Base_SetConfig+0x12c>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00f      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a26      	ldr	r2, [pc, #152]	; (80095a0 <TIM_Base_SetConfig+0x130>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00b      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a25      	ldr	r2, [pc, #148]	; (80095a4 <TIM_Base_SetConfig+0x134>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d007      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a24      	ldr	r2, [pc, #144]	; (80095a8 <TIM_Base_SetConfig+0x138>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_Base_SetConfig+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a23      	ldr	r2, [pc, #140]	; (80095ac <TIM_Base_SetConfig+0x13c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d108      	bne.n	8009534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	4313      	orrs	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <TIM_Base_SetConfig+0x114>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d003      	beq.n	8009568 <TIM_Base_SetConfig+0xf8>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <TIM_Base_SetConfig+0x124>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d103      	bne.n	8009570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	615a      	str	r2, [r3, #20]
}
 8009576:	bf00      	nop
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40010000 	.word	0x40010000
 8009588:	40000400 	.word	0x40000400
 800958c:	40000800 	.word	0x40000800
 8009590:	40000c00 	.word	0x40000c00
 8009594:	40010400 	.word	0x40010400
 8009598:	40014000 	.word	0x40014000
 800959c:	40014400 	.word	0x40014400
 80095a0:	40014800 	.word	0x40014800
 80095a4:	40001800 	.word	0x40001800
 80095a8:	40001c00 	.word	0x40001c00
 80095ac:	40002000 	.word	0x40002000

080095b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f023 0201 	bic.w	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4b2b      	ldr	r3, [pc, #172]	; (8009688 <TIM_OC1_SetConfig+0xd8>)
 80095dc:	4013      	ands	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0303 	bic.w	r3, r3, #3
 80095e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f023 0302 	bic.w	r3, r3, #2
 80095f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a21      	ldr	r2, [pc, #132]	; (800968c <TIM_OC1_SetConfig+0xdc>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d003      	beq.n	8009614 <TIM_OC1_SetConfig+0x64>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a20      	ldr	r2, [pc, #128]	; (8009690 <TIM_OC1_SetConfig+0xe0>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10c      	bne.n	800962e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0308 	bic.w	r3, r3, #8
 800961a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	4313      	orrs	r3, r2
 8009624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f023 0304 	bic.w	r3, r3, #4
 800962c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a16      	ldr	r2, [pc, #88]	; (800968c <TIM_OC1_SetConfig+0xdc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC1_SetConfig+0x8e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a15      	ldr	r2, [pc, #84]	; (8009690 <TIM_OC1_SetConfig+0xe0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d111      	bne.n	8009662 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800964c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	621a      	str	r2, [r3, #32]
}
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	fffeff8f 	.word	0xfffeff8f
 800968c:	40010000 	.word	0x40010000
 8009690:	40010400 	.word	0x40010400

08009694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	f023 0210 	bic.w	r2, r3, #16
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <TIM_OC2_SetConfig+0xe4>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f023 0320 	bic.w	r3, r3, #32
 80096de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	011b      	lsls	r3, r3, #4
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a23      	ldr	r2, [pc, #140]	; (800977c <TIM_OC2_SetConfig+0xe8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d003      	beq.n	80096fc <TIM_OC2_SetConfig+0x68>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a22      	ldr	r2, [pc, #136]	; (8009780 <TIM_OC2_SetConfig+0xec>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d10d      	bne.n	8009718 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	011b      	lsls	r3, r3, #4
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a18      	ldr	r2, [pc, #96]	; (800977c <TIM_OC2_SetConfig+0xe8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC2_SetConfig+0x94>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a17      	ldr	r2, [pc, #92]	; (8009780 <TIM_OC2_SetConfig+0xec>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d113      	bne.n	8009750 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800972e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	621a      	str	r2, [r3, #32]
}
 800976a:	bf00      	nop
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	feff8fff 	.word	0xfeff8fff
 800977c:	40010000 	.word	0x40010000
 8009780:	40010400 	.word	0x40010400

08009784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <TIM_OC3_SetConfig+0xe0>)
 80097b0:	4013      	ands	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a22      	ldr	r2, [pc, #136]	; (8009868 <TIM_OC3_SetConfig+0xe4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d003      	beq.n	80097ea <TIM_OC3_SetConfig+0x66>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a21      	ldr	r2, [pc, #132]	; (800986c <TIM_OC3_SetConfig+0xe8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d10d      	bne.n	8009806 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <TIM_OC3_SetConfig+0xe4>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_OC3_SetConfig+0x92>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a16      	ldr	r2, [pc, #88]	; (800986c <TIM_OC3_SetConfig+0xe8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d113      	bne.n	800983e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800981c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	fffeff8f 	.word	0xfffeff8f
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400

08009870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <TIM_OC4_SetConfig+0xa4>)
 800989c:	4013      	ands	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	031b      	lsls	r3, r3, #12
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a13      	ldr	r2, [pc, #76]	; (8009918 <TIM_OC4_SetConfig+0xa8>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d003      	beq.n	80098d8 <TIM_OC4_SetConfig+0x68>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a12      	ldr	r2, [pc, #72]	; (800991c <TIM_OC4_SetConfig+0xac>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d109      	bne.n	80098ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	019b      	lsls	r3, r3, #6
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	621a      	str	r2, [r3, #32]
}
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	feff8fff 	.word	0xfeff8fff
 8009918:	40010000 	.word	0x40010000
 800991c:	40010400 	.word	0x40010400

08009920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4b1b      	ldr	r3, [pc, #108]	; (80099b8 <TIM_OC5_SetConfig+0x98>)
 800994c:	4013      	ands	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a12      	ldr	r2, [pc, #72]	; (80099bc <TIM_OC5_SetConfig+0x9c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_OC5_SetConfig+0x5e>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a11      	ldr	r2, [pc, #68]	; (80099c0 <TIM_OC5_SetConfig+0xa0>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d109      	bne.n	8009992 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009984:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	621a      	str	r2, [r3, #32]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	fffeff8f 	.word	0xfffeff8f
 80099bc:	40010000 	.word	0x40010000
 80099c0:	40010400 	.word	0x40010400

080099c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4b1c      	ldr	r3, [pc, #112]	; (8009a60 <TIM_OC6_SetConfig+0x9c>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a13      	ldr	r2, [pc, #76]	; (8009a64 <TIM_OC6_SetConfig+0xa0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d003      	beq.n	8009a24 <TIM_OC6_SetConfig+0x60>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a12      	ldr	r2, [pc, #72]	; (8009a68 <TIM_OC6_SetConfig+0xa4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d109      	bne.n	8009a38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	029b      	lsls	r3, r3, #10
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	feff8fff 	.word	0xfeff8fff
 8009a64:	40010000 	.word	0x40010000
 8009a68:	40010400 	.word	0x40010400

08009a6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4b39      	ldr	r3, [pc, #228]	; (8009b78 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2b30      	cmp	r3, #48	; 0x30
 8009ab0:	d05c      	beq.n	8009b6c <TIM_SlaveTimer_SetConfig+0x100>
 8009ab2:	2b30      	cmp	r3, #48	; 0x30
 8009ab4:	d806      	bhi.n	8009ac4 <TIM_SlaveTimer_SetConfig+0x58>
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d058      	beq.n	8009b6c <TIM_SlaveTimer_SetConfig+0x100>
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d056      	beq.n	8009b6c <TIM_SlaveTimer_SetConfig+0x100>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d054      	beq.n	8009b6c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009ac2:	e054      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009ac4:	2b50      	cmp	r3, #80	; 0x50
 8009ac6:	d03d      	beq.n	8009b44 <TIM_SlaveTimer_SetConfig+0xd8>
 8009ac8:	2b50      	cmp	r3, #80	; 0x50
 8009aca:	d802      	bhi.n	8009ad2 <TIM_SlaveTimer_SetConfig+0x66>
 8009acc:	2b40      	cmp	r3, #64	; 0x40
 8009ace:	d010      	beq.n	8009af2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009ad0:	e04d      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009ad2:	2b60      	cmp	r3, #96	; 0x60
 8009ad4:	d040      	beq.n	8009b58 <TIM_SlaveTimer_SetConfig+0xec>
 8009ad6:	2b70      	cmp	r3, #112	; 0x70
 8009ad8:	d000      	beq.n	8009adc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009ada:	e048      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68d9      	ldr	r1, [r3, #12]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f000 f8c0 	bl	8009c70 <TIM_ETR_SetConfig>
      break;
 8009af0:	e03d      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d101      	bne.n	8009afe <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e038      	b.n	8009b70 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a1a      	ldr	r2, [r3, #32]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f022 0201 	bic.w	r2, r2, #1
 8009b14:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b24:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	621a      	str	r2, [r3, #32]
      break;
 8009b42:	e014      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6899      	ldr	r1, [r3, #8]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f000 f813 	bl	8009b7c <TIM_TI1_ConfigInputStage>
      break;
 8009b56:	e00a      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6899      	ldr	r1, [r3, #8]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	461a      	mov	r2, r3
 8009b66:	f000 f838 	bl	8009bda <TIM_TI2_ConfigInputStage>
      break;
 8009b6a:	e000      	b.n	8009b6e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009b6c:	bf00      	nop
  }
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	fffefff8 	.word	0xfffefff8

08009b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f023 0201 	bic.w	r2, r3, #1
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f023 030a 	bic.w	r3, r3, #10
 8009bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	621a      	str	r2, [r3, #32]
}
 8009bce:	bf00      	nop
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f023 0210 	bic.w	r2, r3, #16
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	031b      	lsls	r3, r3, #12
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	621a      	str	r2, [r3, #32]
}
 8009c2e:	bf00      	nop
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f043 0307 	orr.w	r3, r3, #7
 8009c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	609a      	str	r2, [r3, #8]
}
 8009c64:	bf00      	nop
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	021a      	lsls	r2, r3, #8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	431a      	orrs	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	609a      	str	r2, [r3, #8]
}
 8009ca4:	bf00      	nop
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e06d      	b.n	8009da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a30      	ldr	r2, [pc, #192]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a2f      	ldr	r2, [pc, #188]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d108      	bne.n	8009d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a20      	ldr	r2, [pc, #128]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d022      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3a:	d01d      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a1d      	ldr	r2, [pc, #116]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d018      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a1c      	ldr	r2, [pc, #112]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d013      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1a      	ldr	r2, [pc, #104]	; (8009dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00e      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a15      	ldr	r2, [pc, #84]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d009      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a16      	ldr	r2, [pc, #88]	; (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d004      	beq.n	8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d10c      	bne.n	8009d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400
 8009db8:	40000400 	.word	0x40000400
 8009dbc:	40000800 	.word	0x40000800
 8009dc0:	40000c00 	.word	0x40000c00
 8009dc4:	40014000 	.word	0x40014000
 8009dc8:	40001800 	.word	0x40001800

08009dcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e065      	b.n	8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a16      	ldr	r2, [pc, #88]	; (8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d004      	beq.n	8009e76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a14      	ldr	r2, [pc, #80]	; (8009ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d115      	bne.n	8009ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	051b      	lsls	r3, r3, #20
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	40010000 	.word	0x40010000
 8009ec4:	40010400 	.word	0x40010400

08009ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e040      	b.n	8009f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d106      	bne.n	8009f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7f9 ff82 	bl	8003e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2224      	movs	r2, #36	; 0x24
 8009f30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa14 	bl	800a370 <UART_SetConfig>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d101      	bne.n	8009f52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e022      	b.n	8009f98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fcb2 	bl	800a8c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0201 	orr.w	r2, r2, #1
 8009f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fd39 	bl	800aa08 <UART_CheckIdleState>
 8009f96:	4603      	mov	r3, r0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	f040 808a 	bne.w	800a0cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_UART_Receive_IT+0x24>
 8009fbe:	88fb      	ldrh	r3, [r7, #6]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e082      	b.n	800a0ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_UART_Receive_IT+0x36>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e07b      	b.n	800a0ce <HAL_UART_Receive_IT+0x12e>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a002:	d10e      	bne.n	800a022 <HAL_UART_Receive_IT+0x82>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d105      	bne.n	800a018 <HAL_UART_Receive_IT+0x78>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a016:	e02d      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	22ff      	movs	r2, #255	; 0xff
 800a01c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a020:	e028      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10d      	bne.n	800a046 <HAL_UART_Receive_IT+0xa6>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d104      	bne.n	800a03c <HAL_UART_Receive_IT+0x9c>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a03a:	e01b      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	227f      	movs	r2, #127	; 0x7f
 800a040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a044:	e016      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a04e:	d10d      	bne.n	800a06c <HAL_UART_Receive_IT+0xcc>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d104      	bne.n	800a062 <HAL_UART_Receive_IT+0xc2>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	227f      	movs	r2, #127	; 0x7f
 800a05c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a060:	e008      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	223f      	movs	r2, #63	; 0x3f
 800a066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a06a:	e003      	b.n	800a074 <HAL_UART_Receive_IT+0xd4>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2222      	movs	r2, #34	; 0x22
 800a07e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a098:	d107      	bne.n	800a0aa <HAL_UART_Receive_IT+0x10a>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a0d      	ldr	r2, [pc, #52]	; (800a0dc <HAL_UART_Receive_IT+0x13c>)
 800a0a6:	661a      	str	r2, [r3, #96]	; 0x60
 800a0a8:	e002      	b.n	800a0b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <HAL_UART_Receive_IT+0x140>)
 800a0ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a0c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e000      	b.n	800a0ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a0cc:	2302      	movs	r3, #2
  }
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	0800aca1 	.word	0x0800aca1
 800a0e0:	0800abfb 	.word	0x0800abfb

0800a0e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	f640 030f 	movw	r3, #2063	; 0x80f
 800a10a:	4013      	ands	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d113      	bne.n	800a13c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f003 0320 	and.w	r3, r3, #32
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00e      	beq.n	800a13c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d009      	beq.n	800a13c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8100 	beq.w	800a332 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
      }
      return;
 800a13a:	e0fa      	b.n	800a332 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f000 80d5 	beq.w	800a2ee <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 80ca 	beq.w	800a2ee <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <HAL_UART_IRQHandler+0x9e>
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2201      	movs	r2, #1
 800a174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17a:	f043 0201 	orr.w	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <HAL_UART_IRQHandler+0xc6>
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2202      	movs	r2, #2
 800a19c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1a2:	f043 0204 	orr.w	r2, r3, #4
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <HAL_UART_IRQHandler+0xee>
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d009      	beq.n	800a1d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ca:	f043 0202 	orr.w	r2, r3, #2
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	f003 0308 	and.w	r3, r3, #8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d013      	beq.n	800a204 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	f003 0320 	and.w	r3, r3, #32
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2208      	movs	r2, #8
 800a1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1fc:	f043 0208 	orr.w	r2, r3, #8
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00f      	beq.n	800a22e <HAL_UART_IRQHandler+0x14a>
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a226:	f043 0220 	orr.w	r2, r3, #32
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d07f      	beq.n	800a336 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a25e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26a:	2b40      	cmp	r3, #64	; 0x40
 800a26c:	d004      	beq.n	800a278 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a274:	2b00      	cmp	r3, #0
 800a276:	d031      	beq.n	800a2dc <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fc6f 	bl	800ab5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a288:	2b40      	cmp	r3, #64	; 0x40
 800a28a:	d123      	bne.n	800a2d4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a29a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d013      	beq.n	800a2cc <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a8:	4a26      	ldr	r2, [pc, #152]	; (800a344 <HAL_UART_IRQHandler+0x260>)
 800a2aa:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fa ff0f 	bl	80050d4 <HAL_DMA_Abort_IT>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d016      	beq.n	800a2ea <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ca:	e00e      	b.n	800a2ea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f845 	bl	800a35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d2:	e00a      	b.n	800a2ea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f841 	bl	800a35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2da:	e006      	b.n	800a2ea <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f83d 	bl	800a35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a2e8:	e025      	b.n	800a336 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ea:	bf00      	nop
    return;
 800a2ec:	e023      	b.n	800a336 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00d      	beq.n	800a314 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d008      	beq.n	800a314 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a306:	2b00      	cmp	r3, #0
 800a308:	d017      	beq.n	800a33a <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	4798      	blx	r3
    }
    return;
 800a312:	e012      	b.n	800a33a <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00e      	beq.n	800a33c <HAL_UART_IRQHandler+0x258>
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fc4d 	bl	800abc8 <UART_EndTransmit_IT>
    return;
 800a32e:	bf00      	nop
 800a330:	e004      	b.n	800a33c <HAL_UART_IRQHandler+0x258>
      return;
 800a332:	bf00      	nop
 800a334:	e002      	b.n	800a33c <HAL_UART_IRQHandler+0x258>
    return;
 800a336:	bf00      	nop
 800a338:	e000      	b.n	800a33c <HAL_UART_IRQHandler+0x258>
    return;
 800a33a:	bf00      	nop
  }

}
 800a33c:	3720      	adds	r7, #32
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	0800ab9d 	.word	0x0800ab9d

0800a348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a378:	2300      	movs	r3, #0
 800a37a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	431a      	orrs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4bb1      	ldr	r3, [pc, #708]	; (800a664 <UART_SetConfig+0x2f4>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	6939      	ldr	r1, [r7, #16]
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a9f      	ldr	r2, [pc, #636]	; (800a668 <UART_SetConfig+0x2f8>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d121      	bne.n	800a434 <UART_SetConfig+0xc4>
 800a3f0:	4b9e      	ldr	r3, [pc, #632]	; (800a66c <UART_SetConfig+0x2fc>)
 800a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d816      	bhi.n	800a42c <UART_SetConfig+0xbc>
 800a3fe:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <UART_SetConfig+0x94>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a421 	.word	0x0800a421
 800a40c:	0800a41b 	.word	0x0800a41b
 800a410:	0800a427 	.word	0x0800a427
 800a414:	2301      	movs	r3, #1
 800a416:	77fb      	strb	r3, [r7, #31]
 800a418:	e151      	b.n	800a6be <UART_SetConfig+0x34e>
 800a41a:	2302      	movs	r3, #2
 800a41c:	77fb      	strb	r3, [r7, #31]
 800a41e:	e14e      	b.n	800a6be <UART_SetConfig+0x34e>
 800a420:	2304      	movs	r3, #4
 800a422:	77fb      	strb	r3, [r7, #31]
 800a424:	e14b      	b.n	800a6be <UART_SetConfig+0x34e>
 800a426:	2308      	movs	r3, #8
 800a428:	77fb      	strb	r3, [r7, #31]
 800a42a:	e148      	b.n	800a6be <UART_SetConfig+0x34e>
 800a42c:	2310      	movs	r3, #16
 800a42e:	77fb      	strb	r3, [r7, #31]
 800a430:	bf00      	nop
 800a432:	e144      	b.n	800a6be <UART_SetConfig+0x34e>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a8d      	ldr	r2, [pc, #564]	; (800a670 <UART_SetConfig+0x300>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d134      	bne.n	800a4a8 <UART_SetConfig+0x138>
 800a43e:	4b8b      	ldr	r3, [pc, #556]	; (800a66c <UART_SetConfig+0x2fc>)
 800a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a444:	f003 030c 	and.w	r3, r3, #12
 800a448:	2b0c      	cmp	r3, #12
 800a44a:	d829      	bhi.n	800a4a0 <UART_SetConfig+0x130>
 800a44c:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <UART_SetConfig+0xe4>)
 800a44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a452:	bf00      	nop
 800a454:	0800a489 	.word	0x0800a489
 800a458:	0800a4a1 	.word	0x0800a4a1
 800a45c:	0800a4a1 	.word	0x0800a4a1
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a495 	.word	0x0800a495
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a4a1 	.word	0x0800a4a1
 800a470:	0800a4a1 	.word	0x0800a4a1
 800a474:	0800a48f 	.word	0x0800a48f
 800a478:	0800a4a1 	.word	0x0800a4a1
 800a47c:	0800a4a1 	.word	0x0800a4a1
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a49b 	.word	0x0800a49b
 800a488:	2300      	movs	r3, #0
 800a48a:	77fb      	strb	r3, [r7, #31]
 800a48c:	e117      	b.n	800a6be <UART_SetConfig+0x34e>
 800a48e:	2302      	movs	r3, #2
 800a490:	77fb      	strb	r3, [r7, #31]
 800a492:	e114      	b.n	800a6be <UART_SetConfig+0x34e>
 800a494:	2304      	movs	r3, #4
 800a496:	77fb      	strb	r3, [r7, #31]
 800a498:	e111      	b.n	800a6be <UART_SetConfig+0x34e>
 800a49a:	2308      	movs	r3, #8
 800a49c:	77fb      	strb	r3, [r7, #31]
 800a49e:	e10e      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	77fb      	strb	r3, [r7, #31]
 800a4a4:	bf00      	nop
 800a4a6:	e10a      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a71      	ldr	r2, [pc, #452]	; (800a674 <UART_SetConfig+0x304>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d120      	bne.n	800a4f4 <UART_SetConfig+0x184>
 800a4b2:	4b6e      	ldr	r3, [pc, #440]	; (800a66c <UART_SetConfig+0x2fc>)
 800a4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	d00f      	beq.n	800a4e0 <UART_SetConfig+0x170>
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	d802      	bhi.n	800a4ca <UART_SetConfig+0x15a>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <UART_SetConfig+0x164>
 800a4c8:	e010      	b.n	800a4ec <UART_SetConfig+0x17c>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d005      	beq.n	800a4da <UART_SetConfig+0x16a>
 800a4ce:	2b30      	cmp	r3, #48	; 0x30
 800a4d0:	d009      	beq.n	800a4e6 <UART_SetConfig+0x176>
 800a4d2:	e00b      	b.n	800a4ec <UART_SetConfig+0x17c>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	77fb      	strb	r3, [r7, #31]
 800a4d8:	e0f1      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	77fb      	strb	r3, [r7, #31]
 800a4de:	e0ee      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	77fb      	strb	r3, [r7, #31]
 800a4e4:	e0eb      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	77fb      	strb	r3, [r7, #31]
 800a4ea:	e0e8      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	bf00      	nop
 800a4f2:	e0e4      	b.n	800a6be <UART_SetConfig+0x34e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a5f      	ldr	r2, [pc, #380]	; (800a678 <UART_SetConfig+0x308>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d120      	bne.n	800a540 <UART_SetConfig+0x1d0>
 800a4fe:	4b5b      	ldr	r3, [pc, #364]	; (800a66c <UART_SetConfig+0x2fc>)
 800a500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a504:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a508:	2b40      	cmp	r3, #64	; 0x40
 800a50a:	d00f      	beq.n	800a52c <UART_SetConfig+0x1bc>
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	d802      	bhi.n	800a516 <UART_SetConfig+0x1a6>
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <UART_SetConfig+0x1b0>
 800a514:	e010      	b.n	800a538 <UART_SetConfig+0x1c8>
 800a516:	2b80      	cmp	r3, #128	; 0x80
 800a518:	d005      	beq.n	800a526 <UART_SetConfig+0x1b6>
 800a51a:	2bc0      	cmp	r3, #192	; 0xc0
 800a51c:	d009      	beq.n	800a532 <UART_SetConfig+0x1c2>
 800a51e:	e00b      	b.n	800a538 <UART_SetConfig+0x1c8>
 800a520:	2300      	movs	r3, #0
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e0cb      	b.n	800a6be <UART_SetConfig+0x34e>
 800a526:	2302      	movs	r3, #2
 800a528:	77fb      	strb	r3, [r7, #31]
 800a52a:	e0c8      	b.n	800a6be <UART_SetConfig+0x34e>
 800a52c:	2304      	movs	r3, #4
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	e0c5      	b.n	800a6be <UART_SetConfig+0x34e>
 800a532:	2308      	movs	r3, #8
 800a534:	77fb      	strb	r3, [r7, #31]
 800a536:	e0c2      	b.n	800a6be <UART_SetConfig+0x34e>
 800a538:	2310      	movs	r3, #16
 800a53a:	77fb      	strb	r3, [r7, #31]
 800a53c:	bf00      	nop
 800a53e:	e0be      	b.n	800a6be <UART_SetConfig+0x34e>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a4d      	ldr	r2, [pc, #308]	; (800a67c <UART_SetConfig+0x30c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d124      	bne.n	800a594 <UART_SetConfig+0x224>
 800a54a:	4b48      	ldr	r3, [pc, #288]	; (800a66c <UART_SetConfig+0x2fc>)
 800a54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a558:	d012      	beq.n	800a580 <UART_SetConfig+0x210>
 800a55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55e:	d802      	bhi.n	800a566 <UART_SetConfig+0x1f6>
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <UART_SetConfig+0x204>
 800a564:	e012      	b.n	800a58c <UART_SetConfig+0x21c>
 800a566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a56a:	d006      	beq.n	800a57a <UART_SetConfig+0x20a>
 800a56c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a570:	d009      	beq.n	800a586 <UART_SetConfig+0x216>
 800a572:	e00b      	b.n	800a58c <UART_SetConfig+0x21c>
 800a574:	2300      	movs	r3, #0
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e0a1      	b.n	800a6be <UART_SetConfig+0x34e>
 800a57a:	2302      	movs	r3, #2
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e09e      	b.n	800a6be <UART_SetConfig+0x34e>
 800a580:	2304      	movs	r3, #4
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e09b      	b.n	800a6be <UART_SetConfig+0x34e>
 800a586:	2308      	movs	r3, #8
 800a588:	77fb      	strb	r3, [r7, #31]
 800a58a:	e098      	b.n	800a6be <UART_SetConfig+0x34e>
 800a58c:	2310      	movs	r3, #16
 800a58e:	77fb      	strb	r3, [r7, #31]
 800a590:	bf00      	nop
 800a592:	e094      	b.n	800a6be <UART_SetConfig+0x34e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a39      	ldr	r2, [pc, #228]	; (800a680 <UART_SetConfig+0x310>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d124      	bne.n	800a5e8 <UART_SetConfig+0x278>
 800a59e:	4b33      	ldr	r3, [pc, #204]	; (800a66c <UART_SetConfig+0x2fc>)
 800a5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ac:	d012      	beq.n	800a5d4 <UART_SetConfig+0x264>
 800a5ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b2:	d802      	bhi.n	800a5ba <UART_SetConfig+0x24a>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <UART_SetConfig+0x258>
 800a5b8:	e012      	b.n	800a5e0 <UART_SetConfig+0x270>
 800a5ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5be:	d006      	beq.n	800a5ce <UART_SetConfig+0x25e>
 800a5c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5c4:	d009      	beq.n	800a5da <UART_SetConfig+0x26a>
 800a5c6:	e00b      	b.n	800a5e0 <UART_SetConfig+0x270>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e077      	b.n	800a6be <UART_SetConfig+0x34e>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	77fb      	strb	r3, [r7, #31]
 800a5d2:	e074      	b.n	800a6be <UART_SetConfig+0x34e>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e071      	b.n	800a6be <UART_SetConfig+0x34e>
 800a5da:	2308      	movs	r3, #8
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e06e      	b.n	800a6be <UART_SetConfig+0x34e>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	bf00      	nop
 800a5e6:	e06a      	b.n	800a6be <UART_SetConfig+0x34e>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a25      	ldr	r2, [pc, #148]	; (800a684 <UART_SetConfig+0x314>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d124      	bne.n	800a63c <UART_SetConfig+0x2cc>
 800a5f2:	4b1e      	ldr	r3, [pc, #120]	; (800a66c <UART_SetConfig+0x2fc>)
 800a5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a600:	d012      	beq.n	800a628 <UART_SetConfig+0x2b8>
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d802      	bhi.n	800a60e <UART_SetConfig+0x29e>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <UART_SetConfig+0x2ac>
 800a60c:	e012      	b.n	800a634 <UART_SetConfig+0x2c4>
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a612:	d006      	beq.n	800a622 <UART_SetConfig+0x2b2>
 800a614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a618:	d009      	beq.n	800a62e <UART_SetConfig+0x2be>
 800a61a:	e00b      	b.n	800a634 <UART_SetConfig+0x2c4>
 800a61c:	2300      	movs	r3, #0
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e04d      	b.n	800a6be <UART_SetConfig+0x34e>
 800a622:	2302      	movs	r3, #2
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e04a      	b.n	800a6be <UART_SetConfig+0x34e>
 800a628:	2304      	movs	r3, #4
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e047      	b.n	800a6be <UART_SetConfig+0x34e>
 800a62e:	2308      	movs	r3, #8
 800a630:	77fb      	strb	r3, [r7, #31]
 800a632:	e044      	b.n	800a6be <UART_SetConfig+0x34e>
 800a634:	2310      	movs	r3, #16
 800a636:	77fb      	strb	r3, [r7, #31]
 800a638:	bf00      	nop
 800a63a:	e040      	b.n	800a6be <UART_SetConfig+0x34e>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a11      	ldr	r2, [pc, #68]	; (800a688 <UART_SetConfig+0x318>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d139      	bne.n	800a6ba <UART_SetConfig+0x34a>
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <UART_SetConfig+0x2fc>)
 800a648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a654:	d027      	beq.n	800a6a6 <UART_SetConfig+0x336>
 800a656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a65a:	d817      	bhi.n	800a68c <UART_SetConfig+0x31c>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01c      	beq.n	800a69a <UART_SetConfig+0x32a>
 800a660:	e027      	b.n	800a6b2 <UART_SetConfig+0x342>
 800a662:	bf00      	nop
 800a664:	efff69f3 	.word	0xefff69f3
 800a668:	40011000 	.word	0x40011000
 800a66c:	40023800 	.word	0x40023800
 800a670:	40004400 	.word	0x40004400
 800a674:	40004800 	.word	0x40004800
 800a678:	40004c00 	.word	0x40004c00
 800a67c:	40005000 	.word	0x40005000
 800a680:	40011400 	.word	0x40011400
 800a684:	40007800 	.word	0x40007800
 800a688:	40007c00 	.word	0x40007c00
 800a68c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a690:	d006      	beq.n	800a6a0 <UART_SetConfig+0x330>
 800a692:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a696:	d009      	beq.n	800a6ac <UART_SetConfig+0x33c>
 800a698:	e00b      	b.n	800a6b2 <UART_SetConfig+0x342>
 800a69a:	2300      	movs	r3, #0
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	e00e      	b.n	800a6be <UART_SetConfig+0x34e>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	e00b      	b.n	800a6be <UART_SetConfig+0x34e>
 800a6a6:	2304      	movs	r3, #4
 800a6a8:	77fb      	strb	r3, [r7, #31]
 800a6aa:	e008      	b.n	800a6be <UART_SetConfig+0x34e>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e005      	b.n	800a6be <UART_SetConfig+0x34e>
 800a6b2:	2310      	movs	r3, #16
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	bf00      	nop
 800a6b8:	e001      	b.n	800a6be <UART_SetConfig+0x34e>
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6c6:	d17f      	bne.n	800a7c8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a6c8:	7ffb      	ldrb	r3, [r7, #31]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d85c      	bhi.n	800a788 <UART_SetConfig+0x418>
 800a6ce:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <UART_SetConfig+0x364>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a6f9 	.word	0x0800a6f9
 800a6d8:	0800a719 	.word	0x0800a719
 800a6dc:	0800a739 	.word	0x0800a739
 800a6e0:	0800a789 	.word	0x0800a789
 800a6e4:	0800a751 	.word	0x0800a751
 800a6e8:	0800a789 	.word	0x0800a789
 800a6ec:	0800a789 	.word	0x0800a789
 800a6f0:	0800a789 	.word	0x0800a789
 800a6f4:	0800a771 	.word	0x0800a771
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6f8:	f7fd f8ee 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 800a6fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	005a      	lsls	r2, r3, #1
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	085b      	lsrs	r3, r3, #1
 800a708:	441a      	add	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a712:	b29b      	uxth	r3, r3
 800a714:	61bb      	str	r3, [r7, #24]
        break;
 800a716:	e03a      	b.n	800a78e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a718:	f7fd f8f2 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 800a71c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	005a      	lsls	r2, r3, #1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	441a      	add	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a732:	b29b      	uxth	r3, r3
 800a734:	61bb      	str	r3, [r7, #24]
        break;
 800a736:	e02a      	b.n	800a78e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	085a      	lsrs	r2, r3, #1
 800a73e:	4b5f      	ldr	r3, [pc, #380]	; (800a8bc <UART_SetConfig+0x54c>)
 800a740:	4413      	add	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6852      	ldr	r2, [r2, #4]
 800a746:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	61bb      	str	r3, [r7, #24]
        break;
 800a74e:	e01e      	b.n	800a78e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a750:	f7fd f804 	bl	800775c <HAL_RCC_GetSysClockFreq>
 800a754:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	005a      	lsls	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	085b      	lsrs	r3, r3, #1
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	61bb      	str	r3, [r7, #24]
        break;
 800a76e:	e00e      	b.n	800a78e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a782:	b29b      	uxth	r3, r3
 800a784:	61bb      	str	r3, [r7, #24]
        break;
 800a786:	e002      	b.n	800a78e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	75fb      	strb	r3, [r7, #23]
        break;
 800a78c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	2b0f      	cmp	r3, #15
 800a792:	d916      	bls.n	800a7c2 <UART_SetConfig+0x452>
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a79a:	d212      	bcs.n	800a7c2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f023 030f 	bic.w	r3, r3, #15
 800a7a4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	897b      	ldrh	r3, [r7, #10]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	897a      	ldrh	r2, [r7, #10]
 800a7be:	60da      	str	r2, [r3, #12]
 800a7c0:	e070      	b.n	800a8a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75fb      	strb	r3, [r7, #23]
 800a7c6:	e06d      	b.n	800a8a4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d859      	bhi.n	800a882 <UART_SetConfig+0x512>
 800a7ce:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <UART_SetConfig+0x464>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a817 	.word	0x0800a817
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a883 	.word	0x0800a883
 800a7e4:	0800a84d 	.word	0x0800a84d
 800a7e8:	0800a883 	.word	0x0800a883
 800a7ec:	0800a883 	.word	0x0800a883
 800a7f0:	0800a883 	.word	0x0800a883
 800a7f4:	0800a86b 	.word	0x0800a86b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7f8:	f7fd f86e 	bl	80078d8 <HAL_RCC_GetPCLK1Freq>
 800a7fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	085a      	lsrs	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	441a      	add	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a810:	b29b      	uxth	r3, r3
 800a812:	61bb      	str	r3, [r7, #24]
        break;
 800a814:	e038      	b.n	800a888 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a816:	f7fd f873 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 800a81a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	085a      	lsrs	r2, r3, #1
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a82e:	b29b      	uxth	r3, r3
 800a830:	61bb      	str	r3, [r7, #24]
        break;
 800a832:	e029      	b.n	800a888 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	085a      	lsrs	r2, r3, #1
 800a83a:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <UART_SetConfig+0x550>)
 800a83c:	4413      	add	r3, r2
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6852      	ldr	r2, [r2, #4]
 800a842:	fbb3 f3f2 	udiv	r3, r3, r2
 800a846:	b29b      	uxth	r3, r3
 800a848:	61bb      	str	r3, [r7, #24]
        break;
 800a84a:	e01d      	b.n	800a888 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a84c:	f7fc ff86 	bl	800775c <HAL_RCC_GetSysClockFreq>
 800a850:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085a      	lsrs	r2, r3, #1
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	441a      	add	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	fbb2 f3f3 	udiv	r3, r2, r3
 800a864:	b29b      	uxth	r3, r3
 800a866:	61bb      	str	r3, [r7, #24]
        break;
 800a868:	e00e      	b.n	800a888 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	61bb      	str	r3, [r7, #24]
        break;
 800a880:	e002      	b.n	800a888 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	75fb      	strb	r3, [r7, #23]
        break;
 800a886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2b0f      	cmp	r3, #15
 800a88c:	d908      	bls.n	800a8a0 <UART_SetConfig+0x530>
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a894:	d204      	bcs.n	800a8a0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	e001      	b.n	800a8a4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	01e84800 	.word	0x01e84800
 800a8c0:	00f42400 	.word	0x00f42400

0800a8c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00a      	beq.n	800a8ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00a      	beq.n	800a932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	f003 0308 	and.w	r3, r3, #8
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	f003 0310 	and.w	r3, r3, #16
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00a      	beq.n	800a976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	f003 0320 	and.w	r3, r3, #32
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00a      	beq.n	800a998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	430a      	orrs	r2, r1
 800a996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01a      	beq.n	800a9da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c2:	d10a      	bne.n	800a9da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00a      	beq.n	800a9fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	605a      	str	r2, [r3, #4]
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aa16:	f7f9 fc99 	bl	800434c <HAL_GetTick>
 800aa1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d10e      	bne.n	800aa48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f814 	bl	800aa66 <UART_WaitOnFlagUntilTimeout>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e00a      	b.n	800aa5e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	603b      	str	r3, [r7, #0]
 800aa72:	4613      	mov	r3, r2
 800aa74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa76:	e05d      	b.n	800ab34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d059      	beq.n	800ab34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa80:	f7f9 fc64 	bl	800434c <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	69ba      	ldr	r2, [r7, #24]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d302      	bcc.n	800aa96 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d11b      	bne.n	800aace <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aaa4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0201 	bic.w	r2, r2, #1
 800aab4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2220      	movs	r2, #32
 800aaba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2220      	movs	r2, #32
 800aac0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e042      	b.n	800ab54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d02b      	beq.n	800ab34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaea:	d123      	bne.n	800ab34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2220      	movs	r2, #32
 800ab26:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e00f      	b.n	800ab54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	69da      	ldr	r2, [r3, #28]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	bf0c      	ite	eq
 800ab44:	2301      	moveq	r3, #1
 800ab46:	2300      	movne	r3, #0
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d092      	beq.n	800aa78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0201 	bic.w	r2, r2, #1
 800ab82:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2220      	movs	r2, #32
 800ab88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fbce 	bl	800a35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abde:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2220      	movs	r2, #32
 800abe4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff fbab 	bl	800a348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac08:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac0e:	2b22      	cmp	r3, #34	; 0x22
 800ac10:	d13a      	bne.n	800ac88 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac1a:	89bb      	ldrh	r3, [r7, #12]
 800ac1c:	b2d9      	uxtb	r1, r3
 800ac1e:	89fb      	ldrh	r3, [r7, #14]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac26:	400a      	ands	r2, r1
 800ac28:	b2d2      	uxtb	r2, r2
 800ac2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d121      	bne.n	800ac98 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0201 	bic.w	r2, r2, #1
 800ac72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2220      	movs	r2, #32
 800ac78:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7f7 f821 	bl	8001cc8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac86:	e007      	b.n	800ac98 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f042 0208 	orr.w	r2, r2, #8
 800ac96:	619a      	str	r2, [r3, #24]
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acb4:	2b22      	cmp	r3, #34	; 0x22
 800acb6:	d13a      	bne.n	800ad2e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800acc6:	89ba      	ldrh	r2, [r7, #12]
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	4013      	ands	r3, r2
 800accc:	b29a      	uxth	r2, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd6:	1c9a      	adds	r2, r3, #2
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d121      	bne.n	800ad3e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad08:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0201 	bic.w	r2, r2, #1
 800ad18:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7f6 ffce 	bl	8001cc8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad2c:	e007      	b.n	800ad3e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	699a      	ldr	r2, [r3, #24]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0208 	orr.w	r2, r2, #8
 800ad3c:	619a      	str	r2, [r3, #24]
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d027      	beq.n	800adb2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	4b2f      	ldr	r3, [pc, #188]	; (800ae28 <FMC_SDRAM_Init+0xe0>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad78:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ad7e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ad84:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ad8a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ad90:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ad96:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ad9c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ada2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	e032      	b.n	800ae18 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adbe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800adc8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800adce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	4313      	orrs	r3, r2
 800add4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	4b12      	ldr	r3, [pc, #72]	; (800ae28 <FMC_SDRAM_Init+0xe0>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800adec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800adf2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800adf8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800adfe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ae04:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	ffff8000 	.word	0xffff8000

0800ae2c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d02e      	beq.n	800aea4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae52:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae62:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ae6c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ae76:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ae80:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ae8a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae94:	4313      	orrs	r3, r2
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	609a      	str	r2, [r3, #8]
 800aea2:	e039      	b.n	800af18 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <FMC_SDRAM_Timing_Init+0xfc>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800aec2:	4313      	orrs	r3, r2
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aed6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aee6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aef0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aefa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	3b01      	subs	r3, #1
 800af02:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af04:	4313      	orrs	r3, r2
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	4313      	orrs	r3, r2
 800af0a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	ff0f0fff 	.word	0xff0f0fff

0800af2c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af44:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800af4e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800af56:	4313      	orrs	r3, r2
 800af58:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	371c      	adds	r7, #28
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	695a      	ldr	r2, [r3, #20]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	005b      	lsls	r3, r3, #1
 800af80:	431a      	orrs	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800afa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afa6:	2b84      	cmp	r3, #132	; 0x84
 800afa8:	d005      	beq.n	800afb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800afaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4413      	add	r3, r2
 800afb2:	3303      	adds	r3, #3
 800afb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800afc8:	f001 f9e6 	bl	800c398 <vTaskStartScheduler>
  
  return osOK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800afd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd4:	b089      	sub	sp, #36	; 0x24
 800afd6:	af04      	add	r7, sp, #16
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d020      	beq.n	800b026 <osThreadCreate+0x54>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01c      	beq.n	800b026 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685c      	ldr	r4, [r3, #4]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681d      	ldr	r5, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691e      	ldr	r6, [r3, #16]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff ffc8 	bl	800af94 <makeFreeRtosPriority>
 800b004:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b00e:	9202      	str	r2, [sp, #8]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	9100      	str	r1, [sp, #0]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	4632      	mov	r2, r6
 800b018:	4629      	mov	r1, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fede 	bl	800bddc <xTaskCreateStatic>
 800b020:	4603      	mov	r3, r0
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e01c      	b.n	800b060 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685c      	ldr	r4, [r3, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b032:	b29e      	uxth	r6, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff ffaa 	bl	800af94 <makeFreeRtosPriority>
 800b040:	4602      	mov	r2, r0
 800b042:	f107 030c 	add.w	r3, r7, #12
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	9200      	str	r2, [sp, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	4632      	mov	r2, r6
 800b04e:	4629      	mov	r1, r5
 800b050:	4620      	mov	r0, r4
 800b052:	f000 ff23 	bl	800be9c <xTaskCreate>
 800b056:	4603      	mov	r3, r0
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d001      	beq.n	800b060 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	e000      	b.n	800b062 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b060:	68fb      	ldr	r3, [r7, #12]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b06a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <osDelay+0x16>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	e000      	b.n	800b082 <osDelay+0x18>
 800b080:	2301      	movs	r3, #1
 800b082:	4618      	mov	r0, r3
 800b084:	f001 f952 	bl	800c32c <vTaskDelay>
  
  return osOK;
 800b088:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f000 fa60 	bl	800b56e <xQueueCreateMutexStatic>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	e003      	b.n	800b0ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f000 fa43 	bl	800b53e <xQueueCreateMutex>
 800b0b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b0c2:	b590      	push	{r4, r7, lr}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af02      	add	r7, sp, #8
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <osMessageCreate+0x38>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00e      	beq.n	800b0fa <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6859      	ldr	r1, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689a      	ldr	r2, [r3, #8]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	68dc      	ldr	r4, [r3, #12]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	f000 f92d 	bl	800b350 <xQueueGenericCreateStatic>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	e008      	b.n	800b10c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	4619      	mov	r1, r3
 800b106:	f000 f9a0 	bl	800b44a <xQueueGenericCreate>
 800b10a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	bd90      	pop	{r4, r7, pc}

0800b114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f103 0208 	add.w	r2, r3, #8
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f04f 32ff 	mov.w	r2, #4294967295
 800b12c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 0208 	add.w	r2, r3, #8
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f103 0208 	add.w	r2, r3, #8
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b16e:	b480      	push	{r7}
 800b170:	b085      	sub	sp, #20
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d103      	bne.n	800b1d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e00c      	b.n	800b1f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3308      	adds	r3, #8
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	e002      	b.n	800b1e4 <vListInsert+0x2e>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d2f6      	bcs.n	800b1de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	601a      	str	r2, [r3, #0]
}
 800b21c:	bf00      	nop
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6892      	ldr	r2, [r2, #8]
 800b23e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	6852      	ldr	r2, [r2, #4]
 800b248:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d103      	bne.n	800b25c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689a      	ldr	r2, [r3, #8]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10b      	bne.n	800b2a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	b672      	cpsid	i
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	b662      	cpsie	i
 800b2a4:	60bb      	str	r3, [r7, #8]
 800b2a6:	e7fe      	b.n	800b2a6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b2a8:	f001 ffd6 	bl	800d258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b4:	68f9      	ldr	r1, [r7, #12]
 800b2b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2b8:	fb01 f303 	mul.w	r3, r1, r3
 800b2bc:	441a      	add	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	68f9      	ldr	r1, [r7, #12]
 800b2dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2de:	fb01 f303 	mul.w	r3, r1, r3
 800b2e2:	441a      	add	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	22ff      	movs	r2, #255	; 0xff
 800b2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	22ff      	movs	r2, #255	; 0xff
 800b2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d114      	bne.n	800b328 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01a      	beq.n	800b33c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	3310      	adds	r3, #16
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 fa9e 	bl	800c84c <xTaskRemoveFromEventList>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d012      	beq.n	800b33c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b316:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <xQueueGenericReset+0xd0>)
 800b318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	e009      	b.n	800b33c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3310      	adds	r3, #16
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fef1 	bl	800b114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3324      	adds	r3, #36	; 0x24
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff feec 	bl	800b114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b33c:	f001 ffbe 	bl	800d2bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b340:	2301      	movs	r3, #1
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	e000ed04 	.word	0xe000ed04

0800b350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10b      	bne.n	800b37c <xQueueGenericCreateStatic+0x2c>
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	b672      	cpsid	i
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	b662      	cpsie	i
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
 800b37a:	e7fe      	b.n	800b37a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10b      	bne.n	800b39a <xQueueGenericCreateStatic+0x4a>
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	b672      	cpsid	i
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	b662      	cpsie	i
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
 800b398:	e7fe      	b.n	800b398 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <xQueueGenericCreateStatic+0x56>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <xQueueGenericCreateStatic+0x5a>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <xQueueGenericCreateStatic+0x5c>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10b      	bne.n	800b3c8 <xQueueGenericCreateStatic+0x78>
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	b672      	cpsid	i
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	b662      	cpsie	i
 800b3c4:	623b      	str	r3, [r7, #32]
 800b3c6:	e7fe      	b.n	800b3c6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d102      	bne.n	800b3d4 <xQueueGenericCreateStatic+0x84>
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <xQueueGenericCreateStatic+0x88>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <xQueueGenericCreateStatic+0x8a>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <xQueueGenericCreateStatic+0xa6>
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	b672      	cpsid	i
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	b662      	cpsie	i
 800b3f2:	61fb      	str	r3, [r7, #28]
 800b3f4:	e7fe      	b.n	800b3f4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3f6:	2348      	movs	r3, #72	; 0x48
 800b3f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b48      	cmp	r3, #72	; 0x48
 800b3fe:	d00b      	beq.n	800b418 <xQueueGenericCreateStatic+0xc8>
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	b672      	cpsid	i
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	b662      	cpsie	i
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	e7fe      	b.n	800b416 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b418:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00d      	beq.n	800b440 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b42c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	68b9      	ldr	r1, [r7, #8]
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 f846 	bl	800b4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b442:	4618      	mov	r0, r3
 800b444:	3730      	adds	r7, #48	; 0x30
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b08a      	sub	sp, #40	; 0x28
 800b44e:	af02      	add	r7, sp, #8
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	4613      	mov	r3, r2
 800b456:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10b      	bne.n	800b476 <xQueueGenericCreate+0x2c>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	b672      	cpsid	i
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	b662      	cpsie	i
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	e7fe      	b.n	800b474 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d102      	bne.n	800b482 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	61fb      	str	r3, [r7, #28]
 800b480:	e004      	b.n	800b48c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	fb02 f303 	mul.w	r3, r2, r3
 800b48a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	3348      	adds	r3, #72	; 0x48
 800b490:	4618      	mov	r0, r3
 800b492:	f001 ffc1 	bl	800d418 <pvPortMalloc>
 800b496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d011      	beq.n	800b4c2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	3348      	adds	r3, #72	; 0x48
 800b4a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4b0:	79fa      	ldrb	r2, [r7, #7]
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	68b9      	ldr	r1, [r7, #8]
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f805 	bl	800b4cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d103      	bne.n	800b4e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	69b8      	ldr	r0, [r7, #24]
 800b4fe:	f7ff febd 	bl	800b27c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b502:	bf00      	nop
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00e      	beq.n	800b536 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b52a:	2300      	movs	r3, #0
 800b52c:	2200      	movs	r2, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f837 	bl	800b5a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b086      	sub	sp, #24
 800b542:	af00      	add	r7, sp, #0
 800b544:	4603      	mov	r3, r0
 800b546:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b548:	2301      	movs	r3, #1
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	461a      	mov	r2, r3
 800b554:	6939      	ldr	r1, [r7, #16]
 800b556:	6978      	ldr	r0, [r7, #20]
 800b558:	f7ff ff77 	bl	800b44a <xQueueGenericCreate>
 800b55c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7ff ffd3 	bl	800b50a <prvInitialiseMutex>

		return xNewQueue;
 800b564:	68fb      	ldr	r3, [r7, #12]
	}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b088      	sub	sp, #32
 800b572:	af02      	add	r7, sp, #8
 800b574:	4603      	mov	r3, r0
 800b576:	6039      	str	r1, [r7, #0]
 800b578:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b57a:	2301      	movs	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	2300      	movs	r3, #0
 800b580:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2200      	movs	r2, #0
 800b58a:	6939      	ldr	r1, [r7, #16]
 800b58c:	6978      	ldr	r0, [r7, #20]
 800b58e:	f7ff fedf 	bl	800b350 <xQueueGenericCreateStatic>
 800b592:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff ffb8 	bl	800b50a <prvInitialiseMutex>

		return xNewQueue;
 800b59a:	68fb      	ldr	r3, [r7, #12]
	}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08e      	sub	sp, #56	; 0x38
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <xQueueGenericSend+0x34>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	b672      	cpsid	i
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	b662      	cpsie	i
 800b5d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5d6:	e7fe      	b.n	800b5d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d103      	bne.n	800b5e6 <xQueueGenericSend+0x42>
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <xQueueGenericSend+0x46>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e000      	b.n	800b5ec <xQueueGenericSend+0x48>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10b      	bne.n	800b608 <xQueueGenericSend+0x64>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	b672      	cpsid	i
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	b662      	cpsie	i
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
 800b606:	e7fe      	b.n	800b606 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d103      	bne.n	800b616 <xQueueGenericSend+0x72>
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	2b01      	cmp	r3, #1
 800b614:	d101      	bne.n	800b61a <xQueueGenericSend+0x76>
 800b616:	2301      	movs	r3, #1
 800b618:	e000      	b.n	800b61c <xQueueGenericSend+0x78>
 800b61a:	2300      	movs	r3, #0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10b      	bne.n	800b638 <xQueueGenericSend+0x94>
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	b672      	cpsid	i
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	b662      	cpsie	i
 800b634:	623b      	str	r3, [r7, #32]
 800b636:	e7fe      	b.n	800b636 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b638:	f001 fac6 	bl	800cbc8 <xTaskGetSchedulerState>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <xQueueGenericSend+0xa4>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <xQueueGenericSend+0xa8>
 800b648:	2301      	movs	r3, #1
 800b64a:	e000      	b.n	800b64e <xQueueGenericSend+0xaa>
 800b64c:	2300      	movs	r3, #0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10b      	bne.n	800b66a <xQueueGenericSend+0xc6>
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	b672      	cpsid	i
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	b662      	cpsie	i
 800b666:	61fb      	str	r3, [r7, #28]
 800b668:	e7fe      	b.n	800b668 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b66a:	f001 fdf5 	bl	800d258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	429a      	cmp	r2, r3
 800b678:	d302      	bcc.n	800b680 <xQueueGenericSend+0xdc>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d129      	bne.n	800b6d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b686:	f000 fa99 	bl	800bbbc <prvCopyDataToQueue>
 800b68a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d010      	beq.n	800b6b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	3324      	adds	r3, #36	; 0x24
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 f8d7 	bl	800c84c <xTaskRemoveFromEventList>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d013      	beq.n	800b6cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6a4:	4b3f      	ldr	r3, [pc, #252]	; (800b7a4 <xQueueGenericSend+0x200>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	e00a      	b.n	800b6cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d007      	beq.n	800b6cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6bc:	4b39      	ldr	r3, [pc, #228]	; (800b7a4 <xQueueGenericSend+0x200>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6cc:	f001 fdf6 	bl	800d2bc <vPortExitCritical>
				return pdPASS;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e063      	b.n	800b79c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6da:	f001 fdef 	bl	800d2bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e05c      	b.n	800b79c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f001 f911 	bl	800c914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6f6:	f001 fde1 	bl	800d2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6fa:	f000 feaf 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6fe:	f001 fdab 	bl	800d258 <vPortEnterCritical>
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b708:	b25b      	sxtb	r3, r3
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	d103      	bne.n	800b718 <xQueueGenericSend+0x174>
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b71e:	b25b      	sxtb	r3, r3
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d103      	bne.n	800b72e <xQueueGenericSend+0x18a>
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b72e:	f001 fdc5 	bl	800d2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b732:	1d3a      	adds	r2, r7, #4
 800b734:	f107 0314 	add.w	r3, r7, #20
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f001 f900 	bl	800c940 <xTaskCheckForTimeOut>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d124      	bne.n	800b790 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b748:	f000 fb30 	bl	800bdac <prvIsQueueFull>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d018      	beq.n	800b784 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	3310      	adds	r3, #16
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f001 f850 	bl	800c800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b762:	f000 fabb 	bl	800bcdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b766:	f000 fe87 	bl	800c478 <xTaskResumeAll>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f47f af7c 	bne.w	800b66a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b772:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <xQueueGenericSend+0x200>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	e772      	b.n	800b66a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b786:	f000 faa9 	bl	800bcdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b78a:	f000 fe75 	bl	800c478 <xTaskResumeAll>
 800b78e:	e76c      	b.n	800b66a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b792:	f000 faa3 	bl	800bcdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b796:	f000 fe6f 	bl	800c478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b79a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3738      	adds	r7, #56	; 0x38
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	; 0x30
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10b      	bne.n	800b7da <xQueueReceive+0x32>
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	b672      	cpsid	i
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	b662      	cpsie	i
 800b7d6:	623b      	str	r3, [r7, #32]
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <xQueueReceive+0x40>
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <xQueueReceive+0x44>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e000      	b.n	800b7ee <xQueueReceive+0x46>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10b      	bne.n	800b80a <xQueueReceive+0x62>
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	b672      	cpsid	i
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	b662      	cpsie	i
 800b806:	61fb      	str	r3, [r7, #28]
 800b808:	e7fe      	b.n	800b808 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b80a:	f001 f9dd 	bl	800cbc8 <xTaskGetSchedulerState>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <xQueueReceive+0x72>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <xQueueReceive+0x76>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e000      	b.n	800b820 <xQueueReceive+0x78>
 800b81e:	2300      	movs	r3, #0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10b      	bne.n	800b83c <xQueueReceive+0x94>
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	b672      	cpsid	i
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	b662      	cpsie	i
 800b838:	61bb      	str	r3, [r7, #24]
 800b83a:	e7fe      	b.n	800b83a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b83c:	f001 fd0c 	bl	800d258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b844:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01f      	beq.n	800b88c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b84c:	68b9      	ldr	r1, [r7, #8]
 800b84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b850:	f000 fa1e 	bl	800bc90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00f      	beq.n	800b884 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	3310      	adds	r3, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 ffef 	bl	800c84c <xTaskRemoveFromEventList>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d007      	beq.n	800b884 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b874:	4b3c      	ldr	r3, [pc, #240]	; (800b968 <xQueueReceive+0x1c0>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b884:	f001 fd1a 	bl	800d2bc <vPortExitCritical>
				return pdPASS;
 800b888:	2301      	movs	r3, #1
 800b88a:	e069      	b.n	800b960 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d103      	bne.n	800b89a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b892:	f001 fd13 	bl	800d2bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b896:	2300      	movs	r3, #0
 800b898:	e062      	b.n	800b960 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8a0:	f107 0310 	add.w	r3, r7, #16
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 f835 	bl	800c914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8ae:	f001 fd05 	bl	800d2bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8b2:	f000 fdd3 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8b6:	f001 fccf 	bl	800d258 <vPortEnterCritical>
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c6:	d103      	bne.n	800b8d0 <xQueueReceive+0x128>
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d103      	bne.n	800b8e6 <xQueueReceive+0x13e>
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e6:	f001 fce9 	bl	800d2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8ea:	1d3a      	adds	r2, r7, #4
 800b8ec:	f107 0310 	add.w	r3, r7, #16
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 f824 	bl	800c940 <xTaskCheckForTimeOut>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d123      	bne.n	800b946 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b900:	f000 fa3e 	bl	800bd80 <prvIsQueueEmpty>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d017      	beq.n	800b93a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	3324      	adds	r3, #36	; 0x24
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f000 ff74 	bl	800c800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91a:	f000 f9df 	bl	800bcdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b91e:	f000 fdab 	bl	800c478 <xTaskResumeAll>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d189      	bne.n	800b83c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b928:	4b0f      	ldr	r3, [pc, #60]	; (800b968 <xQueueReceive+0x1c0>)
 800b92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	e780      	b.n	800b83c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b93c:	f000 f9ce 	bl	800bcdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b940:	f000 fd9a 	bl	800c478 <xTaskResumeAll>
 800b944:	e77a      	b.n	800b83c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b948:	f000 f9c8 	bl	800bcdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b94c:	f000 fd94 	bl	800c478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b952:	f000 fa15 	bl	800bd80 <prvIsQueueEmpty>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f43f af6f 	beq.w	800b83c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b95e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b960:	4618      	mov	r0, r3
 800b962:	3730      	adds	r7, #48	; 0x30
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08e      	sub	sp, #56	; 0x38
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b97e:	2300      	movs	r3, #0
 800b980:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <xQueueSemaphoreTake+0x34>
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	b672      	cpsid	i
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	b662      	cpsie	i
 800b99c:	623b      	str	r3, [r7, #32]
 800b99e:	e7fe      	b.n	800b99e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <xQueueSemaphoreTake+0x54>
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	b672      	cpsid	i
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	b662      	cpsie	i
 800b9bc:	61fb      	str	r3, [r7, #28]
 800b9be:	e7fe      	b.n	800b9be <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9c0:	f001 f902 	bl	800cbc8 <xTaskGetSchedulerState>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <xQueueSemaphoreTake+0x64>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <xQueueSemaphoreTake+0x68>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e000      	b.n	800b9d6 <xQueueSemaphoreTake+0x6a>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10b      	bne.n	800b9f2 <xQueueSemaphoreTake+0x86>
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	61bb      	str	r3, [r7, #24]
 800b9f0:	e7fe      	b.n	800b9f0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9f2:	f001 fc31 	bl	800d258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d024      	beq.n	800ba4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	1e5a      	subs	r2, r3, #1
 800ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba08:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d104      	bne.n	800ba1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ba12:	f001 fa9b 	bl	800cf4c <pvTaskIncrementMutexHeldCount>
 800ba16:	4602      	mov	r2, r0
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00f      	beq.n	800ba44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	3310      	adds	r3, #16
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f000 ff0f 	bl	800c84c <xTaskRemoveFromEventList>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d007      	beq.n	800ba44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba34:	4b54      	ldr	r3, [pc, #336]	; (800bb88 <xQueueSemaphoreTake+0x21c>)
 800ba36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba44:	f001 fc3a 	bl	800d2bc <vPortExitCritical>
				return pdPASS;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e098      	b.n	800bb7e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d112      	bne.n	800ba78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <xQueueSemaphoreTake+0x104>
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	b672      	cpsid	i
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	b662      	cpsie	i
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e7fe      	b.n	800ba6e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba70:	f001 fc24 	bl	800d2bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba74:	2300      	movs	r3, #0
 800ba76:	e082      	b.n	800bb7e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba7e:	f107 030c 	add.w	r3, r7, #12
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 ff46 	bl	800c914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba8c:	f001 fc16 	bl	800d2bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba90:	f000 fce4 	bl	800c45c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba94:	f001 fbe0 	bl	800d258 <vPortEnterCritical>
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba9e:	b25b      	sxtb	r3, r3
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d103      	bne.n	800baae <xQueueSemaphoreTake+0x142>
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d103      	bne.n	800bac4 <xQueueSemaphoreTake+0x158>
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac4:	f001 fbfa 	bl	800d2bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bac8:	463a      	mov	r2, r7
 800baca:	f107 030c 	add.w	r3, r7, #12
 800bace:	4611      	mov	r1, r2
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 ff35 	bl	800c940 <xTaskCheckForTimeOut>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d132      	bne.n	800bb42 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800badc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bade:	f000 f94f 	bl	800bd80 <prvIsQueueEmpty>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d026      	beq.n	800bb36 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800baf0:	f001 fbb2 	bl	800d258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 f883 	bl	800cc04 <xTaskPriorityInherit>
 800bafe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bb00:	f001 fbdc 	bl	800d2bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	3324      	adds	r3, #36	; 0x24
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 fe77 	bl	800c800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb14:	f000 f8e2 	bl	800bcdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb18:	f000 fcae 	bl	800c478 <xTaskResumeAll>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f47f af67 	bne.w	800b9f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bb24:	4b18      	ldr	r3, [pc, #96]	; (800bb88 <xQueueSemaphoreTake+0x21c>)
 800bb26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	e75d      	b.n	800b9f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bb36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb38:	f000 f8d0 	bl	800bcdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb3c:	f000 fc9c 	bl	800c478 <xTaskResumeAll>
 800bb40:	e757      	b.n	800b9f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb44:	f000 f8ca 	bl	800bcdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb48:	f000 fc96 	bl	800c478 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb4e:	f000 f917 	bl	800bd80 <prvIsQueueEmpty>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f43f af4c 	beq.w	800b9f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00d      	beq.n	800bb7c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bb60:	f001 fb7a 	bl	800d258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb66:	f000 f811 	bl	800bb8c <prvGetDisinheritPriorityAfterTimeout>
 800bb6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 f94e 	bl	800ce14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb78:	f001 fba0 	bl	800d2bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3738      	adds	r7, #56	; 0x38
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d006      	beq.n	800bbaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f1c3 0307 	rsb	r3, r3, #7
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e001      	b.n	800bbae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bbae:	68fb      	ldr	r3, [r7, #12]
	}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10d      	bne.n	800bbf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d14d      	bne.n	800bc7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 f88c 	bl	800cd04 <xTaskPriorityDisinherit>
 800bbec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	609a      	str	r2, [r3, #8]
 800bbf4:	e043      	b.n	800bc7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d119      	bne.n	800bc30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6858      	ldr	r0, [r3, #4]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc04:	461a      	mov	r2, r3
 800bc06:	68b9      	ldr	r1, [r7, #8]
 800bc08:	f001 fe10 	bl	800d82c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc14:	441a      	add	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d32b      	bcc.n	800bc7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	605a      	str	r2, [r3, #4]
 800bc2e:	e026      	b.n	800bc7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68d8      	ldr	r0, [r3, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc38:	461a      	mov	r2, r3
 800bc3a:	68b9      	ldr	r1, [r7, #8]
 800bc3c:	f001 fdf6 	bl	800d82c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc48:	425b      	negs	r3, r3
 800bc4a:	441a      	add	r2, r3
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d207      	bcs.n	800bc6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689a      	ldr	r2, [r3, #8]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc64:	425b      	negs	r3, r3
 800bc66:	441a      	add	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d105      	bne.n	800bc7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc86:	697b      	ldr	r3, [r7, #20]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d018      	beq.n	800bcd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcaa:	441a      	add	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68da      	ldr	r2, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d303      	bcc.n	800bcc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68d9      	ldr	r1, [r3, #12]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	461a      	mov	r2, r3
 800bcce:	6838      	ldr	r0, [r7, #0]
 800bcd0:	f001 fdac 	bl	800d82c <memcpy>
	}
}
 800bcd4:	bf00      	nop
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bce4:	f001 fab8 	bl	800d258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcf0:	e011      	b.n	800bd16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d012      	beq.n	800bd20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	3324      	adds	r3, #36	; 0x24
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fda4 	bl	800c84c <xTaskRemoveFromEventList>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd0a:	f000 fe7d 	bl	800ca08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dce9      	bgt.n	800bcf2 <prvUnlockQueue+0x16>
 800bd1e:	e000      	b.n	800bd22 <prvUnlockQueue+0x46>
					break;
 800bd20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd2a:	f001 fac7 	bl	800d2bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd2e:	f001 fa93 	bl	800d258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd3a:	e011      	b.n	800bd60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d012      	beq.n	800bd6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	3310      	adds	r3, #16
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 fd7f 	bl	800c84c <xTaskRemoveFromEventList>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd54:	f000 fe58 	bl	800ca08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	dce9      	bgt.n	800bd3c <prvUnlockQueue+0x60>
 800bd68:	e000      	b.n	800bd6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd74:	f001 faa2 	bl	800d2bc <vPortExitCritical>
}
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd88:	f001 fa66 	bl	800d258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd94:	2301      	movs	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e001      	b.n	800bd9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd9e:	f001 fa8d 	bl	800d2bc <vPortExitCritical>

	return xReturn;
 800bda2:	68fb      	ldr	r3, [r7, #12]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdb4:	f001 fa50 	bl	800d258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d102      	bne.n	800bdca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	e001      	b.n	800bdce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdce:	f001 fa75 	bl	800d2bc <vPortExitCritical>

	return xReturn;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08e      	sub	sp, #56	; 0x38
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10b      	bne.n	800be08 <xTaskCreateStatic+0x2c>
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	b672      	cpsid	i
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	b662      	cpsie	i
 800be04:	623b      	str	r3, [r7, #32]
 800be06:	e7fe      	b.n	800be06 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <xTaskCreateStatic+0x4a>
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	b672      	cpsid	i
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	b662      	cpsie	i
 800be22:	61fb      	str	r3, [r7, #28]
 800be24:	e7fe      	b.n	800be24 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be26:	2354      	movs	r3, #84	; 0x54
 800be28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2b54      	cmp	r3, #84	; 0x54
 800be2e:	d00b      	beq.n	800be48 <xTaskCreateStatic+0x6c>
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	b672      	cpsid	i
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	b662      	cpsie	i
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e7fe      	b.n	800be46 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01e      	beq.n	800be8e <xTaskCreateStatic+0xb2>
 800be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d01b      	beq.n	800be8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	2202      	movs	r2, #2
 800be64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be68:	2300      	movs	r3, #0
 800be6a:	9303      	str	r3, [sp, #12]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	9302      	str	r3, [sp, #8]
 800be70:	f107 0314 	add.w	r3, r7, #20
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f850 	bl	800bf26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be88:	f000 f8d6 	bl	800c038 <prvAddNewTaskToReadyList>
 800be8c:	e001      	b.n	800be92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be92:	697b      	ldr	r3, [r7, #20]
	}
 800be94:	4618      	mov	r0, r3
 800be96:	3728      	adds	r7, #40	; 0x28
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08c      	sub	sp, #48	; 0x30
 800bea0:	af04      	add	r7, sp, #16
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	4613      	mov	r3, r2
 800beaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beac:	88fb      	ldrh	r3, [r7, #6]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f001 fab1 	bl	800d418 <pvPortMalloc>
 800beb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00e      	beq.n	800bedc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bebe:	2054      	movs	r0, #84	; 0x54
 800bec0:	f001 faaa 	bl	800d418 <pvPortMalloc>
 800bec4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30
 800bed2:	e005      	b.n	800bee0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bed4:	6978      	ldr	r0, [r7, #20]
 800bed6:	f001 fb67 	bl	800d5a8 <vPortFree>
 800beda:	e001      	b.n	800bee0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d017      	beq.n	800bf16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800beee:	88fa      	ldrh	r2, [r7, #6]
 800bef0:	2300      	movs	r3, #0
 800bef2:	9303      	str	r3, [sp, #12]
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	9302      	str	r3, [sp, #8]
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f80e 	bl	800bf26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf0a:	69f8      	ldr	r0, [r7, #28]
 800bf0c:	f000 f894 	bl	800c038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf10:	2301      	movs	r3, #1
 800bf12:	61bb      	str	r3, [r7, #24]
 800bf14:	e002      	b.n	800bf1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf16:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
	}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b088      	sub	sp, #32
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
 800bf32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bf3e:	440b      	add	r3, r1
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f023 0307 	bic.w	r3, r3, #7
 800bf4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	f003 0307 	and.w	r3, r3, #7
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <prvInitialiseNewTask+0x4a>
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	b672      	cpsid	i
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	b662      	cpsie	i
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	e7fe      	b.n	800bf6e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d01f      	beq.n	800bfb6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf76:	2300      	movs	r3, #0
 800bf78:	61fb      	str	r3, [r7, #28]
 800bf7a:	e012      	b.n	800bfa2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	4413      	add	r3, r2
 800bf82:	7819      	ldrb	r1, [r3, #0]
 800bf84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	4413      	add	r3, r2
 800bf8a:	3334      	adds	r3, #52	; 0x34
 800bf8c:	460a      	mov	r2, r1
 800bf8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	2b0f      	cmp	r3, #15
 800bfa6:	d9e9      	bls.n	800bf7c <prvInitialiseNewTask+0x56>
 800bfa8:	e000      	b.n	800bfac <prvInitialiseNewTask+0x86>
			{
				break;
 800bfaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfb4:	e003      	b.n	800bfbe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	2b06      	cmp	r3, #6
 800bfc2:	d901      	bls.n	800bfc8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfc4:	2306      	movs	r3, #6
 800bfc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff f8b8 	bl	800b154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	3318      	adds	r3, #24
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff f8b3 	bl	800b154 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	f1c3 0207 	rsb	r2, r3, #7
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c002:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	2200      	movs	r2, #0
 800c008:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	68f9      	ldr	r1, [r7, #12]
 800c016:	69b8      	ldr	r0, [r7, #24]
 800c018:	f001 f812 	bl	800d040 <pxPortInitialiseStack>
 800c01c:	4602      	mov	r2, r0
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c02e:	bf00      	nop
 800c030:	3720      	adds	r7, #32
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c040:	f001 f90a 	bl	800d258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c044:	4b2a      	ldr	r3, [pc, #168]	; (800c0f0 <prvAddNewTaskToReadyList+0xb8>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3301      	adds	r3, #1
 800c04a:	4a29      	ldr	r2, [pc, #164]	; (800c0f0 <prvAddNewTaskToReadyList+0xb8>)
 800c04c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c04e:	4b29      	ldr	r3, [pc, #164]	; (800c0f4 <prvAddNewTaskToReadyList+0xbc>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c056:	4a27      	ldr	r2, [pc, #156]	; (800c0f4 <prvAddNewTaskToReadyList+0xbc>)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c05c:	4b24      	ldr	r3, [pc, #144]	; (800c0f0 <prvAddNewTaskToReadyList+0xb8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d110      	bne.n	800c086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c064:	f000 fcf4 	bl	800ca50 <prvInitialiseTaskLists>
 800c068:	e00d      	b.n	800c086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c06a:	4b23      	ldr	r3, [pc, #140]	; (800c0f8 <prvAddNewTaskToReadyList+0xc0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c072:	4b20      	ldr	r3, [pc, #128]	; (800c0f4 <prvAddNewTaskToReadyList+0xbc>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d802      	bhi.n	800c086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c080:	4a1c      	ldr	r2, [pc, #112]	; (800c0f4 <prvAddNewTaskToReadyList+0xbc>)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c086:	4b1d      	ldr	r3, [pc, #116]	; (800c0fc <prvAddNewTaskToReadyList+0xc4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3301      	adds	r3, #1
 800c08c:	4a1b      	ldr	r2, [pc, #108]	; (800c0fc <prvAddNewTaskToReadyList+0xc4>)
 800c08e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	2201      	movs	r2, #1
 800c096:	409a      	lsls	r2, r3
 800c098:	4b19      	ldr	r3, [pc, #100]	; (800c100 <prvAddNewTaskToReadyList+0xc8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	4a18      	ldr	r2, [pc, #96]	; (800c100 <prvAddNewTaskToReadyList+0xc8>)
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4a15      	ldr	r2, [pc, #84]	; (800c104 <prvAddNewTaskToReadyList+0xcc>)
 800c0b0:	441a      	add	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7ff f858 	bl	800b16e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0be:	f001 f8fd 	bl	800d2bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <prvAddNewTaskToReadyList+0xc0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00e      	beq.n	800c0e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0ca:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <prvAddNewTaskToReadyList+0xbc>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d207      	bcs.n	800c0e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	; (800c108 <prvAddNewTaskToReadyList+0xd0>)
 800c0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20000600 	.word	0x20000600
 800c0f4:	20000500 	.word	0x20000500
 800c0f8:	2000060c 	.word	0x2000060c
 800c0fc:	2000061c 	.word	0x2000061c
 800c100:	20000608 	.word	0x20000608
 800c104:	20000504 	.word	0x20000504
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c114:	f001 f8a0 	bl	800d258 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d102      	bne.n	800c124 <vTaskDelete+0x18>
 800c11e:	4b39      	ldr	r3, [pc, #228]	; (800c204 <vTaskDelete+0xf8>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	e000      	b.n	800c126 <vTaskDelete+0x1a>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff f87b 	bl	800b228 <uxListRemove>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d115      	bne.n	800c164 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13c:	4932      	ldr	r1, [pc, #200]	; (800c208 <vTaskDelete+0xfc>)
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <vTaskDelete+0x58>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c152:	2201      	movs	r2, #1
 800c154:	fa02 f303 	lsl.w	r3, r2, r3
 800c158:	43da      	mvns	r2, r3
 800c15a:	4b2c      	ldr	r3, [pc, #176]	; (800c20c <vTaskDelete+0x100>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4013      	ands	r3, r2
 800c160:	4a2a      	ldr	r2, [pc, #168]	; (800c20c <vTaskDelete+0x100>)
 800c162:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3318      	adds	r3, #24
 800c170:	4618      	mov	r0, r3
 800c172:	f7ff f859 	bl	800b228 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c176:	4b26      	ldr	r3, [pc, #152]	; (800c210 <vTaskDelete+0x104>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3301      	adds	r3, #1
 800c17c:	4a24      	ldr	r2, [pc, #144]	; (800c210 <vTaskDelete+0x104>)
 800c17e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c180:	4b20      	ldr	r3, [pc, #128]	; (800c204 <vTaskDelete+0xf8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	429a      	cmp	r2, r3
 800c188:	d10b      	bne.n	800c1a2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4619      	mov	r1, r3
 800c190:	4820      	ldr	r0, [pc, #128]	; (800c214 <vTaskDelete+0x108>)
 800c192:	f7fe ffec 	bl	800b16e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c196:	4b20      	ldr	r3, [pc, #128]	; (800c218 <vTaskDelete+0x10c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3301      	adds	r3, #1
 800c19c:	4a1e      	ldr	r2, [pc, #120]	; (800c218 <vTaskDelete+0x10c>)
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	e009      	b.n	800c1b6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c1a2:	4b1e      	ldr	r3, [pc, #120]	; (800c21c <vTaskDelete+0x110>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	4a1c      	ldr	r2, [pc, #112]	; (800c21c <vTaskDelete+0x110>)
 800c1aa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 fcbb 	bl	800cb28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c1b2:	f000 fce9 	bl	800cb88 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c1b6:	f001 f881 	bl	800d2bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c1ba:	4b19      	ldr	r3, [pc, #100]	; (800c220 <vTaskDelete+0x114>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d01c      	beq.n	800c1fc <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800c1c2:	4b10      	ldr	r3, [pc, #64]	; (800c204 <vTaskDelete+0xf8>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d117      	bne.n	800c1fc <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <vTaskDelete+0x118>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <vTaskDelete+0xe0>
 800c1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d8:	b672      	cpsid	i
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	b662      	cpsie	i
 800c1e8:	60bb      	str	r3, [r7, #8]
 800c1ea:	e7fe      	b.n	800c1ea <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	; (800c228 <vTaskDelete+0x11c>)
 800c1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	20000500 	.word	0x20000500
 800c208:	20000504 	.word	0x20000504
 800c20c:	20000608 	.word	0x20000608
 800c210:	2000061c 	.word	0x2000061c
 800c214:	200005d4 	.word	0x200005d4
 800c218:	200005e8 	.word	0x200005e8
 800c21c:	20000600 	.word	0x20000600
 800c220:	2000060c 	.word	0x2000060c
 800c224:	20000628 	.word	0x20000628
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	; 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c236:	2300      	movs	r3, #0
 800c238:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <vTaskDelayUntil+0x2c>
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	b672      	cpsid	i
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	b662      	cpsie	i
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e7fe      	b.n	800c256 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <vTaskDelayUntil+0x4a>
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	b672      	cpsid	i
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	b662      	cpsie	i
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	e7fe      	b.n	800c274 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c276:	4b2a      	ldr	r3, [pc, #168]	; (800c320 <vTaskDelayUntil+0xf4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00b      	beq.n	800c296 <vTaskDelayUntil+0x6a>
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	b672      	cpsid	i
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	b662      	cpsie	i
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e7fe      	b.n	800c294 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c296:	f000 f8e1 	bl	800c45c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c29a:	4b22      	ldr	r3, [pc, #136]	; (800c324 <vTaskDelayUntil+0xf8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6a3a      	ldr	r2, [r7, #32]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d20b      	bcs.n	800c2cc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d211      	bcs.n	800c2e2 <vTaskDelayUntil+0xb6>
 800c2be:	69fa      	ldr	r2, [r7, #28]
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d90d      	bls.n	800c2e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ca:	e00a      	b.n	800c2e2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	69fa      	ldr	r2, [r7, #28]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d303      	bcc.n	800c2de <vTaskDelayUntil+0xb2>
 800c2d6:	69fa      	ldr	r2, [r7, #28]
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d901      	bls.n	800c2e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	69fa      	ldr	r2, [r7, #28]
 800c2e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d006      	beq.n	800c2fc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c2ee:	69fa      	ldr	r2, [r7, #28]
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 fe3c 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c2fc:	f000 f8bc 	bl	800c478 <xTaskResumeAll>
 800c300:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d107      	bne.n	800c318 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c308:	4b07      	ldr	r3, [pc, #28]	; (800c328 <vTaskDelayUntil+0xfc>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c318:	bf00      	nop
 800c31a:	3728      	adds	r7, #40	; 0x28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000628 	.word	0x20000628
 800c324:	20000604 	.word	0x20000604
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d018      	beq.n	800c370 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c33e:	4b14      	ldr	r3, [pc, #80]	; (800c390 <vTaskDelay+0x64>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <vTaskDelay+0x32>
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	b672      	cpsid	i
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	b662      	cpsie	i
 800c35a:	60bb      	str	r3, [r7, #8]
 800c35c:	e7fe      	b.n	800c35c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c35e:	f000 f87d 	bl	800c45c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c362:	2100      	movs	r1, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fe05 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c36a:	f000 f885 	bl	800c478 <xTaskResumeAll>
 800c36e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d107      	bne.n	800c386 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c376:	4b07      	ldr	r3, [pc, #28]	; (800c394 <vTaskDelay+0x68>)
 800c378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20000628 	.word	0x20000628
 800c394:	e000ed04 	.word	0xe000ed04

0800c398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	; 0x28
 800c39c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c3a6:	463a      	mov	r2, r7
 800c3a8:	1d39      	adds	r1, r7, #4
 800c3aa:	f107 0308 	add.w	r3, r7, #8
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 f8fe 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	9202      	str	r2, [sp, #8]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	460a      	mov	r2, r1
 800c3c6:	491f      	ldr	r1, [pc, #124]	; (800c444 <vTaskStartScheduler+0xac>)
 800c3c8:	481f      	ldr	r0, [pc, #124]	; (800c448 <vTaskStartScheduler+0xb0>)
 800c3ca:	f7ff fd07 	bl	800bddc <xTaskCreateStatic>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b1e      	ldr	r3, [pc, #120]	; (800c44c <vTaskStartScheduler+0xb4>)
 800c3d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3d4:	4b1d      	ldr	r3, [pc, #116]	; (800c44c <vTaskStartScheduler+0xb4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e001      	b.n	800c3e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d117      	bne.n	800c41c <vTaskStartScheduler+0x84>
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	b672      	cpsid	i
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	b662      	cpsie	i
 800c400:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c402:	4b13      	ldr	r3, [pc, #76]	; (800c450 <vTaskStartScheduler+0xb8>)
 800c404:	f04f 32ff 	mov.w	r2, #4294967295
 800c408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c40a:	4b12      	ldr	r3, [pc, #72]	; (800c454 <vTaskStartScheduler+0xbc>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c410:	4b11      	ldr	r3, [pc, #68]	; (800c458 <vTaskStartScheduler+0xc0>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c416:	f000 fea3 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c41a:	e00f      	b.n	800c43c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d10b      	bne.n	800c43c <vTaskStartScheduler+0xa4>
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	b672      	cpsid	i
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	b662      	cpsie	i
 800c438:	60fb      	str	r3, [r7, #12]
 800c43a:	e7fe      	b.n	800c43a <vTaskStartScheduler+0xa2>
}
 800c43c:	bf00      	nop
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	0800e148 	.word	0x0800e148
 800c448:	0800ca21 	.word	0x0800ca21
 800c44c:	20000624 	.word	0x20000624
 800c450:	20000620 	.word	0x20000620
 800c454:	2000060c 	.word	0x2000060c
 800c458:	20000604 	.word	0x20000604

0800c45c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <vTaskSuspendAll+0x18>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a03      	ldr	r2, [pc, #12]	; (800c474 <vTaskSuspendAll+0x18>)
 800c468:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c46a:	bf00      	nop
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	20000628 	.word	0x20000628

0800c478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c482:	2300      	movs	r3, #0
 800c484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c486:	4b42      	ldr	r3, [pc, #264]	; (800c590 <xTaskResumeAll+0x118>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <xTaskResumeAll+0x2e>
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	b672      	cpsid	i
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	b662      	cpsie	i
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	e7fe      	b.n	800c4a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4a6:	f000 fed7 	bl	800d258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4aa:	4b39      	ldr	r3, [pc, #228]	; (800c590 <xTaskResumeAll+0x118>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	4a37      	ldr	r2, [pc, #220]	; (800c590 <xTaskResumeAll+0x118>)
 800c4b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b4:	4b36      	ldr	r3, [pc, #216]	; (800c590 <xTaskResumeAll+0x118>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d161      	bne.n	800c580 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4bc:	4b35      	ldr	r3, [pc, #212]	; (800c594 <xTaskResumeAll+0x11c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d05d      	beq.n	800c580 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4c4:	e02e      	b.n	800c524 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c6:	4b34      	ldr	r3, [pc, #208]	; (800c598 <xTaskResumeAll+0x120>)
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3318      	adds	r3, #24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe fea8 	bl	800b228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe fea3 	bl	800b228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	409a      	lsls	r2, r3
 800c4ea:	4b2c      	ldr	r3, [pc, #176]	; (800c59c <xTaskResumeAll+0x124>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <xTaskResumeAll+0x124>)
 800c4f2:	6013      	str	r3, [r2, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4a27      	ldr	r2, [pc, #156]	; (800c5a0 <xTaskResumeAll+0x128>)
 800c502:	441a      	add	r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7fe fe2f 	bl	800b16e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c514:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <xTaskResumeAll+0x12c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d302      	bcc.n	800c524 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c51e:	4b22      	ldr	r3, [pc, #136]	; (800c5a8 <xTaskResumeAll+0x130>)
 800c520:	2201      	movs	r2, #1
 800c522:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c524:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <xTaskResumeAll+0x120>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1cc      	bne.n	800c4c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c532:	f000 fb29 	bl	800cb88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c536:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <xTaskResumeAll+0x134>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d010      	beq.n	800c564 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c542:	f000 f847 	bl	800c5d4 <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c54c:	4b16      	ldr	r3, [pc, #88]	; (800c5a8 <xTaskResumeAll+0x130>)
 800c54e:	2201      	movs	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3b01      	subs	r3, #1
 800c556:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1f1      	bne.n	800c542 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <xTaskResumeAll+0x134>)
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c564:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <xTaskResumeAll+0x130>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d009      	beq.n	800c580 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c56c:	2301      	movs	r3, #1
 800c56e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <xTaskResumeAll+0x138>)
 800c572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c580:	f000 fe9c 	bl	800d2bc <vPortExitCritical>

	return xAlreadyYielded;
 800c584:	68bb      	ldr	r3, [r7, #8]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000628 	.word	0x20000628
 800c594:	20000600 	.word	0x20000600
 800c598:	200005c0 	.word	0x200005c0
 800c59c:	20000608 	.word	0x20000608
 800c5a0:	20000504 	.word	0x20000504
 800c5a4:	20000500 	.word	0x20000500
 800c5a8:	20000614 	.word	0x20000614
 800c5ac:	20000610 	.word	0x20000610
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5ba:	4b05      	ldr	r3, [pc, #20]	; (800c5d0 <xTaskGetTickCount+0x1c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5c0:	687b      	ldr	r3, [r7, #4]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	20000604 	.word	0x20000604

0800c5d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5de:	4b4f      	ldr	r3, [pc, #316]	; (800c71c <xTaskIncrementTick+0x148>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f040 8089 	bne.w	800c6fa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5e8:	4b4d      	ldr	r3, [pc, #308]	; (800c720 <xTaskIncrementTick+0x14c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5f0:	4a4b      	ldr	r2, [pc, #300]	; (800c720 <xTaskIncrementTick+0x14c>)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d121      	bne.n	800c640 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5fc:	4b49      	ldr	r3, [pc, #292]	; (800c724 <xTaskIncrementTick+0x150>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00b      	beq.n	800c61e <xTaskIncrementTick+0x4a>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	b672      	cpsid	i
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	b662      	cpsie	i
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	e7fe      	b.n	800c61c <xTaskIncrementTick+0x48>
 800c61e:	4b41      	ldr	r3, [pc, #260]	; (800c724 <xTaskIncrementTick+0x150>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	4b40      	ldr	r3, [pc, #256]	; (800c728 <xTaskIncrementTick+0x154>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a3e      	ldr	r2, [pc, #248]	; (800c724 <xTaskIncrementTick+0x150>)
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	4a3e      	ldr	r2, [pc, #248]	; (800c728 <xTaskIncrementTick+0x154>)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	4b3e      	ldr	r3, [pc, #248]	; (800c72c <xTaskIncrementTick+0x158>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	4a3c      	ldr	r2, [pc, #240]	; (800c72c <xTaskIncrementTick+0x158>)
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	f000 faa4 	bl	800cb88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c640:	4b3b      	ldr	r3, [pc, #236]	; (800c730 <xTaskIncrementTick+0x15c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	429a      	cmp	r2, r3
 800c648:	d348      	bcc.n	800c6dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c64a:	4b36      	ldr	r3, [pc, #216]	; (800c724 <xTaskIncrementTick+0x150>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d104      	bne.n	800c65e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c654:	4b36      	ldr	r3, [pc, #216]	; (800c730 <xTaskIncrementTick+0x15c>)
 800c656:	f04f 32ff 	mov.w	r2, #4294967295
 800c65a:	601a      	str	r2, [r3, #0]
					break;
 800c65c:	e03e      	b.n	800c6dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c65e:	4b31      	ldr	r3, [pc, #196]	; (800c724 <xTaskIncrementTick+0x150>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	429a      	cmp	r2, r3
 800c674:	d203      	bcs.n	800c67e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c676:	4a2e      	ldr	r2, [pc, #184]	; (800c730 <xTaskIncrementTick+0x15c>)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c67c:	e02e      	b.n	800c6dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	3304      	adds	r3, #4
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fdd0 	bl	800b228 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	3318      	adds	r3, #24
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe fdc7 	bl	800b228 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69e:	2201      	movs	r2, #1
 800c6a0:	409a      	lsls	r2, r3
 800c6a2:	4b24      	ldr	r3, [pc, #144]	; (800c734 <xTaskIncrementTick+0x160>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	4a22      	ldr	r2, [pc, #136]	; (800c734 <xTaskIncrementTick+0x160>)
 800c6aa:	6013      	str	r3, [r2, #0]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4a1f      	ldr	r2, [pc, #124]	; (800c738 <xTaskIncrementTick+0x164>)
 800c6ba:	441a      	add	r2, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4610      	mov	r0, r2
 800c6c4:	f7fe fd53 	bl	800b16e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6cc:	4b1b      	ldr	r3, [pc, #108]	; (800c73c <xTaskIncrementTick+0x168>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d3b9      	bcc.n	800c64a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6da:	e7b6      	b.n	800c64a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6dc:	4b17      	ldr	r3, [pc, #92]	; (800c73c <xTaskIncrementTick+0x168>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e2:	4915      	ldr	r1, [pc, #84]	; (800c738 <xTaskIncrementTick+0x164>)
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d907      	bls.n	800c704 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e004      	b.n	800c704 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c6fa:	4b11      	ldr	r3, [pc, #68]	; (800c740 <xTaskIncrementTick+0x16c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	3301      	adds	r3, #1
 800c700:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <xTaskIncrementTick+0x16c>)
 800c702:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c704:	4b0f      	ldr	r3, [pc, #60]	; (800c744 <xTaskIncrementTick+0x170>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c710:	697b      	ldr	r3, [r7, #20]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000628 	.word	0x20000628
 800c720:	20000604 	.word	0x20000604
 800c724:	200005b8 	.word	0x200005b8
 800c728:	200005bc 	.word	0x200005bc
 800c72c:	20000618 	.word	0x20000618
 800c730:	20000620 	.word	0x20000620
 800c734:	20000608 	.word	0x20000608
 800c738:	20000504 	.word	0x20000504
 800c73c:	20000500 	.word	0x20000500
 800c740:	20000610 	.word	0x20000610
 800c744:	20000614 	.word	0x20000614

0800c748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c74e:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <vTaskSwitchContext+0xa4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c756:	4b26      	ldr	r3, [pc, #152]	; (800c7f0 <vTaskSwitchContext+0xa8>)
 800c758:	2201      	movs	r2, #1
 800c75a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c75c:	e040      	b.n	800c7e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c75e:	4b24      	ldr	r3, [pc, #144]	; (800c7f0 <vTaskSwitchContext+0xa8>)
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c764:	4b23      	ldr	r3, [pc, #140]	; (800c7f4 <vTaskSwitchContext+0xac>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	fab3 f383 	clz	r3, r3
 800c770:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c772:	7afb      	ldrb	r3, [r7, #11]
 800c774:	f1c3 031f 	rsb	r3, r3, #31
 800c778:	617b      	str	r3, [r7, #20]
 800c77a:	491f      	ldr	r1, [pc, #124]	; (800c7f8 <vTaskSwitchContext+0xb0>)
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	440b      	add	r3, r1
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10b      	bne.n	800c7a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	b672      	cpsid	i
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	b662      	cpsie	i
 800c7a2:	607b      	str	r3, [r7, #4]
 800c7a4:	e7fe      	b.n	800c7a4 <vTaskSwitchContext+0x5c>
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4a11      	ldr	r2, [pc, #68]	; (800c7f8 <vTaskSwitchContext+0xb0>)
 800c7b2:	4413      	add	r3, r2
 800c7b4:	613b      	str	r3, [r7, #16]
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	605a      	str	r2, [r3, #4]
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d104      	bne.n	800c7d6 <vTaskSwitchContext+0x8e>
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	605a      	str	r2, [r3, #4]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	4a07      	ldr	r2, [pc, #28]	; (800c7fc <vTaskSwitchContext+0xb4>)
 800c7de:	6013      	str	r3, [r2, #0]
}
 800c7e0:	bf00      	nop
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	20000628 	.word	0x20000628
 800c7f0:	20000614 	.word	0x20000614
 800c7f4:	20000608 	.word	0x20000608
 800c7f8:	20000504 	.word	0x20000504
 800c7fc:	20000500 	.word	0x20000500

0800c800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10b      	bne.n	800c828 <vTaskPlaceOnEventList+0x28>
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	b672      	cpsid	i
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	b662      	cpsie	i
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	e7fe      	b.n	800c826 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <vTaskPlaceOnEventList+0x48>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3318      	adds	r3, #24
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7fe fcc0 	bl	800b1b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c836:	2101      	movs	r1, #1
 800c838:	6838      	ldr	r0, [r7, #0]
 800c83a:	f000 fb9b 	bl	800cf74 <prvAddCurrentTaskToDelayedList>
}
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000500 	.word	0x20000500

0800c84c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10b      	bne.n	800c87a <xTaskRemoveFromEventList+0x2e>
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	e7fe      	b.n	800c878 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	3318      	adds	r3, #24
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe fcd2 	bl	800b228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c884:	4b1d      	ldr	r3, [pc, #116]	; (800c8fc <xTaskRemoveFromEventList+0xb0>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d11c      	bne.n	800c8c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	3304      	adds	r3, #4
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe fcc9 	bl	800b228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	2201      	movs	r2, #1
 800c89c:	409a      	lsls	r2, r3
 800c89e:	4b18      	ldr	r3, [pc, #96]	; (800c900 <xTaskRemoveFromEventList+0xb4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	4a16      	ldr	r2, [pc, #88]	; (800c900 <xTaskRemoveFromEventList+0xb4>)
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4a13      	ldr	r2, [pc, #76]	; (800c904 <xTaskRemoveFromEventList+0xb8>)
 800c8b6:	441a      	add	r2, r3
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4619      	mov	r1, r3
 800c8be:	4610      	mov	r0, r2
 800c8c0:	f7fe fc55 	bl	800b16e <vListInsertEnd>
 800c8c4:	e005      	b.n	800c8d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	3318      	adds	r3, #24
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	480e      	ldr	r0, [pc, #56]	; (800c908 <xTaskRemoveFromEventList+0xbc>)
 800c8ce:	f7fe fc4e 	bl	800b16e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d6:	4b0d      	ldr	r3, [pc, #52]	; (800c90c <xTaskRemoveFromEventList+0xc0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d905      	bls.n	800c8ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <xTaskRemoveFromEventList+0xc4>)
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]
 800c8ea:	e001      	b.n	800c8f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8f0:	697b      	ldr	r3, [r7, #20]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20000628 	.word	0x20000628
 800c900:	20000608 	.word	0x20000608
 800c904:	20000504 	.word	0x20000504
 800c908:	200005c0 	.word	0x200005c0
 800c90c:	20000500 	.word	0x20000500
 800c910:	20000614 	.word	0x20000614

0800c914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c91c:	4b06      	ldr	r3, [pc, #24]	; (800c938 <vTaskInternalSetTimeOutState+0x24>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <vTaskInternalSetTimeOutState+0x28>)
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	605a      	str	r2, [r3, #4]
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	20000618 	.word	0x20000618
 800c93c:	20000604 	.word	0x20000604

0800c940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b088      	sub	sp, #32
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10b      	bne.n	800c968 <xTaskCheckForTimeOut+0x28>
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	b672      	cpsid	i
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	b662      	cpsie	i
 800c964:	613b      	str	r3, [r7, #16]
 800c966:	e7fe      	b.n	800c966 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d10b      	bne.n	800c986 <xTaskCheckForTimeOut+0x46>
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	b672      	cpsid	i
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	b662      	cpsie	i
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	e7fe      	b.n	800c984 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800c986:	f000 fc67 	bl	800d258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c98a:	4b1d      	ldr	r3, [pc, #116]	; (800ca00 <xTaskCheckForTimeOut+0xc0>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	69ba      	ldr	r2, [r7, #24]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d102      	bne.n	800c9aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	61fb      	str	r3, [r7, #28]
 800c9a8:	e023      	b.n	800c9f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	4b15      	ldr	r3, [pc, #84]	; (800ca04 <xTaskCheckForTimeOut+0xc4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d007      	beq.n	800c9c6 <xTaskCheckForTimeOut+0x86>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d302      	bcc.n	800c9c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	61fb      	str	r3, [r7, #28]
 800c9c4:	e015      	b.n	800c9f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d20b      	bcs.n	800c9e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	1ad2      	subs	r2, r2, r3
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ff99 	bl	800c914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61fb      	str	r3, [r7, #28]
 800c9e6:	e004      	b.n	800c9f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9f2:	f000 fc63 	bl	800d2bc <vPortExitCritical>

	return xReturn;
 800c9f6:	69fb      	ldr	r3, [r7, #28]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20000604 	.word	0x20000604
 800ca04:	20000618 	.word	0x20000618

0800ca08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca0c:	4b03      	ldr	r3, [pc, #12]	; (800ca1c <vTaskMissedYield+0x14>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	601a      	str	r2, [r3, #0]
}
 800ca12:	bf00      	nop
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	20000614 	.word	0x20000614

0800ca20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca28:	f000 f852 	bl	800cad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <prvIdleTask+0x28>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d9f9      	bls.n	800ca28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca34:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <prvIdleTask+0x2c>)
 800ca36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca44:	e7f0      	b.n	800ca28 <prvIdleTask+0x8>
 800ca46:	bf00      	nop
 800ca48:	20000504 	.word	0x20000504
 800ca4c:	e000ed04 	.word	0xe000ed04

0800ca50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca56:	2300      	movs	r3, #0
 800ca58:	607b      	str	r3, [r7, #4]
 800ca5a:	e00c      	b.n	800ca76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4a12      	ldr	r2, [pc, #72]	; (800cab0 <prvInitialiseTaskLists+0x60>)
 800ca68:	4413      	add	r3, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fb52 	bl	800b114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3301      	adds	r3, #1
 800ca74:	607b      	str	r3, [r7, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b06      	cmp	r3, #6
 800ca7a:	d9ef      	bls.n	800ca5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca7c:	480d      	ldr	r0, [pc, #52]	; (800cab4 <prvInitialiseTaskLists+0x64>)
 800ca7e:	f7fe fb49 	bl	800b114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca82:	480d      	ldr	r0, [pc, #52]	; (800cab8 <prvInitialiseTaskLists+0x68>)
 800ca84:	f7fe fb46 	bl	800b114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca88:	480c      	ldr	r0, [pc, #48]	; (800cabc <prvInitialiseTaskLists+0x6c>)
 800ca8a:	f7fe fb43 	bl	800b114 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca8e:	480c      	ldr	r0, [pc, #48]	; (800cac0 <prvInitialiseTaskLists+0x70>)
 800ca90:	f7fe fb40 	bl	800b114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca94:	480b      	ldr	r0, [pc, #44]	; (800cac4 <prvInitialiseTaskLists+0x74>)
 800ca96:	f7fe fb3d 	bl	800b114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <prvInitialiseTaskLists+0x78>)
 800ca9c:	4a05      	ldr	r2, [pc, #20]	; (800cab4 <prvInitialiseTaskLists+0x64>)
 800ca9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800caa0:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <prvInitialiseTaskLists+0x7c>)
 800caa2:	4a05      	ldr	r2, [pc, #20]	; (800cab8 <prvInitialiseTaskLists+0x68>)
 800caa4:	601a      	str	r2, [r3, #0]
}
 800caa6:	bf00      	nop
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20000504 	.word	0x20000504
 800cab4:	20000590 	.word	0x20000590
 800cab8:	200005a4 	.word	0x200005a4
 800cabc:	200005c0 	.word	0x200005c0
 800cac0:	200005d4 	.word	0x200005d4
 800cac4:	200005ec 	.word	0x200005ec
 800cac8:	200005b8 	.word	0x200005b8
 800cacc:	200005bc 	.word	0x200005bc

0800cad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cad6:	e019      	b.n	800cb0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cad8:	f000 fbbe 	bl	800d258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cadc:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <prvCheckTasksWaitingTermination+0x4c>)
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fb9d 	bl	800b228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caee:	4b0c      	ldr	r3, [pc, #48]	; (800cb20 <prvCheckTasksWaitingTermination+0x50>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	4a0a      	ldr	r2, [pc, #40]	; (800cb20 <prvCheckTasksWaitingTermination+0x50>)
 800caf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800caf8:	4b0a      	ldr	r3, [pc, #40]	; (800cb24 <prvCheckTasksWaitingTermination+0x54>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	4a09      	ldr	r2, [pc, #36]	; (800cb24 <prvCheckTasksWaitingTermination+0x54>)
 800cb00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb02:	f000 fbdb 	bl	800d2bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f80e 	bl	800cb28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <prvCheckTasksWaitingTermination+0x54>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e1      	bne.n	800cad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200005d4 	.word	0x200005d4
 800cb20:	20000600 	.word	0x20000600
 800cb24:	200005e8 	.word	0x200005e8

0800cb28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d108      	bne.n	800cb4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f000 fd32 	bl	800d5a8 <vPortFree>
				vPortFree( pxTCB );
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fd2f 	bl	800d5a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb4a:	e019      	b.n	800cb80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d103      	bne.n	800cb5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fd26 	bl	800d5a8 <vPortFree>
	}
 800cb5c:	e010      	b.n	800cb80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d00b      	beq.n	800cb80 <prvDeleteTCB+0x58>
 800cb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6c:	b672      	cpsid	i
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	b662      	cpsie	i
 800cb7c:	60fb      	str	r3, [r7, #12]
 800cb7e:	e7fe      	b.n	800cb7e <prvDeleteTCB+0x56>
	}
 800cb80:	bf00      	nop
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb8e:	4b0c      	ldr	r3, [pc, #48]	; (800cbc0 <prvResetNextTaskUnblockTime+0x38>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d104      	bne.n	800cba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb98:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <prvResetNextTaskUnblockTime+0x3c>)
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cba0:	e008      	b.n	800cbb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba2:	4b07      	ldr	r3, [pc, #28]	; (800cbc0 <prvResetNextTaskUnblockTime+0x38>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	4a04      	ldr	r2, [pc, #16]	; (800cbc4 <prvResetNextTaskUnblockTime+0x3c>)
 800cbb2:	6013      	str	r3, [r2, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	200005b8 	.word	0x200005b8
 800cbc4:	20000620 	.word	0x20000620

0800cbc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbce:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <xTaskGetSchedulerState+0x34>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	607b      	str	r3, [r7, #4]
 800cbda:	e008      	b.n	800cbee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbdc:	4b08      	ldr	r3, [pc, #32]	; (800cc00 <xTaskGetSchedulerState+0x38>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d102      	bne.n	800cbea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	607b      	str	r3, [r7, #4]
 800cbe8:	e001      	b.n	800cbee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbea:	2300      	movs	r3, #0
 800cbec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbee:	687b      	ldr	r3, [r7, #4]
	}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr
 800cbfc:	2000060c 	.word	0x2000060c
 800cc00:	20000628 	.word	0x20000628

0800cc04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d069      	beq.n	800ccee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1e:	4b36      	ldr	r3, [pc, #216]	; (800ccf8 <xTaskPriorityInherit+0xf4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d259      	bcs.n	800ccdc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	db06      	blt.n	800cc3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc30:	4b31      	ldr	r3, [pc, #196]	; (800ccf8 <xTaskPriorityInherit+0xf4>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc36:	f1c3 0207 	rsb	r2, r3, #7
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6959      	ldr	r1, [r3, #20]
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4a2b      	ldr	r2, [pc, #172]	; (800ccfc <xTaskPriorityInherit+0xf8>)
 800cc50:	4413      	add	r3, r2
 800cc52:	4299      	cmp	r1, r3
 800cc54:	d13a      	bne.n	800cccc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fae4 	bl	800b228 <uxListRemove>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d115      	bne.n	800cc92 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6a:	4924      	ldr	r1, [pc, #144]	; (800ccfc <xTaskPriorityInherit+0xf8>)
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	440b      	add	r3, r1
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10a      	bne.n	800cc92 <xTaskPriorityInherit+0x8e>
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc80:	2201      	movs	r2, #1
 800cc82:	fa02 f303 	lsl.w	r3, r2, r3
 800cc86:	43da      	mvns	r2, r3
 800cc88:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <xTaskPriorityInherit+0xfc>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	4a1c      	ldr	r2, [pc, #112]	; (800cd00 <xTaskPriorityInherit+0xfc>)
 800cc90:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc92:	4b19      	ldr	r3, [pc, #100]	; (800ccf8 <xTaskPriorityInherit+0xf4>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca0:	2201      	movs	r2, #1
 800cca2:	409a      	lsls	r2, r3
 800cca4:	4b16      	ldr	r3, [pc, #88]	; (800cd00 <xTaskPriorityInherit+0xfc>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	4a15      	ldr	r2, [pc, #84]	; (800cd00 <xTaskPriorityInherit+0xfc>)
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4a10      	ldr	r2, [pc, #64]	; (800ccfc <xTaskPriorityInherit+0xf8>)
 800ccbc:	441a      	add	r2, r3
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7fe fa52 	bl	800b16e <vListInsertEnd>
 800ccca:	e004      	b.n	800ccd6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cccc:	4b0a      	ldr	r3, [pc, #40]	; (800ccf8 <xTaskPriorityInherit+0xf4>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	e008      	b.n	800ccee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cce0:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <xTaskPriorityInherit+0xf4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d201      	bcs.n	800ccee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ccea:	2301      	movs	r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccee:	68fb      	ldr	r3, [r7, #12]
	}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000500 	.word	0x20000500
 800ccfc:	20000504 	.word	0x20000504
 800cd00:	20000608 	.word	0x20000608

0800cd04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd10:	2300      	movs	r3, #0
 800cd12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d070      	beq.n	800cdfc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd1a:	4b3b      	ldr	r3, [pc, #236]	; (800ce08 <xTaskPriorityDisinherit+0x104>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d00b      	beq.n	800cd3c <xTaskPriorityDisinherit+0x38>
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	b672      	cpsid	i
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	b662      	cpsie	i
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	e7fe      	b.n	800cd3a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10b      	bne.n	800cd5c <xTaskPriorityDisinherit+0x58>
 800cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd48:	b672      	cpsid	i
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	b662      	cpsie	i
 800cd58:	60bb      	str	r3, [r7, #8]
 800cd5a:	e7fe      	b.n	800cd5a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd60:	1e5a      	subs	r2, r3, #1
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d044      	beq.n	800cdfc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d140      	bne.n	800cdfc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fe fa52 	bl	800b228 <uxListRemove>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d115      	bne.n	800cdb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8e:	491f      	ldr	r1, [pc, #124]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	440b      	add	r3, r1
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xTaskPriorityDisinherit+0xb2>
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	2201      	movs	r2, #1
 800cda6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdaa:	43da      	mvns	r2, r3
 800cdac:	4b18      	ldr	r3, [pc, #96]	; (800ce10 <xTaskPriorityDisinherit+0x10c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	4a17      	ldr	r2, [pc, #92]	; (800ce10 <xTaskPriorityDisinherit+0x10c>)
 800cdb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	f1c3 0207 	rsb	r2, r3, #7
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdce:	2201      	movs	r2, #1
 800cdd0:	409a      	lsls	r2, r3
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <xTaskPriorityDisinherit+0x10c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	4a0d      	ldr	r2, [pc, #52]	; (800ce10 <xTaskPriorityDisinherit+0x10c>)
 800cdda:	6013      	str	r3, [r2, #0]
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4a08      	ldr	r2, [pc, #32]	; (800ce0c <xTaskPriorityDisinherit+0x108>)
 800cdea:	441a      	add	r2, r3
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4610      	mov	r0, r2
 800cdf4:	f7fe f9bb 	bl	800b16e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdfc:	697b      	ldr	r3, [r7, #20]
	}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20000500 	.word	0x20000500
 800ce0c:	20000504 	.word	0x20000504
 800ce10:	20000608 	.word	0x20000608

0800ce14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ce22:	2301      	movs	r3, #1
 800ce24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 8085 	beq.w	800cf38 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10b      	bne.n	800ce4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	b672      	cpsid	i
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	b662      	cpsie	i
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	e7fe      	b.n	800ce4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d902      	bls.n	800ce5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	61fb      	str	r3, [r7, #28]
 800ce5c:	e002      	b.n	800ce64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	69fa      	ldr	r2, [r7, #28]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d064      	beq.n	800cf38 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d15f      	bne.n	800cf38 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce78:	4b31      	ldr	r3, [pc, #196]	; (800cf40 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	69ba      	ldr	r2, [r7, #24]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d10b      	bne.n	800ce9a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	b672      	cpsid	i
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	b662      	cpsie	i
 800ce96:	60bb      	str	r3, [r7, #8]
 800ce98:	e7fe      	b.n	800ce98 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	69fa      	ldr	r2, [r7, #28]
 800cea4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	db04      	blt.n	800ceb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	f1c3 0207 	rsb	r2, r3, #7
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	6959      	ldr	r1, [r3, #20]
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4613      	mov	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cec8:	4413      	add	r3, r2
 800ceca:	4299      	cmp	r1, r3
 800cecc:	d134      	bne.n	800cf38 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	3304      	adds	r3, #4
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe f9a8 	bl	800b228 <uxListRemove>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d115      	bne.n	800cf0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee2:	4918      	ldr	r1, [pc, #96]	; (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cee4:	4613      	mov	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	4413      	add	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	440b      	add	r3, r1
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10a      	bne.n	800cf0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	2201      	movs	r2, #1
 800cefa:	fa02 f303 	lsl.w	r3, r2, r3
 800cefe:	43da      	mvns	r2, r3
 800cf00:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4013      	ands	r3, r2
 800cf06:	4a10      	ldr	r2, [pc, #64]	; (800cf48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	2201      	movs	r2, #1
 800cf10:	409a      	lsls	r2, r3
 800cf12:	4b0d      	ldr	r3, [pc, #52]	; (800cf48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	4a0b      	ldr	r2, [pc, #44]	; (800cf48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4a06      	ldr	r2, [pc, #24]	; (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cf2a:	441a      	add	r2, r3
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	4619      	mov	r1, r3
 800cf32:	4610      	mov	r0, r2
 800cf34:	f7fe f91b 	bl	800b16e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf38:	bf00      	nop
 800cf3a:	3720      	adds	r7, #32
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	20000500 	.word	0x20000500
 800cf44:	20000504 	.word	0x20000504
 800cf48:	20000608 	.word	0x20000608

0800cf4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf58:	4b05      	ldr	r3, [pc, #20]	; (800cf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf5e:	3201      	adds	r2, #1
 800cf60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cf62:	4b03      	ldr	r3, [pc, #12]	; (800cf70 <pvTaskIncrementMutexHeldCount+0x24>)
 800cf64:	681b      	ldr	r3, [r3, #0]
	}
 800cf66:	4618      	mov	r0, r3
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	20000500 	.word	0x20000500

0800cf74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf7e:	4b29      	ldr	r3, [pc, #164]	; (800d024 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf84:	4b28      	ldr	r3, [pc, #160]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe f94c 	bl	800b228 <uxListRemove>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10b      	bne.n	800cfae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf96:	4b24      	ldr	r3, [pc, #144]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa2:	43da      	mvns	r2, r3
 800cfa4:	4b21      	ldr	r3, [pc, #132]	; (800d02c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	4a20      	ldr	r2, [pc, #128]	; (800d02c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb4:	d10a      	bne.n	800cfcc <prvAddCurrentTaskToDelayedList+0x58>
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d007      	beq.n	800cfcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	481a      	ldr	r0, [pc, #104]	; (800d030 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfc6:	f7fe f8d2 	bl	800b16e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfca:	e026      	b.n	800d01a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfd4:	4b14      	ldr	r3, [pc, #80]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d209      	bcs.n	800cff8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfe4:	4b13      	ldr	r3, [pc, #76]	; (800d034 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	4b0f      	ldr	r3, [pc, #60]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3304      	adds	r3, #4
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7fe f8e0 	bl	800b1b6 <vListInsert>
}
 800cff6:	e010      	b.n	800d01a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cff8:	4b0f      	ldr	r3, [pc, #60]	; (800d038 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3304      	adds	r3, #4
 800d002:	4619      	mov	r1, r3
 800d004:	4610      	mov	r0, r2
 800d006:	f7fe f8d6 	bl	800b1b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d00a:	4b0c      	ldr	r3, [pc, #48]	; (800d03c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	429a      	cmp	r2, r3
 800d012:	d202      	bcs.n	800d01a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d014:	4a09      	ldr	r2, [pc, #36]	; (800d03c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6013      	str	r3, [r2, #0]
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20000604 	.word	0x20000604
 800d028:	20000500 	.word	0x20000500
 800d02c:	20000608 	.word	0x20000608
 800d030:	200005ec 	.word	0x200005ec
 800d034:	200005bc 	.word	0x200005bc
 800d038:	200005b8 	.word	0x200005b8
 800d03c:	20000620 	.word	0x20000620

0800d040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	3b04      	subs	r3, #4
 800d050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3b04      	subs	r3, #4
 800d05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	f023 0201 	bic.w	r2, r3, #1
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3b04      	subs	r3, #4
 800d06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d070:	4a0c      	ldr	r2, [pc, #48]	; (800d0a4 <pxPortInitialiseStack+0x64>)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3b14      	subs	r3, #20
 800d07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b04      	subs	r3, #4
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f06f 0202 	mvn.w	r2, #2
 800d08e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	3b20      	subs	r3, #32
 800d094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d096:	68fb      	ldr	r3, [r7, #12]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	0800d0a9 	.word	0x0800d0a9

0800d0a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0b2:	4b13      	ldr	r3, [pc, #76]	; (800d100 <prvTaskExitError+0x58>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ba:	d00b      	beq.n	800d0d4 <prvTaskExitError+0x2c>
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	b672      	cpsid	i
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	b662      	cpsie	i
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e7fe      	b.n	800d0d2 <prvTaskExitError+0x2a>
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	b672      	cpsid	i
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	b662      	cpsie	i
 800d0e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ea:	bf00      	nop
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0fc      	beq.n	800d0ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0f2:	bf00      	nop
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20000054 	.word	0x20000054
	...

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d166:	4b36      	ldr	r3, [pc, #216]	; (800d240 <xPortStartScheduler+0xe0>)
 800d168:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	22ff      	movs	r2, #255	; 0xff
 800d176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d188:	b2da      	uxtb	r2, r3
 800d18a:	4b2e      	ldr	r3, [pc, #184]	; (800d244 <xPortStartScheduler+0xe4>)
 800d18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d18e:	4b2e      	ldr	r3, [pc, #184]	; (800d248 <xPortStartScheduler+0xe8>)
 800d190:	2207      	movs	r2, #7
 800d192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d194:	e009      	b.n	800d1aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d196:	4b2c      	ldr	r3, [pc, #176]	; (800d248 <xPortStartScheduler+0xe8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	4a2a      	ldr	r2, [pc, #168]	; (800d248 <xPortStartScheduler+0xe8>)
 800d19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1b2:	2b80      	cmp	r3, #128	; 0x80
 800d1b4:	d0ef      	beq.n	800d196 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1b6:	4b24      	ldr	r3, [pc, #144]	; (800d248 <xPortStartScheduler+0xe8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1c3 0307 	rsb	r3, r3, #7
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d00b      	beq.n	800d1da <xPortStartScheduler+0x7a>
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	b672      	cpsid	i
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	b662      	cpsie	i
 800d1d6:	60bb      	str	r3, [r7, #8]
 800d1d8:	e7fe      	b.n	800d1d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1da:	4b1b      	ldr	r3, [pc, #108]	; (800d248 <xPortStartScheduler+0xe8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	021b      	lsls	r3, r3, #8
 800d1e0:	4a19      	ldr	r2, [pc, #100]	; (800d248 <xPortStartScheduler+0xe8>)
 800d1e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1e4:	4b18      	ldr	r3, [pc, #96]	; (800d248 <xPortStartScheduler+0xe8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1ec:	4a16      	ldr	r2, [pc, #88]	; (800d248 <xPortStartScheduler+0xe8>)
 800d1ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1f8:	4b14      	ldr	r3, [pc, #80]	; (800d24c <xPortStartScheduler+0xec>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a13      	ldr	r2, [pc, #76]	; (800d24c <xPortStartScheduler+0xec>)
 800d1fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d202:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d204:	4b11      	ldr	r3, [pc, #68]	; (800d24c <xPortStartScheduler+0xec>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a10      	ldr	r2, [pc, #64]	; (800d24c <xPortStartScheduler+0xec>)
 800d20a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d20e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d210:	f000 f8d4 	bl	800d3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d214:	4b0e      	ldr	r3, [pc, #56]	; (800d250 <xPortStartScheduler+0xf0>)
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d21a:	f000 f8f3 	bl	800d404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d21e:	4b0d      	ldr	r3, [pc, #52]	; (800d254 <xPortStartScheduler+0xf4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a0c      	ldr	r2, [pc, #48]	; (800d254 <xPortStartScheduler+0xf4>)
 800d224:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d228:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d22a:	f7ff ff85 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d22e:	f7ff fa8b 	bl	800c748 <vTaskSwitchContext>
	prvTaskExitError();
 800d232:	f7ff ff39 	bl	800d0a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	e000e400 	.word	0xe000e400
 800d244:	2000062c 	.word	0x2000062c
 800d248:	20000630 	.word	0x20000630
 800d24c:	e000ed20 	.word	0xe000ed20
 800d250:	20000054 	.word	0x20000054
 800d254:	e000ef34 	.word	0xe000ef34

0800d258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d262:	b672      	cpsid	i
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	b662      	cpsie	i
 800d272:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d274:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <vPortEnterCritical+0x5c>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3301      	adds	r3, #1
 800d27a:	4a0e      	ldr	r2, [pc, #56]	; (800d2b4 <vPortEnterCritical+0x5c>)
 800d27c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d27e:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <vPortEnterCritical+0x5c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d110      	bne.n	800d2a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d286:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <vPortEnterCritical+0x60>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00b      	beq.n	800d2a8 <vPortEnterCritical+0x50>
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	b672      	cpsid	i
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	b662      	cpsie	i
 800d2a4:	603b      	str	r3, [r7, #0]
 800d2a6:	e7fe      	b.n	800d2a6 <vPortEnterCritical+0x4e>
	}
}
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	20000054 	.word	0x20000054
 800d2b8:	e000ed04 	.word	0xe000ed04

0800d2bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2c2:	4b12      	ldr	r3, [pc, #72]	; (800d30c <vPortExitCritical+0x50>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10b      	bne.n	800d2e2 <vPortExitCritical+0x26>
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	b672      	cpsid	i
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	b662      	cpsie	i
 800d2de:	607b      	str	r3, [r7, #4]
 800d2e0:	e7fe      	b.n	800d2e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d2e2:	4b0a      	ldr	r3, [pc, #40]	; (800d30c <vPortExitCritical+0x50>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	4a08      	ldr	r2, [pc, #32]	; (800d30c <vPortExitCritical+0x50>)
 800d2ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2ec:	4b07      	ldr	r3, [pc, #28]	; (800d30c <vPortExitCritical+0x50>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d104      	bne.n	800d2fe <vPortExitCritical+0x42>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2fe:	bf00      	nop
 800d300:	370c      	adds	r7, #12
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	20000054 	.word	0x20000054

0800d310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d310:	f3ef 8009 	mrs	r0, PSP
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	4b15      	ldr	r3, [pc, #84]	; (800d370 <pxCurrentTCBConst>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	f01e 0f10 	tst.w	lr, #16
 800d320:	bf08      	it	eq
 800d322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32a:	6010      	str	r0, [r2, #0]
 800d32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d334:	b672      	cpsid	i
 800d336:	f380 8811 	msr	BASEPRI, r0
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	b662      	cpsie	i
 800d344:	f7ff fa00 	bl	800c748 <vTaskSwitchContext>
 800d348:	f04f 0000 	mov.w	r0, #0
 800d34c:	f380 8811 	msr	BASEPRI, r0
 800d350:	bc09      	pop	{r0, r3}
 800d352:	6819      	ldr	r1, [r3, #0]
 800d354:	6808      	ldr	r0, [r1, #0]
 800d356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	f01e 0f10 	tst.w	lr, #16
 800d35e:	bf08      	it	eq
 800d360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d364:	f380 8809 	msr	PSP, r0
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop

0800d370 <pxCurrentTCBConst>:
 800d370:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	b672      	cpsid	i
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	b662      	cpsie	i
 800d392:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d394:	f7ff f91e 	bl	800c5d4 <xTaskIncrementTick>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d39e:	4b06      	ldr	r3, [pc, #24]	; (800d3b8 <SysTick_Handler+0x40>)
 800d3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	e000ed04 	.word	0xe000ed04

0800d3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3c6:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <vPortSetupTimerInterrupt+0x38>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <vPortSetupTimerInterrupt+0x3c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <vPortSetupTimerInterrupt+0x40>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	099b      	lsrs	r3, r3, #6
 800d3d8:	4a09      	ldr	r2, [pc, #36]	; (800d400 <vPortSetupTimerInterrupt+0x44>)
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3de:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3e0:	2207      	movs	r2, #7
 800d3e2:	601a      	str	r2, [r3, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	e000e010 	.word	0xe000e010
 800d3f4:	e000e018 	.word	0xe000e018
 800d3f8:	20000048 	.word	0x20000048
 800d3fc:	10624dd3 	.word	0x10624dd3
 800d400:	e000e014 	.word	0xe000e014

0800d404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d414 <vPortEnableVFP+0x10>
 800d408:	6801      	ldr	r1, [r0, #0]
 800d40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d40e:	6001      	str	r1, [r0, #0]
 800d410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d412:	bf00      	nop
 800d414:	e000ed88 	.word	0xe000ed88

0800d418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b08a      	sub	sp, #40	; 0x28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d420:	2300      	movs	r3, #0
 800d422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d424:	f7ff f81a 	bl	800c45c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d428:	4b5a      	ldr	r3, [pc, #360]	; (800d594 <pvPortMalloc+0x17c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d430:	f000 f916 	bl	800d660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d434:	4b58      	ldr	r3, [pc, #352]	; (800d598 <pvPortMalloc+0x180>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4013      	ands	r3, r2
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 8090 	bne.w	800d562 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01e      	beq.n	800d486 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d448:	2208      	movs	r2, #8
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d015      	beq.n	800d486 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f023 0307 	bic.w	r3, r3, #7
 800d460:	3308      	adds	r3, #8
 800d462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00b      	beq.n	800d486 <pvPortMalloc+0x6e>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	b672      	cpsid	i
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	b662      	cpsie	i
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e7fe      	b.n	800d484 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d06a      	beq.n	800d562 <pvPortMalloc+0x14a>
 800d48c:	4b43      	ldr	r3, [pc, #268]	; (800d59c <pvPortMalloc+0x184>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	429a      	cmp	r2, r3
 800d494:	d865      	bhi.n	800d562 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d496:	4b42      	ldr	r3, [pc, #264]	; (800d5a0 <pvPortMalloc+0x188>)
 800d498:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d49a:	4b41      	ldr	r3, [pc, #260]	; (800d5a0 <pvPortMalloc+0x188>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4a0:	e004      	b.n	800d4ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d903      	bls.n	800d4be <pvPortMalloc+0xa6>
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1f1      	bne.n	800d4a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d4be:	4b35      	ldr	r3, [pc, #212]	; (800d594 <pvPortMalloc+0x17c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d04c      	beq.n	800d562 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d4c8:	6a3b      	ldr	r3, [r7, #32]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	4413      	add	r3, r2
 800d4d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	1ad2      	subs	r2, r2, r3
 800d4e2:	2308      	movs	r3, #8
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d920      	bls.n	800d52c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	f003 0307 	and.w	r3, r3, #7
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00b      	beq.n	800d514 <pvPortMalloc+0xfc>
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	b672      	cpsid	i
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	b662      	cpsie	i
 800d510:	613b      	str	r3, [r7, #16]
 800d512:	e7fe      	b.n	800d512 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	1ad2      	subs	r2, r2, r3
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d526:	69b8      	ldr	r0, [r7, #24]
 800d528:	f000 f8fc 	bl	800d724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d52c:	4b1b      	ldr	r3, [pc, #108]	; (800d59c <pvPortMalloc+0x184>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	4a19      	ldr	r2, [pc, #100]	; (800d59c <pvPortMalloc+0x184>)
 800d538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d53a:	4b18      	ldr	r3, [pc, #96]	; (800d59c <pvPortMalloc+0x184>)
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4b19      	ldr	r3, [pc, #100]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d203      	bcs.n	800d54e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d546:	4b15      	ldr	r3, [pc, #84]	; (800d59c <pvPortMalloc+0x184>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a16      	ldr	r2, [pc, #88]	; (800d5a4 <pvPortMalloc+0x18c>)
 800d54c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	685a      	ldr	r2, [r3, #4]
 800d552:	4b11      	ldr	r3, [pc, #68]	; (800d598 <pvPortMalloc+0x180>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	431a      	orrs	r2, r3
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	2200      	movs	r2, #0
 800d560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d562:	f7fe ff89 	bl	800c478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	f003 0307 	and.w	r3, r3, #7
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <pvPortMalloc+0x170>
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	b672      	cpsid	i
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	b662      	cpsie	i
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e7fe      	b.n	800d586 <pvPortMalloc+0x16e>
	return pvReturn;
 800d588:	69fb      	ldr	r3, [r7, #28]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3728      	adds	r7, #40	; 0x28
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	2000863c 	.word	0x2000863c
 800d598:	20008648 	.word	0x20008648
 800d59c:	20008640 	.word	0x20008640
 800d5a0:	20008634 	.word	0x20008634
 800d5a4:	20008644 	.word	0x20008644

0800d5a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d04a      	beq.n	800d650 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d5ba:	2308      	movs	r3, #8
 800d5bc:	425b      	negs	r3, r3
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	4b22      	ldr	r3, [pc, #136]	; (800d658 <vPortFree+0xb0>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10b      	bne.n	800d5ee <vPortFree+0x46>
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	b672      	cpsid	i
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	b662      	cpsie	i
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e7fe      	b.n	800d5ec <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00b      	beq.n	800d60e <vPortFree+0x66>
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	b672      	cpsid	i
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	b662      	cpsie	i
 800d60a:	60bb      	str	r3, [r7, #8]
 800d60c:	e7fe      	b.n	800d60c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	4b11      	ldr	r3, [pc, #68]	; (800d658 <vPortFree+0xb0>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4013      	ands	r3, r2
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d019      	beq.n	800d650 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d115      	bne.n	800d650 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	4b0b      	ldr	r3, [pc, #44]	; (800d658 <vPortFree+0xb0>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	43db      	mvns	r3, r3
 800d62e:	401a      	ands	r2, r3
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d634:	f7fe ff12 	bl	800c45c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	4b07      	ldr	r3, [pc, #28]	; (800d65c <vPortFree+0xb4>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4413      	add	r3, r2
 800d642:	4a06      	ldr	r2, [pc, #24]	; (800d65c <vPortFree+0xb4>)
 800d644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d646:	6938      	ldr	r0, [r7, #16]
 800d648:	f000 f86c 	bl	800d724 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d64c:	f7fe ff14 	bl	800c478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d650:	bf00      	nop
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20008648 	.word	0x20008648
 800d65c:	20008640 	.word	0x20008640

0800d660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d66c:	4b27      	ldr	r3, [pc, #156]	; (800d70c <prvHeapInit+0xac>)
 800d66e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f003 0307 	and.w	r3, r3, #7
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00c      	beq.n	800d694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	3307      	adds	r3, #7
 800d67e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f023 0307 	bic.w	r3, r3, #7
 800d686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	4a1f      	ldr	r2, [pc, #124]	; (800d70c <prvHeapInit+0xac>)
 800d690:	4413      	add	r3, r2
 800d692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d698:	4a1d      	ldr	r2, [pc, #116]	; (800d710 <prvHeapInit+0xb0>)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d69e:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <prvHeapInit+0xb0>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d6ac:	2208      	movs	r2, #8
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f023 0307 	bic.w	r3, r3, #7
 800d6ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4a15      	ldr	r2, [pc, #84]	; (800d714 <prvHeapInit+0xb4>)
 800d6c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6c2:	4b14      	ldr	r3, [pc, #80]	; (800d714 <prvHeapInit+0xb4>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <prvHeapInit+0xb4>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	1ad2      	subs	r2, r2, r3
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6e0:	4b0c      	ldr	r3, [pc, #48]	; (800d714 <prvHeapInit+0xb4>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	4a0a      	ldr	r2, [pc, #40]	; (800d718 <prvHeapInit+0xb8>)
 800d6ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	4a09      	ldr	r2, [pc, #36]	; (800d71c <prvHeapInit+0xbc>)
 800d6f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6f8:	4b09      	ldr	r3, [pc, #36]	; (800d720 <prvHeapInit+0xc0>)
 800d6fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6fe:	601a      	str	r2, [r3, #0]
}
 800d700:	bf00      	nop
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	20000634 	.word	0x20000634
 800d710:	20008634 	.word	0x20008634
 800d714:	2000863c 	.word	0x2000863c
 800d718:	20008644 	.word	0x20008644
 800d71c:	20008640 	.word	0x20008640
 800d720:	20008648 	.word	0x20008648

0800d724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d72c:	4b28      	ldr	r3, [pc, #160]	; (800d7d0 <prvInsertBlockIntoFreeList+0xac>)
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	e002      	b.n	800d738 <prvInsertBlockIntoFreeList+0x14>
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d8f7      	bhi.n	800d732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	4413      	add	r3, r2
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d108      	bne.n	800d766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	441a      	add	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	441a      	add	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	d118      	bne.n	800d7ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	4b15      	ldr	r3, [pc, #84]	; (800d7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d00d      	beq.n	800d7a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	441a      	add	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e008      	b.n	800d7b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d7a2:	4b0c      	ldr	r3, [pc, #48]	; (800d7d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	e003      	b.n	800d7b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d002      	beq.n	800d7c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7c2:	bf00      	nop
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	20008634 	.word	0x20008634
 800d7d4:	2000863c 	.word	0x2000863c

0800d7d8 <__errno>:
 800d7d8:	4b01      	ldr	r3, [pc, #4]	; (800d7e0 <__errno+0x8>)
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	20000058 	.word	0x20000058

0800d7e4 <__libc_init_array>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	4e0d      	ldr	r6, [pc, #52]	; (800d81c <__libc_init_array+0x38>)
 800d7e8:	4c0d      	ldr	r4, [pc, #52]	; (800d820 <__libc_init_array+0x3c>)
 800d7ea:	1ba4      	subs	r4, r4, r6
 800d7ec:	10a4      	asrs	r4, r4, #2
 800d7ee:	2500      	movs	r5, #0
 800d7f0:	42a5      	cmp	r5, r4
 800d7f2:	d109      	bne.n	800d808 <__libc_init_array+0x24>
 800d7f4:	4e0b      	ldr	r6, [pc, #44]	; (800d824 <__libc_init_array+0x40>)
 800d7f6:	4c0c      	ldr	r4, [pc, #48]	; (800d828 <__libc_init_array+0x44>)
 800d7f8:	f000 fc28 	bl	800e04c <_init>
 800d7fc:	1ba4      	subs	r4, r4, r6
 800d7fe:	10a4      	asrs	r4, r4, #2
 800d800:	2500      	movs	r5, #0
 800d802:	42a5      	cmp	r5, r4
 800d804:	d105      	bne.n	800d812 <__libc_init_array+0x2e>
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d80c:	4798      	blx	r3
 800d80e:	3501      	adds	r5, #1
 800d810:	e7ee      	b.n	800d7f0 <__libc_init_array+0xc>
 800d812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d816:	4798      	blx	r3
 800d818:	3501      	adds	r5, #1
 800d81a:	e7f2      	b.n	800d802 <__libc_init_array+0x1e>
 800d81c:	080100d8 	.word	0x080100d8
 800d820:	080100d8 	.word	0x080100d8
 800d824:	080100d8 	.word	0x080100d8
 800d828:	080100dc 	.word	0x080100dc

0800d82c <memcpy>:
 800d82c:	b510      	push	{r4, lr}
 800d82e:	1e43      	subs	r3, r0, #1
 800d830:	440a      	add	r2, r1
 800d832:	4291      	cmp	r1, r2
 800d834:	d100      	bne.n	800d838 <memcpy+0xc>
 800d836:	bd10      	pop	{r4, pc}
 800d838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d840:	e7f7      	b.n	800d832 <memcpy+0x6>

0800d842 <memset>:
 800d842:	4402      	add	r2, r0
 800d844:	4603      	mov	r3, r0
 800d846:	4293      	cmp	r3, r2
 800d848:	d100      	bne.n	800d84c <memset+0xa>
 800d84a:	4770      	bx	lr
 800d84c:	f803 1b01 	strb.w	r1, [r3], #1
 800d850:	e7f9      	b.n	800d846 <memset+0x4>
	...

0800d854 <siprintf>:
 800d854:	b40e      	push	{r1, r2, r3}
 800d856:	b500      	push	{lr}
 800d858:	b09c      	sub	sp, #112	; 0x70
 800d85a:	ab1d      	add	r3, sp, #116	; 0x74
 800d85c:	9002      	str	r0, [sp, #8]
 800d85e:	9006      	str	r0, [sp, #24]
 800d860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d864:	4809      	ldr	r0, [pc, #36]	; (800d88c <siprintf+0x38>)
 800d866:	9107      	str	r1, [sp, #28]
 800d868:	9104      	str	r1, [sp, #16]
 800d86a:	4909      	ldr	r1, [pc, #36]	; (800d890 <siprintf+0x3c>)
 800d86c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d870:	9105      	str	r1, [sp, #20]
 800d872:	6800      	ldr	r0, [r0, #0]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	a902      	add	r1, sp, #8
 800d878:	f000 f866 	bl	800d948 <_svfiprintf_r>
 800d87c:	9b02      	ldr	r3, [sp, #8]
 800d87e:	2200      	movs	r2, #0
 800d880:	701a      	strb	r2, [r3, #0]
 800d882:	b01c      	add	sp, #112	; 0x70
 800d884:	f85d eb04 	ldr.w	lr, [sp], #4
 800d888:	b003      	add	sp, #12
 800d88a:	4770      	bx	lr
 800d88c:	20000058 	.word	0x20000058
 800d890:	ffff0208 	.word	0xffff0208

0800d894 <__ssputs_r>:
 800d894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d898:	688e      	ldr	r6, [r1, #8]
 800d89a:	429e      	cmp	r6, r3
 800d89c:	4682      	mov	sl, r0
 800d89e:	460c      	mov	r4, r1
 800d8a0:	4690      	mov	r8, r2
 800d8a2:	4699      	mov	r9, r3
 800d8a4:	d837      	bhi.n	800d916 <__ssputs_r+0x82>
 800d8a6:	898a      	ldrh	r2, [r1, #12]
 800d8a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8ac:	d031      	beq.n	800d912 <__ssputs_r+0x7e>
 800d8ae:	6825      	ldr	r5, [r4, #0]
 800d8b0:	6909      	ldr	r1, [r1, #16]
 800d8b2:	1a6f      	subs	r7, r5, r1
 800d8b4:	6965      	ldr	r5, [r4, #20]
 800d8b6:	2302      	movs	r3, #2
 800d8b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8bc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d8c0:	f109 0301 	add.w	r3, r9, #1
 800d8c4:	443b      	add	r3, r7
 800d8c6:	429d      	cmp	r5, r3
 800d8c8:	bf38      	it	cc
 800d8ca:	461d      	movcc	r5, r3
 800d8cc:	0553      	lsls	r3, r2, #21
 800d8ce:	d530      	bpl.n	800d932 <__ssputs_r+0x9e>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	f000 fb21 	bl	800df18 <_malloc_r>
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	b950      	cbnz	r0, 800d8f0 <__ssputs_r+0x5c>
 800d8da:	230c      	movs	r3, #12
 800d8dc:	f8ca 3000 	str.w	r3, [sl]
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e6:	81a3      	strh	r3, [r4, #12]
 800d8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f0:	463a      	mov	r2, r7
 800d8f2:	6921      	ldr	r1, [r4, #16]
 800d8f4:	f7ff ff9a 	bl	800d82c <memcpy>
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	6126      	str	r6, [r4, #16]
 800d906:	6165      	str	r5, [r4, #20]
 800d908:	443e      	add	r6, r7
 800d90a:	1bed      	subs	r5, r5, r7
 800d90c:	6026      	str	r6, [r4, #0]
 800d90e:	60a5      	str	r5, [r4, #8]
 800d910:	464e      	mov	r6, r9
 800d912:	454e      	cmp	r6, r9
 800d914:	d900      	bls.n	800d918 <__ssputs_r+0x84>
 800d916:	464e      	mov	r6, r9
 800d918:	4632      	mov	r2, r6
 800d91a:	4641      	mov	r1, r8
 800d91c:	6820      	ldr	r0, [r4, #0]
 800d91e:	f000 fa93 	bl	800de48 <memmove>
 800d922:	68a3      	ldr	r3, [r4, #8]
 800d924:	1b9b      	subs	r3, r3, r6
 800d926:	60a3      	str	r3, [r4, #8]
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	441e      	add	r6, r3
 800d92c:	6026      	str	r6, [r4, #0]
 800d92e:	2000      	movs	r0, #0
 800d930:	e7dc      	b.n	800d8ec <__ssputs_r+0x58>
 800d932:	462a      	mov	r2, r5
 800d934:	f000 fb4a 	bl	800dfcc <_realloc_r>
 800d938:	4606      	mov	r6, r0
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d1e2      	bne.n	800d904 <__ssputs_r+0x70>
 800d93e:	6921      	ldr	r1, [r4, #16]
 800d940:	4650      	mov	r0, sl
 800d942:	f000 fa9b 	bl	800de7c <_free_r>
 800d946:	e7c8      	b.n	800d8da <__ssputs_r+0x46>

0800d948 <_svfiprintf_r>:
 800d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	461d      	mov	r5, r3
 800d94e:	898b      	ldrh	r3, [r1, #12]
 800d950:	061f      	lsls	r7, r3, #24
 800d952:	b09d      	sub	sp, #116	; 0x74
 800d954:	4680      	mov	r8, r0
 800d956:	460c      	mov	r4, r1
 800d958:	4616      	mov	r6, r2
 800d95a:	d50f      	bpl.n	800d97c <_svfiprintf_r+0x34>
 800d95c:	690b      	ldr	r3, [r1, #16]
 800d95e:	b96b      	cbnz	r3, 800d97c <_svfiprintf_r+0x34>
 800d960:	2140      	movs	r1, #64	; 0x40
 800d962:	f000 fad9 	bl	800df18 <_malloc_r>
 800d966:	6020      	str	r0, [r4, #0]
 800d968:	6120      	str	r0, [r4, #16]
 800d96a:	b928      	cbnz	r0, 800d978 <_svfiprintf_r+0x30>
 800d96c:	230c      	movs	r3, #12
 800d96e:	f8c8 3000 	str.w	r3, [r8]
 800d972:	f04f 30ff 	mov.w	r0, #4294967295
 800d976:	e0c8      	b.n	800db0a <_svfiprintf_r+0x1c2>
 800d978:	2340      	movs	r3, #64	; 0x40
 800d97a:	6163      	str	r3, [r4, #20]
 800d97c:	2300      	movs	r3, #0
 800d97e:	9309      	str	r3, [sp, #36]	; 0x24
 800d980:	2320      	movs	r3, #32
 800d982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d986:	2330      	movs	r3, #48	; 0x30
 800d988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d98c:	9503      	str	r5, [sp, #12]
 800d98e:	f04f 0b01 	mov.w	fp, #1
 800d992:	4637      	mov	r7, r6
 800d994:	463d      	mov	r5, r7
 800d996:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d99a:	b10b      	cbz	r3, 800d9a0 <_svfiprintf_r+0x58>
 800d99c:	2b25      	cmp	r3, #37	; 0x25
 800d99e:	d13e      	bne.n	800da1e <_svfiprintf_r+0xd6>
 800d9a0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d9a4:	d00b      	beq.n	800d9be <_svfiprintf_r+0x76>
 800d9a6:	4653      	mov	r3, sl
 800d9a8:	4632      	mov	r2, r6
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	f7ff ff71 	bl	800d894 <__ssputs_r>
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	f000 80a4 	beq.w	800db00 <_svfiprintf_r+0x1b8>
 800d9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ba:	4453      	add	r3, sl
 800d9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9be:	783b      	ldrb	r3, [r7, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 809d 	beq.w	800db00 <_svfiprintf_r+0x1b8>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9d0:	9304      	str	r3, [sp, #16]
 800d9d2:	9307      	str	r3, [sp, #28]
 800d9d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9d8:	931a      	str	r3, [sp, #104]	; 0x68
 800d9da:	462f      	mov	r7, r5
 800d9dc:	2205      	movs	r2, #5
 800d9de:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9e2:	4850      	ldr	r0, [pc, #320]	; (800db24 <_svfiprintf_r+0x1dc>)
 800d9e4:	f7f2 fc14 	bl	8000210 <memchr>
 800d9e8:	9b04      	ldr	r3, [sp, #16]
 800d9ea:	b9d0      	cbnz	r0, 800da22 <_svfiprintf_r+0xda>
 800d9ec:	06d9      	lsls	r1, r3, #27
 800d9ee:	bf44      	itt	mi
 800d9f0:	2220      	movmi	r2, #32
 800d9f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9f6:	071a      	lsls	r2, r3, #28
 800d9f8:	bf44      	itt	mi
 800d9fa:	222b      	movmi	r2, #43	; 0x2b
 800d9fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da00:	782a      	ldrb	r2, [r5, #0]
 800da02:	2a2a      	cmp	r2, #42	; 0x2a
 800da04:	d015      	beq.n	800da32 <_svfiprintf_r+0xea>
 800da06:	9a07      	ldr	r2, [sp, #28]
 800da08:	462f      	mov	r7, r5
 800da0a:	2000      	movs	r0, #0
 800da0c:	250a      	movs	r5, #10
 800da0e:	4639      	mov	r1, r7
 800da10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da14:	3b30      	subs	r3, #48	; 0x30
 800da16:	2b09      	cmp	r3, #9
 800da18:	d94d      	bls.n	800dab6 <_svfiprintf_r+0x16e>
 800da1a:	b1b8      	cbz	r0, 800da4c <_svfiprintf_r+0x104>
 800da1c:	e00f      	b.n	800da3e <_svfiprintf_r+0xf6>
 800da1e:	462f      	mov	r7, r5
 800da20:	e7b8      	b.n	800d994 <_svfiprintf_r+0x4c>
 800da22:	4a40      	ldr	r2, [pc, #256]	; (800db24 <_svfiprintf_r+0x1dc>)
 800da24:	1a80      	subs	r0, r0, r2
 800da26:	fa0b f000 	lsl.w	r0, fp, r0
 800da2a:	4318      	orrs	r0, r3
 800da2c:	9004      	str	r0, [sp, #16]
 800da2e:	463d      	mov	r5, r7
 800da30:	e7d3      	b.n	800d9da <_svfiprintf_r+0x92>
 800da32:	9a03      	ldr	r2, [sp, #12]
 800da34:	1d11      	adds	r1, r2, #4
 800da36:	6812      	ldr	r2, [r2, #0]
 800da38:	9103      	str	r1, [sp, #12]
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	db01      	blt.n	800da42 <_svfiprintf_r+0xfa>
 800da3e:	9207      	str	r2, [sp, #28]
 800da40:	e004      	b.n	800da4c <_svfiprintf_r+0x104>
 800da42:	4252      	negs	r2, r2
 800da44:	f043 0302 	orr.w	r3, r3, #2
 800da48:	9207      	str	r2, [sp, #28]
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	783b      	ldrb	r3, [r7, #0]
 800da4e:	2b2e      	cmp	r3, #46	; 0x2e
 800da50:	d10c      	bne.n	800da6c <_svfiprintf_r+0x124>
 800da52:	787b      	ldrb	r3, [r7, #1]
 800da54:	2b2a      	cmp	r3, #42	; 0x2a
 800da56:	d133      	bne.n	800dac0 <_svfiprintf_r+0x178>
 800da58:	9b03      	ldr	r3, [sp, #12]
 800da5a:	1d1a      	adds	r2, r3, #4
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	9203      	str	r2, [sp, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	bfb8      	it	lt
 800da64:	f04f 33ff 	movlt.w	r3, #4294967295
 800da68:	3702      	adds	r7, #2
 800da6a:	9305      	str	r3, [sp, #20]
 800da6c:	4d2e      	ldr	r5, [pc, #184]	; (800db28 <_svfiprintf_r+0x1e0>)
 800da6e:	7839      	ldrb	r1, [r7, #0]
 800da70:	2203      	movs	r2, #3
 800da72:	4628      	mov	r0, r5
 800da74:	f7f2 fbcc 	bl	8000210 <memchr>
 800da78:	b138      	cbz	r0, 800da8a <_svfiprintf_r+0x142>
 800da7a:	2340      	movs	r3, #64	; 0x40
 800da7c:	1b40      	subs	r0, r0, r5
 800da7e:	fa03 f000 	lsl.w	r0, r3, r0
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	4303      	orrs	r3, r0
 800da86:	3701      	adds	r7, #1
 800da88:	9304      	str	r3, [sp, #16]
 800da8a:	7839      	ldrb	r1, [r7, #0]
 800da8c:	4827      	ldr	r0, [pc, #156]	; (800db2c <_svfiprintf_r+0x1e4>)
 800da8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da92:	2206      	movs	r2, #6
 800da94:	1c7e      	adds	r6, r7, #1
 800da96:	f7f2 fbbb 	bl	8000210 <memchr>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d038      	beq.n	800db10 <_svfiprintf_r+0x1c8>
 800da9e:	4b24      	ldr	r3, [pc, #144]	; (800db30 <_svfiprintf_r+0x1e8>)
 800daa0:	bb13      	cbnz	r3, 800dae8 <_svfiprintf_r+0x1a0>
 800daa2:	9b03      	ldr	r3, [sp, #12]
 800daa4:	3307      	adds	r3, #7
 800daa6:	f023 0307 	bic.w	r3, r3, #7
 800daaa:	3308      	adds	r3, #8
 800daac:	9303      	str	r3, [sp, #12]
 800daae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab0:	444b      	add	r3, r9
 800dab2:	9309      	str	r3, [sp, #36]	; 0x24
 800dab4:	e76d      	b.n	800d992 <_svfiprintf_r+0x4a>
 800dab6:	fb05 3202 	mla	r2, r5, r2, r3
 800daba:	2001      	movs	r0, #1
 800dabc:	460f      	mov	r7, r1
 800dabe:	e7a6      	b.n	800da0e <_svfiprintf_r+0xc6>
 800dac0:	2300      	movs	r3, #0
 800dac2:	3701      	adds	r7, #1
 800dac4:	9305      	str	r3, [sp, #20]
 800dac6:	4619      	mov	r1, r3
 800dac8:	250a      	movs	r5, #10
 800daca:	4638      	mov	r0, r7
 800dacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad0:	3a30      	subs	r2, #48	; 0x30
 800dad2:	2a09      	cmp	r2, #9
 800dad4:	d903      	bls.n	800dade <_svfiprintf_r+0x196>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0c8      	beq.n	800da6c <_svfiprintf_r+0x124>
 800dada:	9105      	str	r1, [sp, #20]
 800dadc:	e7c6      	b.n	800da6c <_svfiprintf_r+0x124>
 800dade:	fb05 2101 	mla	r1, r5, r1, r2
 800dae2:	2301      	movs	r3, #1
 800dae4:	4607      	mov	r7, r0
 800dae6:	e7f0      	b.n	800daca <_svfiprintf_r+0x182>
 800dae8:	ab03      	add	r3, sp, #12
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	4622      	mov	r2, r4
 800daee:	4b11      	ldr	r3, [pc, #68]	; (800db34 <_svfiprintf_r+0x1ec>)
 800daf0:	a904      	add	r1, sp, #16
 800daf2:	4640      	mov	r0, r8
 800daf4:	f3af 8000 	nop.w
 800daf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dafc:	4681      	mov	r9, r0
 800dafe:	d1d6      	bne.n	800daae <_svfiprintf_r+0x166>
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	065b      	lsls	r3, r3, #25
 800db04:	f53f af35 	bmi.w	800d972 <_svfiprintf_r+0x2a>
 800db08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db0a:	b01d      	add	sp, #116	; 0x74
 800db0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db10:	ab03      	add	r3, sp, #12
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	4622      	mov	r2, r4
 800db16:	4b07      	ldr	r3, [pc, #28]	; (800db34 <_svfiprintf_r+0x1ec>)
 800db18:	a904      	add	r1, sp, #16
 800db1a:	4640      	mov	r0, r8
 800db1c:	f000 f882 	bl	800dc24 <_printf_i>
 800db20:	e7ea      	b.n	800daf8 <_svfiprintf_r+0x1b0>
 800db22:	bf00      	nop
 800db24:	0801009c 	.word	0x0801009c
 800db28:	080100a2 	.word	0x080100a2
 800db2c:	080100a6 	.word	0x080100a6
 800db30:	00000000 	.word	0x00000000
 800db34:	0800d895 	.word	0x0800d895

0800db38 <_printf_common>:
 800db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db3c:	4691      	mov	r9, r2
 800db3e:	461f      	mov	r7, r3
 800db40:	688a      	ldr	r2, [r1, #8]
 800db42:	690b      	ldr	r3, [r1, #16]
 800db44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db48:	4293      	cmp	r3, r2
 800db4a:	bfb8      	it	lt
 800db4c:	4613      	movlt	r3, r2
 800db4e:	f8c9 3000 	str.w	r3, [r9]
 800db52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db56:	4606      	mov	r6, r0
 800db58:	460c      	mov	r4, r1
 800db5a:	b112      	cbz	r2, 800db62 <_printf_common+0x2a>
 800db5c:	3301      	adds	r3, #1
 800db5e:	f8c9 3000 	str.w	r3, [r9]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	0699      	lsls	r1, r3, #26
 800db66:	bf42      	ittt	mi
 800db68:	f8d9 3000 	ldrmi.w	r3, [r9]
 800db6c:	3302      	addmi	r3, #2
 800db6e:	f8c9 3000 	strmi.w	r3, [r9]
 800db72:	6825      	ldr	r5, [r4, #0]
 800db74:	f015 0506 	ands.w	r5, r5, #6
 800db78:	d107      	bne.n	800db8a <_printf_common+0x52>
 800db7a:	f104 0a19 	add.w	sl, r4, #25
 800db7e:	68e3      	ldr	r3, [r4, #12]
 800db80:	f8d9 2000 	ldr.w	r2, [r9]
 800db84:	1a9b      	subs	r3, r3, r2
 800db86:	42ab      	cmp	r3, r5
 800db88:	dc28      	bgt.n	800dbdc <_printf_common+0xa4>
 800db8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	3300      	adds	r3, #0
 800db92:	bf18      	it	ne
 800db94:	2301      	movne	r3, #1
 800db96:	0692      	lsls	r2, r2, #26
 800db98:	d42d      	bmi.n	800dbf6 <_printf_common+0xbe>
 800db9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db9e:	4639      	mov	r1, r7
 800dba0:	4630      	mov	r0, r6
 800dba2:	47c0      	blx	r8
 800dba4:	3001      	adds	r0, #1
 800dba6:	d020      	beq.n	800dbea <_printf_common+0xb2>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	68e5      	ldr	r5, [r4, #12]
 800dbac:	f8d9 2000 	ldr.w	r2, [r9]
 800dbb0:	f003 0306 	and.w	r3, r3, #6
 800dbb4:	2b04      	cmp	r3, #4
 800dbb6:	bf08      	it	eq
 800dbb8:	1aad      	subeq	r5, r5, r2
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	6922      	ldr	r2, [r4, #16]
 800dbbe:	bf0c      	ite	eq
 800dbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbc4:	2500      	movne	r5, #0
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	bfc4      	itt	gt
 800dbca:	1a9b      	subgt	r3, r3, r2
 800dbcc:	18ed      	addgt	r5, r5, r3
 800dbce:	f04f 0900 	mov.w	r9, #0
 800dbd2:	341a      	adds	r4, #26
 800dbd4:	454d      	cmp	r5, r9
 800dbd6:	d11a      	bne.n	800dc0e <_printf_common+0xd6>
 800dbd8:	2000      	movs	r0, #0
 800dbda:	e008      	b.n	800dbee <_printf_common+0xb6>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	4652      	mov	r2, sl
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	47c0      	blx	r8
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	d103      	bne.n	800dbf2 <_printf_common+0xba>
 800dbea:	f04f 30ff 	mov.w	r0, #4294967295
 800dbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf2:	3501      	adds	r5, #1
 800dbf4:	e7c3      	b.n	800db7e <_printf_common+0x46>
 800dbf6:	18e1      	adds	r1, r4, r3
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	2030      	movs	r0, #48	; 0x30
 800dbfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc00:	4422      	add	r2, r4
 800dc02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc0a:	3302      	adds	r3, #2
 800dc0c:	e7c5      	b.n	800db9a <_printf_common+0x62>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	4622      	mov	r2, r4
 800dc12:	4639      	mov	r1, r7
 800dc14:	4630      	mov	r0, r6
 800dc16:	47c0      	blx	r8
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d0e6      	beq.n	800dbea <_printf_common+0xb2>
 800dc1c:	f109 0901 	add.w	r9, r9, #1
 800dc20:	e7d8      	b.n	800dbd4 <_printf_common+0x9c>
	...

0800dc24 <_printf_i>:
 800dc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	7e09      	ldrb	r1, [r1, #24]
 800dc30:	b085      	sub	sp, #20
 800dc32:	296e      	cmp	r1, #110	; 0x6e
 800dc34:	4617      	mov	r7, r2
 800dc36:	4606      	mov	r6, r0
 800dc38:	4698      	mov	r8, r3
 800dc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc3c:	f000 80b3 	beq.w	800dda6 <_printf_i+0x182>
 800dc40:	d822      	bhi.n	800dc88 <_printf_i+0x64>
 800dc42:	2963      	cmp	r1, #99	; 0x63
 800dc44:	d036      	beq.n	800dcb4 <_printf_i+0x90>
 800dc46:	d80a      	bhi.n	800dc5e <_printf_i+0x3a>
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	f000 80b9 	beq.w	800ddc0 <_printf_i+0x19c>
 800dc4e:	2958      	cmp	r1, #88	; 0x58
 800dc50:	f000 8083 	beq.w	800dd5a <_printf_i+0x136>
 800dc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dc5c:	e032      	b.n	800dcc4 <_printf_i+0xa0>
 800dc5e:	2964      	cmp	r1, #100	; 0x64
 800dc60:	d001      	beq.n	800dc66 <_printf_i+0x42>
 800dc62:	2969      	cmp	r1, #105	; 0x69
 800dc64:	d1f6      	bne.n	800dc54 <_printf_i+0x30>
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	6813      	ldr	r3, [r2, #0]
 800dc6a:	0605      	lsls	r5, r0, #24
 800dc6c:	f103 0104 	add.w	r1, r3, #4
 800dc70:	d52a      	bpl.n	800dcc8 <_printf_i+0xa4>
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6011      	str	r1, [r2, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	da03      	bge.n	800dc82 <_printf_i+0x5e>
 800dc7a:	222d      	movs	r2, #45	; 0x2d
 800dc7c:	425b      	negs	r3, r3
 800dc7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dc82:	486f      	ldr	r0, [pc, #444]	; (800de40 <_printf_i+0x21c>)
 800dc84:	220a      	movs	r2, #10
 800dc86:	e039      	b.n	800dcfc <_printf_i+0xd8>
 800dc88:	2973      	cmp	r1, #115	; 0x73
 800dc8a:	f000 809d 	beq.w	800ddc8 <_printf_i+0x1a4>
 800dc8e:	d808      	bhi.n	800dca2 <_printf_i+0x7e>
 800dc90:	296f      	cmp	r1, #111	; 0x6f
 800dc92:	d020      	beq.n	800dcd6 <_printf_i+0xb2>
 800dc94:	2970      	cmp	r1, #112	; 0x70
 800dc96:	d1dd      	bne.n	800dc54 <_printf_i+0x30>
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	f043 0320 	orr.w	r3, r3, #32
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	e003      	b.n	800dcaa <_printf_i+0x86>
 800dca2:	2975      	cmp	r1, #117	; 0x75
 800dca4:	d017      	beq.n	800dcd6 <_printf_i+0xb2>
 800dca6:	2978      	cmp	r1, #120	; 0x78
 800dca8:	d1d4      	bne.n	800dc54 <_printf_i+0x30>
 800dcaa:	2378      	movs	r3, #120	; 0x78
 800dcac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcb0:	4864      	ldr	r0, [pc, #400]	; (800de44 <_printf_i+0x220>)
 800dcb2:	e055      	b.n	800dd60 <_printf_i+0x13c>
 800dcb4:	6813      	ldr	r3, [r2, #0]
 800dcb6:	1d19      	adds	r1, r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	6011      	str	r1, [r2, #0]
 800dcbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e08c      	b.n	800dde2 <_printf_i+0x1be>
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6011      	str	r1, [r2, #0]
 800dccc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcd0:	bf18      	it	ne
 800dcd2:	b21b      	sxthne	r3, r3
 800dcd4:	e7cf      	b.n	800dc76 <_printf_i+0x52>
 800dcd6:	6813      	ldr	r3, [r2, #0]
 800dcd8:	6825      	ldr	r5, [r4, #0]
 800dcda:	1d18      	adds	r0, r3, #4
 800dcdc:	6010      	str	r0, [r2, #0]
 800dcde:	0628      	lsls	r0, r5, #24
 800dce0:	d501      	bpl.n	800dce6 <_printf_i+0xc2>
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	e002      	b.n	800dcec <_printf_i+0xc8>
 800dce6:	0668      	lsls	r0, r5, #25
 800dce8:	d5fb      	bpl.n	800dce2 <_printf_i+0xbe>
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	4854      	ldr	r0, [pc, #336]	; (800de40 <_printf_i+0x21c>)
 800dcee:	296f      	cmp	r1, #111	; 0x6f
 800dcf0:	bf14      	ite	ne
 800dcf2:	220a      	movne	r2, #10
 800dcf4:	2208      	moveq	r2, #8
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcfc:	6865      	ldr	r5, [r4, #4]
 800dcfe:	60a5      	str	r5, [r4, #8]
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	f2c0 8095 	blt.w	800de30 <_printf_i+0x20c>
 800dd06:	6821      	ldr	r1, [r4, #0]
 800dd08:	f021 0104 	bic.w	r1, r1, #4
 800dd0c:	6021      	str	r1, [r4, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d13d      	bne.n	800dd8e <_printf_i+0x16a>
 800dd12:	2d00      	cmp	r5, #0
 800dd14:	f040 808e 	bne.w	800de34 <_printf_i+0x210>
 800dd18:	4665      	mov	r5, ip
 800dd1a:	2a08      	cmp	r2, #8
 800dd1c:	d10b      	bne.n	800dd36 <_printf_i+0x112>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	07db      	lsls	r3, r3, #31
 800dd22:	d508      	bpl.n	800dd36 <_printf_i+0x112>
 800dd24:	6923      	ldr	r3, [r4, #16]
 800dd26:	6862      	ldr	r2, [r4, #4]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	bfde      	ittt	le
 800dd2c:	2330      	movle	r3, #48	; 0x30
 800dd2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd36:	ebac 0305 	sub.w	r3, ip, r5
 800dd3a:	6123      	str	r3, [r4, #16]
 800dd3c:	f8cd 8000 	str.w	r8, [sp]
 800dd40:	463b      	mov	r3, r7
 800dd42:	aa03      	add	r2, sp, #12
 800dd44:	4621      	mov	r1, r4
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7ff fef6 	bl	800db38 <_printf_common>
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d14d      	bne.n	800ddec <_printf_i+0x1c8>
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	b005      	add	sp, #20
 800dd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd5a:	4839      	ldr	r0, [pc, #228]	; (800de40 <_printf_i+0x21c>)
 800dd5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dd60:	6813      	ldr	r3, [r2, #0]
 800dd62:	6821      	ldr	r1, [r4, #0]
 800dd64:	1d1d      	adds	r5, r3, #4
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6015      	str	r5, [r2, #0]
 800dd6a:	060a      	lsls	r2, r1, #24
 800dd6c:	d50b      	bpl.n	800dd86 <_printf_i+0x162>
 800dd6e:	07ca      	lsls	r2, r1, #31
 800dd70:	bf44      	itt	mi
 800dd72:	f041 0120 	orrmi.w	r1, r1, #32
 800dd76:	6021      	strmi	r1, [r4, #0]
 800dd78:	b91b      	cbnz	r3, 800dd82 <_printf_i+0x15e>
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	f022 0220 	bic.w	r2, r2, #32
 800dd80:	6022      	str	r2, [r4, #0]
 800dd82:	2210      	movs	r2, #16
 800dd84:	e7b7      	b.n	800dcf6 <_printf_i+0xd2>
 800dd86:	064d      	lsls	r5, r1, #25
 800dd88:	bf48      	it	mi
 800dd8a:	b29b      	uxthmi	r3, r3
 800dd8c:	e7ef      	b.n	800dd6e <_printf_i+0x14a>
 800dd8e:	4665      	mov	r5, ip
 800dd90:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd94:	fb02 3311 	mls	r3, r2, r1, r3
 800dd98:	5cc3      	ldrb	r3, [r0, r3]
 800dd9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dd9e:	460b      	mov	r3, r1
 800dda0:	2900      	cmp	r1, #0
 800dda2:	d1f5      	bne.n	800dd90 <_printf_i+0x16c>
 800dda4:	e7b9      	b.n	800dd1a <_printf_i+0xf6>
 800dda6:	6813      	ldr	r3, [r2, #0]
 800dda8:	6825      	ldr	r5, [r4, #0]
 800ddaa:	6961      	ldr	r1, [r4, #20]
 800ddac:	1d18      	adds	r0, r3, #4
 800ddae:	6010      	str	r0, [r2, #0]
 800ddb0:	0628      	lsls	r0, r5, #24
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	d501      	bpl.n	800ddba <_printf_i+0x196>
 800ddb6:	6019      	str	r1, [r3, #0]
 800ddb8:	e002      	b.n	800ddc0 <_printf_i+0x19c>
 800ddba:	066a      	lsls	r2, r5, #25
 800ddbc:	d5fb      	bpl.n	800ddb6 <_printf_i+0x192>
 800ddbe:	8019      	strh	r1, [r3, #0]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	6123      	str	r3, [r4, #16]
 800ddc4:	4665      	mov	r5, ip
 800ddc6:	e7b9      	b.n	800dd3c <_printf_i+0x118>
 800ddc8:	6813      	ldr	r3, [r2, #0]
 800ddca:	1d19      	adds	r1, r3, #4
 800ddcc:	6011      	str	r1, [r2, #0]
 800ddce:	681d      	ldr	r5, [r3, #0]
 800ddd0:	6862      	ldr	r2, [r4, #4]
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f7f2 fa1b 	bl	8000210 <memchr>
 800ddda:	b108      	cbz	r0, 800dde0 <_printf_i+0x1bc>
 800dddc:	1b40      	subs	r0, r0, r5
 800ddde:	6060      	str	r0, [r4, #4]
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	2300      	movs	r3, #0
 800dde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddea:	e7a7      	b.n	800dd3c <_printf_i+0x118>
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	47c0      	blx	r8
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	d0aa      	beq.n	800dd50 <_printf_i+0x12c>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	079b      	lsls	r3, r3, #30
 800ddfe:	d413      	bmi.n	800de28 <_printf_i+0x204>
 800de00:	68e0      	ldr	r0, [r4, #12]
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	4298      	cmp	r0, r3
 800de06:	bfb8      	it	lt
 800de08:	4618      	movlt	r0, r3
 800de0a:	e7a3      	b.n	800dd54 <_printf_i+0x130>
 800de0c:	2301      	movs	r3, #1
 800de0e:	464a      	mov	r2, r9
 800de10:	4639      	mov	r1, r7
 800de12:	4630      	mov	r0, r6
 800de14:	47c0      	blx	r8
 800de16:	3001      	adds	r0, #1
 800de18:	d09a      	beq.n	800dd50 <_printf_i+0x12c>
 800de1a:	3501      	adds	r5, #1
 800de1c:	68e3      	ldr	r3, [r4, #12]
 800de1e:	9a03      	ldr	r2, [sp, #12]
 800de20:	1a9b      	subs	r3, r3, r2
 800de22:	42ab      	cmp	r3, r5
 800de24:	dcf2      	bgt.n	800de0c <_printf_i+0x1e8>
 800de26:	e7eb      	b.n	800de00 <_printf_i+0x1dc>
 800de28:	2500      	movs	r5, #0
 800de2a:	f104 0919 	add.w	r9, r4, #25
 800de2e:	e7f5      	b.n	800de1c <_printf_i+0x1f8>
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1ac      	bne.n	800dd8e <_printf_i+0x16a>
 800de34:	7803      	ldrb	r3, [r0, #0]
 800de36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de3e:	e76c      	b.n	800dd1a <_printf_i+0xf6>
 800de40:	080100ad 	.word	0x080100ad
 800de44:	080100be 	.word	0x080100be

0800de48 <memmove>:
 800de48:	4288      	cmp	r0, r1
 800de4a:	b510      	push	{r4, lr}
 800de4c:	eb01 0302 	add.w	r3, r1, r2
 800de50:	d807      	bhi.n	800de62 <memmove+0x1a>
 800de52:	1e42      	subs	r2, r0, #1
 800de54:	4299      	cmp	r1, r3
 800de56:	d00a      	beq.n	800de6e <memmove+0x26>
 800de58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de60:	e7f8      	b.n	800de54 <memmove+0xc>
 800de62:	4283      	cmp	r3, r0
 800de64:	d9f5      	bls.n	800de52 <memmove+0xa>
 800de66:	1881      	adds	r1, r0, r2
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	42d3      	cmn	r3, r2
 800de6c:	d100      	bne.n	800de70 <memmove+0x28>
 800de6e:	bd10      	pop	{r4, pc}
 800de70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de78:	e7f7      	b.n	800de6a <memmove+0x22>
	...

0800de7c <_free_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4605      	mov	r5, r0
 800de80:	2900      	cmp	r1, #0
 800de82:	d045      	beq.n	800df10 <_free_r+0x94>
 800de84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de88:	1f0c      	subs	r4, r1, #4
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bfb8      	it	lt
 800de8e:	18e4      	addlt	r4, r4, r3
 800de90:	f000 f8d2 	bl	800e038 <__malloc_lock>
 800de94:	4a1f      	ldr	r2, [pc, #124]	; (800df14 <_free_r+0x98>)
 800de96:	6813      	ldr	r3, [r2, #0]
 800de98:	4610      	mov	r0, r2
 800de9a:	b933      	cbnz	r3, 800deaa <_free_r+0x2e>
 800de9c:	6063      	str	r3, [r4, #4]
 800de9e:	6014      	str	r4, [r2, #0]
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea6:	f000 b8c8 	b.w	800e03a <__malloc_unlock>
 800deaa:	42a3      	cmp	r3, r4
 800deac:	d90c      	bls.n	800dec8 <_free_r+0x4c>
 800deae:	6821      	ldr	r1, [r4, #0]
 800deb0:	1862      	adds	r2, r4, r1
 800deb2:	4293      	cmp	r3, r2
 800deb4:	bf04      	itt	eq
 800deb6:	681a      	ldreq	r2, [r3, #0]
 800deb8:	685b      	ldreq	r3, [r3, #4]
 800deba:	6063      	str	r3, [r4, #4]
 800debc:	bf04      	itt	eq
 800debe:	1852      	addeq	r2, r2, r1
 800dec0:	6022      	streq	r2, [r4, #0]
 800dec2:	6004      	str	r4, [r0, #0]
 800dec4:	e7ec      	b.n	800dea0 <_free_r+0x24>
 800dec6:	4613      	mov	r3, r2
 800dec8:	685a      	ldr	r2, [r3, #4]
 800deca:	b10a      	cbz	r2, 800ded0 <_free_r+0x54>
 800decc:	42a2      	cmp	r2, r4
 800dece:	d9fa      	bls.n	800dec6 <_free_r+0x4a>
 800ded0:	6819      	ldr	r1, [r3, #0]
 800ded2:	1858      	adds	r0, r3, r1
 800ded4:	42a0      	cmp	r0, r4
 800ded6:	d10b      	bne.n	800def0 <_free_r+0x74>
 800ded8:	6820      	ldr	r0, [r4, #0]
 800deda:	4401      	add	r1, r0
 800dedc:	1858      	adds	r0, r3, r1
 800dede:	4282      	cmp	r2, r0
 800dee0:	6019      	str	r1, [r3, #0]
 800dee2:	d1dd      	bne.n	800dea0 <_free_r+0x24>
 800dee4:	6810      	ldr	r0, [r2, #0]
 800dee6:	6852      	ldr	r2, [r2, #4]
 800dee8:	605a      	str	r2, [r3, #4]
 800deea:	4401      	add	r1, r0
 800deec:	6019      	str	r1, [r3, #0]
 800deee:	e7d7      	b.n	800dea0 <_free_r+0x24>
 800def0:	d902      	bls.n	800def8 <_free_r+0x7c>
 800def2:	230c      	movs	r3, #12
 800def4:	602b      	str	r3, [r5, #0]
 800def6:	e7d3      	b.n	800dea0 <_free_r+0x24>
 800def8:	6820      	ldr	r0, [r4, #0]
 800defa:	1821      	adds	r1, r4, r0
 800defc:	428a      	cmp	r2, r1
 800defe:	bf04      	itt	eq
 800df00:	6811      	ldreq	r1, [r2, #0]
 800df02:	6852      	ldreq	r2, [r2, #4]
 800df04:	6062      	str	r2, [r4, #4]
 800df06:	bf04      	itt	eq
 800df08:	1809      	addeq	r1, r1, r0
 800df0a:	6021      	streq	r1, [r4, #0]
 800df0c:	605c      	str	r4, [r3, #4]
 800df0e:	e7c7      	b.n	800dea0 <_free_r+0x24>
 800df10:	bd38      	pop	{r3, r4, r5, pc}
 800df12:	bf00      	nop
 800df14:	2000864c 	.word	0x2000864c

0800df18 <_malloc_r>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	1ccd      	adds	r5, r1, #3
 800df1c:	f025 0503 	bic.w	r5, r5, #3
 800df20:	3508      	adds	r5, #8
 800df22:	2d0c      	cmp	r5, #12
 800df24:	bf38      	it	cc
 800df26:	250c      	movcc	r5, #12
 800df28:	2d00      	cmp	r5, #0
 800df2a:	4606      	mov	r6, r0
 800df2c:	db01      	blt.n	800df32 <_malloc_r+0x1a>
 800df2e:	42a9      	cmp	r1, r5
 800df30:	d903      	bls.n	800df3a <_malloc_r+0x22>
 800df32:	230c      	movs	r3, #12
 800df34:	6033      	str	r3, [r6, #0]
 800df36:	2000      	movs	r0, #0
 800df38:	bd70      	pop	{r4, r5, r6, pc}
 800df3a:	f000 f87d 	bl	800e038 <__malloc_lock>
 800df3e:	4a21      	ldr	r2, [pc, #132]	; (800dfc4 <_malloc_r+0xac>)
 800df40:	6814      	ldr	r4, [r2, #0]
 800df42:	4621      	mov	r1, r4
 800df44:	b991      	cbnz	r1, 800df6c <_malloc_r+0x54>
 800df46:	4c20      	ldr	r4, [pc, #128]	; (800dfc8 <_malloc_r+0xb0>)
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	b91b      	cbnz	r3, 800df54 <_malloc_r+0x3c>
 800df4c:	4630      	mov	r0, r6
 800df4e:	f000 f863 	bl	800e018 <_sbrk_r>
 800df52:	6020      	str	r0, [r4, #0]
 800df54:	4629      	mov	r1, r5
 800df56:	4630      	mov	r0, r6
 800df58:	f000 f85e 	bl	800e018 <_sbrk_r>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d124      	bne.n	800dfaa <_malloc_r+0x92>
 800df60:	230c      	movs	r3, #12
 800df62:	6033      	str	r3, [r6, #0]
 800df64:	4630      	mov	r0, r6
 800df66:	f000 f868 	bl	800e03a <__malloc_unlock>
 800df6a:	e7e4      	b.n	800df36 <_malloc_r+0x1e>
 800df6c:	680b      	ldr	r3, [r1, #0]
 800df6e:	1b5b      	subs	r3, r3, r5
 800df70:	d418      	bmi.n	800dfa4 <_malloc_r+0x8c>
 800df72:	2b0b      	cmp	r3, #11
 800df74:	d90f      	bls.n	800df96 <_malloc_r+0x7e>
 800df76:	600b      	str	r3, [r1, #0]
 800df78:	50cd      	str	r5, [r1, r3]
 800df7a:	18cc      	adds	r4, r1, r3
 800df7c:	4630      	mov	r0, r6
 800df7e:	f000 f85c 	bl	800e03a <__malloc_unlock>
 800df82:	f104 000b 	add.w	r0, r4, #11
 800df86:	1d23      	adds	r3, r4, #4
 800df88:	f020 0007 	bic.w	r0, r0, #7
 800df8c:	1ac3      	subs	r3, r0, r3
 800df8e:	d0d3      	beq.n	800df38 <_malloc_r+0x20>
 800df90:	425a      	negs	r2, r3
 800df92:	50e2      	str	r2, [r4, r3]
 800df94:	e7d0      	b.n	800df38 <_malloc_r+0x20>
 800df96:	428c      	cmp	r4, r1
 800df98:	684b      	ldr	r3, [r1, #4]
 800df9a:	bf16      	itet	ne
 800df9c:	6063      	strne	r3, [r4, #4]
 800df9e:	6013      	streq	r3, [r2, #0]
 800dfa0:	460c      	movne	r4, r1
 800dfa2:	e7eb      	b.n	800df7c <_malloc_r+0x64>
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	6849      	ldr	r1, [r1, #4]
 800dfa8:	e7cc      	b.n	800df44 <_malloc_r+0x2c>
 800dfaa:	1cc4      	adds	r4, r0, #3
 800dfac:	f024 0403 	bic.w	r4, r4, #3
 800dfb0:	42a0      	cmp	r0, r4
 800dfb2:	d005      	beq.n	800dfc0 <_malloc_r+0xa8>
 800dfb4:	1a21      	subs	r1, r4, r0
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f000 f82e 	bl	800e018 <_sbrk_r>
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	d0cf      	beq.n	800df60 <_malloc_r+0x48>
 800dfc0:	6025      	str	r5, [r4, #0]
 800dfc2:	e7db      	b.n	800df7c <_malloc_r+0x64>
 800dfc4:	2000864c 	.word	0x2000864c
 800dfc8:	20008650 	.word	0x20008650

0800dfcc <_realloc_r>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	4607      	mov	r7, r0
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	b921      	cbnz	r1, 800dfe0 <_realloc_r+0x14>
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dfdc:	f7ff bf9c 	b.w	800df18 <_malloc_r>
 800dfe0:	b922      	cbnz	r2, 800dfec <_realloc_r+0x20>
 800dfe2:	f7ff ff4b 	bl	800de7c <_free_r>
 800dfe6:	4625      	mov	r5, r4
 800dfe8:	4628      	mov	r0, r5
 800dfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfec:	f000 f826 	bl	800e03c <_malloc_usable_size_r>
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d20f      	bcs.n	800e014 <_realloc_r+0x48>
 800dff4:	4621      	mov	r1, r4
 800dff6:	4638      	mov	r0, r7
 800dff8:	f7ff ff8e 	bl	800df18 <_malloc_r>
 800dffc:	4605      	mov	r5, r0
 800dffe:	2800      	cmp	r0, #0
 800e000:	d0f2      	beq.n	800dfe8 <_realloc_r+0x1c>
 800e002:	4631      	mov	r1, r6
 800e004:	4622      	mov	r2, r4
 800e006:	f7ff fc11 	bl	800d82c <memcpy>
 800e00a:	4631      	mov	r1, r6
 800e00c:	4638      	mov	r0, r7
 800e00e:	f7ff ff35 	bl	800de7c <_free_r>
 800e012:	e7e9      	b.n	800dfe8 <_realloc_r+0x1c>
 800e014:	4635      	mov	r5, r6
 800e016:	e7e7      	b.n	800dfe8 <_realloc_r+0x1c>

0800e018 <_sbrk_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4c06      	ldr	r4, [pc, #24]	; (800e034 <_sbrk_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4605      	mov	r5, r0
 800e020:	4608      	mov	r0, r1
 800e022:	6023      	str	r3, [r4, #0]
 800e024:	f7f6 f8fc 	bl	8004220 <_sbrk>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_sbrk_r+0x1a>
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_sbrk_r+0x1a>
 800e030:	602b      	str	r3, [r5, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	20008d38 	.word	0x20008d38

0800e038 <__malloc_lock>:
 800e038:	4770      	bx	lr

0800e03a <__malloc_unlock>:
 800e03a:	4770      	bx	lr

0800e03c <_malloc_usable_size_r>:
 800e03c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e040:	1f18      	subs	r0, r3, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	bfbc      	itt	lt
 800e046:	580b      	ldrlt	r3, [r1, r0]
 800e048:	18c0      	addlt	r0, r0, r3
 800e04a:	4770      	bx	lr

0800e04c <_init>:
 800e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04e:	bf00      	nop
 800e050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e052:	bc08      	pop	{r3}
 800e054:	469e      	mov	lr, r3
 800e056:	4770      	bx	lr

0800e058 <_fini>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	bf00      	nop
 800e05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05e:	bc08      	pop	{r3}
 800e060:	469e      	mov	lr, r3
 800e062:	4770      	bx	lr
