
mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fec  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e65c  0800e65c  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800e65c  0800e65c  0001e65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e664  0800e664  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e664  0800e664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e668  0800e668  0001e668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800e66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cac  20000054  0800e6c0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d00  0800e6c0  00028d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b964  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005368  00000000  00000000  0004b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002570  00000000  00000000  00050d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e8  00000000  00000000  000532c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e0ad  00000000  00000000  000555a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ede2  00000000  00000000  00083655  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114ae8  00000000  00000000  000a2437  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6f1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e90  00000000  00000000  001b6f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c658 	.word	0x0800c658

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	0800c658 	.word	0x0800c658

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000070 	.word	0x20000070
 8000540:	200000c4 	.word	0x200000c4

08000544 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f002 f8b0 	bl	80026b4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000554:	f000 f9b4 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800058c:	f000 f998 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e010      	b.n	80005b8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	21a8      	movs	r1, #168	; 0xa8
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f86b 	bl	8002678 <TS_IO_Read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005a6:	7b7b      	ldrb	r3, [r7, #13]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b51      	cmp	r3, #81	; 0x51
 80005ac:	d101      	bne.n	80005b2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d802      	bhi.n	80005c4 <ft5336_ReadID+0x4e>
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0e8      	beq.n	8000596 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f97e 	bl	80008e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f932 	bl	8000850 <ft5336_TS_DisableIT>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f835 	bl	8002678 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b05      	cmp	r3, #5
 8000624:	d901      	bls.n	800062a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000630:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200002c4 	.word	0x200002c4

08000648 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	429a      	cmp	r2, r3
 8000674:	f080 80cf 	bcs.w	8000816 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d871      	bhi.n	8000764 <ft5336_TS_GetXY+0x11c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ft5336_TS_GetXY+0x40>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006b1 	.word	0x080006b1
 800068c:	080006c3 	.word	0x080006c3
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006e7 	.word	0x080006e7
 8000698:	080006f9 	.word	0x080006f9
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	0800071d 	.word	0x0800071d
 80006a4:	0800072f 	.word	0x0800072f
 80006a8:	08000741 	.word	0x08000741
 80006ac:	08000753 	.word	0x08000753
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006b0:	2304      	movs	r3, #4
 80006b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b8:	2306      	movs	r3, #6
 80006ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006bc:	2305      	movs	r3, #5
 80006be:	753b      	strb	r3, [r7, #20]
      break;
 80006c0:	e051      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006c2:	230a      	movs	r3, #10
 80006c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006c6:	2309      	movs	r3, #9
 80006c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006ca:	230c      	movs	r3, #12
 80006cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006ce:	230b      	movs	r3, #11
 80006d0:	753b      	strb	r3, [r7, #20]
      break;
 80006d2:	e048      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006d4:	2310      	movs	r3, #16
 80006d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d8:	230f      	movs	r3, #15
 80006da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006dc:	2312      	movs	r3, #18
 80006de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006e0:	2311      	movs	r3, #17
 80006e2:	753b      	strb	r3, [r7, #20]
      break;
 80006e4:	e03f      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006e6:	2316      	movs	r3, #22
 80006e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ea:	2315      	movs	r3, #21
 80006ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006ee:	2318      	movs	r3, #24
 80006f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006f2:	2317      	movs	r3, #23
 80006f4:	753b      	strb	r3, [r7, #20]
      break;
 80006f6:	e036      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f8:	231c      	movs	r3, #28
 80006fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006fc:	231b      	movs	r3, #27
 80006fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000700:	231e      	movs	r3, #30
 8000702:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000704:	231d      	movs	r3, #29
 8000706:	753b      	strb	r3, [r7, #20]
      break;
 8000708:	e02d      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800070a:	2322      	movs	r3, #34	; 0x22
 800070c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800070e:	2321      	movs	r3, #33	; 0x21
 8000710:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000712:	2324      	movs	r3, #36	; 0x24
 8000714:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	753b      	strb	r3, [r7, #20]
      break;
 800071a:	e024      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800071c:	2328      	movs	r3, #40	; 0x28
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000720:	2327      	movs	r3, #39	; 0x27
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000724:	232a      	movs	r3, #42	; 0x2a
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000728:	2329      	movs	r3, #41	; 0x29
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e01b      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800072e:	232e      	movs	r3, #46	; 0x2e
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000732:	232d      	movs	r3, #45	; 0x2d
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000736:	2330      	movs	r3, #48	; 0x30
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e012      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000740:	2334      	movs	r3, #52	; 0x34
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000744:	2333      	movs	r3, #51	; 0x33
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000748:	2336      	movs	r3, #54	; 0x36
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800074c:	2335      	movs	r3, #53	; 0x35
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e009      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000752:	233a      	movs	r3, #58	; 0x3a
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000756:	2339      	movs	r3, #57	; 0x39
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800075a:	233c      	movs	r3, #60	; 0x3c
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800075e:	233b      	movs	r3, #59	; 0x3b
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e000      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000764:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	7dfa      	ldrb	r2, [r7, #23]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff82 	bl	8002678 <TS_IO_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000780:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7dba      	ldrb	r2, [r7, #22]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 ff74 	bl	8002678 <TS_IO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000794:	7cfb      	ldrb	r3, [r7, #19]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7d7a      	ldrb	r2, [r7, #21]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ff59 	bl	8002678 <TS_IO_Read>
 80007c6:	4603      	mov	r3, r0
 80007c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	7d3a      	ldrb	r2, [r7, #20]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 ff4b 	bl	8002678 <TS_IO_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007e6:	7cfb      	ldrb	r3, [r7, #19]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000800:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000814:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200002c4 	.word	0x200002c4
 8000824:	200002c8 	.word	0x200002c8

08000828 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	21a4      	movs	r1, #164	; 0xa4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fefe 	bl	8002644 <TS_IO_Write>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	21a4      	movs	r1, #164	; 0xa4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 feea 	bl	8002644 <TS_IO_Write>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200002c4 	.word	0x200002c4

080008c0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008c4:	f7ff fff0 	bl	80008a8 <ft5336_Get_I2C_InitializedStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008ce:	f001 feaf 	bl	8002630 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
  }
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200002c4 	.word	0x200002c4

080008e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b0a0      	sub	sp, #128	; 0x80
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f003 fa38 	bl	8003d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f999 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f001 f83b 	bl	8001984 <MX_GPIO_Init>
  MX_ADC3_Init();
 800090e:	f000 fa97 	bl	8000e40 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000912:	f000 fb43 	bl	8000f9c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000916:	f000 fb81 	bl	800101c <MX_I2C3_Init>
  MX_LTDC_Init();
 800091a:	f000 fbbf 	bl	800109c <MX_LTDC_Init>
  MX_RTC_Init();
 800091e:	f000 fc3f 	bl	80011a0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000922:	f000 fce3 	bl	80012ec <MX_SPI2_Init>
  MX_TIM1_Init();
 8000926:	f000 fd1f 	bl	8001368 <MX_TIM1_Init>
  MX_TIM2_Init();
 800092a:	f000 fd71 	bl	8001410 <MX_TIM2_Init>
  MX_TIM3_Init();
 800092e:	f000 fdbd 	bl	80014ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8000932:	f000 fe49 	bl	80015c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000936:	f000 fe95 	bl	8001664 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800093a:	f000 ff6d 	bl	8001818 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800093e:	f000 ffa3 	bl	8001888 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000942:	f000 fa2b 	bl	8000d9c <MX_ADC1_Init>
  MX_DAC_Init();
 8000946:	f000 facd 	bl	8000ee4 <MX_DAC_Init>
  MX_UART7_Init();
 800094a:	f000 ff35 	bl	80017b8 <MX_UART7_Init>
  MX_FMC_Init();
 800094e:	f000 ffcb 	bl	80018e8 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000952:	f000 faf1 	bl	8000f38 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 8000956:	f001 feb9 	bl	80026cc <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800095a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800095e:	2000      	movs	r0, #0
 8000960:	f001 ff4c 	bl	80027fc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000964:	f001 ff22 	bl	80027ac <BSP_LCD_GetXSize>
 8000968:	4604      	mov	r4, r0
 800096a:	f001 ff33 	bl	80027d4 <BSP_LCD_GetYSize>
 800096e:	4603      	mov	r3, r0
 8000970:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000974:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4619      	mov	r1, r3
 800097c:	2001      	movs	r0, #1
 800097e:	f001 ff3d 	bl	80027fc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000982:	f002 f899 	bl	8002ab8 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f001 ff98 	bl	80028bc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 800098c:	489b      	ldr	r0, [pc, #620]	; (8000bfc <main+0x300>)
 800098e:	f001 fff1 	bl	8002974 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000992:	489b      	ldr	r0, [pc, #620]	; (8000c00 <main+0x304>)
 8000994:	f001 ffd4 	bl	8002940 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000998:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800099c:	f001 ff9e 	bl	80028dc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 80009a0:	4896      	ldr	r0, [pc, #600]	; (8000bfc <main+0x300>)
 80009a2:	f001 ffb3 	bl	800290c <BSP_LCD_SetBackColor>


	// ============== affichage sol
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80009a6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80009aa:	f001 ff97 	bl	80028dc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, HAUTEUR_SOL, 480, 272 - HAUTEUR_SOL);
 80009ae:	4b95      	ldr	r3, [pc, #596]	; (8000c04 <main+0x308>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	4b93      	ldr	r3, [pc, #588]	; (8000c04 <main+0x308>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fffd 	bl	80029c4 <BSP_LCD_FillRect>

	// ===============  creation des blocs ==================
	blocs[1] = 1 + (7 << 8) + (6 << 4);
 80009ca:	4b8f      	ldr	r3, [pc, #572]	; (8000c08 <main+0x30c>)
 80009cc:	f240 7261 	movw	r2, #1889	; 0x761
 80009d0:	805a      	strh	r2, [r3, #2]
	blocs[2] = 1 + (6 << 8) + (6 << 4);
 80009d2:	4b8d      	ldr	r3, [pc, #564]	; (8000c08 <main+0x30c>)
 80009d4:	f240 6261 	movw	r2, #1633	; 0x661
 80009d8:	809a      	strh	r2, [r3, #4]
	blocs[3] = 1 + (5 << 8) + (6 << 4);
 80009da:	4b8b      	ldr	r3, [pc, #556]	; (8000c08 <main+0x30c>)
 80009dc:	f240 5261 	movw	r2, #1377	; 0x561
 80009e0:	80da      	strh	r2, [r3, #6]

	blocs[4] = 1 + (13 << 8) + (6 << 4);
 80009e2:	4b89      	ldr	r3, [pc, #548]	; (8000c08 <main+0x30c>)
 80009e4:	f640 5261 	movw	r2, #3425	; 0xd61
 80009e8:	811a      	strh	r2, [r3, #8]
	blocs[5] = 1 + (12 << 8) + (6 << 4);
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <main+0x30c>)
 80009ec:	f640 4261 	movw	r2, #3169	; 0xc61
 80009f0:	815a      	strh	r2, [r3, #10]
	blocs[6] = 1 + (11 << 8) + (6 << 4);
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <main+0x30c>)
 80009f4:	f640 3261 	movw	r2, #2913	; 0xb61
 80009f8:	819a      	strh	r2, [r3, #12]

	blocs[7] = 1 + (10 << 8) + (3 << 4);
 80009fa:	4b83      	ldr	r3, [pc, #524]	; (8000c08 <main+0x30c>)
 80009fc:	f640 2231 	movw	r2, #2609	; 0xa31
 8000a00:	81da      	strh	r2, [r3, #14]
	blocs[8] = 1 + (9 << 8) + (3 << 4);
 8000a02:	4b81      	ldr	r3, [pc, #516]	; (8000c08 <main+0x30c>)
 8000a04:	f640 1231 	movw	r2, #2353	; 0x931
 8000a08:	821a      	strh	r2, [r3, #16]
	blocs[9] = 1 + (8 << 8) + (3 << 4);
 8000a0a:	4b7f      	ldr	r3, [pc, #508]	; (8000c08 <main+0x30c>)
 8000a0c:	f640 0231 	movw	r2, #2097	; 0x831
 8000a10:	825a      	strh	r2, [r3, #18]

	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000a12:	487e      	ldr	r0, [pc, #504]	; (8000c0c <main+0x310>)
 8000a14:	f001 ff62 	bl	80028dc <BSP_LCD_SetTextColor>
	int iterateur_blocs = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a20:	e02d      	b.n	8000a7e <main+0x182>
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
			iterateur_blocs += 1) {
		if ((blocs[iterateur_blocs] & (15)) != 0) {
 8000a22:	4a79      	ldr	r2, [pc, #484]	; (8000c08 <main+0x30c>)
 8000a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d022      	beq.n	8000a78 <main+0x17c>
			BSP_LCD_FillRect(
					((blocs[iterateur_blocs] >> 8) & (255)) * blocs_size,
 8000a32:	4a75      	ldr	r2, [pc, #468]	; (8000c08 <main+0x30c>)
 8000a34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b74      	ldr	r3, [pc, #464]	; (8000c10 <main+0x314>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	fb12 f303 	smulbb	r3, r2, r3
 8000a48:	b298      	uxth	r0, r3
					blocs_size * ((blocs[iterateur_blocs] >> 4) & (15)),
 8000a4a:	4a6f      	ldr	r2, [pc, #444]	; (8000c08 <main+0x30c>)
 8000a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b6c      	ldr	r3, [pc, #432]	; (8000c10 <main+0x314>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	fb12 f303 	smulbb	r3, r2, r3
 8000a66:	b299      	uxth	r1, r3
 8000a68:	4b69      	ldr	r3, [pc, #420]	; (8000c10 <main+0x314>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <main+0x314>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f001 ffa6 	bl	80029c4 <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000a78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
 8000a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000a80:	2b1d      	cmp	r3, #29
 8000a82:	d9ce      	bls.n	8000a22 <main+0x126>
					blocs_size, blocs_size);
		}
	}

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000a84:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000a88:	f001 ff28 	bl	80028dc <BSP_LCD_SetTextColor>
	position_pieces[0] = 1 + (7 << 8) + (5 << 4);
 8000a8c:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <main+0x318>)
 8000a8e:	f240 7251 	movw	r2, #1873	; 0x751
 8000a92:	801a      	strh	r2, [r3, #0]
	for (iterateur_blocs = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a98:	e047      	b.n	8000b2a <main+0x22e>
			iterateur_blocs < sizeof(position_pieces) / sizeof(position_pieces[0]);
			iterateur_blocs += 1) {
		if ((position_pieces[iterateur_blocs] & (15)) != 0) {
 8000a9a:	4a5e      	ldr	r2, [pc, #376]	; (8000c14 <main+0x318>)
 8000a9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d03c      	beq.n	8000b24 <main+0x228>
			BSP_LCD_FillRect(
					((position_pieces[iterateur_blocs] >> 8) & (255)) * (blocs_size)+blocs_size/2,
 8000aaa:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <main+0x318>)
 8000aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <main+0x314>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	fb12 f303 	smulbb	r3, r2, r3
 8000ac0:	b29a      	uxth	r2, r3
					((position_pieces[iterateur_blocs] >> 8) & (255)) * (blocs_size)+blocs_size/2,
 8000ac2:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <main+0x314>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da00      	bge.n	8000acc <main+0x1d0>
 8000aca:	3301      	adds	r3, #1
 8000acc:	105b      	asrs	r3, r3, #1
			BSP_LCD_FillRect(
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b298      	uxth	r0, r3
					blocs_size * ((position_pieces[iterateur_blocs] >> 4) & (15))+blocs_size/2,
 8000ad4:	4a4f      	ldr	r2, [pc, #316]	; (8000c14 <main+0x318>)
 8000ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f003 030f 	and.w	r3, r3, #15
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <main+0x314>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	fb12 f303 	smulbb	r3, r2, r3
 8000af0:	b29a      	uxth	r2, r3
					blocs_size * ((position_pieces[iterateur_blocs] >> 4) & (15))+blocs_size/2,
 8000af2:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <main+0x314>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da00      	bge.n	8000afc <main+0x200>
 8000afa:	3301      	adds	r3, #1
 8000afc:	105b      	asrs	r3, r3, #1
			BSP_LCD_FillRect(
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	b299      	uxth	r1, r3
					blocs_size/4, blocs_size/4);
 8000b04:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <main+0x314>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da00      	bge.n	8000b0e <main+0x212>
 8000b0c:	3303      	adds	r3, #3
 8000b0e:	109b      	asrs	r3, r3, #2
			BSP_LCD_FillRect(
 8000b10:	b29a      	uxth	r2, r3
					blocs_size/4, blocs_size/4);
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <main+0x314>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da00      	bge.n	8000b1c <main+0x220>
 8000b1a:	3303      	adds	r3, #3
 8000b1c:	109b      	asrs	r3, r3, #2
			BSP_LCD_FillRect(
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f001 ff50 	bl	80029c4 <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b26:	3301      	adds	r3, #1
 8000b28:	67fb      	str	r3, [r7, #124]	; 0x7c
			iterateur_blocs < sizeof(position_pieces) / sizeof(position_pieces[0]);
 8000b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
	for (iterateur_blocs = 0;
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d9b4      	bls.n	8000a9a <main+0x19e>
		}
	}


	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000b30:	f001 fe3c 	bl	80027ac <BSP_LCD_GetXSize>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29c      	uxth	r4, r3
 8000b38:	f001 fe4c 	bl	80027d4 <BSP_LCD_GetYSize>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	4620      	mov	r0, r4
 8000b44:	f002 face 	bl	80030e4 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	67bb      	str	r3, [r7, #120]	; 0x78
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000b50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b54:	4618      	mov	r0, r3
 8000b56:	f009 fdd6 	bl	800a706 <osMutexCreate>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <main+0x31c>)
 8000b5e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000b60:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <main+0x320>)
 8000b62:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b66:	461d      	mov	r5, r3
 8000b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f009 fd63 	bl	800a646 <osThreadCreate>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <main+0x324>)
 8000b84:	601a      	str	r2, [r3, #0]

  /* definition and creation of Player */
  osThreadDef(Player, player, osPriorityNormal, 0, 1024);
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0x328>)
 8000b88:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PlayerHandle = osThreadCreate(osThread(Player), NULL);
 8000b9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f009 fd50 	bl	800a646 <osThreadCreate>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <main+0x32c>)
 8000baa:	601a      	str	r2, [r3, #0]

  /* definition and creation of Game_over */
  osThreadDef(Game_over, game_over, osPriorityHigh, 0, 128);
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <main+0x330>)
 8000bae:	f107 0420 	add.w	r4, r7, #32
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Game_overHandle = osThreadCreate(osThread(Game_over), NULL);
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 fd3d 	bl	800a646 <osThreadCreate>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <main+0x334>)
 8000bd0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Pieces */
  osThreadDef(Pieces, pieces, osPriorityNormal, 0, 1024);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <main+0x338>)
 8000bd4:	1d3c      	adds	r4, r7, #4
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PiecesHandle = osThreadCreate(osThread(Pieces), NULL);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f009 fd2c 	bl	800a646 <osThreadCreate>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <main+0x33c>)
 8000bf2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bf4:	f009 fd20 	bl	800a638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x2fc>
 8000bfa:	bf00      	nop
 8000bfc:	ff8080ff 	.word	0xff8080ff
 8000c00:	20000038 	.word	0x20000038
 8000c04:	20000028 	.word	0x20000028
 8000c08:	200002cc 	.word	0x200002cc
 8000c0c:	ffffa500 	.word	0xffffa500
 8000c10:	2000002c 	.word	0x2000002c
 8000c14:	20000308 	.word	0x20000308
 8000c18:	20008bd8 	.word	0x20008bd8
 8000c1c:	0800c67c 	.word	0x0800c67c
 8000c20:	20008630 	.word	0x20008630
 8000c24:	0800c6a0 	.word	0x0800c6a0
 8000c28:	20008bd4 	.word	0x20008bd4
 8000c2c:	0800c6c8 	.word	0x0800c6c8
 8000c30:	20008830 	.word	0x20008830
 8000c34:	0800c6ec 	.word	0x0800c6ec
 8000c38:	20008bdc 	.word	0x20008bdc

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b4      	sub	sp, #208	; 0xd0
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c46:	2230      	movs	r2, #48	; 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00b fcfb 	bl	800c646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2284      	movs	r2, #132	; 0x84
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00b fcec 	bl	800c646 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c6e:	f005 fed3 	bl	8006a18 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <SystemClock_Config+0x154>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a46      	ldr	r2, [pc, #280]	; (8000d90 <SystemClock_Config+0x154>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <SystemClock_Config+0x154>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8a:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <SystemClock_Config+0x158>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a41      	ldr	r2, [pc, #260]	; (8000d94 <SystemClock_Config+0x158>)
 8000c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <SystemClock_Config+0x158>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cc4:	2319      	movs	r3, #25
 8000cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fef8 	bl	8006ad8 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cee:	f001 fb45 	bl	800237c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf2:	f005 fea1 	bl	8006a38 <HAL_PWREx_EnableOverDrive>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cfc:	f001 fb3e 	bl	800237c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d26:	2106      	movs	r1, #6
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 f979 	bl	8007020 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000d34:	f001 fb22 	bl	800237c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <SystemClock_Config+0x15c>)
 8000d3a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d40:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d42:	2305      	movs	r3, #5
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d62:	2300      	movs	r3, #0
 8000d64:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 fb56 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d82:	f001 fafb 	bl	800237c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	37d0      	adds	r7, #208	; 0xd0
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40007000 	.word	0x40007000
 8000d98:	00015868 	.word	0x00015868

08000d9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <MX_ADC1_Init+0x9c>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_ADC1_Init+0xa0>)
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000dfe:	f003 f809 	bl	8003e14 <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e08:	f001 fab8 	bl	800237c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0x98>)
 8000e1e:	f003 f98f 	bl	8004140 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e28:	f001 faa8 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000891c 	.word	0x2000891c
 8000e38:	40012000 	.word	0x40012000
 8000e3c:	0f000001 	.word	0x0f000001

08000e40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e54:	4a21      	ldr	r2, [pc, #132]	; (8000edc <MX_ADC3_Init+0x9c>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <MX_ADC3_Init+0xa0>)
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000ea2:	f002 ffb7 	bl	8003e14 <HAL_ADC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000eac:	f001 fa66 	bl	800237c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_ADC3_Init+0x98>)
 8000ec2:	f003 f93d 	bl	8004140 <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ecc:	f001 fa56 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20008964 	.word	0x20008964
 8000edc:	40012200 	.word	0x40012200
 8000ee0:	0f000001 	.word	0x0f000001

08000ee4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_DAC_Init+0x4c>)
 8000ef4:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <MX_DAC_Init+0x50>)
 8000ef6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_DAC_Init+0x4c>)
 8000efa:	f003 fc47 	bl	800478c <HAL_DAC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f04:	f001 fa3a 	bl	800237c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_DAC_Init+0x4c>)
 8000f18:	f003 fcae 	bl	8004878 <HAL_DAC_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f22:	f001 fa2b 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20008a2c 	.word	0x20008a2c
 8000f34:	40007400 	.word	0x40007400

08000f38 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <MX_DMA2D_Init+0x60>)
 8000f40:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f6e:	f003 feb9 	bl	8004ce4 <HAL_DMA2D_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f78:	f001 fa00 	bl	800237c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_DMA2D_Init+0x5c>)
 8000f80:	f004 f80e 	bl	8004fa0 <HAL_DMA2D_ConfigLayer>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f8a:	f001 f9f7 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20008b20 	.word	0x20008b20
 8000f98:	4002b000 	.word	0x4002b000

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f004 fbf6 	bl	80057c8 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f001 f9cb 	bl	800237c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f005 f905 	bl	80061f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f001 f9c2 	bl	800237c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f005 f947 	bl	800628e <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f001 f9b9 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200087a4 	.word	0x200087a4
 8001014:	40005400 	.word	0x40005400
 8001018:	00c0eaff 	.word	0x00c0eaff

0800101c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_I2C3_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_I2C3_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_I2C3_Init+0x74>)
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <MX_I2C3_Init+0x7c>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_I2C3_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_I2C3_Init+0x74>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_I2C3_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_I2C3_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2C3_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_I2C3_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_I2C3_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_I2C3_Init+0x74>)
 8001058:	f004 fbb6 	bl	80057c8 <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001062:	f001 f98b 	bl	800237c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <MX_I2C3_Init+0x74>)
 800106a:	f005 f8c5 	bl	80061f8 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001074:	f001 f982 	bl	800237c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_I2C3_Init+0x74>)
 800107c:	f005 f907 	bl	800628e <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001086:	f001 f979 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20008634 	.word	0x20008634
 8001094:	40005c00 	.word	0x40005c00
 8001098:	00c0eaff 	.word	0x00c0eaff

0800109c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00b facc 	bl	800c646 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <MX_LTDC_Init+0x100>)
 80010b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010ba:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010d4:	2209      	movs	r2, #9
 80010d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010da:	2235      	movs	r2, #53	; 0x35
 80010dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010e0:	220b      	movs	r2, #11
 80010e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010e6:	f240 2215 	movw	r2, #533	; 0x215
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010ee:	f240 121b 	movw	r2, #283	; 0x11b
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010f6:	f240 2235 	movw	r2, #565	; 0x235
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_LTDC_Init+0xfc>)
 80010fe:	f240 121d 	movw	r2, #285	; 0x11d
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_LTDC_Init+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_LTDC_Init+0xfc>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_LTDC_Init+0xfc>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <MX_LTDC_Init+0xfc>)
 800111e:	f005 f903 	bl	8006328 <HAL_LTDC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001128:	f001 f928 	bl	800237c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001130:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001134:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800113a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800113e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001144:	23ff      	movs	r3, #255	; 0xff
 8001146:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800114c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001150:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001152:	2307      	movs	r3, #7
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001156:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800115c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001162:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_LTDC_Init+0xfc>)
 8001182:	f005 fa63 	bl	800664c <HAL_LTDC_ConfigLayer>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800118c:	f001 f8f6 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20008874 	.word	0x20008874
 800119c:	40016800 	.word	0x40016800

080011a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b092      	sub	sp, #72	; 0x48
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	222c      	movs	r2, #44	; 0x2c
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00b fa3f 	bl	800c646 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <MX_RTC_Init+0x144>)
 80011ca:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <MX_RTC_Init+0x148>)
 80011cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <MX_RTC_Init+0x144>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011d4:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <MX_RTC_Init+0x144>)
 80011d6:	227f      	movs	r2, #127	; 0x7f
 80011d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <MX_RTC_Init+0x144>)
 80011dc:	22ff      	movs	r2, #255	; 0xff
 80011de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e0:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <MX_RTC_Init+0x144>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <MX_RTC_Init+0x144>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ec:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <MX_RTC_Init+0x144>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f2:	483c      	ldr	r0, [pc, #240]	; (80012e4 <MX_RTC_Init+0x144>)
 80011f4:	f006 fd06 	bl	8007c04 <HAL_RTC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80011fe:	f001 f8bd 	bl	800237c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800121c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	482f      	ldr	r0, [pc, #188]	; (80012e4 <MX_RTC_Init+0x144>)
 8001226:	f006 fd69 	bl	8007cfc <HAL_RTC_SetTime>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001230:	f001 f8a4 	bl	800237c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001234:	2301      	movs	r3, #1
 8001236:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800123a:	2301      	movs	r3, #1
 800123c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001240:	2301      	movs	r3, #1
 8001242:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001246:	2300      	movs	r3, #0
 8001248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800124c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	4823      	ldr	r0, [pc, #140]	; (80012e4 <MX_RTC_Init+0x144>)
 8001256:	f006 fe0f 	bl	8007e78 <HAL_RTC_SetDate>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001260:	f001 f88c 	bl	800237c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001264:	2300      	movs	r3, #0
 8001266:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001268:	2300      	movs	r3, #0
 800126a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800126c:	2300      	movs	r3, #0
 800126e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001288:	2301      	movs	r3, #1
 800128a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800128e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	4812      	ldr	r0, [pc, #72]	; (80012e4 <MX_RTC_Init+0x144>)
 800129c:	f006 fe94 	bl	8007fc8 <HAL_RTC_SetAlarm>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80012a6:	f001 f869 	bl	800237c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	2201      	movs	r2, #1
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <MX_RTC_Init+0x144>)
 80012b8:	f006 fe86 	bl	8007fc8 <HAL_RTC_SetAlarm>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80012c2:	f001 f85b 	bl	800237c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80012c6:	2202      	movs	r2, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_RTC_Init+0x144>)
 80012cc:	f007 f806 	bl	80082dc <HAL_RTCEx_SetTimeStamp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80012d6:	f001 f851 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3748      	adds	r7, #72	; 0x48
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20008a40 	.word	0x20008a40
 80012e8:	40002800 	.word	0x40002800

080012ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_SPI2_Init+0x74>)
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <MX_SPI2_Init+0x78>)
 80012f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_SPI2_Init+0x74>)
 80012f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_SPI2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI2_Init+0x74>)
 8001306:	f44f 7240 	mov.w	r2, #768	; 0x300
 800130a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI2_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_SPI2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI2_Init+0x74>)
 800131a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800131e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI2_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI2_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI2_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_SPI2_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI2_Init+0x74>)
 800133a:	2207      	movs	r2, #7
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_SPI2_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI2_Init+0x74>)
 8001346:	2208      	movs	r2, #8
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_SPI2_Init+0x74>)
 800134c:	f007 f89b 	bl	8008486 <HAL_SPI_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001356:	f001 f811 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20008680 	.word	0x20008680
 8001364:	40003800 	.word	0x40003800

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM1_Init+0xa0>)
 8001388:	4a20      	ldr	r2, [pc, #128]	; (800140c <MX_TIM1_Init+0xa4>)
 800138a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM1_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM1_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_TIM1_Init+0xa0>)
 800139a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013b4:	f007 f8f9 	bl	80085aa <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013be:	f000 ffdd 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013d0:	f007 fbac 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013da:	f000 ffcf 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM1_Init+0xa0>)
 80013f0:	f008 f8e0 	bl	80095b4 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fa:	f000 ffbf 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20008a60 	.word	0x20008a60
 800140c:	40010000 	.word	0x40010000

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_TIM2_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001458:	f007 f8a7 	bl	80085aa <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001462:	f000 ff8b 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001474:	f007 fb5a 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800147e:	f000 ff7d 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_TIM2_Init+0x98>)
 8001490:	f008 f890 	bl	80095b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800149a:	f000 ff6f 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20008b60 	.word	0x20008b60

080014ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <MX_TIM3_Init+0x114>)
 80014f0:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <MX_TIM3_Init+0x118>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <MX_TIM3_Init+0x114>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <MX_TIM3_Init+0x114>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <MX_TIM3_Init+0x114>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001514:	482a      	ldr	r0, [pc, #168]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001516:	f007 f848 	bl	80085aa <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001520:	f000 ff2c 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800152e:	4619      	mov	r1, r3
 8001530:	4823      	ldr	r0, [pc, #140]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001532:	f007 fafb 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800153c:	f000 ff1e 	bl	800237c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001540:	481f      	ldr	r0, [pc, #124]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001542:	f007 f887 	bl	8008654 <HAL_TIM_PWM_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800154c:	f000 ff16 	bl	800237c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <MX_TIM3_Init+0x114>)
 8001560:	f007 fb9e 	bl	8008ca0 <HAL_TIM_SlaveConfigSynchro>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800156a:	f000 ff07 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4619      	mov	r1, r3
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <MX_TIM3_Init+0x114>)
 800157e:	f008 f819 	bl	80095b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001588:	f000 fef8 	bl	800237c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM3_Init+0x114>)
 80015a4:	f007 f9aa 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80015ae:	f000 fee5 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM3_Init+0x114>)
 80015b4:	f002 f94a 	bl	800384c <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20008834 	.word	0x20008834
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM5_Init+0x94>)
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <MX_TIM5_Init+0x98>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM5_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM5_Init+0x94>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM5_Init+0x94>)
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295
 80015fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_TIM5_Init+0x94>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM5_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_TIM5_Init+0x94>)
 800160e:	f006 ffcc 	bl	80085aa <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001618:	f000 feb0 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM5_Init+0x94>)
 800162a:	f007 fa7f 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001634:	f000 fea2 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM5_Init+0x94>)
 8001646:	f007 ffb5 	bl	80095b4 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001650:	f000 fe94 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200087f0 	.word	0x200087f0
 8001660:	40000c00 	.word	0x40000c00

08001664 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09a      	sub	sp, #104	; 0x68
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	222c      	movs	r2, #44	; 0x2c
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00a ffd1 	bl	800c646 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <MX_TIM8_Init+0x150>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016b6:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016d0:	4837      	ldr	r0, [pc, #220]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016d2:	f006 ff6a 	bl	80085aa <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f000 fe4e 	bl	800237c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ea:	4619      	mov	r1, r3
 80016ec:	4830      	ldr	r0, [pc, #192]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016ee:	f007 fa1d 	bl	8008b2c <HAL_TIM_ConfigClockSource>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016f8:	f000 fe40 	bl	800237c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80016fe:	f006 ffa9 	bl	8008654 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001708:	f000 fe38 	bl	800237c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001718:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800171c:	4619      	mov	r1, r3
 800171e:	4824      	ldr	r0, [pc, #144]	; (80017b0 <MX_TIM8_Init+0x14c>)
 8001720:	f007 ff48 	bl	80095b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800172a:	f000 fe27 	bl	800237c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172e:	2360      	movs	r3, #96	; 0x60
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001736:	2300      	movs	r3, #0
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174a:	220c      	movs	r2, #12
 800174c:	4619      	mov	r1, r3
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_TIM8_Init+0x14c>)
 8001750:	f007 f8d4 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800175a:	f000 fe0f 	bl	800237c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM8_Init+0x14c>)
 8001794:	f007 ff9c 	bl	80096d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800179e:	f000 fded 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM8_Init+0x14c>)
 80017a4:	f002 f852 	bl	800384c <HAL_TIM_MspPostInit>

}
 80017a8:	bf00      	nop
 80017aa:	3768      	adds	r7, #104	; 0x68
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20008764 	.word	0x20008764
 80017b4:	40010400 	.word	0x40010400

080017b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_UART7_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_UART7_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_UART7_Init+0x58>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_UART7_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_UART7_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_UART7_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_UART7_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_UART7_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_UART7_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_UART7_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_UART7_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_UART7_Init+0x58>)
 80017fc:	f008 f804 	bl	8009808 <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001806:	f000 fdb9 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200086e4 	.word	0x200086e4
 8001814:	40007800 	.word	0x40007800

08001818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <MX_USART1_UART_Init+0x6c>)
 8001820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001856:	2230      	movs	r2, #48	; 0x30
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800185c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_USART1_UART_Init+0x68>)
 8001864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001868:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART1_UART_Init+0x68>)
 800186c:	f007 ffcc 	bl	8009808 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8001876:	f000 fd81 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200089ac 	.word	0x200089ac
 8001884:	40011000 	.word	0x40011000

08001888 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <MX_USART6_UART_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018cc:	f007 ff9c 	bl	8009808 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018d6:	f000 fd51 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20008aa0 	.word	0x20008aa0
 80018e4:	40011400 	.word	0x40011400

080018e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_FMC_Init+0x94>)
 8001902:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <MX_FMC_Init+0x98>)
 8001904:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_FMC_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_FMC_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_FMC_Init+0x94>)
 8001914:	2204      	movs	r2, #4
 8001916:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_FMC_Init+0x94>)
 800191a:	2210      	movs	r2, #16
 800191c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_FMC_Init+0x94>)
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_FMC_Init+0x94>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_FMC_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_FMC_Init+0x94>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_FMC_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_FMC_Init+0x94>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001942:	2310      	movs	r3, #16
 8001944:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001946:	2310      	movs	r3, #16
 8001948:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800194a:	2310      	movs	r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800194e:	2310      	movs	r3, #16
 8001950:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001952:	2310      	movs	r3, #16
 8001954:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001956:	2310      	movs	r3, #16
 8001958:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800195a:	2310      	movs	r3, #16
 800195c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <MX_FMC_Init+0x94>)
 8001964:	f006 fd10 	bl	8008388 <HAL_SDRAM_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800196e:	f000 fd05 	bl	800237c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20008ba0 	.word	0x20008ba0
 8001980:	a0000140 	.word	0xa0000140

08001984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b090      	sub	sp, #64	; 0x40
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800199a:	4bb0      	ldr	r3, [pc, #704]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4aaf      	ldr	r2, [pc, #700]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4bad      	ldr	r3, [pc, #692]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4aa9      	ldr	r2, [pc, #676]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4aa3      	ldr	r2, [pc, #652]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4ba1      	ldr	r3, [pc, #644]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e2:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a9d      	ldr	r2, [pc, #628]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b9b      	ldr	r3, [pc, #620]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a97      	ldr	r2, [pc, #604]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b95      	ldr	r3, [pc, #596]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a12:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a91      	ldr	r2, [pc, #580]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a2a:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a8b      	ldr	r2, [pc, #556]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a42:	4b86      	ldr	r3, [pc, #536]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a85      	ldr	r2, [pc, #532]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b83      	ldr	r3, [pc, #524]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a7f      	ldr	r2, [pc, #508]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a72:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a73      	ldr	r2, [pc, #460]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <MX_GPIO_Init+0x2d8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2160      	movs	r1, #96	; 0x60
 8001aa6:	486e      	ldr	r0, [pc, #440]	; (8001c60 <MX_GPIO_Init+0x2dc>)
 8001aa8:	f003 fe74 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2120      	movs	r1, #32
 8001ab0:	486c      	ldr	r0, [pc, #432]	; (8001c64 <MX_GPIO_Init+0x2e0>)
 8001ab2:	f003 fe6f 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2108      	movs	r1, #8
 8001aba:	486a      	ldr	r0, [pc, #424]	; (8001c64 <MX_GPIO_Init+0x2e0>)
 8001abc:	f003 fe6a 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4868      	ldr	r0, [pc, #416]	; (8001c68 <MX_GPIO_Init+0x2e4>)
 8001ac6:	f003 fe65 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2108      	movs	r1, #8
 8001ace:	4867      	ldr	r0, [pc, #412]	; (8001c6c <MX_GPIO_Init+0x2e8>)
 8001ad0:	f003 fe60 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ada:	4863      	ldr	r0, [pc, #396]	; (8001c68 <MX_GPIO_Init+0x2e4>)
 8001adc:	f003 fe5a 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001ae6:	4862      	ldr	r0, [pc, #392]	; (8001c70 <MX_GPIO_Init+0x2ec>)
 8001ae8:	f003 fe54 	bl	8005794 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2108      	movs	r1, #8
 8001af0:	4860      	ldr	r0, [pc, #384]	; (8001c74 <MX_GPIO_Init+0x2f0>)
 8001af2:	f003 fe4f 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001af6:	2308      	movs	r3, #8
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	4855      	ldr	r0, [pc, #340]	; (8001c60 <MX_GPIO_Init+0x2dc>)
 8001b0a:	f003 fb77 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001b0e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b20:	230a      	movs	r3, #10
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4853      	ldr	r0, [pc, #332]	; (8001c78 <MX_GPIO_Init+0x2f4>)
 8001b2c:	f003 fb66 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001b30:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	484d      	ldr	r0, [pc, #308]	; (8001c7c <MX_GPIO_Init+0x2f8>)
 8001b46:	f003 fb59 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001b4a:	2360      	movs	r3, #96	; 0x60
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	483f      	ldr	r0, [pc, #252]	; (8001c60 <MX_GPIO_Init+0x2dc>)
 8001b62:	f003 fb4b 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4841      	ldr	r0, [pc, #260]	; (8001c80 <MX_GPIO_Init+0x2fc>)
 8001b7c:	f003 fb3e 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b80:	2340      	movs	r3, #64	; 0x40
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <MX_GPIO_Init+0x300>)
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b90:	4619      	mov	r1, r3
 8001b92:	4834      	ldr	r0, [pc, #208]	; (8001c64 <MX_GPIO_Init+0x2e0>)
 8001b94:	f003 fb32 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b98:	2328      	movs	r3, #40	; 0x28
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	482d      	ldr	r0, [pc, #180]	; (8001c64 <MX_GPIO_Init+0x2e0>)
 8001bb0:	f003 fb24 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001bb4:	f241 0308 	movw	r3, #4104	; 0x1008
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4826      	ldr	r0, [pc, #152]	; (8001c68 <MX_GPIO_Init+0x2e4>)
 8001bce:	f003 fb15 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4828      	ldr	r0, [pc, #160]	; (8001c88 <MX_GPIO_Init+0x304>)
 8001be8:	f003 fb08 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001bec:	2308      	movs	r3, #8
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c00:	4619      	mov	r1, r3
 8001c02:	481a      	ldr	r0, [pc, #104]	; (8001c6c <MX_GPIO_Init+0x2e8>)
 8001c04:	f003 fafa 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c08:	2310      	movs	r3, #16
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <MX_GPIO_Init+0x2e0>)
 8001c1c:	f003 faee 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c20:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	4619      	mov	r1, r3
 8001c34:	480e      	ldr	r0, [pc, #56]	; (8001c70 <MX_GPIO_Init+0x2ec>)
 8001c36:	f003 fae1 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c3a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <MX_GPIO_Init+0x2ec>)
 8001c54:	f003 fad2 	bl	80051fc <HAL_GPIO_Init>
 8001c58:	e018      	b.n	8001c8c <MX_GPIO_Init+0x308>
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40022800 	.word	0x40022800
 8001c70:	40021c00 	.word	0x40021c00
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40022400 	.word	0x40022400
 8001c84:	10120000 	.word	0x10120000
 8001c88:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <MX_GPIO_Init+0x3c0>)
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4829      	ldr	r0, [pc, #164]	; (8001d48 <MX_GPIO_Init+0x3c4>)
 8001ca2:	f003 faab 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4822      	ldr	r0, [pc, #136]	; (8001d4c <MX_GPIO_Init+0x3c8>)
 8001cc2:	f003 fa9b 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001cc6:	2384      	movs	r3, #132	; 0x84
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481d      	ldr	r0, [pc, #116]	; (8001d50 <MX_GPIO_Init+0x3cc>)
 8001cda:	f003 fa8f 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cee:	230a      	movs	r3, #10
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4816      	ldr	r0, [pc, #88]	; (8001d54 <MX_GPIO_Init+0x3d0>)
 8001cfa:	f003 fa7f 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001cfe:	2308      	movs	r3, #8
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	480e      	ldr	r0, [pc, #56]	; (8001d50 <MX_GPIO_Init+0x3cc>)
 8001d16:	f003 fa71 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d1a:	2328      	movs	r3, #40	; 0x28
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4808      	ldr	r0, [pc, #32]	; (8001d58 <MX_GPIO_Init+0x3d4>)
 8001d36:	f003 fa61 	bl	80051fc <HAL_GPIO_Init>

}
 8001d3a:	bf00      	nop
 8001d3c:	3740      	adds	r7, #64	; 0x40
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	10120000 	.word	0x10120000
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021c00 	.word	0x40021c00
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020000 	.word	0x40020000

08001d5c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f008 fcba 	bl	800a6de <osDelay>
 8001d6a:	e7fb      	b.n	8001d64 <StartDefaultTask+0x8>

08001d6c <jump.12878>:

	int iterateur_blocs_collision = 0;
	int bloc_x;
	int bloc_y;

	void jump(uint8_t etat_saut) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	4662      	mov	r2, ip
 8001d78:	f8c7 c000 	str.w	ip, [r7]
		if (etat_saut == 0) {
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <jump.12878+0x1a>
			joueur_dy = 10.5;
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <jump.12878+0x28>)
 8001d84:	6013      	str	r3, [r2, #0]
		}
	}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	41280000 	.word	0x41280000

08001d98 <player>:
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b098      	sub	sp, #96	; 0x60
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
void player(void const * argument)
 8001da0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da4:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 8001da6:	2314      	movs	r3, #20
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 8001daa:	f009 fc3f 	bl	800b62c <xTaskGetTickCount>
 8001dae:	4603      	mov	r3, r0
 8001db0:	623b      	str	r3, [r7, #32]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
	uint8_t etat_saut = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t etat_bouton_saut = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t etat_bouton_saut_old = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	float joueur_dy = 0;
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
	float joueur_dx = 0;
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	647b      	str	r3, [r7, #68]	; 0x44
	float joueur_dy_limite = -15;
 8001de6:	4b84      	ldr	r3, [pc, #528]	; (8001ff8 <player+0x260>)
 8001de8:	643b      	str	r3, [r7, #64]	; 0x40
	float gravite = 0.6;
 8001dea:	4b84      	ldr	r3, [pc, #528]	; (8001ffc <player+0x264>)
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t joueur_height = 24;
 8001dee:	2318      	movs	r3, #24
 8001df0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t joueur_width = 24;
 8001df4:	2318      	movs	r3, #24
 8001df6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	float joueur_x = 230;
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <player+0x268>)
 8001dfc:	65bb      	str	r3, [r7, #88]	; 0x58
	float joueur_y = HAUTEUR_SOL - joueur_height;
 8001dfe:	4b81      	ldr	r3, [pc, #516]	; (8002004 <player+0x26c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e10:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float joueur_x_old = 230;
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <player+0x268>)
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
	float joueur_y_old = 232;
 8001e18:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <player+0x270>)
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t joystick_x = 2077;
 8001e1c:	f640 031d 	movw	r3, #2077	; 0x81d
 8001e20:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int iterateur_blocs_collision = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	653b      	str	r3, [r7, #80]	; 0x50

	/* Infinite loop */
	for (;;) {

		joueur_x_old = joueur_x;
 8001e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
		joueur_y_old = joueur_y;
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
		etat_bouton_saut_old = etat_bouton_saut;
 8001e2e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001e32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		etat_bouton_saut = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e3a:	4874      	ldr	r0, [pc, #464]	; (800200c <player+0x274>)
 8001e3c:	f003 fc92 	bl	8005764 <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		if ((etat_bouton_saut == 0) && (etat_bouton_saut_old == 1)) {
 8001e46:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d110      	bne.n	8001e70 <player+0xd8>
 8001e4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10c      	bne.n	8001e70 <player+0xd8>
			jump(etat_saut);
 8001e56:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	469c      	mov	ip, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7ff ff83 	bl	8001d6c <jump.12878>
			etat_saut = etat_saut + 1;
 8001e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		//recuperation du joystick
		sConfig.Channel = ADC_CHANNEL_8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	613b      	str	r3, [r7, #16]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4865      	ldr	r0, [pc, #404]	; (8002010 <player+0x278>)
 8001e7c:	f002 f960 	bl	8004140 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001e80:	4863      	ldr	r0, [pc, #396]	; (8002010 <player+0x278>)
 8001e82:	f002 f80b 	bl	8003e9c <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001e86:	bf00      	nop
 8001e88:	2164      	movs	r1, #100	; 0x64
 8001e8a:	4861      	ldr	r0, [pc, #388]	; (8002010 <player+0x278>)
 8001e8c:	f002 f8c6 	bl	800401c <HAL_ADC_PollForConversion>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f8      	bne.n	8001e88 <player+0xf0>
			;
		//joystick_y = HAL_ADC_GetValue(&hadc3);

		HAL_ADC_Start(&hadc1);
 8001e96:	485f      	ldr	r0, [pc, #380]	; (8002014 <player+0x27c>)
 8001e98:	f002 f800 	bl	8003e9c <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001e9c:	bf00      	nop
 8001e9e:	2164      	movs	r1, #100	; 0x64
 8001ea0:	485c      	ldr	r0, [pc, #368]	; (8002014 <player+0x27c>)
 8001ea2:	f002 f8bb 	bl	800401c <HAL_ADC_PollForConversion>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f8      	bne.n	8001e9e <player+0x106>
			;
		joystick_x = HAL_ADC_GetValue(&hadc1);
 8001eac:	4859      	ldr	r0, [pc, #356]	; (8002014 <player+0x27c>)
 8001eae:	f002 f939 	bl	8004124 <HAL_ADC_GetValue>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

		// ========== maj coord player ================

		joueur_dx =  - (joystick_x - 2077) * 20 * 270 / (1000 * 2077);
 8001eb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001eb8:	f640 031d 	movw	r3, #2077	; 0x81d
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	f241 5218 	movw	r2, #5400	; 0x1518
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	4a54      	ldr	r2, [pc, #336]	; (8002018 <player+0x280>)
 8001ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ecc:	441a      	add	r2, r3
 8001ece:	1512      	asrs	r2, r2, #20
 8001ed0:	17db      	asrs	r3, r3, #31
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001edc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		joueur_x = joueur_x + joueur_dx;
 8001ee0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ee4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		joueur_dy = (float)((joueur_dy - gravite)*(joueur_dy_limite<(joueur_dy - gravite)) + joueur_dy_limite*(joueur_dy_limite>=(joueur_dy - gravite)));
 8001ef0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ef4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efc:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f00:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001f04:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001f08:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001f0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d502      	bpl.n	8001f1c <player+0x184>
 8001f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f1a:	e001      	b.n	8001f20 <player+0x188>
 8001f1c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800201c <player+0x284>
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f30:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001f34:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	db02      	blt.n	8001f44 <player+0x1ac>
 8001f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f42:	e001      	b.n	8001f48 <player+0x1b0>
 8001f44:	eddf 6a35 	vldr	s13, [pc, #212]	; 800201c <player+0x284>
 8001f48:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	edc7 7a02 	vstr	s15, [r7, #8]
		joueur_y = joueur_y - joueur_dy;
 8001f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f5c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f64:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		if (joueur_y >= HAUTEUR_SOL - joueur_height) {
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <player+0x26c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	db0d      	blt.n	8001fa4 <player+0x20c>
			joueur_y = HAUTEUR_SOL - joueur_height;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <player+0x26c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			etat_saut = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		// bounds of screen
		if (joueur_x <= 0)
 8001fa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	d803      	bhi.n	8001fba <player+0x222>
			joueur_x = 0;
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fb8:	e01a      	b.n	8001ff0 <player+0x258>
		else if (joueur_x + joueur_width >= 480)
 8001fba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002020 <player+0x288>
 8001fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	db09      	blt.n	8001ff0 <player+0x258>
			joueur_x = 480 - joueur_width;
 8001fdc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001fe0:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fec:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58


		//================ collisions ============

		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ff4:	e135      	b.n	8002262 <player+0x4ca>
 8001ff6:	bf00      	nop
 8001ff8:	c1700000 	.word	0xc1700000
 8001ffc:	3f19999a 	.word	0x3f19999a
 8002000:	43660000 	.word	0x43660000
 8002004:	20000028 	.word	0x20000028
 8002008:	43680000 	.word	0x43680000
 800200c:	40020000 	.word	0x40020000
 8002010:	20008964 	.word	0x20008964
 8002014:	2000891c 	.word	0x2000891c
 8002018:	813dee19 	.word	0x813dee19
 800201c:	00000000 	.word	0x00000000
 8002020:	43f00000 	.word	0x43f00000
		{
			bloc_x = ((blocs[iterateur_blocs_collision]>>8 & 255))*blocs_size;
 8002024:	4abb      	ldr	r2, [pc, #748]	; (8002314 <player+0x57c>)
 8002026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b29b      	uxth	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4ab9      	ldr	r2, [pc, #740]	; (8002318 <player+0x580>)
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
			bloc_y = ((blocs[iterateur_blocs_collision]>>4 & 15))*blocs_size;
 800203c:	4ab5      	ldr	r2, [pc, #724]	; (8002314 <player+0x57c>)
 800203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	b29b      	uxth	r3, r3
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	4ab2      	ldr	r2, [pc, #712]	; (8002318 <player+0x580>)
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	fb02 f303 	mul.w	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24


			if( !((bloc_x >= joueur_x + joueur_width )
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002060:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800206c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	bfac      	ite	ge
 800207e:	2301      	movge	r3, #1
 8002080:	2300      	movlt	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80e6 	beq.w	800225c <player+0x4c4>
					||(bloc_x + blocs_size <= joueur_x)
 8002090:	4ba1      	ldr	r3, [pc, #644]	; (8002318 <player+0x580>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	4413      	add	r3, r2
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80020a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ac:	bfac      	ite	ge
 80020ae:	2301      	movge	r3, #1
 80020b0:	2300      	movlt	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80ce 	beq.w	800225c <player+0x4c4>
					|| (bloc_y >= joueur_y + joueur_height )
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	bfac      	ite	ge
 80020e8:	2301      	movge	r3, #1
 80020ea:	2300      	movlt	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80b1 	beq.w	800225c <player+0x4c4>
					||( bloc_y + blocs_size <= joueur_y)))
 80020fa:	4b87      	ldr	r3, [pc, #540]	; (8002318 <player+0x580>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	4413      	add	r3, r2
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800210e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002116:	bfac      	ite	ge
 8002118:	2301      	movge	r3, #1
 800211a:	2300      	movlt	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
			if( !((bloc_x >= joueur_x + joueur_width )
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8099 	beq.w	800225c <player+0x4c4>
			{

				if(joueur_y + joueur_height + joueur_dy -2 < bloc_y)
 800212a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002136:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002146:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800214a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	ee07 3a90 	vmov	s15, r3
 8002154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d510      	bpl.n	8002184 <player+0x3ec>
				{
					joueur_dy=0;
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y - joueur_height;
 8002168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					etat_saut = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002182:	e06b      	b.n	800225c <player+0x4c4>
				}
				else if(joueur_y > bloc_y + blocs_size - joueur_dy)
 8002184:	4b64      	ldr	r3, [pc, #400]	; (8002318 <player+0x580>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	4413      	add	r3, r2
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002194:	edd7 7a02 	vldr	s15, [r7, #8]
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	dd0d      	ble.n	80021c6 <player+0x42e>
				{
					joueur_dy=0;
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y + blocs_size;
 80021b0:	4b59      	ldr	r3, [pc, #356]	; (8002318 <player+0x580>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	4413      	add	r3, r2
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80021c4:	e04a      	b.n	800225c <player+0x4c4>
				}
				else if((joueur_x + joueur_width - 8 < bloc_x )&&(joueur_dx>0))
 80021c6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021da:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80021de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d511      	bpl.n	800221a <player+0x482>
 80021f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd0a      	ble.n	800221a <player+0x482>
				{

					joueur_x = bloc_x - joueur_width;
 8002204:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002218:	e020      	b.n	800225c <player+0x4c4>
				}
				else if((joueur_x > bloc_x + blocs_size -8 )&&(joueur_dx<0))
 800221a:	4b3f      	ldr	r3, [pc, #252]	; (8002318 <player+0x580>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	4413      	add	r3, r2
 8002222:	3b08      	subs	r3, #8
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	dd10      	ble.n	800225c <player+0x4c4>
 800223a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800223e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d509      	bpl.n	800225c <player+0x4c4>
				{

					joueur_x = bloc_x + blocs_size;
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <player+0x580>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	4413      	add	r3, r2
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002258:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 800225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225e:	3301      	adds	r3, #1
 8002260:	653b      	str	r3, [r7, #80]	; 0x50
 8002262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002264:	2b1d      	cmp	r3, #29
 8002266:	f67f aedd 	bls.w	8002024 <player+0x28c>
		}



		//=============== affichage
		BSP_LCD_SelectLayer(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fb26 	bl	80028bc <BSP_LCD_SelectLayer>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002270:	482a      	ldr	r0, [pc, #168]	; (800231c <player+0x584>)
 8002272:	f000 fb33 	bl	80028dc <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 8002276:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800227a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227e:	ee17 3a90 	vmov	r3, s15
 8002282:	b298      	uxth	r0, r3
 8002284:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	b299      	uxth	r1, r3
 8002292:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002296:	b29a      	uxth	r2, r3
 8002298:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800229c:	b29b      	uxth	r3, r3
 800229e:	f000 fb91 	bl	80029c4 <BSP_LCD_FillRect>
				joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 80022a2:	481f      	ldr	r0, [pc, #124]	; (8002320 <player+0x588>)
 80022a4:	f000 fb1a 	bl	80028dc <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x_old, (uint16_t) joueur_y_old,
 80022a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	b298      	uxth	r0, r3
 80022b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022be:	ee17 3a90 	vmov	r3, s15
 80022c2:	b299      	uxth	r1, r3
 80022c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f000 fb78 	bl	80029c4 <BSP_LCD_FillRect>
				joueur_width, joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80022d4:	4811      	ldr	r0, [pc, #68]	; (800231c <player+0x584>)
 80022d6:	f000 fb01 	bl	80028dc <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 80022da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80022de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e2:	ee17 3a90 	vmov	r3, s15
 80022e6:	b298      	uxth	r0, r3
 80022e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f0:	ee17 3a90 	vmov	r3, s15
 80022f4:	b299      	uxth	r1, r3
 80022f6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002300:	b29b      	uxth	r3, r3
 8002302:	f000 fb5f 	bl	80029c4 <BSP_LCD_FillRect>
				joueur_height);

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800230c:	4618      	mov	r0, r3
 800230e:	f008 ffc9 	bl	800b2a4 <vTaskDelayUntil>
		joueur_x_old = joueur_x;
 8002312:	e588      	b.n	8001e26 <player+0x8e>
 8002314:	200002cc 	.word	0x200002cc
 8002318:	2000002c 	.word	0x2000002c
 800231c:	ffff0000 	.word	0xffff0000
 8002320:	ff8080ff 	.word	0xff8080ff

08002324 <game_over>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_game_over */
void game_over(void const * argument)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN game_over */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 800232c:	2314      	movs	r3, #20
 800232e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8002330:	f009 f97c 	bl	800b62c <xTaskGetTickCount>
 8002334:	4603      	mov	r3, r0
 8002336:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f008 ffb0 	bl	800b2a4 <vTaskDelayUntil>
 8002344:	e7f8      	b.n	8002338 <game_over+0x14>

08002346 <pieces>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pieces */
void pieces(void const * argument)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pieces */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800234e:	2001      	movs	r0, #1
 8002350:	f008 f9c5 	bl	800a6de <osDelay>
 8002354:	e7fb      	b.n	800234e <pieces+0x8>
	...

08002358 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800236a:	f001 fd11 	bl	8003d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40001000 	.word	0x40001000

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002380:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002382:	e7fe      	b.n	8002382 <Error_Handler+0x6>

08002384 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a51      	ldr	r2, [pc, #324]	; (80024d4 <I2Cx_MspInit+0x150>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d14d      	bne.n	8002430 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <I2Cx_MspInit+0x154>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023b0:	2312      	movs	r3, #18
 80023b2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80023bc:	2304      	movs	r3, #4
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	4619      	mov	r1, r3
 80023c6:	4845      	ldr	r0, [pc, #276]	; (80024dc <I2Cx_MspInit+0x158>)
 80023c8:	f002 ff18 	bl	80051fc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80023cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	4840      	ldr	r0, [pc, #256]	; (80024dc <I2Cx_MspInit+0x158>)
 80023da:	f002 ff0f 	bl	80051fc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80023de:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <I2Cx_MspInit+0x154>)
 80023fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002400:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800240c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	210f      	movs	r1, #15
 8002412:	2048      	movs	r0, #72	; 0x48
 8002414:	f002 f990 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002418:	2048      	movs	r0, #72	; 0x48
 800241a:	f002 f9a9 	bl	8004770 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	210f      	movs	r1, #15
 8002422:	2049      	movs	r0, #73	; 0x49
 8002424:	f002 f988 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002428:	2049      	movs	r0, #73	; 0x49
 800242a:	f002 f9a1 	bl	8004770 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800242e:	e04d      	b.n	80024cc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <I2Cx_MspInit+0x154>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800244e:	2312      	movs	r3, #18
 8002450:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002456:	2302      	movs	r3, #2
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800245a:	2304      	movs	r3, #4
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	481e      	ldr	r0, [pc, #120]	; (80024e0 <I2Cx_MspInit+0x15c>)
 8002466:	f002 fec9 	bl	80051fc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800246a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	4619      	mov	r1, r3
 8002476:	481a      	ldr	r0, [pc, #104]	; (80024e0 <I2Cx_MspInit+0x15c>)
 8002478:	f002 fec0 	bl	80051fc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <I2Cx_MspInit+0x154>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002486:	6413      	str	r3, [r2, #64]	; 0x40
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <I2Cx_MspInit+0x154>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <I2Cx_MspInit+0x154>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <I2Cx_MspInit+0x154>)
 800249a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800249e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <I2Cx_MspInit+0x154>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <I2Cx_MspInit+0x154>)
 80024a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024aa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	210f      	movs	r1, #15
 80024b0:	201f      	movs	r0, #31
 80024b2:	f002 f941 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80024b6:	201f      	movs	r0, #31
 80024b8:	f002 f95a 	bl	8004770 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	210f      	movs	r1, #15
 80024c0:	2020      	movs	r0, #32
 80024c2:	f002 f939 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80024c6:	2020      	movs	r0, #32
 80024c8:	f002 f952 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 80024cc:	bf00      	nop
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000031c 	.word	0x2000031c
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40020400 	.word	0x40020400

080024e4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f003 fc59 	bl	8005da4 <HAL_I2C_GetState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d125      	bne.n	8002544 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <I2Cx_Init+0x68>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <I2Cx_Init+0x6c>)
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e002      	b.n	800250e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <I2Cx_Init+0x70>)
 800250c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <I2Cx_Init+0x74>)
 8002512:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff23 	bl	8002384 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f003 f942 	bl	80057c8 <HAL_I2C_Init>
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	2000031c 	.word	0x2000031c
 8002550:	40005c00 	.word	0x40005c00
 8002554:	40005400 	.word	0x40005400
 8002558:	40912732 	.word	0x40912732

0800255c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af04      	add	r7, sp, #16
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	4608      	mov	r0, r1
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4603      	mov	r3, r0
 800256c:	72fb      	strb	r3, [r7, #11]
 800256e:	460b      	mov	r3, r1
 8002570:	813b      	strh	r3, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	b299      	uxth	r1, r3
 800257e:	88f8      	ldrh	r0, [r7, #6]
 8002580:	893a      	ldrh	r2, [r7, #8]
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4603      	mov	r3, r0
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f003 faec 	bl	8005b70 <HAL_I2C_Mem_Read>
 8002598:	4603      	mov	r3, r0
 800259a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	4619      	mov	r1, r3
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f832 	bl	8002610 <I2Cx_Error>
  }
  return status;    
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	; 0x28
 80025ba:	af04      	add	r7, sp, #16
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	4608      	mov	r0, r1
 80025c0:	4611      	mov	r1, r2
 80025c2:	461a      	mov	r2, r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	72fb      	strb	r3, [r7, #11]
 80025c8:	460b      	mov	r3, r1
 80025ca:	813b      	strh	r3, [r7, #8]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	b299      	uxth	r1, r3
 80025d8:	88f8      	ldrh	r0, [r7, #6]
 80025da:	893a      	ldrh	r2, [r7, #8]
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4603      	mov	r3, r0
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f003 f9ab 	bl	8005948 <HAL_I2C_Mem_Write>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025fc:	7afb      	ldrb	r3, [r7, #11]
 80025fe:	4619      	mov	r1, r3
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f805 	bl	8002610 <I2Cx_Error>
  }
  return status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f003 f963 	bl	80058e8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff5e 	bl	80024e4 <I2Cx_Init>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TS_IO_Init+0x10>)
 8002636:	f7ff ff55 	bl	80024e4 <I2Cx_Init>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000031c 	.word	0x2000031c

08002644 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af02      	add	r7, sp, #8
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	460b      	mov	r3, r1
 8002650:	71bb      	strb	r3, [r7, #6]
 8002652:	4613      	mov	r3, r2
 8002654:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002656:	79bb      	ldrb	r3, [r7, #6]
 8002658:	b29a      	uxth	r2, r3
 800265a:	79f9      	ldrb	r1, [r7, #7]
 800265c:	2301      	movs	r3, #1
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	1d7b      	adds	r3, r7, #5
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	4803      	ldr	r0, [pc, #12]	; (8002674 <TS_IO_Write+0x30>)
 8002668:	f7ff ffa5 	bl	80025b6 <I2Cx_WriteMultiple>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000031c 	.word	0x2000031c

08002678 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	4603      	mov	r3, r0
 8002680:	460a      	mov	r2, r1
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	b29a      	uxth	r2, r3
 8002690:	79f9      	ldrb	r1, [r7, #7]
 8002692:	2301      	movs	r3, #1
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	f107 030f 	add.w	r3, r7, #15
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <TS_IO_Read+0x38>)
 80026a0:	f7ff ff5c 	bl	800255c <I2Cx_ReadMultiple>

  return read_value;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000031c 	.word	0x2000031c

080026b4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f001 fb87 	bl	8003dd0 <HAL_Delay>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026d2:	2228      	movs	r2, #40	; 0x28
 80026d4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026d8:	2209      	movs	r2, #9
 80026da:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026dc:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026de:	2235      	movs	r2, #53	; 0x35
 80026e0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026e4:	220b      	movs	r2, #11
 80026e6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026ea:	f240 121b 	movw	r2, #283	; 0x11b
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026f2:	f240 2215 	movw	r2, #533	; 0x215
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <BSP_LCD_Init+0xcc>)
 80026fa:	f240 121d 	movw	r2, #285	; 0x11d
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002702:	f240 2235 	movw	r2, #565	; 0x235
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002708:	2100      	movs	r1, #0
 800270a:	4823      	ldr	r0, [pc, #140]	; (8002798 <BSP_LCD_Init+0xcc>)
 800270c:	f000 facc 	bl	8002ca8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002712:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002716:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <BSP_LCD_Init+0xcc>)
 800271a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800271e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <BSP_LCD_Init+0xcc>)
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <BSP_LCD_Init+0xcc>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002744:	4b14      	ldr	r3, [pc, #80]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <BSP_LCD_Init+0xcc>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <BSP_LCD_Init+0xd0>)
 8002754:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002756:	4810      	ldr	r0, [pc, #64]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002758:	f003 ffb6 	bl	80066c8 <HAL_LTDC_GetState>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002762:	2100      	movs	r1, #0
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <BSP_LCD_Init+0xcc>)
 8002766:	f000 f9c5 	bl	8002af4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800276a:	480b      	ldr	r0, [pc, #44]	; (8002798 <BSP_LCD_Init+0xcc>)
 800276c:	f003 fddc 	bl	8006328 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <BSP_LCD_Init+0xd4>)
 8002778:	f003 f80c 	bl	8005794 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800277c:	2201      	movs	r2, #1
 800277e:	2108      	movs	r1, #8
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <BSP_LCD_Init+0xd8>)
 8002782:	f003 f807 	bl	8005794 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002786:	f000 faf7 	bl	8002d78 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <BSP_LCD_Init+0xdc>)
 800278c:	f000 f8d8 	bl	8002940 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20008be0 	.word	0x20008be0
 800279c:	40016800 	.word	0x40016800
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40022800 	.word	0x40022800
 80027a8:	20000030 	.word	0x20000030

080027ac <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <BSP_LCD_GetXSize+0x20>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <BSP_LCD_GetXSize+0x24>)
 80027b6:	2134      	movs	r1, #52	; 0x34
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	681b      	ldr	r3, [r3, #0]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	200003a8 	.word	0x200003a8
 80027d0:	20008be0 	.word	0x20008be0

080027d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <BSP_LCD_GetYSize+0x20>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <BSP_LCD_GetYSize+0x24>)
 80027de:	2134      	movs	r1, #52	; 0x34
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3364      	adds	r3, #100	; 0x64
 80027e8:	681b      	ldr	r3, [r3, #0]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	200003a8 	.word	0x200003a8
 80027f8:	20008be0 	.word	0x20008be0

080027fc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b090      	sub	sp, #64	; 0x40
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800280c:	f7ff ffce 	bl	80027ac <BSP_LCD_GetXSize>
 8002810:	4603      	mov	r3, r0
 8002812:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002818:	f7ff ffdc 	bl	80027d4 <BSP_LCD_GetYSize>
 800281c:	4603      	mov	r3, r0
 800281e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002828:	23ff      	movs	r3, #255	; 0xff
 800282a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002848:	2307      	movs	r3, #7
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800284c:	f7ff ffae 	bl	80027ac <BSP_LCD_GetXSize>
 8002850:	4603      	mov	r3, r0
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002854:	f7ff ffbe 	bl	80027d4 <BSP_LCD_GetYSize>
 8002858:	4603      	mov	r3, r0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	4619      	mov	r1, r3
 8002864:	4812      	ldr	r0, [pc, #72]	; (80028b0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002866:	f003 fef1 	bl	800664c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	4911      	ldr	r1, [pc, #68]	; (80028b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3304      	adds	r3, #4
 800287a:	f04f 32ff 	mov.w	r2, #4294967295
 800287e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	490c      	ldr	r1, [pc, #48]	; (80028b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3308      	adds	r3, #8
 8002890:	4a09      	ldr	r2, [pc, #36]	; (80028b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002892:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	4907      	ldr	r1, [pc, #28]	; (80028b4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80028a6:	601a      	str	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3740      	adds	r7, #64	; 0x40
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20008be0 	.word	0x20008be0
 80028b4:	200003ac 	.word	0x200003ac
 80028b8:	20000030 	.word	0x20000030

080028bc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <BSP_LCD_SelectLayer+0x1c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
} 
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	200003a8 	.word	0x200003a8

080028dc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <BSP_LCD_SetTextColor+0x28>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <BSP_LCD_SetTextColor+0x2c>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	200003a8 	.word	0x200003a8
 8002908:	200003ac 	.word	0x200003ac

0800290c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <BSP_LCD_SetBackColor+0x2c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4908      	ldr	r1, [pc, #32]	; (800293c <BSP_LCD_SetBackColor+0x30>)
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3304      	adds	r3, #4
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200003a8 	.word	0x200003a8
 800293c:	200003ac 	.word	0x200003ac

08002940 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <BSP_LCD_SetFont+0x2c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4908      	ldr	r1, [pc, #32]	; (8002970 <BSP_LCD_SetFont+0x30>)
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3308      	adds	r3, #8
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200003a8 	.word	0x200003a8
 8002970:	200003ac 	.word	0x200003ac

08002974 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	b085      	sub	sp, #20
 8002978:	af02      	add	r7, sp, #8
 800297a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <BSP_LCD_Clear+0x48>)
 800297e:	681c      	ldr	r4, [r3, #0]
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <BSP_LCD_Clear+0x48>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <BSP_LCD_Clear+0x4c>)
 8002986:	2134      	movs	r1, #52	; 0x34
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461d      	mov	r5, r3
 8002994:	f7ff ff0a 	bl	80027ac <BSP_LCD_GetXSize>
 8002998:	4606      	mov	r6, r0
 800299a:	f7ff ff1b 	bl	80027d4 <BSP_LCD_GetYSize>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	4632      	mov	r2, r6
 80029ac:	4629      	mov	r1, r5
 80029ae:	4620      	mov	r0, r4
 80029b0:	f000 f996 	bl	8002ce0 <LL_FillBuffer>
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029bc:	200003a8 	.word	0x200003a8
 80029c0:	20008be0 	.word	0x20008be0

080029c4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80029c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af02      	add	r7, sp, #8
 80029cc:	4604      	mov	r4, r0
 80029ce:	4608      	mov	r0, r1
 80029d0:	4611      	mov	r1, r2
 80029d2:	461a      	mov	r2, r3
 80029d4:	4623      	mov	r3, r4
 80029d6:	80fb      	strh	r3, [r7, #6]
 80029d8:	4603      	mov	r3, r0
 80029da:	80bb      	strh	r3, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4930      	ldr	r1, [pc, #192]	; (8002ab0 <BSP_LCD_FillRect+0xec>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff6e 	bl	80028dc <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <BSP_LCD_FillRect+0xf0>)
 8002a06:	2134      	movs	r1, #52	; 0x34
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3348      	adds	r3, #72	; 0x48
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d114      	bne.n	8002a40 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a16:	4b25      	ldr	r3, [pc, #148]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <BSP_LCD_FillRect+0xf0>)
 8002a1c:	2134      	movs	r1, #52	; 0x34
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	335c      	adds	r3, #92	; 0x5c
 8002a26:	681c      	ldr	r4, [r3, #0]
 8002a28:	f7ff fec0 	bl	80027ac <BSP_LCD_GetXSize>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	88bb      	ldrh	r3, [r7, #4]
 8002a30:	fb03 f202 	mul.w	r2, r3, r2
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4423      	add	r3, r4
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e013      	b.n	8002a68 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <BSP_LCD_FillRect+0xf0>)
 8002a46:	2134      	movs	r1, #52	; 0x34
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	681c      	ldr	r4, [r3, #0]
 8002a52:	f7ff feab 	bl	80027ac <BSP_LCD_GetXSize>
 8002a56:	4602      	mov	r2, r0
 8002a58:	88bb      	ldrh	r3, [r7, #4]
 8002a5a:	fb03 f202 	mul.w	r2, r3, r2
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4423      	add	r3, r4
 8002a66:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 8002a6a:	681c      	ldr	r4, [r3, #0]
 8002a6c:	68fd      	ldr	r5, [r7, #12]
 8002a6e:	887e      	ldrh	r6, [r7, #2]
 8002a70:	f8b7 8000 	ldrh.w	r8, [r7]
 8002a74:	f7ff fe9a 	bl	80027ac <BSP_LCD_GetXSize>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	1ad1      	subs	r1, r2, r3
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <BSP_LCD_FillRect+0xe8>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <BSP_LCD_FillRect+0xec>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4403      	add	r3, r0
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9100      	str	r1, [sp, #0]
 8002a94:	4643      	mov	r3, r8
 8002a96:	4632      	mov	r2, r6
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 f920 	bl	8002ce0 <LL_FillBuffer>
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aaa:	bf00      	nop
 8002aac:	200003a8 	.word	0x200003a8
 8002ab0:	200003ac 	.word	0x200003ac
 8002ab4:	20008be0 	.word	0x20008be0

08002ab8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <BSP_LCD_DisplayOn+0x30>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <BSP_LCD_DisplayOn+0x30>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <BSP_LCD_DisplayOn+0x34>)
 8002ad4:	f002 fe5e 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2108      	movs	r1, #8
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <BSP_LCD_DisplayOn+0x38>)
 8002ade:	f002 fe59 	bl	8005794 <HAL_GPIO_WritePin>
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20008be0 	.word	0x20008be0
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022800 	.word	0x40022800

08002af4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	; 0x40
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002afe:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a63      	ldr	r2, [pc, #396]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a5d      	ldr	r2, [pc, #372]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b2e:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b34:	f043 0310 	orr.w	r3, r3, #16
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b46:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a51      	ldr	r2, [pc, #324]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a4b      	ldr	r2, [pc, #300]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a45      	ldr	r2, [pc, #276]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a33      	ldr	r2, [pc, #204]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <BSP_LCD_MspInit+0x19c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002be2:	2302      	movs	r3, #2
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002be6:	230e      	movs	r3, #14
 8002be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4828      	ldr	r0, [pc, #160]	; (8002c94 <BSP_LCD_MspInit+0x1a0>)
 8002bf2:	f002 fb03 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002c00:	2309      	movs	r3, #9
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4823      	ldr	r0, [pc, #140]	; (8002c98 <BSP_LCD_MspInit+0x1a4>)
 8002c0c:	f002 faf6 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002c10:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c1a:	230e      	movs	r3, #14
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c22:	4619      	mov	r1, r3
 8002c24:	481d      	ldr	r0, [pc, #116]	; (8002c9c <BSP_LCD_MspInit+0x1a8>)
 8002c26:	f002 fae9 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002c2a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c34:	230e      	movs	r3, #14
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <BSP_LCD_MspInit+0x1ac>)
 8002c40:	f002 fadc 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002c44:	23f7      	movs	r3, #247	; 0xf7
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c4c:	230e      	movs	r3, #14
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c54:	4619      	mov	r1, r3
 8002c56:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <BSP_LCD_MspInit+0x1b0>)
 8002c58:	f002 fad0 	bl	80051fc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <BSP_LCD_MspInit+0x1a8>)
 8002c6e:	f002 fac5 	bl	80051fc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002c72:	2308      	movs	r3, #8
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c76:	2301      	movs	r3, #1
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4808      	ldr	r0, [pc, #32]	; (8002ca4 <BSP_LCD_MspInit+0x1b0>)
 8002c82:	f002 fabb 	bl	80051fc <HAL_GPIO_Init>
}
 8002c86:	bf00      	nop
 8002c88:	3740      	adds	r7, #64	; 0x40
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40021800 	.word	0x40021800
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022400 	.word	0x40022400
 8002ca4:	40022800 	.word	0x40022800

08002ca8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <BSP_LCD_ClockConfig+0x34>)
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <BSP_LCD_ClockConfig+0x34>)
 8002cba:	22c0      	movs	r2, #192	; 0xc0
 8002cbc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <BSP_LCD_ClockConfig+0x34>)
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <BSP_LCD_ClockConfig+0x34>)
 8002cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002ccc:	4803      	ldr	r0, [pc, #12]	; (8002cdc <BSP_LCD_ClockConfig+0x34>)
 8002cce:	f004 fbab 	bl	8007428 <HAL_RCCEx_PeriphCLKConfig>
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200003c4 	.word	0x200003c4

08002ce0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <LL_FillBuffer+0x88>)
 8002cf0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cf4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <LL_FillBuffer+0x8c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <LL_FillBuffer+0x90>)
 8002cfc:	2134      	movs	r1, #52	; 0x34
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3348      	adds	r3, #72	; 0x48
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d103      	bne.n	8002d14 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d0e:	2202      	movs	r2, #2
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	e002      	b.n	8002d1a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002d1a:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <LL_FillBuffer+0x94>)
 8002d24:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002d26:	4810      	ldr	r0, [pc, #64]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d28:	f001 ffdc 	bl	8004ce4 <HAL_DMA2D_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d36:	f002 f933 	bl	8004fa0 <HAL_DMA2D_ConfigLayer>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10e      	bne.n	8002d5e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d4c:	f002 f814 	bl	8004d78 <HAL_DMA2D_Start>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002d56:	210a      	movs	r1, #10
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <LL_FillBuffer+0x88>)
 8002d5a:	f002 f838 	bl	8004dce <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000368 	.word	0x20000368
 8002d6c:	200003a8 	.word	0x200003a8
 8002d70:	20008be0 	.word	0x20008be0
 8002d74:	4002b000 	.word	0x4002b000

08002d78 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <BSP_SDRAM_Init+0xb0>)
 8002d80:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002d90:	2204      	movs	r2, #4
 8002d92:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002d96:	2207      	movs	r2, #7
 8002d98:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002da2:	2202      	movs	r2, #2
 8002da4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002da8:	2202      	movs	r2, #2
 8002daa:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dba:	2204      	movs	r2, #4
 8002dbc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dde:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002dee:	2100      	movs	r1, #0
 8002df0:	480c      	ldr	r0, [pc, #48]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002df2:	f000 f87f 	bl	8002ef4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002df6:	490d      	ldr	r1, [pc, #52]	; (8002e2c <BSP_SDRAM_Init+0xb4>)
 8002df8:	480a      	ldr	r0, [pc, #40]	; (8002e24 <BSP_SDRAM_Init+0xac>)
 8002dfa:	f005 fac5 	bl	8008388 <HAL_SDRAM_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <BSP_SDRAM_Init+0xb8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e002      	b.n	8002e12 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <BSP_SDRAM_Init+0xb8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e12:	f240 6003 	movw	r0, #1539	; 0x603
 8002e16:	f000 f80d 	bl	8002e34 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <BSP_SDRAM_Init+0xb8>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20008c88 	.word	0x20008c88
 8002e28:	a0000140 	.word	0xa0000140
 8002e2c:	20000448 	.word	0x20000448
 8002e30:	20000040 	.word	0x20000040

08002e34 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e48:	2210      	movs	r2, #16
 8002e4a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e5c:	4923      	ldr	r1, [pc, #140]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e5e:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e60:	f005 fac6 	bl	80083f0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f000 ffb3 	bl	8003dd0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002e6a:	4b20      	ldr	r3, [pc, #128]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e72:	2210      	movs	r2, #16
 8002e74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	4919      	ldr	r1, [pc, #100]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e88:	4819      	ldr	r0, [pc, #100]	; (8002ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e8a:	f005 fab1 	bl	80083f0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e90:	2203      	movs	r2, #3
 8002e92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e96:	2210      	movs	r2, #16
 8002e98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eaa:	4910      	ldr	r1, [pc, #64]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eac:	4810      	ldr	r0, [pc, #64]	; (8002ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002eae:	f005 fa9f 	bl	80083f0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002eb2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002eb6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eba:	2204      	movs	r2, #4
 8002ebc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a07      	ldr	r2, [pc, #28]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ece:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed4:	4905      	ldr	r1, [pc, #20]	; (8002eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ed6:	4806      	ldr	r0, [pc, #24]	; (8002ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ed8:	f005 fa8a 	bl	80083f0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ee0:	f005 fab1 	bl	8008446 <HAL_SDRAM_ProgramRefreshRate>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000464 	.word	0x20000464
 8002ef0:	20008c88 	.word	0x20008c88

08002ef4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b090      	sub	sp, #64	; 0x40
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002efe:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a6f      	ldr	r2, [pc, #444]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6393      	str	r3, [r2, #56]	; 0x38
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002f16:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a69      	ldr	r2, [pc, #420]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b67      	ldr	r3, [pc, #412]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	4b64      	ldr	r3, [pc, #400]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a63      	ldr	r2, [pc, #396]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b61      	ldr	r3, [pc, #388]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f5e:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f64:	f043 0310 	orr.w	r3, r3, #16
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b55      	ldr	r3, [pc, #340]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f76:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a51      	ldr	r2, [pc, #324]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f8e:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b49      	ldr	r3, [pc, #292]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fa6:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a45      	ldr	r2, [pc, #276]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <BSP_SDRAM_MspInit+0x1cc>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002fca:	230c      	movs	r3, #12
 8002fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	483a      	ldr	r0, [pc, #232]	; (80030c4 <BSP_SDRAM_MspInit+0x1d0>)
 8002fda:	f002 f90f 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002fde:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4837      	ldr	r0, [pc, #220]	; (80030c8 <BSP_SDRAM_MspInit+0x1d4>)
 8002fec:	f002 f906 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002ff0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4833      	ldr	r0, [pc, #204]	; (80030cc <BSP_SDRAM_MspInit+0x1d8>)
 8002ffe:	f002 f8fd 	bl	80051fc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003002:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	4619      	mov	r1, r3
 800300e:	4830      	ldr	r0, [pc, #192]	; (80030d0 <BSP_SDRAM_MspInit+0x1dc>)
 8003010:	f002 f8f4 	bl	80051fc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003014:	f248 1333 	movw	r3, #33075	; 0x8133
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800301a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301e:	4619      	mov	r1, r3
 8003020:	482c      	ldr	r0, [pc, #176]	; (80030d4 <BSP_SDRAM_MspInit+0x1e0>)
 8003022:	f002 f8eb 	bl	80051fc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003026:	2328      	movs	r3, #40	; 0x28
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800302a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302e:	4619      	mov	r1, r3
 8003030:	4829      	ldr	r0, [pc, #164]	; (80030d8 <BSP_SDRAM_MspInit+0x1e4>)
 8003032:	f002 f8e3 	bl	80051fc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003048:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800304c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003050:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003058:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800305c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003060:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003064:	2200      	movs	r2, #0
 8003066:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800306a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800306e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003078:	2203      	movs	r2, #3
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800307e:	2200      	movs	r2, #0
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <BSP_SDRAM_MspInit+0x1ec>)
 800308c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a12      	ldr	r2, [pc, #72]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800309a:	4810      	ldr	r0, [pc, #64]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 800309c:	f001 fcf2 	bl	8004a84 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80030a0:	480e      	ldr	r0, [pc, #56]	; (80030dc <BSP_SDRAM_MspInit+0x1e8>)
 80030a2:	f001 fc41 	bl	8004928 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	210f      	movs	r1, #15
 80030aa:	2038      	movs	r0, #56	; 0x38
 80030ac:	f001 fb44 	bl	8004738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80030b0:	2038      	movs	r0, #56	; 0x38
 80030b2:	f001 fb5d 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3740      	adds	r7, #64	; 0x40
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	20000474 	.word	0x20000474
 80030e0:	40026410 	.word	0x40026410

080030e4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	460a      	mov	r2, r1
 80030ee:	80fb      	strh	r3, [r7, #6]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <BSP_TS_Init+0x68>)
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <BSP_TS_Init+0x6c>)
 8003100:	88bb      	ldrh	r3, [r7, #4]
 8003102:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003104:	4b13      	ldr	r3, [pc, #76]	; (8003154 <BSP_TS_Init+0x70>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2070      	movs	r0, #112	; 0x70
 800310a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <BSP_TS_Init+0x70>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2070      	movs	r0, #112	; 0x70
 8003112:	4798      	blx	r3
 8003114:	4603      	mov	r3, r0
 8003116:	2b51      	cmp	r3, #81	; 0x51
 8003118:	d111      	bne.n	800313e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <BSP_TS_Init+0x74>)
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <BSP_TS_Init+0x70>)
 800311e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <BSP_TS_Init+0x78>)
 8003122:	2270      	movs	r2, #112	; 0x70
 8003124:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <BSP_TS_Init+0x7c>)
 8003128:	2208      	movs	r2, #8
 800312a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <BSP_TS_Init+0x74>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <BSP_TS_Init+0x78>)
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	b292      	uxth	r2, r2
 8003138:	4610      	mov	r0, r2
 800313a:	4798      	blx	r3
 800313c:	e001      	b.n	8003142 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800313e:	2303      	movs	r3, #3
 8003140:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200004d8 	.word	0x200004d8
 8003150:	200004da 	.word	0x200004da
 8003154:	20000000 	.word	0x20000000
 8003158:	200004d4 	.word	0x200004d4
 800315c:	200004dd 	.word	0x200004dd
 8003160:	200004dc 	.word	0x200004dc

08003164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <HAL_MspInit+0x4c>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_MspInit+0x4c>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_MspInit+0x4c>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_MspInit+0x4c>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	210f      	movs	r1, #15
 800319e:	f06f 0001 	mvn.w	r0, #1
 80031a2:	f001 fac9 	bl	8004738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2a      	ldr	r2, [pc, #168]	; (800327c <HAL_ADC_MspInit+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d124      	bne.n	8003220 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320a:	2303      	movs	r3, #3
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	481a      	ldr	r0, [pc, #104]	; (8003284 <HAL_ADC_MspInit+0xd0>)
 800321a:	f001 ffef 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800321e:	e029      	b.n	8003274 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <HAL_ADC_MspInit+0xd4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d124      	bne.n	8003274 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 8003230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 8003248:	f043 0320 	orr.w	r3, r3, #32
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_ADC_MspInit+0xcc>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800325a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800325e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003260:	2303      	movs	r3, #3
 8003262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	4619      	mov	r1, r3
 800326e:	4807      	ldr	r0, [pc, #28]	; (800328c <HAL_ADC_MspInit+0xd8>)
 8003270:	f001 ffc4 	bl	80051fc <HAL_GPIO_Init>
}
 8003274:	bf00      	nop
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40012000 	.word	0x40012000
 8003280:	40023800 	.word	0x40023800
 8003284:	40020000 	.word	0x40020000
 8003288:	40012200 	.word	0x40012200
 800328c:	40021400 	.word	0x40021400

08003290 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_DAC_MspInit+0x84>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d12b      	bne.n	800330a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_DAC_MspInit+0x88>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032e2:	2310      	movs	r3, #16
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032e6:	2303      	movs	r3, #3
 80032e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	4809      	ldr	r0, [pc, #36]	; (800331c <HAL_DAC_MspInit+0x8c>)
 80032f6:	f001 ff81 	bl	80051fc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2036      	movs	r0, #54	; 0x36
 8003300:	f001 fa1a 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003304:	2036      	movs	r0, #54	; 0x36
 8003306:	f001 fa33 	bl	8004770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40007400 	.word	0x40007400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020000 	.word	0x40020000

08003320 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_DMA2D_MspInit+0x38>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10b      	bne.n	800334a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_DMA2D_MspInit+0x3c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_DMA2D_MspInit+0x3c>)
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_DMA2D_MspInit+0x3c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	4002b000 	.word	0x4002b000
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2f      	ldr	r2, [pc, #188]	; (800343c <HAL_I2C_MspInit+0xdc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d129      	bne.n	80033d6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800339a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033a0:	2312      	movs	r3, #18
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ac:	2304      	movs	r3, #4
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	4823      	ldr	r0, [pc, #140]	; (8003444 <HAL_I2C_MspInit+0xe4>)
 80033b8:	f001 ff20 	bl	80051fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c6:	6413      	str	r3, [r2, #64]	; 0x40
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80033d4:	e02d      	b.n	8003432 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_I2C_MspInit+0xe8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d128      	bne.n	8003432 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80033f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fe:	2312      	movs	r3, #18
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003402:	2301      	movs	r3, #1
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800340a:	2304      	movs	r3, #4
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	480d      	ldr	r0, [pc, #52]	; (800344c <HAL_I2C_MspInit+0xec>)
 8003416:	f001 fef1 	bl	80051fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_I2C_MspInit+0xe0>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	bf00      	nop
 8003434:	3730      	adds	r7, #48	; 0x30
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40005400 	.word	0x40005400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400
 8003448:	40005c00 	.word	0x40005c00
 800344c:	40021c00 	.word	0x40021c00

08003450 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_I2C_MspDeInit+0x64>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d110      	bne.n	8003484 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_I2C_MspDeInit+0x68>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_I2C_MspDeInit+0x68>)
 8003468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800346e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003472:	4812      	ldr	r0, [pc, #72]	; (80034bc <HAL_I2C_MspDeInit+0x6c>)
 8003474:	f002 f86c 	bl	8005550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800347c:	480f      	ldr	r0, [pc, #60]	; (80034bc <HAL_I2C_MspDeInit+0x6c>)
 800347e:	f002 f867 	bl	8005550 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003482:	e013      	b.n	80034ac <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_I2C_MspDeInit+0x70>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10e      	bne.n	80034ac <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_I2C_MspDeInit+0x68>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_I2C_MspDeInit+0x68>)
 8003494:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	4809      	ldr	r0, [pc, #36]	; (80034c4 <HAL_I2C_MspDeInit+0x74>)
 800349e:	f002 f857 	bl	8005550 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80034a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a6:	4807      	ldr	r0, [pc, #28]	; (80034c4 <HAL_I2C_MspDeInit+0x74>)
 80034a8:	f002 f852 	bl	8005550 <HAL_GPIO_DeInit>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40005400 	.word	0x40005400
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40005c00 	.word	0x40005c00
 80034c4:	40021c00 	.word	0x40021c00

080034c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08e      	sub	sp, #56	; 0x38
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a55      	ldr	r2, [pc, #340]	; (800363c <HAL_LTDC_MspInit+0x174>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f040 80a3 	bne.w	8003632 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80034ec:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	4a53      	ldr	r2, [pc, #332]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 80034f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034f6:	6453      	str	r3, [r2, #68]	; 0x44
 80034f8:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003504:	4b4e      	ldr	r3, [pc, #312]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	4a4d      	ldr	r2, [pc, #308]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800350a:	f043 0310 	orr.w	r3, r3, #16
 800350e:	6313      	str	r3, [r2, #48]	; 0x30
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800351c:	4b48      	ldr	r3, [pc, #288]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4a47      	ldr	r2, [pc, #284]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003526:	6313      	str	r3, [r2, #48]	; 0x30
 8003528:	4b45      	ldr	r3, [pc, #276]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4a41      	ldr	r2, [pc, #260]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800353a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353e:	6313      	str	r3, [r2, #48]	; 0x30
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6313      	str	r3, [r2, #48]	; 0x30
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <HAL_LTDC_MspInit+0x178>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800357c:	2310      	movs	r3, #16
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	2300      	movs	r3, #0
 800358a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800358c:	230e      	movs	r3, #14
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	482b      	ldr	r0, [pc, #172]	; (8003644 <HAL_LTDC_MspInit+0x17c>)
 8003598:	f001 fe30 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800359c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80035ae:	230e      	movs	r3, #14
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	4823      	ldr	r0, [pc, #140]	; (8003648 <HAL_LTDC_MspInit+0x180>)
 80035ba:	f001 fe1f 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80035be:	23f7      	movs	r3, #247	; 0xf7
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80035ce:	230e      	movs	r3, #14
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	4619      	mov	r1, r3
 80035d8:	481c      	ldr	r0, [pc, #112]	; (800364c <HAL_LTDC_MspInit+0x184>)
 80035da:	f001 fe0f 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80035de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80035f0:	2309      	movs	r3, #9
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f8:	4619      	mov	r1, r3
 80035fa:	4815      	ldr	r0, [pc, #84]	; (8003650 <HAL_LTDC_MspInit+0x188>)
 80035fc:	f001 fdfe 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003600:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003612:	230e      	movs	r3, #14
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361a:	4619      	mov	r1, r3
 800361c:	480d      	ldr	r0, [pc, #52]	; (8003654 <HAL_LTDC_MspInit+0x18c>)
 800361e:	f001 fded 	bl	80051fc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2105      	movs	r1, #5
 8003626:	2058      	movs	r0, #88	; 0x58
 8003628:	f001 f886 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800362c:	2058      	movs	r0, #88	; 0x58
 800362e:	f001 f89f 	bl	8004770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003632:	bf00      	nop
 8003634:	3738      	adds	r7, #56	; 0x38
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40016800 	.word	0x40016800
 8003640:	40023800 	.word	0x40023800
 8003644:	40021000 	.word	0x40021000
 8003648:	40022400 	.word	0x40022400
 800364c:	40022800 	.word	0x40022800
 8003650:	40021800 	.word	0x40021800
 8003654:	40022000 	.word	0x40022000

08003658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a07      	ldr	r2, [pc, #28]	; (8003684 <HAL_RTC_MspInit+0x2c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d105      	bne.n	8003676 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RTC_MspInit+0x30>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_RTC_MspInit+0x30>)
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40002800 	.word	0x40002800
 8003688:	40023800 	.word	0x40023800

0800368c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_SPI_MspInit+0xd4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d154      	bne.n	8003758 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <HAL_SPI_MspInit+0xd8>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80036f6:	2302      	movs	r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003706:	2305      	movs	r3, #5
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	4619      	mov	r1, r3
 8003710:	4815      	ldr	r0, [pc, #84]	; (8003768 <HAL_SPI_MspInit+0xdc>)
 8003712:	f001 fd73 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003716:	2301      	movs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003722:	2303      	movs	r3, #3
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003726:	2305      	movs	r3, #5
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	480d      	ldr	r0, [pc, #52]	; (8003768 <HAL_SPI_MspInit+0xdc>)
 8003732:	f001 fd63 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003736:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800373a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003748:	2305      	movs	r3, #5
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4619      	mov	r1, r3
 8003752:	4806      	ldr	r0, [pc, #24]	; (800376c <HAL_SPI_MspInit+0xe0>)
 8003754:	f001 fd52 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003758:	bf00      	nop
 800375a:	3728      	adds	r7, #40	; 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40003800 	.word	0x40003800
 8003764:	40023800 	.word	0x40023800
 8003768:	40022000 	.word	0x40022000
 800376c:	40020400 	.word	0x40020400

08003770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_TIM_Base_MspInit+0xc8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10c      	bne.n	800379c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800379a:	e046      	b.n	800382a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037a6:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a24      	ldr	r2, [pc, #144]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	69bb      	ldr	r3, [r7, #24]
}
 80037be:	e034      	b.n	800382a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_TIM_Base_MspInit+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10c      	bne.n	80037e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ca:	4b1c      	ldr	r3, [pc, #112]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]
}
 80037e2:	e022      	b.n	800382a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_TIM_Base_MspInit+0xd4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10c      	bne.n	8003808 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
}
 8003806:	e010      	b.n	800382a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_TIM_Base_MspInit+0xd8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10b      	bne.n	800382a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_TIM_Base_MspInit+0xcc>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
}
 800382a:	bf00      	nop
 800382c:	3724      	adds	r7, #36	; 0x24
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40023800 	.word	0x40023800
 8003840:	40000400 	.word	0x40000400
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a22      	ldr	r2, [pc, #136]	; (80038f4 <HAL_TIM_MspPostInit+0xa8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d11c      	bne.n	80038a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003886:	2310      	movs	r3, #16
 8003888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003896:	2302      	movs	r3, #2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	4816      	ldr	r0, [pc, #88]	; (80038fc <HAL_TIM_MspPostInit+0xb0>)
 80038a2:	f001 fcab 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80038a6:	e020      	b.n	80038ea <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_TIM_MspPostInit+0xb4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d11b      	bne.n	80038ea <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_TIM_MspPostInit+0xac>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038ca:	2304      	movs	r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038da:	2303      	movs	r3, #3
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4619      	mov	r1, r3
 80038e4:	4807      	ldr	r0, [pc, #28]	; (8003904 <HAL_TIM_MspPostInit+0xb8>)
 80038e6:	f001 fc89 	bl	80051fc <HAL_GPIO_Init>
}
 80038ea:	bf00      	nop
 80038ec:	3728      	adds	r7, #40	; 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020400 	.word	0x40020400
 8003900:	40010400 	.word	0x40010400
 8003904:	40022000 	.word	0x40022000

08003908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08e      	sub	sp, #56	; 0x38
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a57      	ldr	r2, [pc, #348]	; (8003a84 <HAL_UART_MspInit+0x17c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d128      	bne.n	800397c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_UART_MspInit+0x180>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003942:	4b51      	ldr	r3, [pc, #324]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a50      	ldr	r2, [pc, #320]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003948:	f043 0320 	orr.w	r3, r3, #32
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b4e      	ldr	r3, [pc, #312]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800395a:	23c0      	movs	r3, #192	; 0xc0
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395e:	2302      	movs	r3, #2
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003966:	2303      	movs	r3, #3
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800396a:	2308      	movs	r3, #8
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800396e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003972:	4619      	mov	r1, r3
 8003974:	4845      	ldr	r0, [pc, #276]	; (8003a8c <HAL_UART_MspInit+0x184>)
 8003976:	f001 fc41 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800397a:	e07f      	b.n	8003a7c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_UART_MspInit+0x188>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d14d      	bne.n	8003a22 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <HAL_UART_MspInit+0x180>)
 800398c:	f043 0310 	orr.w	r3, r3, #16
 8003990:	6453      	str	r3, [r2, #68]	; 0x44
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a33      	ldr	r2, [pc, #204]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_UART_MspInit+0x180>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039de:	2307      	movs	r3, #7
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80039e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e6:	4619      	mov	r1, r3
 80039e8:	482a      	ldr	r0, [pc, #168]	; (8003a94 <HAL_UART_MspInit+0x18c>)
 80039ea:	f001 fc07 	bl	80051fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80039ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fc:	2300      	movs	r3, #0
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a00:	2307      	movs	r3, #7
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4823      	ldr	r0, [pc, #140]	; (8003a98 <HAL_UART_MspInit+0x190>)
 8003a0c:	f001 fbf6 	bl	80051fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2107      	movs	r1, #7
 8003a14:	2025      	movs	r0, #37	; 0x25
 8003a16:	f000 fe8f 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a1a:	2025      	movs	r0, #37	; 0x25
 8003a1c:	f000 fea8 	bl	8004770 <HAL_NVIC_EnableIRQ>
}
 8003a20:	e02c      	b.n	8003a7c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_UART_MspInit+0x194>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d127      	bne.n	8003a7c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	6453      	str	r3, [r2, #68]	; 0x44
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 0320 	and.w	r3, r3, #32
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_UART_MspInit+0x180>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003a5c:	23c0      	movs	r3, #192	; 0xc0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a74:	4619      	mov	r1, r3
 8003a76:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <HAL_UART_MspInit+0x198>)
 8003a78:	f001 fbc0 	bl	80051fc <HAL_GPIO_Init>
}
 8003a7c:	bf00      	nop
 8003a7e:	3738      	adds	r7, #56	; 0x38
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40007800 	.word	0x40007800
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40021400 	.word	0x40021400
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40020000 	.word	0x40020000
 8003a9c:	40011400 	.word	0x40011400
 8003aa0:	40020800 	.word	0x40020800

08003aa4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003ab8:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <HAL_FMC_MspInit+0x100>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d16d      	bne.n	8003b9c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003ac0:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_FMC_MspInit+0x100>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_FMC_MspInit+0x104>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <HAL_FMC_MspInit+0x104>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6393      	str	r3, [r2, #56]	; 0x38
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_FMC_MspInit+0x104>)
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003ade:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003ae2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003af0:	230c      	movs	r3, #12
 8003af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	482c      	ldr	r0, [pc, #176]	; (8003bac <HAL_FMC_MspInit+0x108>)
 8003afa:	f001 fb7f 	bl	80051fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003afe:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b02:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b10:	230c      	movs	r3, #12
 8003b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4825      	ldr	r0, [pc, #148]	; (8003bb0 <HAL_FMC_MspInit+0x10c>)
 8003b1a:	f001 fb6f 	bl	80051fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003b1e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b22:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	2302      	movs	r3, #2
 8003b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b30:	230c      	movs	r3, #12
 8003b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	481e      	ldr	r0, [pc, #120]	; (8003bb4 <HAL_FMC_MspInit+0x110>)
 8003b3a:	f001 fb5f 	bl	80051fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003b3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b42:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	2302      	movs	r3, #2
 8003b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b50:	230c      	movs	r3, #12
 8003b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4817      	ldr	r0, [pc, #92]	; (8003bb8 <HAL_FMC_MspInit+0x114>)
 8003b5a:	f001 fb4f 	bl	80051fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8003b5e:	2328      	movs	r3, #40	; 0x28
 8003b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b6e:	230c      	movs	r3, #12
 8003b70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4811      	ldr	r0, [pc, #68]	; (8003bbc <HAL_FMC_MspInit+0x118>)
 8003b78:	f001 fb40 	bl	80051fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	480a      	ldr	r0, [pc, #40]	; (8003bc0 <HAL_FMC_MspInit+0x11c>)
 8003b96:	f001 fb31 	bl	80051fc <HAL_GPIO_Init>
 8003b9a:	e000      	b.n	8003b9e <HAL_FMC_MspInit+0xfa>
    return;
 8003b9c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200004e0 	.word	0x200004e0
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	40021800 	.word	0x40021800
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40021400 	.word	0x40021400
 8003bbc:	40021c00 	.word	0x40021c00
 8003bc0:	40020800 	.word	0x40020800

08003bc4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003bcc:	f7ff ff6a 	bl	8003aa4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	2036      	movs	r0, #54	; 0x36
 8003bee:	f000 fda3 	bl	8004738 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bf2:	2036      	movs	r0, #54	; 0x36
 8003bf4:	f000 fdbc 	bl	8004770 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_InitTick+0xa0>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_InitTick+0xa0>)
 8003bfe:	f043 0310 	orr.w	r3, r3, #16
 8003c02:	6413      	str	r3, [r2, #64]	; 0x40
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <HAL_InitTick+0xa0>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c10:	f107 0210 	add.w	r2, r7, #16
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fbd2 	bl	80073c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c20:	f003 fba8 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 8003c24:	4603      	mov	r3, r0
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_InitTick+0xa4>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9b      	lsrs	r3, r3, #18
 8003c34:	3b01      	subs	r3, #1
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_InitTick+0xac>)
 8003c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003c58:	4809      	ldr	r0, [pc, #36]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c5a:	f004 fca6 	bl	80085aa <HAL_TIM_Base_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003c64:	4806      	ldr	r0, [pc, #24]	; (8003c80 <HAL_InitTick+0xa8>)
 8003c66:	f004 fccb 	bl	8008600 <HAL_TIM_Base_Start_IT>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	e000      	b.n	8003c70 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	431bde83 	.word	0x431bde83
 8003c80:	20008cbc 	.word	0x20008cbc
 8003c84:	40001000 	.word	0x40001000

08003c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <NMI_Handler+0x4>

08003c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <HardFault_Handler+0x4>

08003c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <MemManage_Handler+0x4>

08003c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9e:	e7fe      	b.n	8003c9e <BusFault_Handler+0x4>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <UsageFault_Handler+0x4>

08003ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <USART1_IRQHandler+0x10>)
 8003cba:	f005 fdf3 	bl	80098a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200089ac 	.word	0x200089ac

08003cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003ccc:	4803      	ldr	r0, [pc, #12]	; (8003cdc <TIM6_DAC_IRQHandler+0x14>)
 8003cce:	f000 fd7f 	bl	80047d0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003cd2:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <TIM6_DAC_IRQHandler+0x18>)
 8003cd4:	f004 fcf3 	bl	80086be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20008a2c 	.word	0x20008a2c
 8003ce0:	20008cbc 	.word	0x20008cbc

08003ce4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <LTDC_IRQHandler+0x10>)
 8003cea:	f002 fbed 	bl	80064c8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20008874 	.word	0x20008874

08003cf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <SystemInit+0x28>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <SystemInit+0x28>)
 8003d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SystemInit+0x28>)
 8003d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d12:	609a      	str	r2, [r3, #8]
#endif
 }
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d2a:	e003      	b.n	8003d34 <LoopCopyDataInit>

08003d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d32:	3104      	adds	r1, #4

08003d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d34:	480b      	ldr	r0, [pc, #44]	; (8003d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d3c:	d3f6      	bcc.n	8003d2c <CopyDataInit>
  ldr  r2, =_sbss
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d40:	e002      	b.n	8003d48 <LoopFillZerobss>

08003d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d44:	f842 3b04 	str.w	r3, [r2], #4

08003d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d4c:	d3f9      	bcc.n	8003d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d4e:	f7ff ffd3 	bl	8003cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d52:	f008 fc49 	bl	800c5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d56:	f7fc fdd1 	bl	80008fc <main>
  bx  lr    
 8003d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d5c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003d60:	0800e66c 	.word	0x0800e66c
  ldr  r0, =_sdata
 8003d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d68:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8003d6c:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8003d70:	20008d00 	.word	0x20008d00

08003d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d74:	e7fe      	b.n	8003d74 <ADC_IRQHandler>

08003d76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d7a:	2003      	movs	r0, #3
 8003d7c:	f000 fcd1 	bl	8004722 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d80:	2000      	movs	r0, #0
 8003d82:	f7ff ff29 	bl	8003bd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d86:	f7ff f9ed 	bl	8003164 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_IncTick+0x20>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_IncTick+0x24>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_IncTick+0x24>)
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000004c 	.word	0x2000004c
 8003db4:	20008cfc 	.word	0x20008cfc

08003db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return uwTick;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_GetTick+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20008cfc 	.word	0x20008cfc

08003dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7ff ffee 	bl	8003db8 <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d005      	beq.n	8003df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_Delay+0x40>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003df6:	bf00      	nop
 8003df8:	f7ff ffde 	bl	8003db8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d8f7      	bhi.n	8003df8 <HAL_Delay+0x28>
  {
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	2000004c 	.word	0x2000004c

08003e14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e031      	b.n	8003e8e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff f9be 	bl	80031b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_ADC_Init+0x84>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	f043 0202 	orr.w	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fab6 	bl	80043d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e7e:	e001      	b.n	8003e84 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	ffffeefd 	.word	0xffffeefd

08003e9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_Start+0x1a>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e0a0      	b.n	8003ff8 <HAL_ADC_Start+0x15c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d018      	beq.n	8003efe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003edc:	4b49      	ldr	r3, [pc, #292]	; (8004004 <HAL_ADC_Start+0x168>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a49      	ldr	r2, [pc, #292]	; (8004008 <HAL_ADC_Start+0x16c>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9a      	lsrs	r2, r3, #18
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003ef0:	e002      	b.n	8003ef8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f9      	bne.n	8003ef2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d174      	bne.n	8003ff6 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f10:	4b3e      	ldr	r3, [pc, #248]	; (800400c <HAL_ADC_Start+0x170>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	d106      	bne.n	8003f56 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f023 0206 	bic.w	r2, r3, #6
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
 8003f54:	e002      	b.n	8003f5c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f6c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_ADC_Start+0x174>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d136      	bne.n	8003ff6 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e02d      	b.n	8003ff6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_ADC_Start+0x178>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_ADC_Start+0x126>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_ADC_Start+0x174>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_ADC_Start+0x17c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_ADC_Start+0x15a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ff4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000044 	.word	0x20000044
 8004008:	431bde83 	.word	0x431bde83
 800400c:	fffff8fe 	.word	0xfffff8fe
 8004010:	40012300 	.word	0x40012300
 8004014:	40012000 	.word	0x40012000
 8004018:	40012200 	.word	0x40012200

0800401c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d113      	bne.n	8004062 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004048:	d10b      	bne.n	8004062 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e05c      	b.n	800411c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004062:	f7ff fea9 	bl	8003db8 <HAL_GetTick>
 8004066:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004068:	e01a      	b.n	80040a0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d016      	beq.n	80040a0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_ADC_PollForConversion+0x6c>
 8004078:	f7ff fe9e 	bl	8003db8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d20b      	bcs.n	80040a0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03d      	b.n	800411c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d1dd      	bne.n	800406a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0212 	mvn.w	r2, #18
 80040b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d123      	bne.n	800411a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11f      	bne.n	800411a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d111      	bne.n	800411a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x1c>
 8004158:	2302      	movs	r3, #2
 800415a:	e12a      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x272>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b09      	cmp	r3, #9
 800416a:	d93a      	bls.n	80041e2 <HAL_ADC_ConfigChannel+0xa2>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004174:	d035      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68d9      	ldr	r1, [r3, #12]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	3b1e      	subs	r3, #30
 800418c:	2207      	movs	r2, #7
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	400a      	ands	r2, r1
 800419a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a87      	ldr	r2, [pc, #540]	; (80043c0 <HAL_ADC_ConfigChannel+0x280>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10a      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68d9      	ldr	r1, [r3, #12]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	061a      	lsls	r2, r3, #24
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ba:	e035      	b.n	8004228 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68d9      	ldr	r1, [r3, #12]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4403      	add	r3, r0
 80041d4:	3b1e      	subs	r3, #30
 80041d6:	409a      	lsls	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041e0:	e022      	b.n	8004228 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6919      	ldr	r1, [r3, #16]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	2207      	movs	r2, #7
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6919      	ldr	r1, [r3, #16]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	4618      	mov	r0, r3
 8004218:	4603      	mov	r3, r0
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4403      	add	r3, r0
 800421e:	409a      	lsls	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b06      	cmp	r3, #6
 800422e:	d824      	bhi.n	800427a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	3b05      	subs	r3, #5
 8004242:	221f      	movs	r2, #31
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43da      	mvns	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	400a      	ands	r2, r1
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	4618      	mov	r0, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	3b05      	subs	r3, #5
 800426c:	fa00 f203 	lsl.w	r2, r0, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	635a      	str	r2, [r3, #52]	; 0x34
 8004278:	e04c      	b.n	8004314 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d824      	bhi.n	80042cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	3b23      	subs	r3, #35	; 0x23
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	400a      	ands	r2, r1
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b23      	subs	r3, #35	; 0x23
 80042be:	fa00 f203 	lsl.w	r2, r0, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
 80042ca:	e023      	b.n	8004314 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3b41      	subs	r3, #65	; 0x41
 80042de:	221f      	movs	r2, #31
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43da      	mvns	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	400a      	ands	r2, r1
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4618      	mov	r0, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	3b41      	subs	r3, #65	; 0x41
 8004308:	fa00 f203 	lsl.w	r2, r0, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <HAL_ADC_ConfigChannel+0x284>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10a      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x1f4>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004326:	d105      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004328:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 800432e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004332:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <HAL_ADC_ConfigChannel+0x284>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d109      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x212>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b12      	cmp	r3, #18
 8004344:	d105      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 800434c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004350:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_ADC_ConfigChannel+0x284>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d125      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x268>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_ADC_ConfigChannel+0x280>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <HAL_ADC_ConfigChannel+0x22e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b11      	cmp	r3, #17
 800436c:	d11c      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <HAL_ADC_ConfigChannel+0x288>)
 8004374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004378:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <HAL_ADC_ConfigChannel+0x280>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d111      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_ADC_ConfigChannel+0x28c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <HAL_ADC_ConfigChannel+0x290>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	0c9a      	lsrs	r2, r3, #18
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800439a:	e002      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	10000012 	.word	0x10000012
 80043c4:	40012000 	.word	0x40012000
 80043c8:	40012300 	.word	0x40012300
 80043cc:	20000044 	.word	0x20000044
 80043d0:	431bde83 	.word	0x431bde83

080043d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80043dc:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <ADC_Init+0x1ec>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a77      	ldr	r2, [pc, #476]	; (80045c0 <ADC_Init+0x1ec>)
 80043e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <ADC_Init+0x1ec>)
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4973      	ldr	r1, [pc, #460]	; (80045c0 <ADC_Init+0x1ec>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004404:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	021a      	lsls	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800444a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6899      	ldr	r1, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <ADC_Init+0x1f0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004476:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6899      	ldr	r1, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004498:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	e00f      	b.n	80044ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0202 	bic.w	r2, r2, #2
 80044dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	005a      	lsls	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800451a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	3b01      	subs	r3, #1
 8004528:	035a      	lsls	r2, r3, #13
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e007      	b.n	8004544 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004542:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	3b01      	subs	r3, #1
 8004560:	051a      	lsls	r2, r3, #20
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6899      	ldr	r1, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004586:	025a      	lsls	r2, r3, #9
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	029a      	lsls	r2, r3, #10
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012300 	.word	0x40012300
 80045c4:	0f000001 	.word	0x0f000001

080045c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <__NVIC_SetPriorityGrouping+0x40>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <__NVIC_SetPriorityGrouping+0x40>)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	60d3      	str	r3, [r2, #12]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00
 800460c:	05fa0000 	.word	0x05fa0000

08004610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <__NVIC_GetPriorityGrouping+0x18>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0307 	and.w	r3, r3, #7
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	db0b      	blt.n	8004656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4907      	ldr	r1, [pc, #28]	; (8004664 <__NVIC_EnableIRQ+0x38>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2001      	movs	r0, #1
 800464e:	fa00 f202 	lsl.w	r2, r0, r2
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000e100 	.word	0xe000e100

08004668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	; (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	; (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f1c3 0307 	rsb	r3, r3, #7
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	bf28      	it	cs
 80046da:	2304      	movcs	r3, #4
 80046dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d902      	bls.n	80046ec <NVIC_EncodePriority+0x30>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3b03      	subs	r3, #3
 80046ea:	e000      	b.n	80046ee <NVIC_EncodePriority+0x32>
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43da      	mvns	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	401a      	ands	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004704:	f04f 31ff 	mov.w	r1, #4294967295
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	43d9      	mvns	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004714:	4313      	orrs	r3, r2
         );
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	; 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff ff4c 	bl	80045c8 <__NVIC_SetPriorityGrouping>
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800474a:	f7ff ff61 	bl	8004610 <__NVIC_GetPriorityGrouping>
 800474e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	6978      	ldr	r0, [r7, #20]
 8004756:	f7ff ffb1 	bl	80046bc <NVIC_EncodePriority>
 800475a:	4602      	mov	r2, r0
 800475c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff80 	bl	8004668 <__NVIC_SetPriority>
}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff54 	bl	800462c <__NVIC_EnableIRQ>
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e014      	b.n	80047c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	791b      	ldrb	r3, [r3, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d105      	bne.n	80047b4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe fd6e 	bl	8003290 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e6:	d118      	bne.n	800481a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2204      	movs	r2, #4
 80047ec:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004802:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004812:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f825 	bl	8004864 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d118      	bne.n	800485c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f043 0202 	orr.w	r2, r3, #2
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004844:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f85b 	bl	8004912 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	795b      	ldrb	r3, [r3, #5]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_DAC_ConfigChannel+0x20>
 8004894:	2302      	movs	r3, #2
 8004896:	e036      	b.n	8004906 <HAL_DAC_ConfigChannel+0x8e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2202      	movs	r2, #2
 80048a2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80048ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4013      	ands	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	22c0      	movs	r2, #192	; 0xc0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	400a      	ands	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004934:	f7ff fa40 	bl	8003db8 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e099      	b.n	8004a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004964:	e00f      	b.n	8004986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004966:	f7ff fa27 	bl	8003db8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b05      	cmp	r3, #5
 8004972:	d908      	bls.n	8004986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2203      	movs	r2, #3
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e078      	b.n	8004a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e8      	bne.n	8004966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <HAL_DMA_Init+0x158>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d107      	bne.n	80049f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	4313      	orrs	r3, r2
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0307 	bic.w	r3, r3, #7
 8004a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d117      	bne.n	8004a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8df 	bl	8004bf0 <DMA_CheckFifoParam>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a46:	2301      	movs	r3, #1
 8004a48:	e016      	b.n	8004a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f896 	bl	8004b84 <DMA_CalcBaseAndBitshift>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	223f      	movs	r2, #63	; 0x3f
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	f010803f 	.word	0xf010803f

08004a84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e050      	b.n	8004b38 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e048      	b.n	8004b38 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f84c 	bl	8004b84 <DMA_CalcBaseAndBitshift>
 8004aec:	4603      	mov	r3, r0
 8004aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	223f      	movs	r2, #63	; 0x3f
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e00c      	b.n	8004b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2205      	movs	r2, #5
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3b10      	subs	r3, #16
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <DMA_CalcBaseAndBitshift+0x60>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b9e:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <DMA_CalcBaseAndBitshift+0x64>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d908      	bls.n	8004bc4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <DMA_CalcBaseAndBitshift+0x68>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	1d1a      	adds	r2, r3, #4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	659a      	str	r2, [r3, #88]	; 0x58
 8004bc2:	e006      	b.n	8004bd2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <DMA_CalcBaseAndBitshift+0x68>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	aaaaaaab 	.word	0xaaaaaaab
 8004be8:	0800e654 	.word	0x0800e654
 8004bec:	fffffc00 	.word	0xfffffc00

08004bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d11f      	bne.n	8004c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d855      	bhi.n	8004cbc <DMA_CheckFifoParam+0xcc>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <DMA_CheckFifoParam+0x28>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004c3b 	.word	0x08004c3b
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004cbd 	.word	0x08004cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d045      	beq.n	8004cc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c38:	e042      	b.n	8004cc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c42:	d13f      	bne.n	8004cc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c48:	e03c      	b.n	8004cc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	d121      	bne.n	8004c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d836      	bhi.n	8004cc8 <DMA_CheckFifoParam+0xd8>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <DMA_CheckFifoParam+0x70>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c77 	.word	0x08004c77
 8004c68:	08004c71 	.word	0x08004c71
 8004c6c:	08004c89 	.word	0x08004c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e02f      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d024      	beq.n	8004ccc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c86:	e021      	b.n	8004ccc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c90:	d11e      	bne.n	8004cd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c96:	e01b      	b.n	8004cd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d902      	bls.n	8004ca4 <DMA_CheckFifoParam+0xb4>
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d003      	beq.n	8004caa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ca2:	e018      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e015      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cba:	e00b      	b.n	8004cd4 <DMA_CheckFifoParam+0xe4>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e00a      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc0:	bf00      	nop
 8004cc2:	e008      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc4:	bf00      	nop
 8004cc6:	e006      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e004      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cd4:	bf00      	nop
    }
  } 
  
  return status; 
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e039      	b.n	8004d6a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe fb08 	bl	8003320 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	f023 0107 	bic.w	r1, r3, #7
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_DMA2D_Init+0x90>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68d1      	ldr	r1, [r2, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	ffffc000 	.word	0xffffc000

08004d78 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA2D_Start+0x1c>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e018      	b.n	8004dc6 <HAL_DMA2D_Start+0x4e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f988 	bl	80050c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d056      	beq.n	8004e98 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004dea:	f7fe ffe5 	bl	8003db8 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004df0:	e04b      	b.n	8004e8a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	f043 0202 	orr.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2221      	movs	r2, #33	; 0x21
 8004e36:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0a5      	b.n	8004f98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d01a      	beq.n	8004e8a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004e54:	f7fe ffb0 	bl	8003db8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <HAL_DMA2D_PollForTransfer+0x9c>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2203      	movs	r2, #3
 8004e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e086      	b.n	8004f98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ac      	beq.n	8004df2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d061      	beq.n	8004f7e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eba:	f7fe ff7d 	bl	8003db8 <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ec0:	e056      	b.n	8004f70 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02e      	beq.n	8004f32 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	f043 0204 	orr.w	r2, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	f043 0202 	orr.w	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2229      	movs	r2, #41	; 0x29
 8004f1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2204      	movs	r2, #4
 8004f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e032      	b.n	8004f98 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d01a      	beq.n	8004f70 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004f3a:	f7fe ff3d 	bl	8003db8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <HAL_DMA2D_PollForTransfer+0x182>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e013      	b.n	8004f98 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0a1      	beq.n	8004ec2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2212      	movs	r2, #18
 8004f84:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_DMA2D_ConfigLayer+0x20>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e079      	b.n	80050b4 <HAL_DMA2D_ConfigLayer+0x114>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	3318      	adds	r3, #24
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004fea:	4b35      	ldr	r3, [pc, #212]	; (80050c0 <HAL_DMA2D_ConfigLayer+0x120>)
 8004fec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b0a      	cmp	r3, #10
 8004ff4:	d003      	beq.n	8004ffe <HAL_DMA2D_ConfigLayer+0x5e>
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d107      	bne.n	800500e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e005      	b.n	800501a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d120      	bne.n	8005062 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43db      	mvns	r3, r3
 800502a:	ea02 0103 	and.w	r1, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	430a      	orrs	r2, r1
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b0a      	cmp	r3, #10
 8005048:	d003      	beq.n	8005052 <HAL_DMA2D_ConfigLayer+0xb2>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b09      	cmp	r3, #9
 8005050:	d127      	bne.n	80050a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
 8005060:	e01f      	b.n	80050a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	43db      	mvns	r3, r3
 800506c:	ea02 0103 	and.w	r1, r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	430a      	orrs	r2, r1
 8005078:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b0a      	cmp	r3, #10
 800508a:	d003      	beq.n	8005094 <HAL_DMA2D_ConfigLayer+0xf4>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b09      	cmp	r3, #9
 8005092:	d106      	bne.n	80050a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80050a0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	ff03000f 	.word	0xff03000f

080050c4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b08b      	sub	sp, #44	; 0x2c
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	041a      	lsls	r2, r3, #16
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050fc:	d174      	bne.n	80051e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005104:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800510c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005114:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d108      	bne.n	8005136 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	431a      	orrs	r2, r3
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	4313      	orrs	r3, r2
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
 8005134:	e053      	b.n	80051de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d106      	bne.n	800514c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4313      	orrs	r3, r2
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
 800514a:	e048      	b.n	80051de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d111      	bne.n	8005178 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	0cdb      	lsrs	r3, r3, #19
 8005158:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	0a9b      	lsrs	r3, r3, #10
 800515e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	02db      	lsls	r3, r3, #11
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e032      	b.n	80051de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d117      	bne.n	80051b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	0fdb      	lsrs	r3, r3, #31
 8005184:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	0cdb      	lsrs	r3, r3, #19
 800518a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	0adb      	lsrs	r3, r3, #11
 8005190:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	431a      	orrs	r2, r3
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	03db      	lsls	r3, r3, #15
 80051a6:	4313      	orrs	r3, r2
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
 80051ae:	e016      	b.n	80051de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	0f1b      	lsrs	r3, r3, #28
 80051b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	0d1b      	lsrs	r3, r3, #20
 80051ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	0b1b      	lsrs	r3, r3, #12
 80051c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	431a      	orrs	r2, r3
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	031b      	lsls	r3, r3, #12
 80051d6:	4313      	orrs	r3, r2
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80051e6:	e003      	b.n	80051f0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	60da      	str	r2, [r3, #12]
}
 80051f0:	bf00      	nop
 80051f2:	372c      	adds	r7, #44	; 0x2c
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e175      	b.n	8005508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 8164 	bne.w	8005502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00b      	beq.n	800525a <HAL_GPIO_Init+0x5e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d007      	beq.n	800525a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800524e:	2b11      	cmp	r3, #17
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b12      	cmp	r3, #18
 8005258:	d130      	bne.n	80052bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	2203      	movs	r2, #3
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005290:	2201      	movs	r2, #1
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 0201 	and.w	r2, r3, #1
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	2203      	movs	r2, #3
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x100>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b12      	cmp	r3, #18
 80052fa:	d123      	bne.n	8005344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08da      	lsrs	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3208      	adds	r2, #8
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	220f      	movs	r2, #15
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	08da      	lsrs	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3208      	adds	r2, #8
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0203 	and.w	r2, r3, #3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80be 	beq.w	8005502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	4b65      	ldr	r3, [pc, #404]	; (800551c <HAL_GPIO_Init+0x320>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4a64      	ldr	r2, [pc, #400]	; (800551c <HAL_GPIO_Init+0x320>)
 800538c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005390:	6453      	str	r3, [r2, #68]	; 0x44
 8005392:	4b62      	ldr	r3, [pc, #392]	; (800551c <HAL_GPIO_Init+0x320>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800539e:	4a60      	ldr	r2, [pc, #384]	; (8005520 <HAL_GPIO_Init+0x324>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a57      	ldr	r2, [pc, #348]	; (8005524 <HAL_GPIO_Init+0x328>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d037      	beq.n	800543a <HAL_GPIO_Init+0x23e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a56      	ldr	r2, [pc, #344]	; (8005528 <HAL_GPIO_Init+0x32c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_GPIO_Init+0x23a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a55      	ldr	r2, [pc, #340]	; (800552c <HAL_GPIO_Init+0x330>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02b      	beq.n	8005432 <HAL_GPIO_Init+0x236>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a54      	ldr	r2, [pc, #336]	; (8005530 <HAL_GPIO_Init+0x334>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d025      	beq.n	800542e <HAL_GPIO_Init+0x232>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a53      	ldr	r2, [pc, #332]	; (8005534 <HAL_GPIO_Init+0x338>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <HAL_GPIO_Init+0x22e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a52      	ldr	r2, [pc, #328]	; (8005538 <HAL_GPIO_Init+0x33c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d019      	beq.n	8005426 <HAL_GPIO_Init+0x22a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a51      	ldr	r2, [pc, #324]	; (800553c <HAL_GPIO_Init+0x340>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_GPIO_Init+0x226>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a50      	ldr	r2, [pc, #320]	; (8005540 <HAL_GPIO_Init+0x344>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00d      	beq.n	800541e <HAL_GPIO_Init+0x222>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a4f      	ldr	r2, [pc, #316]	; (8005544 <HAL_GPIO_Init+0x348>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <HAL_GPIO_Init+0x21e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a4e      	ldr	r2, [pc, #312]	; (8005548 <HAL_GPIO_Init+0x34c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_GPIO_Init+0x21a>
 8005412:	2309      	movs	r3, #9
 8005414:	e012      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005416:	230a      	movs	r3, #10
 8005418:	e010      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541a:	2308      	movs	r3, #8
 800541c:	e00e      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541e:	2307      	movs	r3, #7
 8005420:	e00c      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005422:	2306      	movs	r3, #6
 8005424:	e00a      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005426:	2305      	movs	r3, #5
 8005428:	e008      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542a:	2304      	movs	r3, #4
 800542c:	e006      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542e:	2303      	movs	r3, #3
 8005430:	e004      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005432:	2302      	movs	r3, #2
 8005434:	e002      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_GPIO_Init+0x240>
 800543a:	2300      	movs	r3, #0
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f002 0203 	and.w	r2, r2, #3
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	4093      	lsls	r3, r2
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800544c:	4934      	ldr	r1, [pc, #208]	; (8005520 <HAL_GPIO_Init+0x324>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800545a:	4b3c      	ldr	r3, [pc, #240]	; (800554c <HAL_GPIO_Init+0x350>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_GPIO_Init+0x350>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005484:	4b31      	ldr	r3, [pc, #196]	; (800554c <HAL_GPIO_Init+0x350>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_GPIO_Init+0x350>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ae:	4b27      	ldr	r3, [pc, #156]	; (800554c <HAL_GPIO_Init+0x350>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <HAL_GPIO_Init+0x350>)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_GPIO_Init+0x350>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054fc:	4a13      	ldr	r2, [pc, #76]	; (800554c <HAL_GPIO_Init+0x350>)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	f67f ae86 	bls.w	800521c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005510:	bf00      	nop
 8005512:	3724      	adds	r7, #36	; 0x24
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40023800 	.word	0x40023800
 8005520:	40013800 	.word	0x40013800
 8005524:	40020000 	.word	0x40020000
 8005528:	40020400 	.word	0x40020400
 800552c:	40020800 	.word	0x40020800
 8005530:	40020c00 	.word	0x40020c00
 8005534:	40021000 	.word	0x40021000
 8005538:	40021400 	.word	0x40021400
 800553c:	40021800 	.word	0x40021800
 8005540:	40021c00 	.word	0x40021c00
 8005544:	40022000 	.word	0x40022000
 8005548:	40022400 	.word	0x40022400
 800554c:	40013c00 	.word	0x40013c00

08005550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005562:	2300      	movs	r3, #0
 8005564:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e0d9      	b.n	8005720 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800556c:	2201      	movs	r2, #1
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	f040 80c9 	bne.w	800571a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005588:	4a6a      	ldr	r2, [pc, #424]	; (8005734 <HAL_GPIO_DeInit+0x1e4>)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	089b      	lsrs	r3, r3, #2
 800558e:	3302      	adds	r3, #2
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	220f      	movs	r2, #15
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a62      	ldr	r2, [pc, #392]	; (8005738 <HAL_GPIO_DeInit+0x1e8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d037      	beq.n	8005622 <HAL_GPIO_DeInit+0xd2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a61      	ldr	r2, [pc, #388]	; (800573c <HAL_GPIO_DeInit+0x1ec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d031      	beq.n	800561e <HAL_GPIO_DeInit+0xce>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a60      	ldr	r2, [pc, #384]	; (8005740 <HAL_GPIO_DeInit+0x1f0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02b      	beq.n	800561a <HAL_GPIO_DeInit+0xca>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a5f      	ldr	r2, [pc, #380]	; (8005744 <HAL_GPIO_DeInit+0x1f4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d025      	beq.n	8005616 <HAL_GPIO_DeInit+0xc6>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a5e      	ldr	r2, [pc, #376]	; (8005748 <HAL_GPIO_DeInit+0x1f8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01f      	beq.n	8005612 <HAL_GPIO_DeInit+0xc2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a5d      	ldr	r2, [pc, #372]	; (800574c <HAL_GPIO_DeInit+0x1fc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d019      	beq.n	800560e <HAL_GPIO_DeInit+0xbe>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a5c      	ldr	r2, [pc, #368]	; (8005750 <HAL_GPIO_DeInit+0x200>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_GPIO_DeInit+0xba>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a5b      	ldr	r2, [pc, #364]	; (8005754 <HAL_GPIO_DeInit+0x204>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00d      	beq.n	8005606 <HAL_GPIO_DeInit+0xb6>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a5a      	ldr	r2, [pc, #360]	; (8005758 <HAL_GPIO_DeInit+0x208>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <HAL_GPIO_DeInit+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a59      	ldr	r2, [pc, #356]	; (800575c <HAL_GPIO_DeInit+0x20c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_GPIO_DeInit+0xae>
 80055fa:	2309      	movs	r3, #9
 80055fc:	e012      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 80055fe:	230a      	movs	r3, #10
 8005600:	e010      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 8005602:	2308      	movs	r3, #8
 8005604:	e00e      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 8005606:	2307      	movs	r3, #7
 8005608:	e00c      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 800560a:	2306      	movs	r3, #6
 800560c:	e00a      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 800560e:	2305      	movs	r3, #5
 8005610:	e008      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 8005612:	2304      	movs	r3, #4
 8005614:	e006      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 8005616:	2303      	movs	r3, #3
 8005618:	e004      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 800561a:	2302      	movs	r3, #2
 800561c:	e002      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_GPIO_DeInit+0xd4>
 8005622:	2300      	movs	r3, #0
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	f002 0203 	and.w	r2, r2, #3
 800562a:	0092      	lsls	r2, r2, #2
 800562c:	4093      	lsls	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	d132      	bne.n	800569a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005634:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	43db      	mvns	r3, r3
 800563c:	4948      	ldr	r1, [pc, #288]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 800563e:	4013      	ands	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	4945      	ldr	r1, [pc, #276]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 800564c:	4013      	ands	r3, r2
 800564e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	43db      	mvns	r3, r3
 8005658:	4941      	ldr	r1, [pc, #260]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 800565a:	4013      	ands	r3, r2
 800565c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800565e:	4b40      	ldr	r3, [pc, #256]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	43db      	mvns	r3, r3
 8005666:	493e      	ldr	r1, [pc, #248]	; (8005760 <HAL_GPIO_DeInit+0x210>)
 8005668:	4013      	ands	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	220f      	movs	r2, #15
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800567c:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <HAL_GPIO_DeInit+0x1e4>)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	3302      	adds	r3, #2
 8005684:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	43da      	mvns	r2, r3
 800568c:	4829      	ldr	r0, [pc, #164]	; (8005734 <HAL_GPIO_DeInit+0x1e4>)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	400a      	ands	r2, r1
 8005694:	3302      	adds	r3, #2
 8005696:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	2103      	movs	r1, #3
 80056a4:	fa01 f303 	lsl.w	r3, r1, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	401a      	ands	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	08da      	lsrs	r2, r3, #3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3208      	adds	r2, #8
 80056b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	220f      	movs	r2, #15
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	08d2      	lsrs	r2, r2, #3
 80056d0:	4019      	ands	r1, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3208      	adds	r2, #8
 80056d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	2103      	movs	r1, #3
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	2101      	movs	r1, #1
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	43db      	mvns	r3, r3
 80056fe:	401a      	ands	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2103      	movs	r1, #3
 800570e:	fa01 f303 	lsl.w	r3, r1, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	401a      	ands	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3301      	adds	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	f67f af22 	bls.w	800556c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40013800 	.word	0x40013800
 8005738:	40020000 	.word	0x40020000
 800573c:	40020400 	.word	0x40020400
 8005740:	40020800 	.word	0x40020800
 8005744:	40020c00 	.word	0x40020c00
 8005748:	40021000 	.word	0x40021000
 800574c:	40021400 	.word	0x40021400
 8005750:	40021800 	.word	0x40021800
 8005754:	40021c00 	.word	0x40021c00
 8005758:	40022000 	.word	0x40022000
 800575c:	40022400 	.word	0x40022400
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e001      	b.n	8005786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80057b0:	e003      	b.n	80057ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e07f      	b.n	80058da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fdb6 	bl	8003360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d107      	bne.n	8005842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	e006      	b.n	8005850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800584e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d104      	bne.n	8005862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_I2C_Init+0x11c>)
 800586e:	430b      	orrs	r3, r1
 8005870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	ea42 0103 	orr.w	r1, r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	02008000 	.word	0x02008000

080058e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e021      	b.n	800593e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2224      	movs	r2, #36	; 0x24
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd fd9c 	bl	8003450 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	4603      	mov	r3, r0
 8005958:	817b      	strh	r3, [r7, #10]
 800595a:	460b      	mov	r3, r1
 800595c:	813b      	strh	r3, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b20      	cmp	r3, #32
 800596c:	f040 80f9 	bne.w	8005b62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_I2C_Mem_Write+0x34>
 8005976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0ed      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_I2C_Mem_Write+0x4e>
 8005992:	2302      	movs	r3, #2
 8005994:	e0e6      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800599e:	f7fe fa0b 	bl	8003db8 <HAL_GetTick>
 80059a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fad1 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0d1      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2221      	movs	r2, #33	; 0x21
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2240      	movs	r2, #64	; 0x40
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059e8:	88f8      	ldrh	r0, [r7, #6]
 80059ea:	893a      	ldrh	r2, [r7, #8]
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4603      	mov	r3, r0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9e1 	bl	8005dc0 <I2C_RequestMemoryWrite>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0a9      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2bff      	cmp	r3, #255	; 0xff
 8005a18:	d90e      	bls.n	8005a38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	8979      	ldrh	r1, [r7, #10]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fbb3 	bl	800619c <I2C_TransferConfig>
 8005a36:	e00f      	b.n	8005a58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	8979      	ldrh	r1, [r7, #10]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fba2 	bl	800619c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fabb 	bl	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e07b      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d034      	beq.n	8005b10 <HAL_I2C_Mem_Write+0x1c8>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d130      	bne.n	8005b10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2180      	movs	r1, #128	; 0x80
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa4d 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e04d      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2bff      	cmp	r3, #255	; 0xff
 8005ad0:	d90e      	bls.n	8005af0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	22ff      	movs	r2, #255	; 0xff
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	8979      	ldrh	r1, [r7, #10]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fb57 	bl	800619c <I2C_TransferConfig>
 8005aee:	e00f      	b.n	8005b10 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	8979      	ldrh	r1, [r7, #10]
 8005b02:	2300      	movs	r3, #0
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fb46 	bl	800619c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d19e      	bne.n	8005a58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa9a 	bl	8006058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e01a      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2220      	movs	r2, #32
 8005b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <HAL_I2C_Mem_Write+0x224>)
 8005b42:	400b      	ands	r3, r1
 8005b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
  }
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	fe00e800 	.word	0xfe00e800

08005b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	817b      	strh	r3, [r7, #10]
 8005b82:	460b      	mov	r3, r1
 8005b84:	813b      	strh	r3, [r7, #8]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	f040 80fd 	bne.w	8005d92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_I2C_Mem_Read+0x34>
 8005b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0f1      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Mem_Read+0x4e>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0ea      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bc6:	f7fe f8f7 	bl	8003db8 <HAL_GetTick>
 8005bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2319      	movs	r3, #25
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f9bd 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0d5      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2222      	movs	r2, #34	; 0x22
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	; 0x40
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c10:	88f8      	ldrh	r0, [r7, #6]
 8005c12:	893a      	ldrh	r2, [r7, #8]
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	4603      	mov	r3, r0
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f921 	bl	8005e68 <I2C_RequestMemoryRead>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0ad      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2bff      	cmp	r3, #255	; 0xff
 8005c40:	d90e      	bls.n	8005c60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	22ff      	movs	r2, #255	; 0xff
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	8979      	ldrh	r1, [r7, #10]
 8005c50:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <HAL_I2C_Mem_Read+0x22c>)
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fa9f 	bl	800619c <I2C_TransferConfig>
 8005c5e:	e00f      	b.n	8005c80 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	8979      	ldrh	r1, [r7, #10]
 8005c72:	4b4a      	ldr	r3, [pc, #296]	; (8005d9c <HAL_I2C_Mem_Read+0x22c>)
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fa8e 	bl	800619c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2200      	movs	r2, #0
 8005c88:	2104      	movs	r1, #4
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f964 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e07c      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d034      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x1d0>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d130      	bne.n	8005d40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f935 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04d      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2bff      	cmp	r3, #255	; 0xff
 8005d00:	d90e      	bls.n	8005d20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	8979      	ldrh	r1, [r7, #10]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fa3f 	bl	800619c <I2C_TransferConfig>
 8005d1e:	e00f      	b.n	8005d40 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	8979      	ldrh	r1, [r7, #10]
 8005d32:	2300      	movs	r3, #0
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 fa2e 	bl	800619c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d19a      	bne.n	8005c80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f982 	bl	8006058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e01a      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2220      	movs	r2, #32
 8005d64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_I2C_Mem_Read+0x230>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e000      	b.n	8005d94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	80002400 	.word	0x80002400
 8005da0:	fe00e800 	.word	0xfe00e800

08005da4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db2:	b2db      	uxtb	r3, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	817b      	strh	r3, [r7, #10]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	813b      	strh	r3, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	8979      	ldrh	r1, [r7, #10]
 8005de0:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <I2C_RequestMemoryWrite+0xa4>)
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f9d7 	bl	800619c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f8f0 	bl	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e02c      	b.n	8005e5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d105      	bne.n	8005e14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e08:	893b      	ldrh	r3, [r7, #8]
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
 8005e12:	e015      	b.n	8005e40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	69b9      	ldr	r1, [r7, #24]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8d6 	bl	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e012      	b.n	8005e5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e36:	893b      	ldrh	r3, [r7, #8]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2180      	movs	r1, #128	; 0x80
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f884 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	80002000 	.word	0x80002000

08005e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	8979      	ldrh	r1, [r7, #10]
 8005e88:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <I2C_RequestMemoryRead+0xa4>)
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f984 	bl	800619c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f89d 	bl	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e02c      	b.n	8005f02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d105      	bne.n	8005eba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005eb8:	e015      	b.n	8005ee6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	69b9      	ldr	r1, [r7, #24]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f883 	bl	8005fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e012      	b.n	8005f02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005edc:	893b      	ldrh	r3, [r7, #8]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2140      	movs	r1, #64	; 0x40
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f831 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	80002000 	.word	0x80002000

08005f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d103      	bne.n	8005f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d007      	beq.n	8005f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	619a      	str	r2, [r3, #24]
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f68:	e022      	b.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d01e      	beq.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fd ff21 	bl	8003db8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d113      	bne.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8c:	f043 0220 	orr.w	r2, r3, #32
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e00f      	b.n	8005fd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d0cd      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fe4:	e02c      	b.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f870 	bl	80060d0 <I2C_IsAcknowledgeFailed>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e02a      	b.n	8006050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d01e      	beq.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7fd fed9 	bl	8003db8 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d113      	bne.n	8006040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d1cb      	bne.n	8005fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006064:	e028      	b.n	80060b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f830 	bl	80060d0 <I2C_IsAcknowledgeFailed>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e026      	b.n	80060c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607a:	f7fd fe9d 	bl	8003db8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d113      	bne.n	80060b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e007      	b.n	80060c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d1cf      	bne.n	8006066 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d151      	bne.n	800618e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060ea:	e022      	b.n	8006132 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d01e      	beq.n	8006132 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f4:	f7fd fe60 	bl	8003db8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	429a      	cmp	r2, r3
 8006102:	d302      	bcc.n	800610a <I2C_IsAcknowledgeFailed+0x3a>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d113      	bne.n	8006132 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e02e      	b.n	8006190 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b20      	cmp	r3, #32
 800613e:	d1d5      	bne.n	80060ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2210      	movs	r2, #16
 8006146:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2220      	movs	r2, #32
 800614e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fedd 	bl	8005f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <I2C_IsAcknowledgeFailed+0xc8>)
 8006162:	400b      	ands	r3, r1
 8006164:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f043 0204 	orr.w	r2, r3, #4
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	fe00e800 	.word	0xfe00e800

0800619c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	4613      	mov	r3, r2
 80061ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	0d5b      	lsrs	r3, r3, #21
 80061b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <I2C_TransferConfig+0x58>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	43db      	mvns	r3, r3
 80061c2:	ea02 0103 	and.w	r1, r2, r3
 80061c6:	897b      	ldrh	r3, [r7, #10]
 80061c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061cc:	7a7b      	ldrb	r3, [r7, #9]
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	431a      	orrs	r2, r3
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	03ff63ff 	.word	0x03ff63ff

080061f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b20      	cmp	r3, #32
 800620c:	d138      	bne.n	8006280 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006218:	2302      	movs	r3, #2
 800621a:	e032      	b.n	8006282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2224      	movs	r2, #36	; 0x24
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800624a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e000      	b.n	8006282 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d139      	bne.n	8006318 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e033      	b.n	800631a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2224      	movs	r2, #36	; 0x24
 80062be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e0bf      	b.n	80064ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fd f8ba 	bl	80034c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800636a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6999      	ldr	r1, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006380:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b4a      	ldr	r3, [pc, #296]	; (80064c4 <HAL_LTDC_Init+0x19c>)
 800639c:	400b      	ands	r3, r1
 800639e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	041b      	lsls	r3, r3, #16
 80063a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6899      	ldr	r1, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68d9      	ldr	r1, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <HAL_LTDC_Init+0x19c>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68d9      	ldr	r1, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6919      	ldr	r1, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <HAL_LTDC_Init+0x19c>)
 80063f8:	400b      	ands	r3, r1
 80063fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6919      	ldr	r1, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6959      	ldr	r1, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <HAL_LTDC_Init+0x19c>)
 8006426:	400b      	ands	r3, r1
 8006428:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6959      	ldr	r1, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0206 	orr.w	r2, r2, #6
 8006496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	f000f800 	.word	0xf000f800

080064c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d023      	beq.n	8006532 <HAL_LTDC_IRQHandler+0x6a>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01e      	beq.n	8006532 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2204      	movs	r2, #4
 800650a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006512:	f043 0201 	orr.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f86f 	bl	8006610 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d023      	beq.n	8006584 <HAL_LTDC_IRQHandler+0xbc>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01e      	beq.n	8006584 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0202 	bic.w	r2, r2, #2
 8006554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2202      	movs	r2, #2
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006564:	f043 0202 	orr.w	r2, r3, #2
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f846 	bl	8006610 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01b      	beq.n	80065c6 <HAL_LTDC_IRQHandler+0xfe>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d016      	beq.n	80065c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f82f 	bl	8006624 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <HAL_LTDC_IRQHandler+0x140>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d016      	beq.n	8006608 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0208 	bic.w	r2, r2, #8
 80065e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2208      	movs	r2, #8
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f818 	bl	8006638 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_LTDC_ConfigLayer+0x1a>
 8006662:	2302      	movs	r3, #2
 8006664:	e02c      	b.n	80066c0 <HAL_LTDC_ConfigLayer+0x74>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2134      	movs	r1, #52	; 0x34
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4614      	mov	r4, r2
 800668a:	461d      	mov	r5, r3
 800668c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f81f 	bl	80066e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2201      	movs	r2, #1
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bdb0      	pop	{r4, r5, r7, pc}

080066c8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066d6:	b2db      	uxtb	r3, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	0c1b      	lsrs	r3, r3, #16
 80066fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006700:	4413      	add	r3, r2
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	4413      	add	r3, r2
 8006712:	3384      	adds	r3, #132	; 0x84
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4611      	mov	r1, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	01d2      	lsls	r2, r2, #7
 8006720:	440a      	add	r2, r1
 8006722:	3284      	adds	r2, #132	; 0x84
 8006724:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006728:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673a:	4413      	add	r3, r2
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4619      	mov	r1, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	01db      	lsls	r3, r3, #7
 8006748:	440b      	add	r3, r1
 800674a:	3384      	adds	r3, #132	; 0x84
 800674c:	4619      	mov	r1, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006762:	4413      	add	r3, r2
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4413      	add	r3, r2
 8006774:	3384      	adds	r3, #132	; 0x84
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4611      	mov	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	01d2      	lsls	r2, r2, #7
 8006782:	440a      	add	r2, r1
 8006784:	3284      	adds	r2, #132	; 0x84
 8006786:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800678a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679a:	4413      	add	r3, r2
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	01db      	lsls	r3, r3, #7
 80067a8:	440b      	add	r3, r1
 80067aa:	3384      	adds	r3, #132	; 0x84
 80067ac:	4619      	mov	r1, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	01db      	lsls	r3, r3, #7
 80067be:	4413      	add	r3, r2
 80067c0:	3384      	adds	r3, #132	; 0x84
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	4611      	mov	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	01d2      	lsls	r2, r2, #7
 80067ce:	440a      	add	r2, r1
 80067d0:	3284      	adds	r2, #132	; 0x84
 80067d2:	f023 0307 	bic.w	r3, r3, #7
 80067d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	01db      	lsls	r3, r3, #7
 80067e2:	4413      	add	r3, r2
 80067e4:	3384      	adds	r3, #132	; 0x84
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	01db      	lsls	r3, r3, #7
 8006814:	4413      	add	r3, r2
 8006816:	3384      	adds	r3, #132	; 0x84
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	01db      	lsls	r3, r3, #7
 8006824:	4413      	add	r3, r2
 8006826:	3384      	adds	r3, #132	; 0x84
 8006828:	461a      	mov	r2, r3
 800682a:	2300      	movs	r3, #0
 800682c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006834:	461a      	mov	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	431a      	orrs	r2, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	01db      	lsls	r3, r3, #7
 8006848:	440b      	add	r3, r1
 800684a:	3384      	adds	r3, #132	; 0x84
 800684c:	4619      	mov	r1, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	01db      	lsls	r3, r3, #7
 800685e:	4413      	add	r3, r2
 8006860:	3384      	adds	r3, #132	; 0x84
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	4611      	mov	r1, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	01d2      	lsls	r2, r2, #7
 800686e:	440a      	add	r2, r1
 8006870:	3284      	adds	r2, #132	; 0x84
 8006872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006876:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	01db      	lsls	r3, r3, #7
 8006882:	4413      	add	r3, r2
 8006884:	3384      	adds	r3, #132	; 0x84
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	01db      	lsls	r3, r3, #7
 8006898:	4413      	add	r3, r2
 800689a:	3384      	adds	r3, #132	; 0x84
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4619      	mov	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	01db      	lsls	r3, r3, #7
 80068a8:	440b      	add	r3, r1
 80068aa:	3384      	adds	r3, #132	; 0x84
 80068ac:	4619      	mov	r1, r3
 80068ae:	4b58      	ldr	r3, [pc, #352]	; (8006a10 <LTDC_SetConfig+0x32c>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	6809      	ldr	r1, [r1, #0]
 80068c0:	4608      	mov	r0, r1
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	01c9      	lsls	r1, r1, #7
 80068c6:	4401      	add	r1, r0
 80068c8:	3184      	adds	r1, #132	; 0x84
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	01db      	lsls	r3, r3, #7
 80068d8:	4413      	add	r3, r2
 80068da:	3384      	adds	r3, #132	; 0x84
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	01db      	lsls	r3, r3, #7
 80068e8:	4413      	add	r3, r2
 80068ea:	3384      	adds	r3, #132	; 0x84
 80068ec:	461a      	mov	r2, r3
 80068ee:	2300      	movs	r3, #0
 80068f0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	01db      	lsls	r3, r3, #7
 80068fc:	4413      	add	r3, r2
 80068fe:	3384      	adds	r3, #132	; 0x84
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006910:	2304      	movs	r3, #4
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e01b      	b.n	800694e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d102      	bne.n	8006924 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800691e:	2303      	movs	r3, #3
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	e014      	b.n	800694e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b04      	cmp	r3, #4
 800692a:	d00b      	beq.n	8006944 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006930:	2b02      	cmp	r3, #2
 8006932:	d007      	beq.n	8006944 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006938:	2b03      	cmp	r3, #3
 800693a:	d003      	beq.n	8006944 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006940:	2b07      	cmp	r3, #7
 8006942:	d102      	bne.n	800694a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006944:	2302      	movs	r3, #2
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	e001      	b.n	800694e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800694a:	2301      	movs	r3, #1
 800694c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	01db      	lsls	r3, r3, #7
 8006958:	4413      	add	r3, r2
 800695a:	3384      	adds	r3, #132	; 0x84
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	4611      	mov	r1, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	01d2      	lsls	r2, r2, #7
 8006968:	440a      	add	r2, r1
 800696a:	3284      	adds	r2, #132	; 0x84
 800696c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	fb02 f303 	mul.w	r3, r2, r3
 800697c:	041a      	lsls	r2, r3, #16
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	1acb      	subs	r3, r1, r3
 8006988:	69f9      	ldr	r1, [r7, #28]
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	3303      	adds	r3, #3
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	6809      	ldr	r1, [r1, #0]
 8006994:	4608      	mov	r0, r1
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	01c9      	lsls	r1, r1, #7
 800699a:	4401      	add	r1, r0
 800699c:	3184      	adds	r1, #132	; 0x84
 800699e:	4313      	orrs	r3, r2
 80069a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	01db      	lsls	r3, r3, #7
 80069ac:	4413      	add	r3, r2
 80069ae:	3384      	adds	r3, #132	; 0x84
 80069b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4619      	mov	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	440b      	add	r3, r1
 80069be:	3384      	adds	r3, #132	; 0x84
 80069c0:	4619      	mov	r1, r3
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <LTDC_SetConfig+0x330>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	01db      	lsls	r3, r3, #7
 80069d2:	4413      	add	r3, r2
 80069d4:	3384      	adds	r3, #132	; 0x84
 80069d6:	461a      	mov	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	4413      	add	r3, r2
 80069ea:	3384      	adds	r3, #132	; 0x84
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4611      	mov	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	01d2      	lsls	r2, r2, #7
 80069f8:	440a      	add	r2, r1
 80069fa:	3284      	adds	r2, #132	; 0x84
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	6013      	str	r3, [r2, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3724      	adds	r7, #36	; 0x24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	fffff8f8 	.word	0xfffff8f8
 8006a14:	fffff800 	.word	0xfffff800

08006a18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a26:	6013      	str	r3, [r2, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40007000 	.word	0x40007000

08006a38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a66:	f7fd f9a7 	bl	8003db8 <HAL_GetTick>
 8006a6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a6c:	e009      	b.n	8006a82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a6e:	f7fd f9a3 	bl	8003db8 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a7c:	d901      	bls.n	8006a82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e022      	b.n	8006ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a82:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8e:	d1ee      	bne.n	8006a6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0f      	ldr	r2, [pc, #60]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a9c:	f7fd f98c 	bl	8003db8 <HAL_GetTick>
 8006aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006aa2:	e009      	b.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006aa4:	f7fd f988 	bl	8003db8 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab2:	d901      	bls.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e007      	b.n	8006ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac4:	d1ee      	bne.n	8006aa4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	40007000 	.word	0x40007000

08006ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e291      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8087 	beq.w	8006c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006afc:	4b96      	ldr	r3, [pc, #600]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 030c 	and.w	r3, r3, #12
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d00c      	beq.n	8006b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b08:	4b93      	ldr	r3, [pc, #588]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 030c 	and.w	r3, r3, #12
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d112      	bne.n	8006b3a <HAL_RCC_OscConfig+0x62>
 8006b14:	4b90      	ldr	r3, [pc, #576]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b22:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d06c      	beq.n	8006c08 <HAL_RCC_OscConfig+0x130>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d168      	bne.n	8006c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e26b      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b42:	d106      	bne.n	8006b52 <HAL_RCC_OscConfig+0x7a>
 8006b44:	4b84      	ldr	r3, [pc, #528]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a83      	ldr	r2, [pc, #524]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	e02e      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x9c>
 8006b5a:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7e      	ldr	r2, [pc, #504]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	4b7c      	ldr	r3, [pc, #496]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a7b      	ldr	r2, [pc, #492]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e01d      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0xc0>
 8006b7e:	4b76      	ldr	r3, [pc, #472]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a75      	ldr	r2, [pc, #468]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	4b73      	ldr	r3, [pc, #460]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a72      	ldr	r2, [pc, #456]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd8>
 8006b98:	4b6f      	ldr	r3, [pc, #444]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6e      	ldr	r2, [pc, #440]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4b6c      	ldr	r3, [pc, #432]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6b      	ldr	r2, [pc, #428]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fd f8fe 	bl	8003db8 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc0:	f7fd f8fa 	bl	8003db8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	; 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e21f      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	4b61      	ldr	r3, [pc, #388]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0xe8>
 8006bde:	e014      	b.n	8006c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fd f8ea 	bl	8003db8 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fd f8e6 	bl	8003db8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e20b      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	4b57      	ldr	r3, [pc, #348]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x110>
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d069      	beq.n	8006cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c16:	4b50      	ldr	r3, [pc, #320]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c22:	4b4d      	ldr	r3, [pc, #308]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d11c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x190>
 8006c2e:	4b4a      	ldr	r3, [pc, #296]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3a:	4b47      	ldr	r3, [pc, #284]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x17a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e1df      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c52:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	493d      	ldr	r1, [pc, #244]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c66:	e040      	b.n	8006cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d023      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c70:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a38      	ldr	r2, [pc, #224]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fd f89c 	bl	8003db8 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c84:	f7fd f898 	bl	8003db8 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e1bd      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca2:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4929      	ldr	r1, [pc, #164]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]
 8006cb6:	e018      	b.n	8006cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb8:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc4:	f7fd f878 	bl	8003db8 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ccc:	f7fd f874 	bl	8003db8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e199      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cde:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d038      	beq.n	8006d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d019      	beq.n	8006d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfe:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d02:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006d04:	f043 0301 	orr.w	r3, r3, #1
 8006d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0a:	f7fd f855 	bl	8003db8 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d12:	f7fd f851 	bl	8003db8 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e176      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x23a>
 8006d30:	e01a      	b.n	8006d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d36:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <HAL_RCC_OscConfig+0x280>)
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3e:	f7fd f83b 	bl	8003db8 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d44:	e00a      	b.n	8006d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d46:	f7fd f837 	bl	8003db8 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d903      	bls.n	8006d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e15c      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
 8006d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d5c:	4b91      	ldr	r3, [pc, #580]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1ee      	bne.n	8006d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80a4 	beq.w	8006ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d76:	4b8b      	ldr	r3, [pc, #556]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	4a87      	ldr	r2, [pc, #540]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d8e:	4b85      	ldr	r3, [pc, #532]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d9e:	4b82      	ldr	r3, [pc, #520]	; (8006fa8 <HAL_RCC_OscConfig+0x4d0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d118      	bne.n	8006ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006daa:	4b7f      	ldr	r3, [pc, #508]	; (8006fa8 <HAL_RCC_OscConfig+0x4d0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <HAL_RCC_OscConfig+0x4d0>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006db6:	f7fc ffff 	bl	8003db8 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbe:	f7fc fffb 	bl	8003db8 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b64      	cmp	r3, #100	; 0x64
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e120      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd0:	4b75      	ldr	r3, [pc, #468]	; (8006fa8 <HAL_RCC_OscConfig+0x4d0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0f0      	beq.n	8006dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d106      	bne.n	8006df2 <HAL_RCC_OscConfig+0x31a>
 8006de4:	4b6f      	ldr	r3, [pc, #444]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6713      	str	r3, [r2, #112]	; 0x70
 8006df0:	e02d      	b.n	8006e4e <HAL_RCC_OscConfig+0x376>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x33c>
 8006dfa:	4b6a      	ldr	r3, [pc, #424]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a69      	ldr	r2, [pc, #420]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70
 8006e06:	4b67      	ldr	r3, [pc, #412]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	4a66      	ldr	r2, [pc, #408]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e0c:	f023 0304 	bic.w	r3, r3, #4
 8006e10:	6713      	str	r3, [r2, #112]	; 0x70
 8006e12:	e01c      	b.n	8006e4e <HAL_RCC_OscConfig+0x376>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d10c      	bne.n	8006e36 <HAL_RCC_OscConfig+0x35e>
 8006e1c:	4b61      	ldr	r3, [pc, #388]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	6713      	str	r3, [r2, #112]	; 0x70
 8006e28:	4b5e      	ldr	r3, [pc, #376]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
 8006e34:	e00b      	b.n	8006e4e <HAL_RCC_OscConfig+0x376>
 8006e36:	4b5b      	ldr	r3, [pc, #364]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	4a5a      	ldr	r2, [pc, #360]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6713      	str	r3, [r2, #112]	; 0x70
 8006e42:	4b58      	ldr	r3, [pc, #352]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	4a57      	ldr	r2, [pc, #348]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e48:	f023 0304 	bic.w	r3, r3, #4
 8006e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d015      	beq.n	8006e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e56:	f7fc ffaf 	bl	8003db8 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e5c:	e00a      	b.n	8006e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5e:	f7fc ffab 	bl	8003db8 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e0ce      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e74:	4b4b      	ldr	r3, [pc, #300]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0ee      	beq.n	8006e5e <HAL_RCC_OscConfig+0x386>
 8006e80:	e014      	b.n	8006eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e82:	f7fc ff99 	bl	8003db8 <HAL_GetTick>
 8006e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e88:	e00a      	b.n	8006ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e8a:	f7fc ff95 	bl	8003db8 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e0b8      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea0:	4b40      	ldr	r3, [pc, #256]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ee      	bne.n	8006e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d105      	bne.n	8006ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb2:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	4a3b      	ldr	r2, [pc, #236]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80a4 	beq.w	8007010 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ec8:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d06b      	beq.n	8006fac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d149      	bne.n	8006f70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006edc:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a30      	ldr	r2, [pc, #192]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fc ff66 	bl	8003db8 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fc ff62 	bl	8003db8 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e087      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	4313      	orrs	r3, r2
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fc ff36 	bl	8003db8 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f50:	f7fc ff32 	bl	8003db8 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e057      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f62:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x478>
 8006f6e:	e04f      	b.n	8007010 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0b      	ldr	r2, [pc, #44]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fc ff1c 	bl	8003db8 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f84:	f7fc ff18 	bl	8003db8 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e03d      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f96:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <HAL_RCC_OscConfig+0x4cc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4ac>
 8006fa2:	e035      	b.n	8007010 <HAL_RCC_OscConfig+0x538>
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006fac:	4b1b      	ldr	r3, [pc, #108]	; (800701c <HAL_RCC_OscConfig+0x544>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d028      	beq.n	800700c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d121      	bne.n	800700c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d11a      	bne.n	800700c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d111      	bne.n	800700c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800

08007020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e0d0      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007038:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d910      	bls.n	8007068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b67      	ldr	r3, [pc, #412]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 020f 	bic.w	r2, r3, #15
 800704e:	4965      	ldr	r1, [pc, #404]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0b8      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d020      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007080:	4b59      	ldr	r3, [pc, #356]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4a58      	ldr	r2, [pc, #352]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800708a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007098:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4a52      	ldr	r2, [pc, #328]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 800709e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	494d      	ldr	r1, [pc, #308]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d040      	beq.n	8007144 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d115      	bne.n	8007102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e07f      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e2:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e073      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f2:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e06b      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f023 0203 	bic.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4936      	ldr	r1, [pc, #216]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007110:	4313      	orrs	r3, r2
 8007112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007114:	f7fc fe50 	bl	8003db8 <HAL_GetTick>
 8007118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	e00a      	b.n	8007132 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800711c:	f7fc fe4c 	bl	8003db8 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f241 3288 	movw	r2, #5000	; 0x1388
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e053      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 020c 	and.w	r2, r3, #12
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	429a      	cmp	r2, r3
 8007142:	d1eb      	bne.n	800711c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d210      	bcs.n	8007174 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f023 020f 	bic.w	r2, r3, #15
 800715a:	4922      	ldr	r1, [pc, #136]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4313      	orrs	r3, r2
 8007160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e032      	b.n	80071da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4916      	ldr	r1, [pc, #88]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	490e      	ldr	r1, [pc, #56]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071b2:	f000 f821 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80071b6:	4601      	mov	r1, r0
 80071b8:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_RCC_ClockConfig+0x1c8>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <HAL_RCC_ClockConfig+0x1cc>)
 80071c4:	5cd3      	ldrb	r3, [r2, r3]
 80071c6:	fa21 f303 	lsr.w	r3, r1, r3
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x1d0>)
 80071cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCC_ClockConfig+0x1d4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fc fd00 	bl	8003bd8 <HAL_InitTick>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023c00 	.word	0x40023c00
 80071e8:	40023800 	.word	0x40023800
 80071ec:	0800e63c 	.word	0x0800e63c
 80071f0:	20000044 	.word	0x20000044
 80071f4:	20000048 	.word	0x20000048

080071f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	2300      	movs	r3, #0
 8007208:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800720e:	4b50      	ldr	r3, [pc, #320]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 030c 	and.w	r3, r3, #12
 8007216:	2b04      	cmp	r3, #4
 8007218:	d007      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x32>
 800721a:	2b08      	cmp	r3, #8
 800721c:	d008      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0x38>
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 808d 	bne.w	800733e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007224:	4b4b      	ldr	r3, [pc, #300]	; (8007354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007226:	60bb      	str	r3, [r7, #8]
      break;
 8007228:	e08c      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800722a:	4b4b      	ldr	r3, [pc, #300]	; (8007358 <HAL_RCC_GetSysClockFreq+0x160>)
 800722c:	60bb      	str	r3, [r7, #8]
      break;
 800722e:	e089      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007230:	4b47      	ldr	r3, [pc, #284]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007238:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800723a:	4b45      	ldr	r3, [pc, #276]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d023      	beq.n	800728e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007246:	4b42      	ldr	r3, [pc, #264]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	099b      	lsrs	r3, r3, #6
 800724c:	f04f 0400 	mov.w	r4, #0
 8007250:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	ea03 0501 	and.w	r5, r3, r1
 800725c:	ea04 0602 	and.w	r6, r4, r2
 8007260:	4a3d      	ldr	r2, [pc, #244]	; (8007358 <HAL_RCC_GetSysClockFreq+0x160>)
 8007262:	fb02 f106 	mul.w	r1, r2, r6
 8007266:	2200      	movs	r2, #0
 8007268:	fb02 f205 	mul.w	r2, r2, r5
 800726c:	440a      	add	r2, r1
 800726e:	493a      	ldr	r1, [pc, #232]	; (8007358 <HAL_RCC_GetSysClockFreq+0x160>)
 8007270:	fba5 0101 	umull	r0, r1, r5, r1
 8007274:	1853      	adds	r3, r2, r1
 8007276:	4619      	mov	r1, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f04f 0400 	mov.w	r4, #0
 800727e:	461a      	mov	r2, r3
 8007280:	4623      	mov	r3, r4
 8007282:	f7f8 ffc5 	bl	8000210 <__aeabi_uldivmod>
 8007286:	4603      	mov	r3, r0
 8007288:	460c      	mov	r4, r1
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e049      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800728e:	4b30      	ldr	r3, [pc, #192]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	099b      	lsrs	r3, r3, #6
 8007294:	f04f 0400 	mov.w	r4, #0
 8007298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	ea03 0501 	and.w	r5, r3, r1
 80072a4:	ea04 0602 	and.w	r6, r4, r2
 80072a8:	4629      	mov	r1, r5
 80072aa:	4632      	mov	r2, r6
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	0154      	lsls	r4, r2, #5
 80072b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072ba:	014b      	lsls	r3, r1, #5
 80072bc:	4619      	mov	r1, r3
 80072be:	4622      	mov	r2, r4
 80072c0:	1b49      	subs	r1, r1, r5
 80072c2:	eb62 0206 	sbc.w	r2, r2, r6
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f04f 0400 	mov.w	r4, #0
 80072ce:	0194      	lsls	r4, r2, #6
 80072d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072d4:	018b      	lsls	r3, r1, #6
 80072d6:	1a5b      	subs	r3, r3, r1
 80072d8:	eb64 0402 	sbc.w	r4, r4, r2
 80072dc:	f04f 0100 	mov.w	r1, #0
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	00e2      	lsls	r2, r4, #3
 80072e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072ea:	00d9      	lsls	r1, r3, #3
 80072ec:	460b      	mov	r3, r1
 80072ee:	4614      	mov	r4, r2
 80072f0:	195b      	adds	r3, r3, r5
 80072f2:	eb44 0406 	adc.w	r4, r4, r6
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	02a2      	lsls	r2, r4, #10
 8007300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007304:	0299      	lsls	r1, r3, #10
 8007306:	460b      	mov	r3, r1
 8007308:	4614      	mov	r4, r2
 800730a:	4618      	mov	r0, r3
 800730c:	4621      	mov	r1, r4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f04f 0400 	mov.w	r4, #0
 8007314:	461a      	mov	r2, r3
 8007316:	4623      	mov	r3, r4
 8007318:	f7f8 ff7a 	bl	8000210 <__aeabi_uldivmod>
 800731c:	4603      	mov	r3, r0
 800731e:	460c      	mov	r4, r1
 8007320:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_RCC_GetSysClockFreq+0x158>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	3301      	adds	r3, #1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	60bb      	str	r3, [r7, #8]
      break;
 800733c:	e002      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007340:	60bb      	str	r3, [r7, #8]
      break;
 8007342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007344:	68bb      	ldr	r3, [r7, #8]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800
 8007354:	00f42400 	.word	0x00f42400
 8007358:	017d7840 	.word	0x017d7840

0800735c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007360:	4b03      	ldr	r3, [pc, #12]	; (8007370 <HAL_RCC_GetHCLKFreq+0x14>)
 8007362:	681b      	ldr	r3, [r3, #0]
}
 8007364:	4618      	mov	r0, r3
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000044 	.word	0x20000044

08007374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007378:	f7ff fff0 	bl	800735c <HAL_RCC_GetHCLKFreq>
 800737c:	4601      	mov	r1, r0
 800737e:	4b05      	ldr	r3, [pc, #20]	; (8007394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	0a9b      	lsrs	r3, r3, #10
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	4a03      	ldr	r2, [pc, #12]	; (8007398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007390:	4618      	mov	r0, r3
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40023800 	.word	0x40023800
 8007398:	0800e64c 	.word	0x0800e64c

0800739c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073a0:	f7ff ffdc 	bl	800735c <HAL_RCC_GetHCLKFreq>
 80073a4:	4601      	mov	r1, r0
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	0b5b      	lsrs	r3, r3, #13
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b2:	5cd3      	ldrb	r3, [r2, r3]
 80073b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40023800 	.word	0x40023800
 80073c0:	0800e64c 	.word	0x0800e64c

080073c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	220f      	movs	r2, #15
 80073d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073d4:	4b12      	ldr	r3, [pc, #72]	; (8007420 <HAL_RCC_GetClockConfig+0x5c>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0203 	and.w	r2, r3, #3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073e0:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <HAL_RCC_GetClockConfig+0x5c>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <HAL_RCC_GetClockConfig+0x5c>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <HAL_RCC_GetClockConfig+0x5c>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007406:	4b07      	ldr	r3, [pc, #28]	; (8007424 <HAL_RCC_GetClockConfig+0x60>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 020f 	and.w	r2, r3, #15
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800
 8007424:	40023c00 	.word	0x40023c00

08007428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d012      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007450:	4b69      	ldr	r3, [pc, #420]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a68      	ldr	r2, [pc, #416]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007456:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800745a:	6093      	str	r3, [r2, #8]
 800745c:	4b66      	ldr	r3, [pc, #408]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	4964      	ldr	r1, [pc, #400]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007466:	4313      	orrs	r3, r2
 8007468:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007472:	2301      	movs	r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d017      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007482:	4b5d      	ldr	r3, [pc, #372]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	4959      	ldr	r1, [pc, #356]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074a0:	d101      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80074a2:	2301      	movs	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80074ae:	2301      	movs	r3, #1
 80074b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d017      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074be:	4b4e      	ldr	r3, [pc, #312]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	494a      	ldr	r1, [pc, #296]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074dc:	d101      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80074de:	2301      	movs	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80074fa:	2301      	movs	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 808b 	beq.w	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800750c:	4b3a      	ldr	r3, [pc, #232]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	4a39      	ldr	r2, [pc, #228]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007516:	6413      	str	r3, [r2, #64]	; 0x40
 8007518:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007524:	4b35      	ldr	r3, [pc, #212]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a34      	ldr	r2, [pc, #208]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800752a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800752e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007530:	f7fc fc42 	bl	8003db8 <HAL_GetTick>
 8007534:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007536:	e008      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007538:	f7fc fc3e 	bl	8003db8 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e355      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800754a:	4b2c      	ldr	r3, [pc, #176]	; (80075fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007556:	4b28      	ldr	r3, [pc, #160]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d035      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	429a      	cmp	r2, r3
 8007572:	d02e      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800757e:	4b1e      	ldr	r3, [pc, #120]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800758a:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a1a      	ldr	r2, [pc, #104]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007594:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007596:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800759c:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d114      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fc fc06 	bl	8003db8 <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ae:	e00a      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b0:	f7fc fc02 	bl	8003db8 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e317      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0ee      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075de:	d111      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075ee:	400b      	ands	r3, r1
 80075f0:	4901      	ldr	r1, [pc, #4]	; (80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
 80075f6:	e00b      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40007000 	.word	0x40007000
 8007600:	0ffffcff 	.word	0x0ffffcff
 8007604:	4bb0      	ldr	r3, [pc, #704]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4aaf      	ldr	r2, [pc, #700]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800760a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800760e:	6093      	str	r3, [r2, #8]
 8007610:	4bad      	ldr	r3, [pc, #692]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800761c:	49aa      	ldr	r1, [pc, #680]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800761e:	4313      	orrs	r3, r2
 8007620:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800762e:	4ba6      	ldr	r3, [pc, #664]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007634:	4aa4      	ldr	r2, [pc, #656]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800763a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800763e:	4ba2      	ldr	r3, [pc, #648]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007640:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	499f      	ldr	r1, [pc, #636]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800764a:	4313      	orrs	r3, r2
 800764c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00a      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800765c:	4b9a      	ldr	r3, [pc, #616]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800766a:	4997      	ldr	r1, [pc, #604]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800767e:	4b92      	ldr	r3, [pc, #584]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800768c:	498e      	ldr	r1, [pc, #568]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800768e:	4313      	orrs	r3, r2
 8007690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076a0:	4b89      	ldr	r3, [pc, #548]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ae:	4986      	ldr	r1, [pc, #536]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076c2:	4b81      	ldr	r3, [pc, #516]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d0:	497d      	ldr	r1, [pc, #500]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076e4:	4b78      	ldr	r3, [pc, #480]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ea:	f023 0203 	bic.w	r2, r3, #3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	4975      	ldr	r1, [pc, #468]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007706:	4b70      	ldr	r3, [pc, #448]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770c:	f023 020c 	bic.w	r2, r3, #12
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	496c      	ldr	r1, [pc, #432]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00a      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007728:	4b67      	ldr	r3, [pc, #412]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	4964      	ldr	r1, [pc, #400]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800774a:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007750:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007758:	495b      	ldr	r1, [pc, #364]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800776c:	4b56      	ldr	r3, [pc, #344]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	4953      	ldr	r1, [pc, #332]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800777c:	4313      	orrs	r3, r2
 800777e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800778e:	4b4e      	ldr	r3, [pc, #312]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007794:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	494a      	ldr	r1, [pc, #296]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80077b0:	4b45      	ldr	r3, [pc, #276]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077be:	4942      	ldr	r1, [pc, #264]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80077d2:	4b3d      	ldr	r3, [pc, #244]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e0:	4939      	ldr	r1, [pc, #228]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077f4:	4b34      	ldr	r3, [pc, #208]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007802:	4931      	ldr	r1, [pc, #196]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007804:	4313      	orrs	r3, r2
 8007806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007816:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007824:	4928      	ldr	r1, [pc, #160]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007834:	d101      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007836:	2301      	movs	r3, #1
 8007838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007846:	2301      	movs	r3, #1
 8007848:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007856:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800785c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	4918      	ldr	r1, [pc, #96]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007866:	4313      	orrs	r3, r2
 8007868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007888:	490f      	ldr	r1, [pc, #60]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d005      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800789e:	f040 80d8 	bne.w	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ae:	f7fc fa83 	bl	8003db8 <HAL_GetTick>
 80078b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078b4:	e00a      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078b6:	f7fc fa7f 	bl	8003db8 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b64      	cmp	r3, #100	; 0x64
 80078c2:	d903      	bls.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e196      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80078c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078cc:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1ee      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d021      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11d      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078ec:	4b64      	ldr	r3, [pc, #400]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078fa:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	019a      	lsls	r2, r3, #6
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	041b      	lsls	r3, r3, #16
 8007912:	431a      	orrs	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	061b      	lsls	r3, r3, #24
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	071b      	lsls	r3, r3, #28
 8007920:	4957      	ldr	r1, [pc, #348]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007946:	2b00      	cmp	r3, #0
 8007948:	d02e      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007952:	d129      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007954:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007968:	0f1b      	lsrs	r3, r3, #28
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	019a      	lsls	r2, r3, #6
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	041b      	lsls	r3, r3, #16
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	061b      	lsls	r3, r3, #24
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	071b      	lsls	r3, r3, #28
 8007988:	493d      	ldr	r1, [pc, #244]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007990:	4b3b      	ldr	r3, [pc, #236]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007996:	f023 021f 	bic.w	r2, r3, #31
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	3b01      	subs	r3, #1
 80079a0:	4937      	ldr	r1, [pc, #220]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01d      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079b4:	4b32      	ldr	r3, [pc, #200]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ba:	0e1b      	lsrs	r3, r3, #24
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079c2:	4b2f      	ldr	r3, [pc, #188]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c8:	0f1b      	lsrs	r3, r3, #28
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	019a      	lsls	r2, r3, #6
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	431a      	orrs	r2, r3
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	431a      	orrs	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	071b      	lsls	r3, r3, #28
 80079e8:	4925      	ldr	r1, [pc, #148]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d011      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	019a      	lsls	r2, r3, #6
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	061b      	lsls	r3, r3, #24
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	071b      	lsls	r3, r3, #28
 8007a18:	4919      	ldr	r1, [pc, #100]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a20:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2c:	f7fc f9c4 	bl	8003db8 <HAL_GetTick>
 8007a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a32:	e008      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a34:	f7fc f9c0 	bl	8003db8 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	; 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e0d7      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a46:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f0      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 80cd 	bne.w	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7fc f9a7 	bl	8003db8 <HAL_GetTick>
 8007a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a6e:	f7fc f9a3 	bl	8003db8 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b64      	cmp	r3, #100	; 0x64
 8007a7a:	d903      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e0ba      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a84:	4b5e      	ldr	r3, [pc, #376]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a90:	d0ed      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02e      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d12a      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007aba:	4b51      	ldr	r3, [pc, #324]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ac8:	4b4d      	ldr	r3, [pc, #308]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	019a      	lsls	r2, r3, #6
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	041b      	lsls	r3, r3, #16
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	061b      	lsls	r3, r3, #24
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	071b      	lsls	r3, r3, #28
 8007aee:	4944      	ldr	r1, [pc, #272]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007af6:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	3b01      	subs	r3, #1
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	493d      	ldr	r1, [pc, #244]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d022      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b24:	d11d      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b26:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	0e1b      	lsrs	r3, r3, #24
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b34:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	0f1b      	lsrs	r3, r3, #28
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	019a      	lsls	r2, r3, #6
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	061b      	lsls	r3, r3, #24
 8007b54:	431a      	orrs	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	071b      	lsls	r3, r3, #28
 8007b5a:	4929      	ldr	r1, [pc, #164]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d028      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b7c:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	019a      	lsls	r2, r3, #6
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	431a      	orrs	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	071b      	lsls	r3, r3, #28
 8007ba2:	4917      	ldr	r1, [pc, #92]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4911      	ldr	r1, [pc, #68]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bcc:	f7fc f8f4 	bl	8003db8 <HAL_GetTick>
 8007bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bd4:	f7fc f8f0 	bl	8003db8 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b64      	cmp	r3, #100	; 0x64
 8007be0:	d901      	bls.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e007      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf2:	d1ef      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40023800 	.word	0x40023800

08007c04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e06b      	b.n	8007cee <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7f5b      	ldrb	r3, [r3, #29]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fb fd16 	bl	8003658 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	22ca      	movs	r2, #202	; 0xca
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2253      	movs	r2, #83	; 0x53
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb00 	bl	8008248 <RTC_EnterInitMode>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d008      	beq.n	8007c60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	22ff      	movs	r2, #255	; 0xff
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e046      	b.n	8007cee <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6899      	ldr	r1, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	4b23      	ldr	r3, [pc, #140]	; (8007cf8 <HAL_RTC_Init+0xf4>)
 8007c6c:	400b      	ands	r3, r1
 8007c6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6899      	ldr	r1, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	431a      	orrs	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	68d2      	ldr	r2, [r2, #12]
 8007c96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6919      	ldr	r1, [r3, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	041a      	lsls	r2, r3, #16
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cba:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0208 	bic.w	r2, r2, #8
 8007cca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	22ff      	movs	r2, #255	; 0xff
 8007ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007cec:	2300      	movs	r3, #0
  }
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	ff8fffbf 	.word	0xff8fffbf

08007cfc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7f1b      	ldrb	r3, [r3, #28]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_RTC_SetTime+0x1c>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e0a8      	b.n	8007e6a <HAL_RTC_SetTime+0x16e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2202      	movs	r2, #2
 8007d22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d126      	bne.n	8007d78 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 faac 	bl	80082a0 <RTC_ByteToBcd2>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 faa5 	bl	80082a0 <RTC_ByteToBcd2>
 8007d56:	4603      	mov	r3, r0
 8007d58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d5a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fa9d 	bl	80082a0 <RTC_ByteToBcd2>
 8007d66:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	7b1b      	ldrb	r3, [r3, #12]
 8007d70:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e018      	b.n	8007daa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007d98:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007d9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	7b1b      	ldrb	r3, [r3, #12]
 8007da4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	22ca      	movs	r2, #202	; 0xca
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2253      	movs	r2, #83	; 0x53
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fa44 	bl	8008248 <RTC_EnterInitMode>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	22ff      	movs	r2, #255	; 0xff
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e045      	b.n	8007e6a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	6979      	ldr	r1, [r7, #20]
 8007de4:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <HAL_RTC_SetTime+0x178>)
 8007de6:	400b      	ands	r3, r1
 8007de8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007df8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d111      	bne.n	8007e54 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f9e1 	bl	80081f8 <HAL_RTC_WaitForSynchro>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	22ff      	movs	r2, #255	; 0xff
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2204      	movs	r2, #4
 8007e48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e00a      	b.n	8007e6a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007e68:	2300      	movs	r3, #0
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}
 8007e72:	bf00      	nop
 8007e74:	007f7f7f 	.word	0x007f7f7f

08007e78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	7f1b      	ldrb	r3, [r3, #28]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_RTC_SetDate+0x1c>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e092      	b.n	8007fba <HAL_RTC_SetDate+0x142>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10e      	bne.n	8007ec4 <HAL_RTC_SetDate+0x4c>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	330a      	adds	r3, #10
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d11c      	bne.n	8007f04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	78db      	ldrb	r3, [r3, #3]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f9e6 	bl	80082a0 <RTC_ByteToBcd2>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f9df 	bl	80082a0 <RTC_ByteToBcd2>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ee6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	789b      	ldrb	r3, [r3, #2]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 f9d7 	bl	80082a0 <RTC_ByteToBcd2>
 8007ef2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ef4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e00e      	b.n	8007f22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f10:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007f16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	22ca      	movs	r2, #202	; 0xca
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2253      	movs	r2, #83	; 0x53
 8007f30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f988 	bl	8008248 <RTC_EnterInitMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	22ff      	movs	r2, #255	; 0xff
 8007f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e031      	b.n	8007fba <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <HAL_RTC_SetDate+0x14c>)
 8007f5e:	400b      	ands	r3, r1
 8007f60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f70:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d111      	bne.n	8007fa4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f939 	bl	80081f8 <HAL_RTC_WaitForSynchro>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2204      	movs	r2, #4
 8007f98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e00a      	b.n	8007fba <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	22ff      	movs	r2, #255	; 0xff
 8007faa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
  }
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd90      	pop	{r4, r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	00ffff3f 	.word	0x00ffff3f

08007fc8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b089      	sub	sp, #36	; 0x24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	7f1b      	ldrb	r3, [r3, #28]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_RTC_SetAlarm+0x24>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e101      	b.n	80081f0 <HAL_RTC_SetAlarm+0x228>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d137      	bne.n	800806e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f942 	bl	80082a0 <RTC_ByteToBcd2>
 800801c:	4603      	mov	r3, r0
 800801e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f93b 	bl	80082a0 <RTC_ByteToBcd2>
 800802a:	4603      	mov	r3, r0
 800802c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800802e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	789b      	ldrb	r3, [r3, #2]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f933 	bl	80082a0 <RTC_ByteToBcd2>
 800803a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800803c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7b1b      	ldrb	r3, [r3, #12]
 8008044:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008046:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f925 	bl	80082a0 <RTC_ByteToBcd2>
 8008056:	4603      	mov	r3, r0
 8008058:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800805a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008062:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008068:	4313      	orrs	r3, r2
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	e023      	b.n	80080b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800808e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008094:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	7b1b      	ldrb	r3, [r3, #12]
 800809a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800809c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80080a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80080ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80080b2:	4313      	orrs	r3, r2
 80080b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	22ca      	movs	r2, #202	; 0xca
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2253      	movs	r2, #83	; 0x53
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080da:	d13f      	bne.n	800815c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080fc:	f7fb fe5c 	bl	8003db8 <HAL_GetTick>
 8008100:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008102:	e013      	b.n	800812c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008104:	f7fb fe58 	bl	8003db8 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008112:	d90b      	bls.n	800812c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2203      	movs	r2, #3
 8008120:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e061      	b.n	80081f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0e4      	beq.n	8008104 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008158:	609a      	str	r2, [r3, #8]
 800815a:	e03e      	b.n	80081da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800816a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800817a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800817c:	f7fb fe1c 	bl	8003db8 <HAL_GetTick>
 8008180:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008182:	e013      	b.n	80081ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008184:	f7fb fe18 	bl	8003db8 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008192:	d90b      	bls.n	80081ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	22ff      	movs	r2, #255	; 0xff
 800819a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2203      	movs	r2, #3
 80081a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e021      	b.n	80081f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0e4      	beq.n	8008184 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	22ff      	movs	r2, #255	; 0xff
 80081e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3724      	adds	r7, #36	; 0x24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd90      	pop	{r4, r7, pc}

080081f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008212:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008214:	f7fb fdd0 	bl	8003db8 <HAL_GetTick>
 8008218:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800821a:	e009      	b.n	8008230 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800821c:	f7fb fdcc 	bl	8003db8 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800822a:	d901      	bls.n	8008230 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e007      	b.n	8008240 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0ee      	beq.n	800821c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d119      	bne.n	8008296 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800826c:	f7fb fda4 	bl	8003db8 <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008272:	e009      	b.n	8008288 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008274:	f7fb fda0 	bl	8003db8 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008282:	d901      	bls.n	8008288 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e007      	b.n	8008298 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0ee      	beq.n	8008274 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80082ae:	e005      	b.n	80082bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3301      	adds	r3, #1
 80082b4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	3b0a      	subs	r3, #10
 80082ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d8f6      	bhi.n	80082b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b2db      	uxtb	r3, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	7f1b      	ldrb	r3, [r3, #28]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e03e      	b.n	8008376 <HAL_RTCEx_SetTimeStamp+0x9a>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2202      	movs	r2, #2
 8008302:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	4b1e      	ldr	r3, [pc, #120]	; (8008384 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800830c:	4013      	ands	r3, r2
 800830e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	22ca      	movs	r2, #202	; 0xca
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2253      	movs	r2, #83	; 0x53
 8008326:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0206 	bic.w	r2, r2, #6
 8008336:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	430a      	orrs	r2, r1
 8008346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800835e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	22ff      	movs	r2, #255	; 0xff
 8008366:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	fffff7f7 	.word	0xfffff7f7

08008388 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e025      	b.n	80083e8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7fb fc07 	bl	8003bc4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f001 fff7 	bl	800a3bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	f002 f861 	bl	800a4a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d101      	bne.n	800840c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
 800840a:	e018      	b.n	800843e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f002 f8bf 	bl	800a5a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b02      	cmp	r3, #2
 8008428:	d104      	bne.n	8008434 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2205      	movs	r2, #5
 800842e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008432:	e003      	b.n	800843c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d101      	bne.n	8008460 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
 800845e:	e00e      	b.n	800847e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f002 f8b7 	bl	800a5e2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e084      	b.n	80085a2 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fb f8ea 	bl	800368c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d8:	d902      	bls.n	80084e0 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	e002      	b.n	80084e6 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084ee:	d007      	beq.n	8008500 <HAL_SPI_Init+0x7a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084f8:	d002      	beq.n	8008500 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008510:	d903      	bls.n	800851a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	631a      	str	r2, [r3, #48]	; 0x30
 8008518:	e002      	b.n	8008520 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	ea42 0103 	orr.w	r1, r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	0c1b      	lsrs	r3, r3, #16
 8008560:	f003 0204 	and.w	r2, r3, #4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	ea42 0103 	orr.w	r1, r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e01d      	b.n	80085f8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d106      	bne.n	80085d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fb f8cd 	bl	8003770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f000 fbc3 	bl	8008d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0201 	orr.w	r2, r2, #1
 8008616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <HAL_TIM_Base_Start_IT+0x50>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b06      	cmp	r3, #6
 8008628:	d00b      	beq.n	8008642 <HAL_TIM_Base_Start_IT+0x42>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008630:	d007      	beq.n	8008642 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	00010007 	.word	0x00010007

08008654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e01d      	b.n	80086a2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f815 	bl	80086aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fb6e 	bl	8008d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d122      	bne.n	800871a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d11b      	bne.n	800871a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f06f 0202 	mvn.w	r2, #2
 80086ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fb19 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008706:	e005      	b.n	8008714 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fb0b 	bl	8008d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fb1c 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b04      	cmp	r3, #4
 8008726:	d122      	bne.n	800876e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d11b      	bne.n	800876e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0204 	mvn.w	r2, #4
 800873e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 faef 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 800875a:	e005      	b.n	8008768 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fae1 	bl	8008d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 faf2 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b08      	cmp	r3, #8
 800877a:	d122      	bne.n	80087c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b08      	cmp	r3, #8
 8008788:	d11b      	bne.n	80087c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f06f 0208 	mvn.w	r2, #8
 8008792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2204      	movs	r2, #4
 8008798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fac5 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 80087ae:	e005      	b.n	80087bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fab7 	bl	8008d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fac8 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d122      	bne.n	8008816 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d11b      	bne.n	8008816 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f06f 0210 	mvn.w	r2, #16
 80087e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2208      	movs	r2, #8
 80087ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fa9b 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8008802:	e005      	b.n	8008810 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa8d 	bl	8008d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa9e 	bl	8008d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	d10e      	bne.n	8008842 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b01      	cmp	r3, #1
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f06f 0201 	mvn.w	r2, #1
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7f9 fd8b 	bl	8002358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884c:	2b80      	cmp	r3, #128	; 0x80
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 ffb9 	bl	80097e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887c:	d10e      	bne.n	800889c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008888:	2b80      	cmp	r3, #128	; 0x80
 800888a:	d107      	bne.n	800889c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 ffac 	bl	80097f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d10e      	bne.n	80088c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b40      	cmp	r3, #64	; 0x40
 80088b6:	d107      	bne.n	80088c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa4c 	bl	8008d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d10e      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	d107      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f06f 0220 	mvn.w	r2, #32
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 ff6c 	bl	80097cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008912:	2302      	movs	r3, #2
 8008914:	e105      	b.n	8008b22 <HAL_TIM_PWM_ConfigChannel+0x226>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2202      	movs	r2, #2
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b14      	cmp	r3, #20
 800892a:	f200 80f0 	bhi.w	8008b0e <HAL_TIM_PWM_ConfigChannel+0x212>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008989 	.word	0x08008989
 8008938:	08008b0f 	.word	0x08008b0f
 800893c:	08008b0f 	.word	0x08008b0f
 8008940:	08008b0f 	.word	0x08008b0f
 8008944:	080089c9 	.word	0x080089c9
 8008948:	08008b0f 	.word	0x08008b0f
 800894c:	08008b0f 	.word	0x08008b0f
 8008950:	08008b0f 	.word	0x08008b0f
 8008954:	08008a0b 	.word	0x08008a0b
 8008958:	08008b0f 	.word	0x08008b0f
 800895c:	08008b0f 	.word	0x08008b0f
 8008960:	08008b0f 	.word	0x08008b0f
 8008964:	08008a4b 	.word	0x08008a4b
 8008968:	08008b0f 	.word	0x08008b0f
 800896c:	08008b0f 	.word	0x08008b0f
 8008970:	08008b0f 	.word	0x08008b0f
 8008974:	08008a8d 	.word	0x08008a8d
 8008978:	08008b0f 	.word	0x08008b0f
 800897c:	08008b0f 	.word	0x08008b0f
 8008980:	08008b0f 	.word	0x08008b0f
 8008984:	08008acd 	.word	0x08008acd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fa90 	bl	8008eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0208 	orr.w	r2, r2, #8
 80089a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0204 	bic.w	r2, r2, #4
 80089b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6999      	ldr	r1, [r3, #24]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	619a      	str	r2, [r3, #24]
      break;
 80089c6:	e0a3      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fae2 	bl	8008f98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6999      	ldr	r1, [r3, #24]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	021a      	lsls	r2, r3, #8
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	619a      	str	r2, [r3, #24]
      break;
 8008a08:	e082      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fb39 	bl	8009088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0208 	orr.w	r2, r2, #8
 8008a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0204 	bic.w	r2, r2, #4
 8008a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69d9      	ldr	r1, [r3, #28]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	61da      	str	r2, [r3, #28]
      break;
 8008a48:	e062      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fb8f 	bl	8009174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69d9      	ldr	r1, [r3, #28]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	021a      	lsls	r2, r3, #8
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	61da      	str	r2, [r3, #28]
      break;
 8008a8a:	e041      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fbc6 	bl	8009224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0208 	orr.w	r2, r2, #8
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0204 	bic.w	r2, r2, #4
 8008ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008aca:	e021      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fbf8 	bl	80092c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	021a      	lsls	r2, r3, #8
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b0c:	e000      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008b0e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d101      	bne.n	8008b44 <HAL_TIM_ConfigClockSource+0x18>
 8008b40:	2302      	movs	r3, #2
 8008b42:	e0a6      	b.n	8008c92 <HAL_TIM_ConfigClockSource+0x166>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4b4f      	ldr	r3, [pc, #316]	; (8008c9c <HAL_TIM_ConfigClockSource+0x170>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d067      	beq.n	8008c4c <HAL_TIM_ConfigClockSource+0x120>
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d80b      	bhi.n	8008b98 <HAL_TIM_ConfigClockSource+0x6c>
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d073      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x140>
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d802      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x62>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d06f      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b8c:	e078      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d06c      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x140>
 8008b92:	2b30      	cmp	r3, #48	; 0x30
 8008b94:	d06a      	beq.n	8008c6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008b96:	e073      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008b98:	2b70      	cmp	r3, #112	; 0x70
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x8c>
 8008b9c:	2b70      	cmp	r3, #112	; 0x70
 8008b9e:	d804      	bhi.n	8008baa <HAL_TIM_ConfigClockSource+0x7e>
 8008ba0:	2b50      	cmp	r3, #80	; 0x50
 8008ba2:	d033      	beq.n	8008c0c <HAL_TIM_ConfigClockSource+0xe0>
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d041      	beq.n	8008c2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008ba8:	e06a      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bae:	d066      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x152>
 8008bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb4:	d017      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008bb6:	e063      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	6899      	ldr	r1, [r3, #8]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f000 fcd4 	bl	8009574 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	609a      	str	r2, [r3, #8]
      break;
 8008be4:	e04c      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6899      	ldr	r1, [r3, #8]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f000 fcbd 	bl	8009574 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c08:	609a      	str	r2, [r3, #8]
      break;
 8008c0a:	e039      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6859      	ldr	r1, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f000 fc31 	bl	8009480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2150      	movs	r1, #80	; 0x50
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fc8a 	bl	800953e <TIM_ITRx_SetConfig>
      break;
 8008c2a:	e029      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	6859      	ldr	r1, [r3, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f000 fc50 	bl	80094de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2160      	movs	r1, #96	; 0x60
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fc7a 	bl	800953e <TIM_ITRx_SetConfig>
      break;
 8008c4a:	e019      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	6859      	ldr	r1, [r3, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f000 fc11 	bl	8009480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2140      	movs	r1, #64	; 0x40
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fc6a 	bl	800953e <TIM_ITRx_SetConfig>
      break;
 8008c6a:	e009      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f000 fc61 	bl	800953e <TIM_ITRx_SetConfig>
      break;
 8008c7c:	e000      	b.n	8008c80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	fffeff88 	.word	0xfffeff88

08008ca0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e031      	b.n	8008d1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb50 	bl	8009370 <TIM_SlaveTimer_SetConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e018      	b.n	8008d1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a40      	ldr	r2, [pc, #256]	; (8008e88 <TIM_Base_SetConfig+0x114>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d013      	beq.n	8008db4 <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d92:	d00f      	beq.n	8008db4 <TIM_Base_SetConfig+0x40>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a3d      	ldr	r2, [pc, #244]	; (8008e8c <TIM_Base_SetConfig+0x118>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <TIM_Base_SetConfig+0x40>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a3c      	ldr	r2, [pc, #240]	; (8008e90 <TIM_Base_SetConfig+0x11c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d007      	beq.n	8008db4 <TIM_Base_SetConfig+0x40>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a3b      	ldr	r2, [pc, #236]	; (8008e94 <TIM_Base_SetConfig+0x120>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <TIM_Base_SetConfig+0x40>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a3a      	ldr	r2, [pc, #232]	; (8008e98 <TIM_Base_SetConfig+0x124>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d108      	bne.n	8008dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a2f      	ldr	r2, [pc, #188]	; (8008e88 <TIM_Base_SetConfig+0x114>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d02b      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd4:	d027      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2c      	ldr	r2, [pc, #176]	; (8008e8c <TIM_Base_SetConfig+0x118>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d023      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2b      	ldr	r2, [pc, #172]	; (8008e90 <TIM_Base_SetConfig+0x11c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d01f      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a2a      	ldr	r2, [pc, #168]	; (8008e94 <TIM_Base_SetConfig+0x120>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d01b      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a29      	ldr	r2, [pc, #164]	; (8008e98 <TIM_Base_SetConfig+0x124>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d017      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a28      	ldr	r2, [pc, #160]	; (8008e9c <TIM_Base_SetConfig+0x128>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d013      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a27      	ldr	r2, [pc, #156]	; (8008ea0 <TIM_Base_SetConfig+0x12c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00f      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a26      	ldr	r2, [pc, #152]	; (8008ea4 <TIM_Base_SetConfig+0x130>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00b      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a25      	ldr	r2, [pc, #148]	; (8008ea8 <TIM_Base_SetConfig+0x134>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a24      	ldr	r2, [pc, #144]	; (8008eac <TIM_Base_SetConfig+0x138>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_Base_SetConfig+0xb2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a23      	ldr	r2, [pc, #140]	; (8008eb0 <TIM_Base_SetConfig+0x13c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d108      	bne.n	8008e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <TIM_Base_SetConfig+0x114>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_Base_SetConfig+0xf8>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a0c      	ldr	r2, [pc, #48]	; (8008e98 <TIM_Base_SetConfig+0x124>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d103      	bne.n	8008e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	615a      	str	r2, [r3, #20]
}
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800
 8008ea8:	40001800 	.word	0x40001800
 8008eac:	40001c00 	.word	0x40001c00
 8008eb0:	40002000 	.word	0x40002000

08008eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4b2b      	ldr	r3, [pc, #172]	; (8008f8c <TIM_OC1_SetConfig+0xd8>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 0302 	bic.w	r3, r3, #2
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <TIM_OC1_SetConfig+0xdc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d003      	beq.n	8008f18 <TIM_OC1_SetConfig+0x64>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a20      	ldr	r2, [pc, #128]	; (8008f94 <TIM_OC1_SetConfig+0xe0>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d10c      	bne.n	8008f32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 0308 	bic.w	r3, r3, #8
 8008f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f023 0304 	bic.w	r3, r3, #4
 8008f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a16      	ldr	r2, [pc, #88]	; (8008f90 <TIM_OC1_SetConfig+0xdc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d003      	beq.n	8008f42 <TIM_OC1_SetConfig+0x8e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <TIM_OC1_SetConfig+0xe0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d111      	bne.n	8008f66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	621a      	str	r2, [r3, #32]
}
 8008f80:	bf00      	nop
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	fffeff8f 	.word	0xfffeff8f
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40010400 	.word	0x40010400

08008f98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0210 	bic.w	r2, r3, #16
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4b2e      	ldr	r3, [pc, #184]	; (800907c <TIM_OC2_SetConfig+0xe4>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f023 0320 	bic.w	r3, r3, #32
 8008fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a23      	ldr	r2, [pc, #140]	; (8009080 <TIM_OC2_SetConfig+0xe8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_OC2_SetConfig+0x68>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a22      	ldr	r2, [pc, #136]	; (8009084 <TIM_OC2_SetConfig+0xec>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10d      	bne.n	800901c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	4313      	orrs	r3, r2
 8009012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800901a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a18      	ldr	r2, [pc, #96]	; (8009080 <TIM_OC2_SetConfig+0xe8>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d003      	beq.n	800902c <TIM_OC2_SetConfig+0x94>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a17      	ldr	r2, [pc, #92]	; (8009084 <TIM_OC2_SetConfig+0xec>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d113      	bne.n	8009054 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800903a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	621a      	str	r2, [r3, #32]
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	feff8fff 	.word	0xfeff8fff
 8009080:	40010000 	.word	0x40010000
 8009084:	40010400 	.word	0x40010400

08009088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <TIM_OC3_SetConfig+0xe0>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	021b      	lsls	r3, r3, #8
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a22      	ldr	r2, [pc, #136]	; (800916c <TIM_OC3_SetConfig+0xe4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d003      	beq.n	80090ee <TIM_OC3_SetConfig+0x66>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a21      	ldr	r2, [pc, #132]	; (8009170 <TIM_OC3_SetConfig+0xe8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d10d      	bne.n	800910a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a17      	ldr	r2, [pc, #92]	; (800916c <TIM_OC3_SetConfig+0xe4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d003      	beq.n	800911a <TIM_OC3_SetConfig+0x92>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a16      	ldr	r2, [pc, #88]	; (8009170 <TIM_OC3_SetConfig+0xe8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d113      	bne.n	8009142 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	4313      	orrs	r3, r2
 8009134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	621a      	str	r2, [r3, #32]
}
 800915c:	bf00      	nop
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	fffeff8f 	.word	0xfffeff8f
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400

08009174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <TIM_OC4_SetConfig+0xa4>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	031b      	lsls	r3, r3, #12
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a13      	ldr	r2, [pc, #76]	; (800921c <TIM_OC4_SetConfig+0xa8>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_OC4_SetConfig+0x68>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a12      	ldr	r2, [pc, #72]	; (8009220 <TIM_OC4_SetConfig+0xac>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d109      	bne.n	80091f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	019b      	lsls	r3, r3, #6
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	feff8fff 	.word	0xfeff8fff
 800921c:	40010000 	.word	0x40010000
 8009220:	40010400 	.word	0x40010400

08009224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <TIM_OC5_SetConfig+0x98>)
 8009250:	4013      	ands	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a12      	ldr	r2, [pc, #72]	; (80092c0 <TIM_OC5_SetConfig+0x9c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d003      	beq.n	8009282 <TIM_OC5_SetConfig+0x5e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a11      	ldr	r2, [pc, #68]	; (80092c4 <TIM_OC5_SetConfig+0xa0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d109      	bne.n	8009296 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009288:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	621a      	str	r2, [r3, #32]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	fffeff8f 	.word	0xfffeff8f
 80092c0:	40010000 	.word	0x40010000
 80092c4:	40010400 	.word	0x40010400

080092c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <TIM_OC6_SetConfig+0x9c>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800930a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	051b      	lsls	r3, r3, #20
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a13      	ldr	r2, [pc, #76]	; (8009368 <TIM_OC6_SetConfig+0xa0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_OC6_SetConfig+0x60>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a12      	ldr	r2, [pc, #72]	; (800936c <TIM_OC6_SetConfig+0xa4>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d109      	bne.n	800933c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800932e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	029b      	lsls	r3, r3, #10
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	feff8fff 	.word	0xfeff8fff
 8009368:	40010000 	.word	0x40010000
 800936c:	40010400 	.word	0x40010400

08009370 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	4b39      	ldr	r3, [pc, #228]	; (800947c <TIM_SlaveTimer_SetConfig+0x10c>)
 8009398:	4013      	ands	r3, r2
 800939a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b30      	cmp	r3, #48	; 0x30
 80093b4:	d05c      	beq.n	8009470 <TIM_SlaveTimer_SetConfig+0x100>
 80093b6:	2b30      	cmp	r3, #48	; 0x30
 80093b8:	d806      	bhi.n	80093c8 <TIM_SlaveTimer_SetConfig+0x58>
 80093ba:	2b10      	cmp	r3, #16
 80093bc:	d058      	beq.n	8009470 <TIM_SlaveTimer_SetConfig+0x100>
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d056      	beq.n	8009470 <TIM_SlaveTimer_SetConfig+0x100>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d054      	beq.n	8009470 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80093c6:	e054      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80093c8:	2b50      	cmp	r3, #80	; 0x50
 80093ca:	d03d      	beq.n	8009448 <TIM_SlaveTimer_SetConfig+0xd8>
 80093cc:	2b50      	cmp	r3, #80	; 0x50
 80093ce:	d802      	bhi.n	80093d6 <TIM_SlaveTimer_SetConfig+0x66>
 80093d0:	2b40      	cmp	r3, #64	; 0x40
 80093d2:	d010      	beq.n	80093f6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80093d4:	e04d      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80093d6:	2b60      	cmp	r3, #96	; 0x60
 80093d8:	d040      	beq.n	800945c <TIM_SlaveTimer_SetConfig+0xec>
 80093da:	2b70      	cmp	r3, #112	; 0x70
 80093dc:	d000      	beq.n	80093e0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80093de:	e048      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68d9      	ldr	r1, [r3, #12]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f000 f8c0 	bl	8009574 <TIM_ETR_SetConfig>
      break;
 80093f4:	e03d      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d101      	bne.n	8009402 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e038      	b.n	8009474 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a1a      	ldr	r2, [r3, #32]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009428:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	621a      	str	r2, [r3, #32]
      break;
 8009446:	e014      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	6899      	ldr	r1, [r3, #8]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	461a      	mov	r2, r3
 8009456:	f000 f813 	bl	8009480 <TIM_TI1_ConfigInputStage>
      break;
 800945a:	e00a      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	6899      	ldr	r1, [r3, #8]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	461a      	mov	r2, r3
 800946a:	f000 f838 	bl	80094de <TIM_TI2_ConfigInputStage>
      break;
 800946e:	e000      	b.n	8009472 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009470:	bf00      	nop
  }
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	fffefff8 	.word	0xfffefff8

08009480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f023 030a 	bic.w	r3, r3, #10
 80094bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094de:	b480      	push	{r7}
 80094e0:	b087      	sub	sp, #28
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0210 	bic.w	r2, r3, #16
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	031b      	lsls	r3, r3, #12
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800951a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	621a      	str	r2, [r3, #32]
}
 8009532:	bf00      	nop
 8009534:	371c      	adds	r7, #28
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4313      	orrs	r3, r2
 800955c:	f043 0307 	orr.w	r3, r3, #7
 8009560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	609a      	str	r2, [r3, #8]
}
 8009568:	bf00      	nop
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800958e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	021a      	lsls	r2, r3, #8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	431a      	orrs	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4313      	orrs	r3, r2
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	609a      	str	r2, [r3, #8]
}
 80095a8:	bf00      	nop
 80095aa:	371c      	adds	r7, #28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e06d      	b.n	80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a30      	ldr	r2, [pc, #192]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d004      	beq.n	8009600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a2f      	ldr	r2, [pc, #188]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d108      	bne.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4313      	orrs	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a20      	ldr	r2, [pc, #128]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d022      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963e:	d01d      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1d      	ldr	r2, [pc, #116]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d018      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1c      	ldr	r2, [pc, #112]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d013      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1a      	ldr	r2, [pc, #104]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00e      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d009      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a16      	ldr	r2, [pc, #88]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d004      	beq.n	800967c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a15      	ldr	r2, [pc, #84]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d10c      	bne.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	4313      	orrs	r3, r2
 800968c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40010000 	.word	0x40010000
 80096b8:	40010400 	.word	0x40010400
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40001800 	.word	0x40001800

080096d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e065      	b.n	80097b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	041b      	lsls	r3, r3, #16
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a16      	ldr	r2, [pc, #88]	; (80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d004      	beq.n	800977a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d115      	bne.n	80097a6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	051b      	lsls	r3, r3, #20
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40010400 	.word	0x40010400

080097cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e040      	b.n	800989c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fa f86c 	bl	8003908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2224      	movs	r2, #36	; 0x24
 8009834:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0201 	bic.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f972 	bl	8009b30 <UART_SetConfig>
 800984c:	4603      	mov	r3, r0
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e022      	b.n	800989c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc10 	bl	800a084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc97 	bl	800a1c8 <UART_CheckIdleState>
 800989a:	4603      	mov	r3, r0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80098ca:	4013      	ands	r3, r2
 80098cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d113      	bne.n	80098fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00e      	beq.n	80098fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8100 	beq.w	8009af2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
      }
      return;
 80098fa:	e0fa      	b.n	8009af2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 80d5 	beq.w	8009aae <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d105      	bne.n	800991a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 80ca 	beq.w	8009aae <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00e      	beq.n	8009942 <HAL_UART_IRQHandler+0x9e>
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2201      	movs	r2, #1
 8009934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800993a:	f043 0201 	orr.w	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00e      	beq.n	800996a <HAL_UART_IRQHandler+0xc6>
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2202      	movs	r2, #2
 800995c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	f043 0204 	orr.w	r2, r3, #4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <HAL_UART_IRQHandler+0xee>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2204      	movs	r2, #4
 8009984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800998a:	f043 0202 	orr.w	r2, r3, #2
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b00      	cmp	r3, #0
 800999a:	d013      	beq.n	80099c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d009      	beq.n	80099c4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2208      	movs	r2, #8
 80099b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099bc:	f043 0208 	orr.w	r2, r3, #8
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00f      	beq.n	80099ee <HAL_UART_IRQHandler+0x14a>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	f043 0220 	orr.w	r2, r3, #32
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d07f      	beq.n	8009af6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00c      	beq.n	8009a1a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d004      	beq.n	8009a38 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d031      	beq.n	8009a9c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fc6f 	bl	800a31c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a48:	2b40      	cmp	r3, #64	; 0x40
 8009a4a:	d123      	bne.n	8009a94 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a5a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d013      	beq.n	8009a8c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	4a26      	ldr	r2, [pc, #152]	; (8009b04 <HAL_UART_IRQHandler+0x260>)
 8009a6a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fb f865 	bl	8004b40 <HAL_DMA_Abort_IT>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d016      	beq.n	8009aaa <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009a86:	4610      	mov	r0, r2
 8009a88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a8a:	e00e      	b.n	8009aaa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f845 	bl	8009b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a92:	e00a      	b.n	8009aaa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f841 	bl	8009b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a9a:	e006      	b.n	8009aaa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f83d 	bl	8009b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009aa8:	e025      	b.n	8009af6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aaa:	bf00      	nop
    return;
 8009aac:	e023      	b.n	8009af6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00d      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d008      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d017      	beq.n	8009afa <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
    }
    return;
 8009ad2:	e012      	b.n	8009afa <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00e      	beq.n	8009afc <HAL_UART_IRQHandler+0x258>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc4d 	bl	800a388 <UART_EndTransmit_IT>
    return;
 8009aee:	bf00      	nop
 8009af0:	e004      	b.n	8009afc <HAL_UART_IRQHandler+0x258>
      return;
 8009af2:	bf00      	nop
 8009af4:	e002      	b.n	8009afc <HAL_UART_IRQHandler+0x258>
    return;
 8009af6:	bf00      	nop
 8009af8:	e000      	b.n	8009afc <HAL_UART_IRQHandler+0x258>
    return;
 8009afa:	bf00      	nop
  }

}
 8009afc:	3720      	adds	r7, #32
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	0800a35d 	.word	0x0800a35d

08009b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4bb1      	ldr	r3, [pc, #708]	; (8009e24 <UART_SetConfig+0x2f4>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6812      	ldr	r2, [r2, #0]
 8009b66:	6939      	ldr	r1, [r7, #16]
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a9f      	ldr	r2, [pc, #636]	; (8009e28 <UART_SetConfig+0x2f8>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d121      	bne.n	8009bf4 <UART_SetConfig+0xc4>
 8009bb0:	4b9e      	ldr	r3, [pc, #632]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d816      	bhi.n	8009bec <UART_SetConfig+0xbc>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x94>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bd5 	.word	0x08009bd5
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009bdb 	.word	0x08009bdb
 8009bd0:	08009be7 	.word	0x08009be7
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e151      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	77fb      	strb	r3, [r7, #31]
 8009bde:	e14e      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009be0:	2304      	movs	r3, #4
 8009be2:	77fb      	strb	r3, [r7, #31]
 8009be4:	e14b      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009be6:	2308      	movs	r3, #8
 8009be8:	77fb      	strb	r3, [r7, #31]
 8009bea:	e148      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009bec:	2310      	movs	r3, #16
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	bf00      	nop
 8009bf2:	e144      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a8d      	ldr	r2, [pc, #564]	; (8009e30 <UART_SetConfig+0x300>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d134      	bne.n	8009c68 <UART_SetConfig+0x138>
 8009bfe:	4b8b      	ldr	r3, [pc, #556]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c04:	f003 030c 	and.w	r3, r3, #12
 8009c08:	2b0c      	cmp	r3, #12
 8009c0a:	d829      	bhi.n	8009c60 <UART_SetConfig+0x130>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <UART_SetConfig+0xe4>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c49 	.word	0x08009c49
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c61 	.word	0x08009c61
 8009c20:	08009c61 	.word	0x08009c61
 8009c24:	08009c55 	.word	0x08009c55
 8009c28:	08009c61 	.word	0x08009c61
 8009c2c:	08009c61 	.word	0x08009c61
 8009c30:	08009c61 	.word	0x08009c61
 8009c34:	08009c4f 	.word	0x08009c4f
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c61 	.word	0x08009c61
 8009c44:	08009c5b 	.word	0x08009c5b
 8009c48:	2300      	movs	r3, #0
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e117      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	77fb      	strb	r3, [r7, #31]
 8009c52:	e114      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c54:	2304      	movs	r3, #4
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e111      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c5a:	2308      	movs	r3, #8
 8009c5c:	77fb      	strb	r3, [r7, #31]
 8009c5e:	e10e      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c60:	2310      	movs	r3, #16
 8009c62:	77fb      	strb	r3, [r7, #31]
 8009c64:	bf00      	nop
 8009c66:	e10a      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a71      	ldr	r2, [pc, #452]	; (8009e34 <UART_SetConfig+0x304>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d120      	bne.n	8009cb4 <UART_SetConfig+0x184>
 8009c72:	4b6e      	ldr	r3, [pc, #440]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d00f      	beq.n	8009ca0 <UART_SetConfig+0x170>
 8009c80:	2b10      	cmp	r3, #16
 8009c82:	d802      	bhi.n	8009c8a <UART_SetConfig+0x15a>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d005      	beq.n	8009c94 <UART_SetConfig+0x164>
 8009c88:	e010      	b.n	8009cac <UART_SetConfig+0x17c>
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	d005      	beq.n	8009c9a <UART_SetConfig+0x16a>
 8009c8e:	2b30      	cmp	r3, #48	; 0x30
 8009c90:	d009      	beq.n	8009ca6 <UART_SetConfig+0x176>
 8009c92:	e00b      	b.n	8009cac <UART_SetConfig+0x17c>
 8009c94:	2300      	movs	r3, #0
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e0f1      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	77fb      	strb	r3, [r7, #31]
 8009c9e:	e0ee      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e0eb      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	77fb      	strb	r3, [r7, #31]
 8009caa:	e0e8      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009cac:	2310      	movs	r3, #16
 8009cae:	77fb      	strb	r3, [r7, #31]
 8009cb0:	bf00      	nop
 8009cb2:	e0e4      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a5f      	ldr	r2, [pc, #380]	; (8009e38 <UART_SetConfig+0x308>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d120      	bne.n	8009d00 <UART_SetConfig+0x1d0>
 8009cbe:	4b5b      	ldr	r3, [pc, #364]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cc8:	2b40      	cmp	r3, #64	; 0x40
 8009cca:	d00f      	beq.n	8009cec <UART_SetConfig+0x1bc>
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	d802      	bhi.n	8009cd6 <UART_SetConfig+0x1a6>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <UART_SetConfig+0x1b0>
 8009cd4:	e010      	b.n	8009cf8 <UART_SetConfig+0x1c8>
 8009cd6:	2b80      	cmp	r3, #128	; 0x80
 8009cd8:	d005      	beq.n	8009ce6 <UART_SetConfig+0x1b6>
 8009cda:	2bc0      	cmp	r3, #192	; 0xc0
 8009cdc:	d009      	beq.n	8009cf2 <UART_SetConfig+0x1c2>
 8009cde:	e00b      	b.n	8009cf8 <UART_SetConfig+0x1c8>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	77fb      	strb	r3, [r7, #31]
 8009ce4:	e0cb      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	77fb      	strb	r3, [r7, #31]
 8009cea:	e0c8      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009cec:	2304      	movs	r3, #4
 8009cee:	77fb      	strb	r3, [r7, #31]
 8009cf0:	e0c5      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009cf2:	2308      	movs	r3, #8
 8009cf4:	77fb      	strb	r3, [r7, #31]
 8009cf6:	e0c2      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	77fb      	strb	r3, [r7, #31]
 8009cfc:	bf00      	nop
 8009cfe:	e0be      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a4d      	ldr	r2, [pc, #308]	; (8009e3c <UART_SetConfig+0x30c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d124      	bne.n	8009d54 <UART_SetConfig+0x224>
 8009d0a:	4b48      	ldr	r3, [pc, #288]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d18:	d012      	beq.n	8009d40 <UART_SetConfig+0x210>
 8009d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1e:	d802      	bhi.n	8009d26 <UART_SetConfig+0x1f6>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <UART_SetConfig+0x204>
 8009d24:	e012      	b.n	8009d4c <UART_SetConfig+0x21c>
 8009d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d2a:	d006      	beq.n	8009d3a <UART_SetConfig+0x20a>
 8009d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0x216>
 8009d32:	e00b      	b.n	8009d4c <UART_SetConfig+0x21c>
 8009d34:	2300      	movs	r3, #0
 8009d36:	77fb      	strb	r3, [r7, #31]
 8009d38:	e0a1      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	77fb      	strb	r3, [r7, #31]
 8009d3e:	e09e      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d40:	2304      	movs	r3, #4
 8009d42:	77fb      	strb	r3, [r7, #31]
 8009d44:	e09b      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d46:	2308      	movs	r3, #8
 8009d48:	77fb      	strb	r3, [r7, #31]
 8009d4a:	e098      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	77fb      	strb	r3, [r7, #31]
 8009d50:	bf00      	nop
 8009d52:	e094      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a39      	ldr	r2, [pc, #228]	; (8009e40 <UART_SetConfig+0x310>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d124      	bne.n	8009da8 <UART_SetConfig+0x278>
 8009d5e:	4b33      	ldr	r3, [pc, #204]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6c:	d012      	beq.n	8009d94 <UART_SetConfig+0x264>
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d72:	d802      	bhi.n	8009d7a <UART_SetConfig+0x24a>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <UART_SetConfig+0x258>
 8009d78:	e012      	b.n	8009da0 <UART_SetConfig+0x270>
 8009d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d7e:	d006      	beq.n	8009d8e <UART_SetConfig+0x25e>
 8009d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d84:	d009      	beq.n	8009d9a <UART_SetConfig+0x26a>
 8009d86:	e00b      	b.n	8009da0 <UART_SetConfig+0x270>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e077      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	77fb      	strb	r3, [r7, #31]
 8009d92:	e074      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d94:	2304      	movs	r3, #4
 8009d96:	77fb      	strb	r3, [r7, #31]
 8009d98:	e071      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	77fb      	strb	r3, [r7, #31]
 8009d9e:	e06e      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009da0:	2310      	movs	r3, #16
 8009da2:	77fb      	strb	r3, [r7, #31]
 8009da4:	bf00      	nop
 8009da6:	e06a      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a25      	ldr	r2, [pc, #148]	; (8009e44 <UART_SetConfig+0x314>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d124      	bne.n	8009dfc <UART_SetConfig+0x2cc>
 8009db2:	4b1e      	ldr	r3, [pc, #120]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc0:	d012      	beq.n	8009de8 <UART_SetConfig+0x2b8>
 8009dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc6:	d802      	bhi.n	8009dce <UART_SetConfig+0x29e>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d007      	beq.n	8009ddc <UART_SetConfig+0x2ac>
 8009dcc:	e012      	b.n	8009df4 <UART_SetConfig+0x2c4>
 8009dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dd2:	d006      	beq.n	8009de2 <UART_SetConfig+0x2b2>
 8009dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0x2be>
 8009dda:	e00b      	b.n	8009df4 <UART_SetConfig+0x2c4>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	77fb      	strb	r3, [r7, #31]
 8009de0:	e04d      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009de2:	2302      	movs	r3, #2
 8009de4:	77fb      	strb	r3, [r7, #31]
 8009de6:	e04a      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009de8:	2304      	movs	r3, #4
 8009dea:	77fb      	strb	r3, [r7, #31]
 8009dec:	e047      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009dee:	2308      	movs	r3, #8
 8009df0:	77fb      	strb	r3, [r7, #31]
 8009df2:	e044      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009df4:	2310      	movs	r3, #16
 8009df6:	77fb      	strb	r3, [r7, #31]
 8009df8:	bf00      	nop
 8009dfa:	e040      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a11      	ldr	r2, [pc, #68]	; (8009e48 <UART_SetConfig+0x318>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d139      	bne.n	8009e7a <UART_SetConfig+0x34a>
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <UART_SetConfig+0x2fc>)
 8009e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e14:	d027      	beq.n	8009e66 <UART_SetConfig+0x336>
 8009e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e1a:	d817      	bhi.n	8009e4c <UART_SetConfig+0x31c>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01c      	beq.n	8009e5a <UART_SetConfig+0x32a>
 8009e20:	e027      	b.n	8009e72 <UART_SetConfig+0x342>
 8009e22:	bf00      	nop
 8009e24:	efff69f3 	.word	0xefff69f3
 8009e28:	40011000 	.word	0x40011000
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	40004400 	.word	0x40004400
 8009e34:	40004800 	.word	0x40004800
 8009e38:	40004c00 	.word	0x40004c00
 8009e3c:	40005000 	.word	0x40005000
 8009e40:	40011400 	.word	0x40011400
 8009e44:	40007800 	.word	0x40007800
 8009e48:	40007c00 	.word	0x40007c00
 8009e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e50:	d006      	beq.n	8009e60 <UART_SetConfig+0x330>
 8009e52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e56:	d009      	beq.n	8009e6c <UART_SetConfig+0x33c>
 8009e58:	e00b      	b.n	8009e72 <UART_SetConfig+0x342>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	77fb      	strb	r3, [r7, #31]
 8009e5e:	e00e      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009e60:	2302      	movs	r3, #2
 8009e62:	77fb      	strb	r3, [r7, #31]
 8009e64:	e00b      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009e66:	2304      	movs	r3, #4
 8009e68:	77fb      	strb	r3, [r7, #31]
 8009e6a:	e008      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	77fb      	strb	r3, [r7, #31]
 8009e70:	e005      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009e72:	2310      	movs	r3, #16
 8009e74:	77fb      	strb	r3, [r7, #31]
 8009e76:	bf00      	nop
 8009e78:	e001      	b.n	8009e7e <UART_SetConfig+0x34e>
 8009e7a:	2310      	movs	r3, #16
 8009e7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e86:	d17f      	bne.n	8009f88 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009e88:	7ffb      	ldrb	r3, [r7, #31]
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	d85c      	bhi.n	8009f48 <UART_SetConfig+0x418>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x364>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ed9 	.word	0x08009ed9
 8009e9c:	08009ef9 	.word	0x08009ef9
 8009ea0:	08009f49 	.word	0x08009f49
 8009ea4:	08009f11 	.word	0x08009f11
 8009ea8:	08009f49 	.word	0x08009f49
 8009eac:	08009f49 	.word	0x08009f49
 8009eb0:	08009f49 	.word	0x08009f49
 8009eb4:	08009f31 	.word	0x08009f31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb8:	f7fd fa5c 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 8009ebc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	005a      	lsls	r2, r3, #1
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	441a      	add	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	61bb      	str	r3, [r7, #24]
        break;
 8009ed6:	e03a      	b.n	8009f4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed8:	f7fd fa60 	bl	800739c <HAL_RCC_GetPCLK2Freq>
 8009edc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	005a      	lsls	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	441a      	add	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	61bb      	str	r3, [r7, #24]
        break;
 8009ef6:	e02a      	b.n	8009f4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	085a      	lsrs	r2, r3, #1
 8009efe:	4b5f      	ldr	r3, [pc, #380]	; (800a07c <UART_SetConfig+0x54c>)
 8009f00:	4413      	add	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6852      	ldr	r2, [r2, #4]
 8009f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	61bb      	str	r3, [r7, #24]
        break;
 8009f0e:	e01e      	b.n	8009f4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f10:	f7fd f972 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 8009f14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	005a      	lsls	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	441a      	add	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	61bb      	str	r3, [r7, #24]
        break;
 8009f2e:	e00e      	b.n	8009f4e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	085b      	lsrs	r3, r3, #1
 8009f36:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	61bb      	str	r3, [r7, #24]
        break;
 8009f46:	e002      	b.n	8009f4e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
        break;
 8009f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	2b0f      	cmp	r3, #15
 8009f52:	d916      	bls.n	8009f82 <UART_SetConfig+0x452>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5a:	d212      	bcs.n	8009f82 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	f023 030f 	bic.w	r3, r3, #15
 8009f64:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f003 0307 	and.w	r3, r3, #7
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	897a      	ldrh	r2, [r7, #10]
 8009f7e:	60da      	str	r2, [r3, #12]
 8009f80:	e070      	b.n	800a064 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e06d      	b.n	800a064 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009f88:	7ffb      	ldrb	r3, [r7, #31]
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d859      	bhi.n	800a042 <UART_SetConfig+0x512>
 8009f8e:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <UART_SetConfig+0x464>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fb9 	.word	0x08009fb9
 8009f98:	08009fd7 	.word	0x08009fd7
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	0800a043 	.word	0x0800a043
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a043 	.word	0x0800a043
 8009fac:	0800a043 	.word	0x0800a043
 8009fb0:	0800a043 	.word	0x0800a043
 8009fb4:	0800a02b 	.word	0x0800a02b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb8:	f7fd f9dc 	bl	8007374 <HAL_RCC_GetPCLK1Freq>
 8009fbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	085a      	lsrs	r2, r3, #1
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	441a      	add	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	61bb      	str	r3, [r7, #24]
        break;
 8009fd4:	e038      	b.n	800a048 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fd6:	f7fd f9e1 	bl	800739c <HAL_RCC_GetPCLK2Freq>
 8009fda:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	085a      	lsrs	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	441a      	add	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	61bb      	str	r3, [r7, #24]
        break;
 8009ff2:	e029      	b.n	800a048 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	085a      	lsrs	r2, r3, #1
 8009ffa:	4b21      	ldr	r3, [pc, #132]	; (800a080 <UART_SetConfig+0x550>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6852      	ldr	r2, [r2, #4]
 800a002:	fbb3 f3f2 	udiv	r3, r3, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	61bb      	str	r3, [r7, #24]
        break;
 800a00a:	e01d      	b.n	800a048 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a00c:	f7fd f8f4 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 800a010:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	085a      	lsrs	r2, r3, #1
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	fbb2 f3f3 	udiv	r3, r2, r3
 800a024:	b29b      	uxth	r3, r3
 800a026:	61bb      	str	r3, [r7, #24]
        break;
 800a028:	e00e      	b.n	800a048 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	085b      	lsrs	r3, r3, #1
 800a030:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	61bb      	str	r3, [r7, #24]
        break;
 800a040:	e002      	b.n	800a048 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
        break;
 800a046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	2b0f      	cmp	r3, #15
 800a04c:	d908      	bls.n	800a060 <UART_SetConfig+0x530>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a054:	d204      	bcs.n	800a060 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	60da      	str	r2, [r3, #12]
 800a05e:	e001      	b.n	800a064 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	01e84800 	.word	0x01e84800
 800a080:	00f42400 	.word	0x00f42400

0800a084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00a      	beq.n	800a0d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01a      	beq.n	800a19a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a182:	d10a      	bne.n	800a19a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	605a      	str	r2, [r3, #4]
  }
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a1d6:	f7f9 fdef 	bl	8003db8 <HAL_GetTick>
 800a1da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d10e      	bne.n	800a208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f814 	bl	800a226 <UART_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e00a      	b.n	800a21e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2220      	movs	r2, #32
 800a212:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	603b      	str	r3, [r7, #0]
 800a232:	4613      	mov	r3, r2
 800a234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a236:	e05d      	b.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d059      	beq.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a240:	f7f9 fdba 	bl	8003db8 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d302      	bcc.n	800a256 <UART_WaitOnFlagUntilTimeout+0x30>
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d11b      	bne.n	800a28e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a264:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0201 	bic.w	r2, r2, #1
 800a274:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2220      	movs	r2, #32
 800a27a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2220      	movs	r2, #32
 800a280:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e042      	b.n	800a314 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d02b      	beq.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2aa:	d123      	bne.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 0201 	bic.w	r2, r2, #1
 800a2d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e00f      	b.n	800a314 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69da      	ldr	r2, [r3, #28]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	429a      	cmp	r2, r3
 800a302:	bf0c      	ite	eq
 800a304:	2301      	moveq	r3, #1
 800a306:	2300      	movne	r3, #0
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	461a      	mov	r2, r3
 800a30c:	79fb      	ldrb	r3, [r7, #7]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d092      	beq.n	800a238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a332:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0201 	bic.w	r2, r2, #1
 800a342:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7ff fbce 	bl	8009b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a380:	bf00      	nop
 800a382:	3710      	adds	r7, #16
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a39e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff fbab 	bl	8009b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d027      	beq.n	800a426 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4b2f      	ldr	r3, [pc, #188]	; (800a49c <FMC_SDRAM_Init+0xe0>)
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a3ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a3f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a3f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a3fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a404:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a40a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a410:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a416:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e032      	b.n	800a48c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a432:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a43c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a442:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <FMC_SDRAM_Init+0xe0>)
 800a454:	4013      	ands	r3, r2
 800a456:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a460:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a466:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a46c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a472:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a478:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	ffff8000 	.word	0xffff8000

0800a4a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d02e      	beq.n	800a518 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a4c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a4d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a4e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a4ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a4f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a4fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	3b01      	subs	r3, #1
 800a506:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a508:	4313      	orrs	r3, r2
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	609a      	str	r2, [r3, #8]
 800a516:	e039      	b.n	800a58c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	4b1e      	ldr	r3, [pc, #120]	; (800a59c <FMC_SDRAM_Timing_Init+0xfc>)
 800a522:	4013      	ands	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	3b01      	subs	r3, #1
 800a534:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a536:	4313      	orrs	r3, r2
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a54a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a55a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	3b01      	subs	r3, #1
 800a562:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a564:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a56e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	3b01      	subs	r3, #1
 800a576:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a578:	4313      	orrs	r3, r2
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	371c      	adds	r7, #28
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	ff0f0fff 	.word	0xff0f0fff

0800a5a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a5b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a5c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	695a      	ldr	r2, [r3, #20]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a61a:	2b84      	cmp	r3, #132	; 0x84
 800a61c:	d005      	beq.n	800a62a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a61e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	3303      	adds	r3, #3
 800a628:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a62a:	68fb      	ldr	r3, [r7, #12]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a63c:	f000 fee8 	bl	800b410 <vTaskStartScheduler>
  
  return osOK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	bd80      	pop	{r7, pc}

0800a646 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a646:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a648:	b089      	sub	sp, #36	; 0x24
 800a64a:	af04      	add	r7, sp, #16
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d020      	beq.n	800a69a <osThreadCreate+0x54>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01c      	beq.n	800a69a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685c      	ldr	r4, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681d      	ldr	r5, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691e      	ldr	r6, [r3, #16]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff ffc8 	bl	800a608 <makeFreeRtosPriority>
 800a678:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a682:	9202      	str	r2, [sp, #8]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	9100      	str	r1, [sp, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	4632      	mov	r2, r6
 800a68c:	4629      	mov	r1, r5
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fc70 	bl	800af74 <xTaskCreateStatic>
 800a694:	4603      	mov	r3, r0
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e01c      	b.n	800a6d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685c      	ldr	r4, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6a6:	b29e      	uxth	r6, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff ffaa 	bl	800a608 <makeFreeRtosPriority>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	9200      	str	r2, [sp, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 fcb5 	bl	800b034 <xTaskCreate>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d001      	beq.n	800a6d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e000      	b.n	800a6d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <osDelay+0x16>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	e000      	b.n	800a6f6 <osDelay+0x18>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fe54 	bl	800b3a4 <vTaskDelay>
  
  return osOK;
 800a6fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d007      	beq.n	800a726 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4619      	mov	r1, r3
 800a71c:	2001      	movs	r0, #1
 800a71e:	f000 fa38 	bl	800ab92 <xQueueCreateMutexStatic>
 800a722:	4603      	mov	r3, r0
 800a724:	e003      	b.n	800a72e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a726:	2001      	movs	r0, #1
 800a728:	f000 fa1b 	bl	800ab62 <xQueueCreateMutex>
 800a72c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f103 0208 	add.w	r2, r3, #8
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f04f 32ff 	mov.w	r2, #4294967295
 800a74e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f103 0208 	add.w	r2, r3, #8
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f103 0208 	add.w	r2, r3, #8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d103      	bne.n	800a7f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	e00c      	b.n	800a812 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	e002      	b.n	800a806 <vListInsert+0x2e>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d2f6      	bcs.n	800a800 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a84a:	b480      	push	{r7}
 800a84c:	b085      	sub	sp, #20
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6892      	ldr	r2, [r2, #8]
 800a860:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6852      	ldr	r2, [r2, #4]
 800a86a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d103      	bne.n	800a87e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	1e5a      	subs	r2, r3, #1
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	b672      	cpsid	i
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	b662      	cpsie	i
 800a8c8:	60bb      	str	r3, [r7, #8]
 800a8ca:	e7fe      	b.n	800a8ca <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a8cc:	f001 fbcc 	bl	800c068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d8:	68f9      	ldr	r1, [r7, #12]
 800a8da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	441a      	add	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	22ff      	movs	r2, #255	; 0xff
 800a910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	22ff      	movs	r2, #255	; 0xff
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d114      	bne.n	800a94c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d01a      	beq.n	800a960 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3310      	adds	r3, #16
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 ffc8 	bl	800b8c4 <xTaskRemoveFromEventList>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d012      	beq.n	800a960 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <xQueueGenericReset+0xd0>)
 800a93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	e009      	b.n	800a960 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3310      	adds	r3, #16
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff fef0 	bl	800a736 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3324      	adds	r3, #36	; 0x24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff feeb 	bl	800a736 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a960:	f001 fbb4 	bl	800c0cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a964:	2301      	movs	r3, #1
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10b      	bne.n	800a9a0 <xQueueGenericCreateStatic+0x2c>
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	b672      	cpsid	i
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	b662      	cpsie	i
 800a99c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a99e:	e7fe      	b.n	800a99e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <xQueueGenericCreateStatic+0x4a>
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	b672      	cpsid	i
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	b662      	cpsie	i
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a9bc:	e7fe      	b.n	800a9bc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <xQueueGenericCreateStatic+0x56>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <xQueueGenericCreateStatic+0x5a>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <xQueueGenericCreateStatic+0x5c>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <xQueueGenericCreateStatic+0x78>
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	b672      	cpsid	i
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	b662      	cpsie	i
 800a9e8:	623b      	str	r3, [r7, #32]
 800a9ea:	e7fe      	b.n	800a9ea <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <xQueueGenericCreateStatic+0x84>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <xQueueGenericCreateStatic+0x88>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e000      	b.n	800a9fe <xQueueGenericCreateStatic+0x8a>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10b      	bne.n	800aa1a <xQueueGenericCreateStatic+0xa6>
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	b672      	cpsid	i
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	b662      	cpsie	i
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	e7fe      	b.n	800aa18 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa1a:	2348      	movs	r3, #72	; 0x48
 800aa1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b48      	cmp	r3, #72	; 0x48
 800aa22:	d00b      	beq.n	800aa3c <xQueueGenericCreateStatic+0xc8>
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	b672      	cpsid	i
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	b662      	cpsie	i
 800aa38:	61bb      	str	r3, [r7, #24]
 800aa3a:	e7fe      	b.n	800aa3a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00d      	beq.n	800aa64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 f846 	bl	800aaf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3730      	adds	r7, #48	; 0x30
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b08a      	sub	sp, #40	; 0x28
 800aa72:	af02      	add	r7, sp, #8
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	60b9      	str	r1, [r7, #8]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <xQueueGenericCreate+0x2c>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	b672      	cpsid	i
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	b662      	cpsie	i
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	e7fe      	b.n	800aa98 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61fb      	str	r3, [r7, #28]
 800aaa4:	e004      	b.n	800aab0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	fb02 f303 	mul.w	r3, r2, r3
 800aaae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	3348      	adds	r3, #72	; 0x48
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 fbb7 	bl	800c228 <pvPortMalloc>
 800aaba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d011      	beq.n	800aae6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	3348      	adds	r3, #72	; 0x48
 800aaca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aad4:	79fa      	ldrb	r2, [r7, #7]
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	4613      	mov	r3, r2
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 f805 	bl	800aaf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aae6:	69bb      	ldr	r3, [r7, #24]
	}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3720      	adds	r7, #32
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e002      	b.n	800ab12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab1e:	2101      	movs	r1, #1
 800ab20:	69b8      	ldr	r0, [r7, #24]
 800ab22:	f7ff febd 	bl	800a8a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ab4e:	2300      	movs	r3, #0
 800ab50:	2200      	movs	r2, #0
 800ab52:	2100      	movs	r1, #0
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f837 	bl	800abc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b086      	sub	sp, #24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	4603      	mov	r3, r0
 800ab6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	2300      	movs	r3, #0
 800ab72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	461a      	mov	r2, r3
 800ab78:	6939      	ldr	r1, [r7, #16]
 800ab7a:	6978      	ldr	r0, [r7, #20]
 800ab7c:	f7ff ff77 	bl	800aa6e <xQueueGenericCreate>
 800ab80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff ffd3 	bl	800ab2e <prvInitialiseMutex>

		return xNewQueue;
 800ab88:	68fb      	ldr	r3, [r7, #12]
	}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b088      	sub	sp, #32
 800ab96:	af02      	add	r7, sp, #8
 800ab98:	4603      	mov	r3, r0
 800ab9a:	6039      	str	r1, [r7, #0]
 800ab9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	617b      	str	r3, [r7, #20]
 800aba2:	2300      	movs	r3, #0
 800aba4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2200      	movs	r2, #0
 800abae:	6939      	ldr	r1, [r7, #16]
 800abb0:	6978      	ldr	r0, [r7, #20]
 800abb2:	f7ff fedf 	bl	800a974 <xQueueGenericCreateStatic>
 800abb6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f7ff ffb8 	bl	800ab2e <prvInitialiseMutex>

		return xNewQueue;
 800abbe:	68fb      	ldr	r3, [r7, #12]
	}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08e      	sub	sp, #56	; 0x38
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800abd6:	2300      	movs	r3, #0
 800abd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10b      	bne.n	800abfc <xQueueGenericSend+0x34>
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	b672      	cpsid	i
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	b662      	cpsie	i
 800abf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800abfa:	e7fe      	b.n	800abfa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d103      	bne.n	800ac0a <xQueueGenericSend+0x42>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <xQueueGenericSend+0x46>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericSend+0x48>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10b      	bne.n	800ac2c <xQueueGenericSend+0x64>
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	b672      	cpsid	i
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	b662      	cpsie	i
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
 800ac2a:	e7fe      	b.n	800ac2a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d103      	bne.n	800ac3a <xQueueGenericSend+0x72>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d101      	bne.n	800ac3e <xQueueGenericSend+0x76>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e000      	b.n	800ac40 <xQueueGenericSend+0x78>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10b      	bne.n	800ac5c <xQueueGenericSend+0x94>
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	b672      	cpsid	i
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	b662      	cpsie	i
 800ac58:	623b      	str	r3, [r7, #32]
 800ac5a:	e7fe      	b.n	800ac5a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac5c:	f000 fff0 	bl	800bc40 <xTaskGetSchedulerState>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <xQueueGenericSend+0xa4>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <xQueueGenericSend+0xa8>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <xQueueGenericSend+0xaa>
 800ac70:	2300      	movs	r3, #0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10b      	bne.n	800ac8e <xQueueGenericSend+0xc6>
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	b672      	cpsid	i
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	b662      	cpsie	i
 800ac8a:	61fb      	str	r3, [r7, #28]
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac8e:	f001 f9eb 	bl	800c068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <xQueueGenericSend+0xdc>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d129      	bne.n	800acf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acaa:	f000 f88f 	bl	800adcc <prvCopyDataToQueue>
 800acae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d010      	beq.n	800acda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	3324      	adds	r3, #36	; 0x24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fe01 	bl	800b8c4 <xTaskRemoveFromEventList>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d013      	beq.n	800acf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acc8:	4b3f      	ldr	r3, [pc, #252]	; (800adc8 <xQueueGenericSend+0x200>)
 800acca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	e00a      	b.n	800acf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d007      	beq.n	800acf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ace0:	4b39      	ldr	r3, [pc, #228]	; (800adc8 <xQueueGenericSend+0x200>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800acf0:	f001 f9ec 	bl	800c0cc <vPortExitCritical>
				return pdPASS;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e063      	b.n	800adc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acfe:	f001 f9e5 	bl	800c0cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e05c      	b.n	800adc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d106      	bne.n	800ad1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad0c:	f107 0314 	add.w	r3, r7, #20
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fe3b 	bl	800b98c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad1a:	f001 f9d7 	bl	800c0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad1e:	f000 fbd9 	bl	800b4d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad22:	f001 f9a1 	bl	800c068 <vPortEnterCritical>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad2c:	b25b      	sxtb	r3, r3
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d103      	bne.n	800ad3c <xQueueGenericSend+0x174>
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d103      	bne.n	800ad52 <xQueueGenericSend+0x18a>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad52:	f001 f9bb 	bl	800c0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad56:	1d3a      	adds	r2, r7, #4
 800ad58:	f107 0314 	add.w	r3, r7, #20
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fe2a 	bl	800b9b8 <xTaskCheckForTimeOut>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d124      	bne.n	800adb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad6c:	f000 f8ea 	bl	800af44 <prvIsQueueFull>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d018      	beq.n	800ada8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	3310      	adds	r3, #16
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fd7a 	bl	800b878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad86:	f000 f88b 	bl	800aea0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad8a:	f000 fbb1 	bl	800b4f0 <xTaskResumeAll>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f47f af7c 	bne.w	800ac8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ad96:	4b0c      	ldr	r3, [pc, #48]	; (800adc8 <xQueueGenericSend+0x200>)
 800ad98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	e772      	b.n	800ac8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ada8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adaa:	f000 f879 	bl	800aea0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adae:	f000 fb9f 	bl	800b4f0 <xTaskResumeAll>
 800adb2:	e76c      	b.n	800ac8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800adb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adb6:	f000 f873 	bl	800aea0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adba:	f000 fb99 	bl	800b4f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800adbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3738      	adds	r7, #56	; 0x38
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10d      	bne.n	800ae06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d14d      	bne.n	800ae8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 ff40 	bl	800bc7c <xTaskPriorityDisinherit>
 800adfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	609a      	str	r2, [r3, #8]
 800ae04:	e043      	b.n	800ae8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d119      	bne.n	800ae40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6858      	ldr	r0, [r3, #4]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	461a      	mov	r2, r3
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	f001 fc0a 	bl	800c630 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae24:	441a      	add	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d32b      	bcc.n	800ae8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	605a      	str	r2, [r3, #4]
 800ae3e:	e026      	b.n	800ae8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68d8      	ldr	r0, [r3, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	f001 fbf0 	bl	800c630 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae58:	425b      	negs	r3, r3
 800ae5a:	441a      	add	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	68da      	ldr	r2, [r3, #12]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d207      	bcs.n	800ae7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	425b      	negs	r3, r3
 800ae76:	441a      	add	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d105      	bne.n	800ae8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae96:	697b      	ldr	r3, [r7, #20]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aea8:	f001 f8de 	bl	800c068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	e011      	b.n	800aeda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d012      	beq.n	800aee4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3324      	adds	r3, #36	; 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fcfe 	bl	800b8c4 <xTaskRemoveFromEventList>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aece:	f000 fdd7 	bl	800ba80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	dce9      	bgt.n	800aeb6 <prvUnlockQueue+0x16>
 800aee2:	e000      	b.n	800aee6 <prvUnlockQueue+0x46>
					break;
 800aee4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	22ff      	movs	r2, #255	; 0xff
 800aeea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aeee:	f001 f8ed 	bl	800c0cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aef2:	f001 f8b9 	bl	800c068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aefe:	e011      	b.n	800af24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d012      	beq.n	800af2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3310      	adds	r3, #16
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 fcd9 	bl	800b8c4 <xTaskRemoveFromEventList>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af18:	f000 fdb2 	bl	800ba80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	3b01      	subs	r3, #1
 800af20:	b2db      	uxtb	r3, r3
 800af22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dce9      	bgt.n	800af00 <prvUnlockQueue+0x60>
 800af2c:	e000      	b.n	800af30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	22ff      	movs	r2, #255	; 0xff
 800af34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af38:	f001 f8c8 	bl	800c0cc <vPortExitCritical>
}
 800af3c:	bf00      	nop
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af4c:	f001 f88c 	bl	800c068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af58:	429a      	cmp	r2, r3
 800af5a:	d102      	bne.n	800af62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e001      	b.n	800af66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af66:	f001 f8b1 	bl	800c0cc <vPortExitCritical>

	return xReturn;
 800af6a:	68fb      	ldr	r3, [r7, #12]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08e      	sub	sp, #56	; 0x38
 800af78:	af04      	add	r7, sp, #16
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10b      	bne.n	800afa0 <xTaskCreateStatic+0x2c>
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	b672      	cpsid	i
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	b662      	cpsie	i
 800af9c:	623b      	str	r3, [r7, #32]
 800af9e:	e7fe      	b.n	800af9e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10b      	bne.n	800afbe <xTaskCreateStatic+0x4a>
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	b672      	cpsid	i
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	b662      	cpsie	i
 800afba:	61fb      	str	r3, [r7, #28]
 800afbc:	e7fe      	b.n	800afbc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afbe:	2354      	movs	r3, #84	; 0x54
 800afc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b54      	cmp	r3, #84	; 0x54
 800afc6:	d00b      	beq.n	800afe0 <xTaskCreateStatic+0x6c>
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	b672      	cpsid	i
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	b662      	cpsie	i
 800afdc:	61bb      	str	r3, [r7, #24]
 800afde:	e7fe      	b.n	800afde <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afe0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01e      	beq.n	800b026 <xTaskCreateStatic+0xb2>
 800afe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afea:	2b00      	cmp	r3, #0
 800afec:	d01b      	beq.n	800b026 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aff6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	2202      	movs	r2, #2
 800affc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b000:	2300      	movs	r3, #0
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	f107 0314 	add.w	r3, r7, #20
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f850 	bl	800b0be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b020:	f000 f8d6 	bl	800b1d0 <prvAddNewTaskToReadyList>
 800b024:	e001      	b.n	800b02a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b02a:	697b      	ldr	r3, [r7, #20]
	}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3728      	adds	r7, #40	; 0x28
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08c      	sub	sp, #48	; 0x30
 800b038:	af04      	add	r7, sp, #16
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	4613      	mov	r3, r2
 800b042:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 f8ed 	bl	800c228 <pvPortMalloc>
 800b04e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b056:	2054      	movs	r0, #84	; 0x54
 800b058:	f001 f8e6 	bl	800c228 <pvPortMalloc>
 800b05c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	631a      	str	r2, [r3, #48]	; 0x30
 800b06a:	e005      	b.n	800b078 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b06c:	6978      	ldr	r0, [r7, #20]
 800b06e:	f001 f9a3 	bl	800c3b8 <vPortFree>
 800b072:	e001      	b.n	800b078 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d017      	beq.n	800b0ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b086:	88fa      	ldrh	r2, [r7, #6]
 800b088:	2300      	movs	r3, #0
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	9302      	str	r3, [sp, #8]
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 f80e 	bl	800b0be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0a2:	69f8      	ldr	r0, [r7, #28]
 800b0a4:	f000 f894 	bl	800b1d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	61bb      	str	r3, [r7, #24]
 800b0ac:	e002      	b.n	800b0b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
	}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3720      	adds	r7, #32
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b088      	sub	sp, #32
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	607a      	str	r2, [r7, #4]
 800b0ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b0d6:	440b      	add	r3, r1
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <prvInitialiseNewTask+0x4a>
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	b672      	cpsid	i
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	b662      	cpsie	i
 800b104:	617b      	str	r3, [r7, #20]
 800b106:	e7fe      	b.n	800b106 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d01f      	beq.n	800b14e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b10e:	2300      	movs	r3, #0
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	e012      	b.n	800b13a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	4413      	add	r3, r2
 800b11a:	7819      	ldrb	r1, [r3, #0]
 800b11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	4413      	add	r3, r2
 800b122:	3334      	adds	r3, #52	; 0x34
 800b124:	460a      	mov	r2, r1
 800b126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	4413      	add	r3, r2
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	3301      	adds	r3, #1
 800b138:	61fb      	str	r3, [r7, #28]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	2b0f      	cmp	r3, #15
 800b13e:	d9e9      	bls.n	800b114 <prvInitialiseNewTask+0x56>
 800b140:	e000      	b.n	800b144 <prvInitialiseNewTask+0x86>
			{
				break;
 800b142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b14c:	e003      	b.n	800b156 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	2b06      	cmp	r3, #6
 800b15a:	d901      	bls.n	800b160 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b15c:	2306      	movs	r3, #6
 800b15e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b16a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	2200      	movs	r2, #0
 800b170:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	3304      	adds	r3, #4
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fafd 	bl	800a776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	3318      	adds	r3, #24
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff faf8 	bl	800a776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b18a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	f1c3 0207 	rsb	r2, r3, #7
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	2200      	movs	r2, #0
 800b1a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	68f9      	ldr	r1, [r7, #12]
 800b1ae:	69b8      	ldr	r0, [r7, #24]
 800b1b0:	f000 fe52 	bl	800be58 <pxPortInitialiseStack>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1d8:	f000 ff46 	bl	800c068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1dc:	4b2a      	ldr	r3, [pc, #168]	; (800b288 <prvAddNewTaskToReadyList+0xb8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a29      	ldr	r2, [pc, #164]	; (800b288 <prvAddNewTaskToReadyList+0xb8>)
 800b1e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1e6:	4b29      	ldr	r3, [pc, #164]	; (800b28c <prvAddNewTaskToReadyList+0xbc>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ee:	4a27      	ldr	r2, [pc, #156]	; (800b28c <prvAddNewTaskToReadyList+0xbc>)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1f4:	4b24      	ldr	r3, [pc, #144]	; (800b288 <prvAddNewTaskToReadyList+0xb8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d110      	bne.n	800b21e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1fc:	f000 fc64 	bl	800bac8 <prvInitialiseTaskLists>
 800b200:	e00d      	b.n	800b21e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b202:	4b23      	ldr	r3, [pc, #140]	; (800b290 <prvAddNewTaskToReadyList+0xc0>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d109      	bne.n	800b21e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b20a:	4b20      	ldr	r3, [pc, #128]	; (800b28c <prvAddNewTaskToReadyList+0xbc>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b214:	429a      	cmp	r2, r3
 800b216:	d802      	bhi.n	800b21e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b218:	4a1c      	ldr	r2, [pc, #112]	; (800b28c <prvAddNewTaskToReadyList+0xbc>)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b21e:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <prvAddNewTaskToReadyList+0xc4>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	4a1b      	ldr	r2, [pc, #108]	; (800b294 <prvAddNewTaskToReadyList+0xc4>)
 800b226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22c:	2201      	movs	r2, #1
 800b22e:	409a      	lsls	r2, r3
 800b230:	4b19      	ldr	r3, [pc, #100]	; (800b298 <prvAddNewTaskToReadyList+0xc8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4313      	orrs	r3, r2
 800b236:	4a18      	ldr	r2, [pc, #96]	; (800b298 <prvAddNewTaskToReadyList+0xc8>)
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4a15      	ldr	r2, [pc, #84]	; (800b29c <prvAddNewTaskToReadyList+0xcc>)
 800b248:	441a      	add	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3304      	adds	r3, #4
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f7ff fa9d 	bl	800a790 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b256:	f000 ff39 	bl	800c0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <prvAddNewTaskToReadyList+0xc0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00e      	beq.n	800b280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b262:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <prvAddNewTaskToReadyList+0xbc>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d207      	bcs.n	800b280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b270:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <prvAddNewTaskToReadyList+0xd0>)
 800b272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	200005e4 	.word	0x200005e4
 800b28c:	200004e4 	.word	0x200004e4
 800b290:	200005f0 	.word	0x200005f0
 800b294:	20000600 	.word	0x20000600
 800b298:	200005ec 	.word	0x200005ec
 800b29c:	200004e8 	.word	0x200004e8
 800b2a0:	e000ed04 	.word	0xe000ed04

0800b2a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10b      	bne.n	800b2d0 <vTaskDelayUntil+0x2c>
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	b672      	cpsid	i
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	b662      	cpsie	i
 800b2cc:	617b      	str	r3, [r7, #20]
 800b2ce:	e7fe      	b.n	800b2ce <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <vTaskDelayUntil+0x4a>
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	b672      	cpsid	i
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	b662      	cpsie	i
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e7fe      	b.n	800b2ec <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800b2ee:	4b2a      	ldr	r3, [pc, #168]	; (800b398 <vTaskDelayUntil+0xf4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00b      	beq.n	800b30e <vTaskDelayUntil+0x6a>
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	b672      	cpsid	i
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	b662      	cpsie	i
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	e7fe      	b.n	800b30c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800b30e:	f000 f8e1 	bl	800b4d4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b312:	4b22      	ldr	r3, [pc, #136]	; (800b39c <vTaskDelayUntil+0xf8>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	4413      	add	r3, r2
 800b320:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6a3a      	ldr	r2, [r7, #32]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d20b      	bcs.n	800b344 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	429a      	cmp	r2, r3
 800b334:	d211      	bcs.n	800b35a <vTaskDelayUntil+0xb6>
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d90d      	bls.n	800b35a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b33e:	2301      	movs	r3, #1
 800b340:	627b      	str	r3, [r7, #36]	; 0x24
 800b342:	e00a      	b.n	800b35a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d303      	bcc.n	800b356 <vTaskDelayUntil+0xb2>
 800b34e:	69fa      	ldr	r2, [r7, #28]
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	429a      	cmp	r2, r3
 800b354:	d901      	bls.n	800b35a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b356:	2301      	movs	r3, #1
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	2b00      	cmp	r3, #0
 800b364:	d006      	beq.n	800b374 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fd0c 	bl	800bd8c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b374:	f000 f8bc 	bl	800b4f0 <xTaskResumeAll>
 800b378:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d107      	bne.n	800b390 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b380:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <vTaskDelayUntil+0xfc>)
 800b382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b390:	bf00      	nop
 800b392:	3728      	adds	r7, #40	; 0x28
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	2000060c 	.word	0x2000060c
 800b39c:	200005e8 	.word	0x200005e8
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d018      	beq.n	800b3e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <vTaskDelay+0x64>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00b      	beq.n	800b3d6 <vTaskDelay+0x32>
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	b672      	cpsid	i
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	b662      	cpsie	i
 800b3d2:	60bb      	str	r3, [r7, #8]
 800b3d4:	e7fe      	b.n	800b3d4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b3d6:	f000 f87d 	bl	800b4d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3da:	2100      	movs	r1, #0
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fcd5 	bl	800bd8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3e2:	f000 f885 	bl	800b4f0 <xTaskResumeAll>
 800b3e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d107      	bne.n	800b3fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3ee:	4b07      	ldr	r3, [pc, #28]	; (800b40c <vTaskDelay+0x68>)
 800b3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	2000060c 	.word	0x2000060c
 800b40c:	e000ed04 	.word	0xe000ed04

0800b410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08a      	sub	sp, #40	; 0x28
 800b414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b41e:	463a      	mov	r2, r7
 800b420:	1d39      	adds	r1, r7, #4
 800b422:	f107 0308 	add.w	r3, r7, #8
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 f872 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	9202      	str	r2, [sp, #8]
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	2300      	movs	r3, #0
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	2300      	movs	r3, #0
 800b43c:	460a      	mov	r2, r1
 800b43e:	491f      	ldr	r1, [pc, #124]	; (800b4bc <vTaskStartScheduler+0xac>)
 800b440:	481f      	ldr	r0, [pc, #124]	; (800b4c0 <vTaskStartScheduler+0xb0>)
 800b442:	f7ff fd97 	bl	800af74 <xTaskCreateStatic>
 800b446:	4602      	mov	r2, r0
 800b448:	4b1e      	ldr	r3, [pc, #120]	; (800b4c4 <vTaskStartScheduler+0xb4>)
 800b44a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b44c:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <vTaskStartScheduler+0xb4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b454:	2301      	movs	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e001      	b.n	800b45e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d117      	bne.n	800b494 <vTaskStartScheduler+0x84>
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	b672      	cpsid	i
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	b662      	cpsie	i
 800b478:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b47a:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <vTaskStartScheduler+0xb8>)
 800b47c:	f04f 32ff 	mov.w	r2, #4294967295
 800b480:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <vTaskStartScheduler+0xbc>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b488:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <vTaskStartScheduler+0xc0>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b48e:	f000 fd6f 	bl	800bf70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b492:	e00f      	b.n	800b4b4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d10b      	bne.n	800b4b4 <vTaskStartScheduler+0xa4>
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	b672      	cpsid	i
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	b662      	cpsie	i
 800b4b0:	60fb      	str	r3, [r7, #12]
 800b4b2:	e7fe      	b.n	800b4b2 <vTaskStartScheduler+0xa2>
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	0800c708 	.word	0x0800c708
 800b4c0:	0800ba99 	.word	0x0800ba99
 800b4c4:	20000608 	.word	0x20000608
 800b4c8:	20000604 	.word	0x20000604
 800b4cc:	200005f0 	.word	0x200005f0
 800b4d0:	200005e8 	.word	0x200005e8

0800b4d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <vTaskSuspendAll+0x18>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	4a03      	ldr	r2, [pc, #12]	; (800b4ec <vTaskSuspendAll+0x18>)
 800b4e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b4e2:	bf00      	nop
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	2000060c 	.word	0x2000060c

0800b4f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4fe:	4b42      	ldr	r3, [pc, #264]	; (800b608 <xTaskResumeAll+0x118>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10b      	bne.n	800b51e <xTaskResumeAll+0x2e>
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	b672      	cpsid	i
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	b662      	cpsie	i
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	e7fe      	b.n	800b51c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b51e:	f000 fda3 	bl	800c068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b522:	4b39      	ldr	r3, [pc, #228]	; (800b608 <xTaskResumeAll+0x118>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3b01      	subs	r3, #1
 800b528:	4a37      	ldr	r2, [pc, #220]	; (800b608 <xTaskResumeAll+0x118>)
 800b52a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b52c:	4b36      	ldr	r3, [pc, #216]	; (800b608 <xTaskResumeAll+0x118>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d161      	bne.n	800b5f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b534:	4b35      	ldr	r3, [pc, #212]	; (800b60c <xTaskResumeAll+0x11c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d05d      	beq.n	800b5f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b53c:	e02e      	b.n	800b59c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53e:	4b34      	ldr	r3, [pc, #208]	; (800b610 <xTaskResumeAll+0x120>)
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3318      	adds	r3, #24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff f97d 	bl	800a84a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3304      	adds	r3, #4
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff f978 	bl	800a84a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	2201      	movs	r2, #1
 800b560:	409a      	lsls	r2, r3
 800b562:	4b2c      	ldr	r3, [pc, #176]	; (800b614 <xTaskResumeAll+0x124>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4313      	orrs	r3, r2
 800b568:	4a2a      	ldr	r2, [pc, #168]	; (800b614 <xTaskResumeAll+0x124>)
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b570:	4613      	mov	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4a27      	ldr	r2, [pc, #156]	; (800b618 <xTaskResumeAll+0x128>)
 800b57a:	441a      	add	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3304      	adds	r3, #4
 800b580:	4619      	mov	r1, r3
 800b582:	4610      	mov	r0, r2
 800b584:	f7ff f904 	bl	800a790 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58c:	4b23      	ldr	r3, [pc, #140]	; (800b61c <xTaskResumeAll+0x12c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	429a      	cmp	r2, r3
 800b594:	d302      	bcc.n	800b59c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b596:	4b22      	ldr	r3, [pc, #136]	; (800b620 <xTaskResumeAll+0x130>)
 800b598:	2201      	movs	r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b59c:	4b1c      	ldr	r3, [pc, #112]	; (800b610 <xTaskResumeAll+0x120>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1cc      	bne.n	800b53e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5aa:	f000 fb29 	bl	800bc00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <xTaskResumeAll+0x134>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d010      	beq.n	800b5dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5ba:	f000 f847 	bl	800b64c <xTaskIncrementTick>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5c4:	4b16      	ldr	r3, [pc, #88]	; (800b620 <xTaskResumeAll+0x130>)
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1f1      	bne.n	800b5ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b5d6:	4b13      	ldr	r3, [pc, #76]	; (800b624 <xTaskResumeAll+0x134>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <xTaskResumeAll+0x130>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d009      	beq.n	800b5f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <xTaskResumeAll+0x138>)
 800b5ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5f8:	f000 fd68 	bl	800c0cc <vPortExitCritical>

	return xAlreadyYielded;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	2000060c 	.word	0x2000060c
 800b60c:	200005e4 	.word	0x200005e4
 800b610:	200005a4 	.word	0x200005a4
 800b614:	200005ec 	.word	0x200005ec
 800b618:	200004e8 	.word	0x200004e8
 800b61c:	200004e4 	.word	0x200004e4
 800b620:	200005f8 	.word	0x200005f8
 800b624:	200005f4 	.word	0x200005f4
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <xTaskGetTickCount+0x1c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b638:	687b      	ldr	r3, [r7, #4]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	200005e8 	.word	0x200005e8

0800b64c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b656:	4b4f      	ldr	r3, [pc, #316]	; (800b794 <xTaskIncrementTick+0x148>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f040 8089 	bne.w	800b772 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b660:	4b4d      	ldr	r3, [pc, #308]	; (800b798 <xTaskIncrementTick+0x14c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b668:	4a4b      	ldr	r2, [pc, #300]	; (800b798 <xTaskIncrementTick+0x14c>)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d121      	bne.n	800b6b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b674:	4b49      	ldr	r3, [pc, #292]	; (800b79c <xTaskIncrementTick+0x150>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <xTaskIncrementTick+0x4a>
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	b672      	cpsid	i
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	b662      	cpsie	i
 800b692:	603b      	str	r3, [r7, #0]
 800b694:	e7fe      	b.n	800b694 <xTaskIncrementTick+0x48>
 800b696:	4b41      	ldr	r3, [pc, #260]	; (800b79c <xTaskIncrementTick+0x150>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	4b40      	ldr	r3, [pc, #256]	; (800b7a0 <xTaskIncrementTick+0x154>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a3e      	ldr	r2, [pc, #248]	; (800b79c <xTaskIncrementTick+0x150>)
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4a3e      	ldr	r2, [pc, #248]	; (800b7a0 <xTaskIncrementTick+0x154>)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	4b3e      	ldr	r3, [pc, #248]	; (800b7a4 <xTaskIncrementTick+0x158>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	4a3c      	ldr	r2, [pc, #240]	; (800b7a4 <xTaskIncrementTick+0x158>)
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	f000 faa4 	bl	800bc00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6b8:	4b3b      	ldr	r3, [pc, #236]	; (800b7a8 <xTaskIncrementTick+0x15c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d348      	bcc.n	800b754 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c2:	4b36      	ldr	r3, [pc, #216]	; (800b79c <xTaskIncrementTick+0x150>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6cc:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <xTaskIncrementTick+0x15c>)
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d2:	601a      	str	r2, [r3, #0]
					break;
 800b6d4:	e03e      	b.n	800b754 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d6:	4b31      	ldr	r3, [pc, #196]	; (800b79c <xTaskIncrementTick+0x150>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d203      	bcs.n	800b6f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6ee:	4a2e      	ldr	r2, [pc, #184]	; (800b7a8 <xTaskIncrementTick+0x15c>)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6f4:	e02e      	b.n	800b754 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff f8a5 	bl	800a84a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	3318      	adds	r3, #24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff f89c 	bl	800a84a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b716:	2201      	movs	r2, #1
 800b718:	409a      	lsls	r2, r3
 800b71a:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <xTaskIncrementTick+0x160>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4313      	orrs	r3, r2
 800b720:	4a22      	ldr	r2, [pc, #136]	; (800b7ac <xTaskIncrementTick+0x160>)
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <xTaskIncrementTick+0x164>)
 800b732:	441a      	add	r2, r3
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	3304      	adds	r3, #4
 800b738:	4619      	mov	r1, r3
 800b73a:	4610      	mov	r0, r2
 800b73c:	f7ff f828 	bl	800a790 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4b1b      	ldr	r3, [pc, #108]	; (800b7b4 <xTaskIncrementTick+0x168>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d3b9      	bcc.n	800b6c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b74e:	2301      	movs	r3, #1
 800b750:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b752:	e7b6      	b.n	800b6c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b754:	4b17      	ldr	r3, [pc, #92]	; (800b7b4 <xTaskIncrementTick+0x168>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75a:	4915      	ldr	r1, [pc, #84]	; (800b7b0 <xTaskIncrementTick+0x164>)
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	440b      	add	r3, r1
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d907      	bls.n	800b77c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800b76c:	2301      	movs	r3, #1
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	e004      	b.n	800b77c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b772:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <xTaskIncrementTick+0x16c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3301      	adds	r3, #1
 800b778:	4a0f      	ldr	r2, [pc, #60]	; (800b7b8 <xTaskIncrementTick+0x16c>)
 800b77a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <xTaskIncrementTick+0x170>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b788:	697b      	ldr	r3, [r7, #20]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	2000060c 	.word	0x2000060c
 800b798:	200005e8 	.word	0x200005e8
 800b79c:	2000059c 	.word	0x2000059c
 800b7a0:	200005a0 	.word	0x200005a0
 800b7a4:	200005fc 	.word	0x200005fc
 800b7a8:	20000604 	.word	0x20000604
 800b7ac:	200005ec 	.word	0x200005ec
 800b7b0:	200004e8 	.word	0x200004e8
 800b7b4:	200004e4 	.word	0x200004e4
 800b7b8:	200005f4 	.word	0x200005f4
 800b7bc:	200005f8 	.word	0x200005f8

0800b7c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7c6:	4b27      	ldr	r3, [pc, #156]	; (800b864 <vTaskSwitchContext+0xa4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7ce:	4b26      	ldr	r3, [pc, #152]	; (800b868 <vTaskSwitchContext+0xa8>)
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7d4:	e040      	b.n	800b858 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b7d6:	4b24      	ldr	r3, [pc, #144]	; (800b868 <vTaskSwitchContext+0xa8>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7dc:	4b23      	ldr	r3, [pc, #140]	; (800b86c <vTaskSwitchContext+0xac>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	fab3 f383 	clz	r3, r3
 800b7e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	f1c3 031f 	rsb	r3, r3, #31
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	491f      	ldr	r1, [pc, #124]	; (800b870 <vTaskSwitchContext+0xb0>)
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4413      	add	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	440b      	add	r3, r1
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10b      	bne.n	800b81e <vTaskSwitchContext+0x5e>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	b672      	cpsid	i
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	b662      	cpsie	i
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	e7fe      	b.n	800b81c <vTaskSwitchContext+0x5c>
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	4613      	mov	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4a11      	ldr	r2, [pc, #68]	; (800b870 <vTaskSwitchContext+0xb0>)
 800b82a:	4413      	add	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	605a      	str	r2, [r3, #4]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	3308      	adds	r3, #8
 800b840:	429a      	cmp	r2, r3
 800b842:	d104      	bne.n	800b84e <vTaskSwitchContext+0x8e>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	605a      	str	r2, [r3, #4]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	4a07      	ldr	r2, [pc, #28]	; (800b874 <vTaskSwitchContext+0xb4>)
 800b856:	6013      	str	r3, [r2, #0]
}
 800b858:	bf00      	nop
 800b85a:	371c      	adds	r7, #28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	2000060c 	.word	0x2000060c
 800b868:	200005f8 	.word	0x200005f8
 800b86c:	200005ec 	.word	0x200005ec
 800b870:	200004e8 	.word	0x200004e8
 800b874:	200004e4 	.word	0x200004e4

0800b878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <vTaskPlaceOnEventList+0x28>
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	b672      	cpsid	i
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	b662      	cpsie	i
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	e7fe      	b.n	800b89e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <vTaskPlaceOnEventList+0x48>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3318      	adds	r3, #24
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7fe ff95 	bl	800a7d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	6838      	ldr	r0, [r7, #0]
 800b8b2:	f000 fa6b 	bl	800bd8c <prvAddCurrentTaskToDelayedList>
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	200004e4 	.word	0x200004e4

0800b8c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <xTaskRemoveFromEventList+0x2e>
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	b672      	cpsid	i
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	b662      	cpsie	i
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e7fe      	b.n	800b8f0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	3318      	adds	r3, #24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe ffa7 	bl	800a84a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <xTaskRemoveFromEventList+0xb0>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d11c      	bne.n	800b93e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe ff9e 	bl	800a84a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	2201      	movs	r2, #1
 800b914:	409a      	lsls	r2, r3
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <xTaskRemoveFromEventList+0xb4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	4a16      	ldr	r2, [pc, #88]	; (800b978 <xTaskRemoveFromEventList+0xb4>)
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4a13      	ldr	r2, [pc, #76]	; (800b97c <xTaskRemoveFromEventList+0xb8>)
 800b92e:	441a      	add	r2, r3
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3304      	adds	r3, #4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe ff2a 	bl	800a790 <vListInsertEnd>
 800b93c:	e005      	b.n	800b94a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	3318      	adds	r3, #24
 800b942:	4619      	mov	r1, r3
 800b944:	480e      	ldr	r0, [pc, #56]	; (800b980 <xTaskRemoveFromEventList+0xbc>)
 800b946:	f7fe ff23 	bl	800a790 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94e:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <xTaskRemoveFromEventList+0xc0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	429a      	cmp	r2, r3
 800b956:	d905      	bls.n	800b964 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b95c:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <xTaskRemoveFromEventList+0xc4>)
 800b95e:	2201      	movs	r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e001      	b.n	800b968 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b968:	697b      	ldr	r3, [r7, #20]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2000060c 	.word	0x2000060c
 800b978:	200005ec 	.word	0x200005ec
 800b97c:	200004e8 	.word	0x200004e8
 800b980:	200005a4 	.word	0x200005a4
 800b984:	200004e4 	.word	0x200004e4
 800b988:	200005f8 	.word	0x200005f8

0800b98c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b994:	4b06      	ldr	r3, [pc, #24]	; (800b9b0 <vTaskInternalSetTimeOutState+0x24>)
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <vTaskInternalSetTimeOutState+0x28>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	605a      	str	r2, [r3, #4]
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	200005fc 	.word	0x200005fc
 800b9b4:	200005e8 	.word	0x200005e8

0800b9b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10b      	bne.n	800b9e0 <xTaskCheckForTimeOut+0x28>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	b672      	cpsid	i
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	b662      	cpsie	i
 800b9dc:	613b      	str	r3, [r7, #16]
 800b9de:	e7fe      	b.n	800b9de <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10b      	bne.n	800b9fe <xTaskCheckForTimeOut+0x46>
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	b672      	cpsid	i
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	b662      	cpsie	i
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	e7fe      	b.n	800b9fc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b9fe:	f000 fb33 	bl	800c068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba02:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <xTaskCheckForTimeOut+0xc0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d102      	bne.n	800ba22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61fb      	str	r3, [r7, #28]
 800ba20:	e023      	b.n	800ba6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <xTaskCheckForTimeOut+0xc4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d007      	beq.n	800ba3e <xTaskCheckForTimeOut+0x86>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d302      	bcc.n	800ba3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	e015      	b.n	800ba6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d20b      	bcs.n	800ba60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7ff ff99 	bl	800b98c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61fb      	str	r3, [r7, #28]
 800ba5e:	e004      	b.n	800ba6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba66:	2301      	movs	r3, #1
 800ba68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba6a:	f000 fb2f 	bl	800c0cc <vPortExitCritical>

	return xReturn;
 800ba6e:	69fb      	ldr	r3, [r7, #28]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200005e8 	.word	0x200005e8
 800ba7c:	200005fc 	.word	0x200005fc

0800ba80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba84:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <vTaskMissedYield+0x14>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	601a      	str	r2, [r3, #0]
}
 800ba8a:	bf00      	nop
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	200005f8 	.word	0x200005f8

0800ba98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800baa0:	f000 f852 	bl	800bb48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800baa4:	4b06      	ldr	r3, [pc, #24]	; (800bac0 <prvIdleTask+0x28>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d9f9      	bls.n	800baa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800baac:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <prvIdleTask+0x2c>)
 800baae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800babc:	e7f0      	b.n	800baa0 <prvIdleTask+0x8>
 800babe:	bf00      	nop
 800bac0:	200004e8 	.word	0x200004e8
 800bac4:	e000ed04 	.word	0xe000ed04

0800bac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]
 800bad2:	e00c      	b.n	800baee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	4613      	mov	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4a12      	ldr	r2, [pc, #72]	; (800bb28 <prvInitialiseTaskLists+0x60>)
 800bae0:	4413      	add	r3, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fe27 	bl	800a736 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3301      	adds	r3, #1
 800baec:	607b      	str	r3, [r7, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b06      	cmp	r3, #6
 800baf2:	d9ef      	bls.n	800bad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800baf4:	480d      	ldr	r0, [pc, #52]	; (800bb2c <prvInitialiseTaskLists+0x64>)
 800baf6:	f7fe fe1e 	bl	800a736 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bafa:	480d      	ldr	r0, [pc, #52]	; (800bb30 <prvInitialiseTaskLists+0x68>)
 800bafc:	f7fe fe1b 	bl	800a736 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb00:	480c      	ldr	r0, [pc, #48]	; (800bb34 <prvInitialiseTaskLists+0x6c>)
 800bb02:	f7fe fe18 	bl	800a736 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb06:	480c      	ldr	r0, [pc, #48]	; (800bb38 <prvInitialiseTaskLists+0x70>)
 800bb08:	f7fe fe15 	bl	800a736 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb0c:	480b      	ldr	r0, [pc, #44]	; (800bb3c <prvInitialiseTaskLists+0x74>)
 800bb0e:	f7fe fe12 	bl	800a736 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb12:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <prvInitialiseTaskLists+0x78>)
 800bb14:	4a05      	ldr	r2, [pc, #20]	; (800bb2c <prvInitialiseTaskLists+0x64>)
 800bb16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <prvInitialiseTaskLists+0x7c>)
 800bb1a:	4a05      	ldr	r2, [pc, #20]	; (800bb30 <prvInitialiseTaskLists+0x68>)
 800bb1c:	601a      	str	r2, [r3, #0]
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	200004e8 	.word	0x200004e8
 800bb2c:	20000574 	.word	0x20000574
 800bb30:	20000588 	.word	0x20000588
 800bb34:	200005a4 	.word	0x200005a4
 800bb38:	200005b8 	.word	0x200005b8
 800bb3c:	200005d0 	.word	0x200005d0
 800bb40:	2000059c 	.word	0x2000059c
 800bb44:	200005a0 	.word	0x200005a0

0800bb48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb4e:	e019      	b.n	800bb84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb50:	f000 fa8a 	bl	800c068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb54:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <prvCheckTasksWaitingTermination+0x4c>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe fe72 	bl	800a84a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <prvCheckTasksWaitingTermination+0x50>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	4a0a      	ldr	r2, [pc, #40]	; (800bb98 <prvCheckTasksWaitingTermination+0x50>)
 800bb6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb70:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <prvCheckTasksWaitingTermination+0x54>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3b01      	subs	r3, #1
 800bb76:	4a09      	ldr	r2, [pc, #36]	; (800bb9c <prvCheckTasksWaitingTermination+0x54>)
 800bb78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb7a:	f000 faa7 	bl	800c0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f80e 	bl	800bba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb84:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <prvCheckTasksWaitingTermination+0x54>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e1      	bne.n	800bb50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb8c:	bf00      	nop
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	200005b8 	.word	0x200005b8
 800bb98:	200005e4 	.word	0x200005e4
 800bb9c:	200005cc 	.word	0x200005cc

0800bba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d108      	bne.n	800bbc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 fbfe 	bl	800c3b8 <vPortFree>
				vPortFree( pxTCB );
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fbfb 	bl	800c3b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbc2:	e019      	b.n	800bbf8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fbf2 	bl	800c3b8 <vPortFree>
	}
 800bbd4:	e010      	b.n	800bbf8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d00b      	beq.n	800bbf8 <prvDeleteTCB+0x58>
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	b672      	cpsid	i
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	b662      	cpsie	i
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	e7fe      	b.n	800bbf6 <prvDeleteTCB+0x56>
	}
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvResetNextTaskUnblockTime+0x38>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d104      	bne.n	800bc1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <prvResetNextTaskUnblockTime+0x3c>)
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295
 800bc16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc18:	e008      	b.n	800bc2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <prvResetNextTaskUnblockTime+0x38>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4a04      	ldr	r2, [pc, #16]	; (800bc3c <prvResetNextTaskUnblockTime+0x3c>)
 800bc2a:	6013      	str	r3, [r2, #0]
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	2000059c 	.word	0x2000059c
 800bc3c:	20000604 	.word	0x20000604

0800bc40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <xTaskGetSchedulerState+0x34>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	e008      	b.n	800bc66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc54:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <xTaskGetSchedulerState+0x38>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	607b      	str	r3, [r7, #4]
 800bc60:	e001      	b.n	800bc66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc62:	2300      	movs	r3, #0
 800bc64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc66:	687b      	ldr	r3, [r7, #4]
	}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	200005f0 	.word	0x200005f0
 800bc78:	2000060c 	.word	0x2000060c

0800bc7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d070      	beq.n	800bd74 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc92:	4b3b      	ldr	r3, [pc, #236]	; (800bd80 <xTaskPriorityDisinherit+0x104>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d00b      	beq.n	800bcb4 <xTaskPriorityDisinherit+0x38>
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	b672      	cpsid	i
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	b662      	cpsie	i
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e7fe      	b.n	800bcb2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10b      	bne.n	800bcd4 <xTaskPriorityDisinherit+0x58>
 800bcbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc0:	b672      	cpsid	i
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	b662      	cpsie	i
 800bcd0:	60bb      	str	r3, [r7, #8]
 800bcd2:	e7fe      	b.n	800bcd2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd8:	1e5a      	subs	r2, r3, #1
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d044      	beq.n	800bd74 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d140      	bne.n	800bd74 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fda7 	bl	800a84a <uxListRemove>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d115      	bne.n	800bd2e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd06:	491f      	ldr	r1, [pc, #124]	; (800bd84 <xTaskPriorityDisinherit+0x108>)
 800bd08:	4613      	mov	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xTaskPriorityDisinherit+0xb2>
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd22:	43da      	mvns	r2, r3
 800bd24:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <xTaskPriorityDisinherit+0x10c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <xTaskPriorityDisinherit+0x10c>)
 800bd2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3a:	f1c3 0207 	rsb	r2, r3, #7
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd46:	2201      	movs	r2, #1
 800bd48:	409a      	lsls	r2, r3
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <xTaskPriorityDisinherit+0x10c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	4a0d      	ldr	r2, [pc, #52]	; (800bd88 <xTaskPriorityDisinherit+0x10c>)
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4613      	mov	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4a08      	ldr	r2, [pc, #32]	; (800bd84 <xTaskPriorityDisinherit+0x108>)
 800bd62:	441a      	add	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f7fe fd10 	bl	800a790 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd74:	697b      	ldr	r3, [r7, #20]
	}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	200004e4 	.word	0x200004e4
 800bd84:	200004e8 	.word	0x200004e8
 800bd88:	200005ec 	.word	0x200005ec

0800bd8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd96:	4b29      	ldr	r3, [pc, #164]	; (800be3c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd9c:	4b28      	ldr	r3, [pc, #160]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fd51 	bl	800a84a <uxListRemove>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10b      	bne.n	800bdc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bdae:	4b24      	ldr	r3, [pc, #144]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	43da      	mvns	r2, r3
 800bdbc:	4b21      	ldr	r3, [pc, #132]	; (800be44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	4a20      	ldr	r2, [pc, #128]	; (800be44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdcc:	d10a      	bne.n	800bde4 <prvAddCurrentTaskToDelayedList+0x58>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d007      	beq.n	800bde4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd4:	4b1a      	ldr	r3, [pc, #104]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	481a      	ldr	r0, [pc, #104]	; (800be48 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bdde:	f7fe fcd7 	bl	800a790 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bde2:	e026      	b.n	800be32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdec:	4b14      	ldr	r3, [pc, #80]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d209      	bcs.n	800be10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdfc:	4b13      	ldr	r3, [pc, #76]	; (800be4c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fe fce5 	bl	800a7d8 <vListInsert>
}
 800be0e:	e010      	b.n	800be32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be10:	4b0f      	ldr	r3, [pc, #60]	; (800be50 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3304      	adds	r3, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	4610      	mov	r0, r2
 800be1e:	f7fe fcdb 	bl	800a7d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be22:	4b0c      	ldr	r3, [pc, #48]	; (800be54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d202      	bcs.n	800be32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be2c:	4a09      	ldr	r2, [pc, #36]	; (800be54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	6013      	str	r3, [r2, #0]
}
 800be32:	bf00      	nop
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	200005e8 	.word	0x200005e8
 800be40:	200004e4 	.word	0x200004e4
 800be44:	200005ec 	.word	0x200005ec
 800be48:	200005d0 	.word	0x200005d0
 800be4c:	200005a0 	.word	0x200005a0
 800be50:	2000059c 	.word	0x2000059c
 800be54:	20000604 	.word	0x20000604

0800be58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b04      	subs	r3, #4
 800be68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3b04      	subs	r3, #4
 800be76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f023 0201 	bic.w	r2, r3, #1
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3b04      	subs	r3, #4
 800be86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be88:	4a0c      	ldr	r2, [pc, #48]	; (800bebc <pxPortInitialiseStack+0x64>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3b14      	subs	r3, #20
 800be92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3b04      	subs	r3, #4
 800be9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f06f 0202 	mvn.w	r2, #2
 800bea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3b20      	subs	r3, #32
 800beac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beae:	68fb      	ldr	r3, [r7, #12]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	0800bec1 	.word	0x0800bec1

0800bec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <prvTaskExitError+0x58>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d00b      	beq.n	800beec <prvTaskExitError+0x2c>
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	b672      	cpsid	i
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	b662      	cpsie	i
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	e7fe      	b.n	800beea <prvTaskExitError+0x2a>
 800beec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef0:	b672      	cpsid	i
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	b662      	cpsie	i
 800bf00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf02:	bf00      	nop
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0fc      	beq.n	800bf04 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	20000050 	.word	0x20000050
 800bf1c:	00000000 	.word	0x00000000

0800bf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf20:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <pxCurrentTCBConst2>)
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	6808      	ldr	r0, [r1, #0]
 800bf26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2a:	f380 8809 	msr	PSP, r0
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f04f 0000 	mov.w	r0, #0
 800bf36:	f380 8811 	msr	BASEPRI, r0
 800bf3a:	4770      	bx	lr
 800bf3c:	f3af 8000 	nop.w

0800bf40 <pxCurrentTCBConst2>:
 800bf40:	200004e4 	.word	0x200004e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf48:	4808      	ldr	r0, [pc, #32]	; (800bf6c <prvPortStartFirstTask+0x24>)
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	6800      	ldr	r0, [r0, #0]
 800bf4e:	f380 8808 	msr	MSP, r0
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8814 	msr	CONTROL, r0
 800bf5a:	b662      	cpsie	i
 800bf5c:	b661      	cpsie	f
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	df00      	svc	0
 800bf68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf6a:	bf00      	nop
 800bf6c:	e000ed08 	.word	0xe000ed08

0800bf70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf76:	4b36      	ldr	r3, [pc, #216]	; (800c050 <xPortStartScheduler+0xe0>)
 800bf78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	22ff      	movs	r2, #255	; 0xff
 800bf86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	4b2e      	ldr	r3, [pc, #184]	; (800c054 <xPortStartScheduler+0xe4>)
 800bf9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf9e:	4b2e      	ldr	r3, [pc, #184]	; (800c058 <xPortStartScheduler+0xe8>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfa4:	e009      	b.n	800bfba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bfa6:	4b2c      	ldr	r3, [pc, #176]	; (800c058 <xPortStartScheduler+0xe8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	4a2a      	ldr	r2, [pc, #168]	; (800c058 <xPortStartScheduler+0xe8>)
 800bfae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfba:	78fb      	ldrb	r3, [r7, #3]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc2:	2b80      	cmp	r3, #128	; 0x80
 800bfc4:	d0ef      	beq.n	800bfa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfc6:	4b24      	ldr	r3, [pc, #144]	; (800c058 <xPortStartScheduler+0xe8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1c3 0307 	rsb	r3, r3, #7
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d00b      	beq.n	800bfea <xPortStartScheduler+0x7a>
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	b672      	cpsid	i
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	b662      	cpsie	i
 800bfe6:	60bb      	str	r3, [r7, #8]
 800bfe8:	e7fe      	b.n	800bfe8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfea:	4b1b      	ldr	r3, [pc, #108]	; (800c058 <xPortStartScheduler+0xe8>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	4a19      	ldr	r2, [pc, #100]	; (800c058 <xPortStartScheduler+0xe8>)
 800bff2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bff4:	4b18      	ldr	r3, [pc, #96]	; (800c058 <xPortStartScheduler+0xe8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bffc:	4a16      	ldr	r2, [pc, #88]	; (800c058 <xPortStartScheduler+0xe8>)
 800bffe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	b2da      	uxtb	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c008:	4b14      	ldr	r3, [pc, #80]	; (800c05c <xPortStartScheduler+0xec>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a13      	ldr	r2, [pc, #76]	; (800c05c <xPortStartScheduler+0xec>)
 800c00e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c012:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c014:	4b11      	ldr	r3, [pc, #68]	; (800c05c <xPortStartScheduler+0xec>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a10      	ldr	r2, [pc, #64]	; (800c05c <xPortStartScheduler+0xec>)
 800c01a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c01e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c020:	f000 f8d4 	bl	800c1cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <xPortStartScheduler+0xf0>)
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c02a:	f000 f8f3 	bl	800c214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c02e:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <xPortStartScheduler+0xf4>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a0c      	ldr	r2, [pc, #48]	; (800c064 <xPortStartScheduler+0xf4>)
 800c034:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c038:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c03a:	f7ff ff85 	bl	800bf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c03e:	f7ff fbbf 	bl	800b7c0 <vTaskSwitchContext>
	prvTaskExitError();
 800c042:	f7ff ff3d 	bl	800bec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	e000e400 	.word	0xe000e400
 800c054:	20000610 	.word	0x20000610
 800c058:	20000614 	.word	0x20000614
 800c05c:	e000ed20 	.word	0xe000ed20
 800c060:	20000050 	.word	0x20000050
 800c064:	e000ef34 	.word	0xe000ef34

0800c068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	b672      	cpsid	i
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	b662      	cpsie	i
 800c082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c084:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <vPortEnterCritical+0x5c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	4a0e      	ldr	r2, [pc, #56]	; (800c0c4 <vPortEnterCritical+0x5c>)
 800c08c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <vPortEnterCritical+0x5c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d110      	bne.n	800c0b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c096:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <vPortEnterCritical+0x60>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00b      	beq.n	800c0b8 <vPortEnterCritical+0x50>
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	b672      	cpsid	i
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	b662      	cpsie	i
 800c0b4:	603b      	str	r3, [r7, #0]
 800c0b6:	e7fe      	b.n	800c0b6 <vPortEnterCritical+0x4e>
	}
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20000050 	.word	0x20000050
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0d2:	4b12      	ldr	r3, [pc, #72]	; (800c11c <vPortExitCritical+0x50>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10b      	bne.n	800c0f2 <vPortExitCritical+0x26>
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	b672      	cpsid	i
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	b662      	cpsie	i
 800c0ee:	607b      	str	r3, [r7, #4]
 800c0f0:	e7fe      	b.n	800c0f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <vPortExitCritical+0x50>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	4a08      	ldr	r2, [pc, #32]	; (800c11c <vPortExitCritical+0x50>)
 800c0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <vPortExitCritical+0x50>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d104      	bne.n	800c10e <vPortExitCritical+0x42>
 800c104:	2300      	movs	r3, #0
 800c106:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	20000050 	.word	0x20000050

0800c120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c120:	f3ef 8009 	mrs	r0, PSP
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	4b15      	ldr	r3, [pc, #84]	; (800c180 <pxCurrentTCBConst>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	f01e 0f10 	tst.w	lr, #16
 800c130:	bf08      	it	eq
 800c132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	6010      	str	r0, [r2, #0]
 800c13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c140:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c144:	b672      	cpsid	i
 800c146:	f380 8811 	msr	BASEPRI, r0
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	b662      	cpsie	i
 800c154:	f7ff fb34 	bl	800b7c0 <vTaskSwitchContext>
 800c158:	f04f 0000 	mov.w	r0, #0
 800c15c:	f380 8811 	msr	BASEPRI, r0
 800c160:	bc09      	pop	{r0, r3}
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	6808      	ldr	r0, [r1, #0]
 800c166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16a:	f01e 0f10 	tst.w	lr, #16
 800c16e:	bf08      	it	eq
 800c170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c174:	f380 8809 	msr	PSP, r0
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <pxCurrentTCBConst>:
 800c180:	200004e4 	.word	0x200004e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop

0800c188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	b672      	cpsid	i
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	b662      	cpsie	i
 800c1a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1a4:	f7ff fa52 	bl	800b64c <xTaskIncrementTick>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1ae:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <SysTick_Handler+0x40>)
 800c1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b4:	601a      	str	r2, [r3, #0]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1d0:	4b0b      	ldr	r3, [pc, #44]	; (800c200 <vPortSetupTimerInterrupt+0x34>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <vPortSetupTimerInterrupt+0x38>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <vPortSetupTimerInterrupt+0x3c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a0a      	ldr	r2, [pc, #40]	; (800c20c <vPortSetupTimerInterrupt+0x40>)
 800c1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1e6:	099b      	lsrs	r3, r3, #6
 800c1e8:	4a09      	ldr	r2, [pc, #36]	; (800c210 <vPortSetupTimerInterrupt+0x44>)
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1ee:	4b04      	ldr	r3, [pc, #16]	; (800c200 <vPortSetupTimerInterrupt+0x34>)
 800c1f0:	2207      	movs	r2, #7
 800c1f2:	601a      	str	r2, [r3, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	e000e010 	.word	0xe000e010
 800c204:	e000e018 	.word	0xe000e018
 800c208:	20000044 	.word	0x20000044
 800c20c:	10624dd3 	.word	0x10624dd3
 800c210:	e000e014 	.word	0xe000e014

0800c214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c224 <vPortEnableVFP+0x10>
 800c218:	6801      	ldr	r1, [r0, #0]
 800c21a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c21e:	6001      	str	r1, [r0, #0]
 800c220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c222:	bf00      	nop
 800c224:	e000ed88 	.word	0xe000ed88

0800c228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	; 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c234:	f7ff f94e 	bl	800b4d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c238:	4b5a      	ldr	r3, [pc, #360]	; (800c3a4 <pvPortMalloc+0x17c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c240:	f000 f916 	bl	800c470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c244:	4b58      	ldr	r3, [pc, #352]	; (800c3a8 <pvPortMalloc+0x180>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f040 8090 	bne.w	800c372 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01e      	beq.n	800c296 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c258:	2208      	movs	r2, #8
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4413      	add	r3, r2
 800c25e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f003 0307 	and.w	r3, r3, #7
 800c266:	2b00      	cmp	r3, #0
 800c268:	d015      	beq.n	800c296 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f023 0307 	bic.w	r3, r3, #7
 800c270:	3308      	adds	r3, #8
 800c272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00b      	beq.n	800c296 <pvPortMalloc+0x6e>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	b672      	cpsid	i
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	b662      	cpsie	i
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e7fe      	b.n	800c294 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d06a      	beq.n	800c372 <pvPortMalloc+0x14a>
 800c29c:	4b43      	ldr	r3, [pc, #268]	; (800c3ac <pvPortMalloc+0x184>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d865      	bhi.n	800c372 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2a6:	4b42      	ldr	r3, [pc, #264]	; (800c3b0 <pvPortMalloc+0x188>)
 800c2a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2aa:	4b41      	ldr	r3, [pc, #260]	; (800c3b0 <pvPortMalloc+0x188>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b0:	e004      	b.n	800c2bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d903      	bls.n	800c2ce <pvPortMalloc+0xa6>
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1f1      	bne.n	800c2b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ce:	4b35      	ldr	r3, [pc, #212]	; (800c3a4 <pvPortMalloc+0x17c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d04c      	beq.n	800c372 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2208      	movs	r2, #8
 800c2de:	4413      	add	r3, r2
 800c2e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	1ad2      	subs	r2, r2, r3
 800c2f2:	2308      	movs	r3, #8
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d920      	bls.n	800c33c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <pvPortMalloc+0xfc>
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	b672      	cpsid	i
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	b662      	cpsie	i
 800c320:	613b      	str	r3, [r7, #16]
 800c322:	e7fe      	b.n	800c322 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c336:	69b8      	ldr	r0, [r7, #24]
 800c338:	f000 f8fc 	bl	800c534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c33c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ac <pvPortMalloc+0x184>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	4a19      	ldr	r2, [pc, #100]	; (800c3ac <pvPortMalloc+0x184>)
 800c348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34a:	4b18      	ldr	r3, [pc, #96]	; (800c3ac <pvPortMalloc+0x184>)
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	4b19      	ldr	r3, [pc, #100]	; (800c3b4 <pvPortMalloc+0x18c>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d203      	bcs.n	800c35e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c356:	4b15      	ldr	r3, [pc, #84]	; (800c3ac <pvPortMalloc+0x184>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a16      	ldr	r2, [pc, #88]	; (800c3b4 <pvPortMalloc+0x18c>)
 800c35c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	4b11      	ldr	r3, [pc, #68]	; (800c3a8 <pvPortMalloc+0x180>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	431a      	orrs	r2, r3
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c372:	f7ff f8bd 	bl	800b4f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <pvPortMalloc+0x170>
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	b672      	cpsid	i
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	b662      	cpsie	i
 800c394:	60fb      	str	r3, [r7, #12]
 800c396:	e7fe      	b.n	800c396 <pvPortMalloc+0x16e>
	return pvReturn;
 800c398:	69fb      	ldr	r3, [r7, #28]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3728      	adds	r7, #40	; 0x28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20008620 	.word	0x20008620
 800c3a8:	2000862c 	.word	0x2000862c
 800c3ac:	20008624 	.word	0x20008624
 800c3b0:	20008618 	.word	0x20008618
 800c3b4:	20008628 	.word	0x20008628

0800c3b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d04a      	beq.n	800c460 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	425b      	negs	r3, r3
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b22      	ldr	r3, [pc, #136]	; (800c468 <vPortFree+0xb0>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10b      	bne.n	800c3fe <vPortFree+0x46>
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	b672      	cpsid	i
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	b662      	cpsie	i
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e7fe      	b.n	800c3fc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00b      	beq.n	800c41e <vPortFree+0x66>
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	b672      	cpsid	i
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	b662      	cpsie	i
 800c41a:	60bb      	str	r3, [r7, #8]
 800c41c:	e7fe      	b.n	800c41c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4b11      	ldr	r3, [pc, #68]	; (800c468 <vPortFree+0xb0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4013      	ands	r3, r2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d019      	beq.n	800c460 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d115      	bne.n	800c460 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <vPortFree+0xb0>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	43db      	mvns	r3, r3
 800c43e:	401a      	ands	r2, r3
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c444:	f7ff f846 	bl	800b4d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b07      	ldr	r3, [pc, #28]	; (800c46c <vPortFree+0xb4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4413      	add	r3, r2
 800c452:	4a06      	ldr	r2, [pc, #24]	; (800c46c <vPortFree+0xb4>)
 800c454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f000 f86c 	bl	800c534 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c45c:	f7ff f848 	bl	800b4f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c460:	bf00      	nop
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	2000862c 	.word	0x2000862c
 800c46c:	20008624 	.word	0x20008624

0800c470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c47a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c47c:	4b27      	ldr	r3, [pc, #156]	; (800c51c <prvHeapInit+0xac>)
 800c47e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00c      	beq.n	800c4a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3307      	adds	r3, #7
 800c48e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	4a1f      	ldr	r2, [pc, #124]	; (800c51c <prvHeapInit+0xac>)
 800c4a0:	4413      	add	r3, r2
 800c4a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4a8:	4a1d      	ldr	r2, [pc, #116]	; (800c520 <prvHeapInit+0xb0>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ae:	4b1c      	ldr	r3, [pc, #112]	; (800c520 <prvHeapInit+0xb0>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4bc:	2208      	movs	r2, #8
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1a9b      	subs	r3, r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 0307 	bic.w	r3, r3, #7
 800c4ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4a15      	ldr	r2, [pc, #84]	; (800c524 <prvHeapInit+0xb4>)
 800c4d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4d2:	4b14      	ldr	r3, [pc, #80]	; (800c524 <prvHeapInit+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <prvHeapInit+0xb4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <prvHeapInit+0xb4>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	4a0a      	ldr	r2, [pc, #40]	; (800c528 <prvHeapInit+0xb8>)
 800c4fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4a09      	ldr	r2, [pc, #36]	; (800c52c <prvHeapInit+0xbc>)
 800c506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c508:	4b09      	ldr	r3, [pc, #36]	; (800c530 <prvHeapInit+0xc0>)
 800c50a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c50e:	601a      	str	r2, [r3, #0]
}
 800c510:	bf00      	nop
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20000618 	.word	0x20000618
 800c520:	20008618 	.word	0x20008618
 800c524:	20008620 	.word	0x20008620
 800c528:	20008628 	.word	0x20008628
 800c52c:	20008624 	.word	0x20008624
 800c530:	2000862c 	.word	0x2000862c

0800c534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c53c:	4b28      	ldr	r3, [pc, #160]	; (800c5e0 <prvInsertBlockIntoFreeList+0xac>)
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	e002      	b.n	800c548 <prvInsertBlockIntoFreeList+0x14>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d8f7      	bhi.n	800c542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	4413      	add	r3, r2
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d108      	bne.n	800c576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	441a      	add	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	429a      	cmp	r2, r3
 800c588:	d118      	bne.n	800c5bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b15      	ldr	r3, [pc, #84]	; (800c5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d00d      	beq.n	800c5b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	441a      	add	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	e008      	b.n	800c5c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5b2:	4b0c      	ldr	r3, [pc, #48]	; (800c5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	e003      	b.n	800c5c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d002      	beq.n	800c5d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5d2:	bf00      	nop
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	20008618 	.word	0x20008618
 800c5e4:	20008620 	.word	0x20008620

0800c5e8 <__libc_init_array>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	4e0d      	ldr	r6, [pc, #52]	; (800c620 <__libc_init_array+0x38>)
 800c5ec:	4c0d      	ldr	r4, [pc, #52]	; (800c624 <__libc_init_array+0x3c>)
 800c5ee:	1ba4      	subs	r4, r4, r6
 800c5f0:	10a4      	asrs	r4, r4, #2
 800c5f2:	2500      	movs	r5, #0
 800c5f4:	42a5      	cmp	r5, r4
 800c5f6:	d109      	bne.n	800c60c <__libc_init_array+0x24>
 800c5f8:	4e0b      	ldr	r6, [pc, #44]	; (800c628 <__libc_init_array+0x40>)
 800c5fa:	4c0c      	ldr	r4, [pc, #48]	; (800c62c <__libc_init_array+0x44>)
 800c5fc:	f000 f82c 	bl	800c658 <_init>
 800c600:	1ba4      	subs	r4, r4, r6
 800c602:	10a4      	asrs	r4, r4, #2
 800c604:	2500      	movs	r5, #0
 800c606:	42a5      	cmp	r5, r4
 800c608:	d105      	bne.n	800c616 <__libc_init_array+0x2e>
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c610:	4798      	blx	r3
 800c612:	3501      	adds	r5, #1
 800c614:	e7ee      	b.n	800c5f4 <__libc_init_array+0xc>
 800c616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c61a:	4798      	blx	r3
 800c61c:	3501      	adds	r5, #1
 800c61e:	e7f2      	b.n	800c606 <__libc_init_array+0x1e>
 800c620:	0800e664 	.word	0x0800e664
 800c624:	0800e664 	.word	0x0800e664
 800c628:	0800e664 	.word	0x0800e664
 800c62c:	0800e668 	.word	0x0800e668

0800c630 <memcpy>:
 800c630:	b510      	push	{r4, lr}
 800c632:	1e43      	subs	r3, r0, #1
 800c634:	440a      	add	r2, r1
 800c636:	4291      	cmp	r1, r2
 800c638:	d100      	bne.n	800c63c <memcpy+0xc>
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c640:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c644:	e7f7      	b.n	800c636 <memcpy+0x6>

0800c646 <memset>:
 800c646:	4402      	add	r2, r0
 800c648:	4603      	mov	r3, r0
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d100      	bne.n	800c650 <memset+0xa>
 800c64e:	4770      	bx	lr
 800c650:	f803 1b01 	strb.w	r1, [r3], #1
 800c654:	e7f9      	b.n	800c64a <memset+0x4>
	...

0800c658 <_init>:
 800c658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65a:	bf00      	nop
 800c65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65e:	bc08      	pop	{r3}
 800c660:	469e      	mov	lr, r3
 800c662:	4770      	bx	lr

0800c664 <_fini>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	bf00      	nop
 800c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66a:	bc08      	pop	{r3}
 800c66c:	469e      	mov	lr, r3
 800c66e:	4770      	bx	lr
