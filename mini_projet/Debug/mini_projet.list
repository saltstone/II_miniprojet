
mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c250  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc8  0800c420  0800c420  0001c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3e8  0800e3e8  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3e8  0800e3e8  0001e3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3f0  0800e3f0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f0  0800e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3f4  0800e3f4  0001e3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800e3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c94  20000054  0800e44c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ce8  0800e44c  00028ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8d9  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005368  00000000  00000000  0004b95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002568  00000000  00000000  00050cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e0  00000000  00000000  00053230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e0ad  00000000  00000000  00055510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ed75  00000000  00000000  000835bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114aa2  00000000  00000000  000a2332  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e70  00000000  00000000  001b6e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c408 	.word	0x0800c408

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	0800c408 	.word	0x0800c408

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000070 	.word	0x20000070
 8000540:	200000c4 	.word	0x200000c4

08000544 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f001 ff84 	bl	800245c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000554:	f000 f9b4 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800058c:	f000 f998 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e010      	b.n	80005b8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	21a8      	movs	r1, #168	; 0xa8
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ff3f 	bl	8002420 <TS_IO_Read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005a6:	7b7b      	ldrb	r3, [r7, #13]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b51      	cmp	r3, #81	; 0x51
 80005ac:	d101      	bne.n	80005b2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d802      	bhi.n	80005c4 <ft5336_ReadID+0x4e>
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0e8      	beq.n	8000596 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f97e 	bl	80008e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f932 	bl	8000850 <ft5336_TS_DisableIT>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ff09 	bl	8002420 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b05      	cmp	r3, #5
 8000624:	d901      	bls.n	800062a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000630:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200002c4 	.word	0x200002c4

08000648 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	429a      	cmp	r2, r3
 8000674:	f080 80cf 	bcs.w	8000816 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d871      	bhi.n	8000764 <ft5336_TS_GetXY+0x11c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ft5336_TS_GetXY+0x40>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006b1 	.word	0x080006b1
 800068c:	080006c3 	.word	0x080006c3
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006e7 	.word	0x080006e7
 8000698:	080006f9 	.word	0x080006f9
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	0800071d 	.word	0x0800071d
 80006a4:	0800072f 	.word	0x0800072f
 80006a8:	08000741 	.word	0x08000741
 80006ac:	08000753 	.word	0x08000753
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006b0:	2304      	movs	r3, #4
 80006b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b8:	2306      	movs	r3, #6
 80006ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006bc:	2305      	movs	r3, #5
 80006be:	753b      	strb	r3, [r7, #20]
      break;
 80006c0:	e051      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006c2:	230a      	movs	r3, #10
 80006c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006c6:	2309      	movs	r3, #9
 80006c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006ca:	230c      	movs	r3, #12
 80006cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006ce:	230b      	movs	r3, #11
 80006d0:	753b      	strb	r3, [r7, #20]
      break;
 80006d2:	e048      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006d4:	2310      	movs	r3, #16
 80006d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d8:	230f      	movs	r3, #15
 80006da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006dc:	2312      	movs	r3, #18
 80006de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006e0:	2311      	movs	r3, #17
 80006e2:	753b      	strb	r3, [r7, #20]
      break;
 80006e4:	e03f      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006e6:	2316      	movs	r3, #22
 80006e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ea:	2315      	movs	r3, #21
 80006ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006ee:	2318      	movs	r3, #24
 80006f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006f2:	2317      	movs	r3, #23
 80006f4:	753b      	strb	r3, [r7, #20]
      break;
 80006f6:	e036      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f8:	231c      	movs	r3, #28
 80006fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006fc:	231b      	movs	r3, #27
 80006fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000700:	231e      	movs	r3, #30
 8000702:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000704:	231d      	movs	r3, #29
 8000706:	753b      	strb	r3, [r7, #20]
      break;
 8000708:	e02d      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800070a:	2322      	movs	r3, #34	; 0x22
 800070c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800070e:	2321      	movs	r3, #33	; 0x21
 8000710:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000712:	2324      	movs	r3, #36	; 0x24
 8000714:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	753b      	strb	r3, [r7, #20]
      break;
 800071a:	e024      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800071c:	2328      	movs	r3, #40	; 0x28
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000720:	2327      	movs	r3, #39	; 0x27
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000724:	232a      	movs	r3, #42	; 0x2a
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000728:	2329      	movs	r3, #41	; 0x29
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e01b      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800072e:	232e      	movs	r3, #46	; 0x2e
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000732:	232d      	movs	r3, #45	; 0x2d
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000736:	2330      	movs	r3, #48	; 0x30
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e012      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000740:	2334      	movs	r3, #52	; 0x34
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000744:	2333      	movs	r3, #51	; 0x33
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000748:	2336      	movs	r3, #54	; 0x36
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800074c:	2335      	movs	r3, #53	; 0x35
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e009      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000752:	233a      	movs	r3, #58	; 0x3a
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000756:	2339      	movs	r3, #57	; 0x39
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800075a:	233c      	movs	r3, #60	; 0x3c
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800075e:	233b      	movs	r3, #59	; 0x3b
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e000      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000764:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	7dfa      	ldrb	r2, [r7, #23]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fe56 	bl	8002420 <TS_IO_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000780:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7dba      	ldrb	r2, [r7, #22]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fe48 	bl	8002420 <TS_IO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000794:	7cfb      	ldrb	r3, [r7, #19]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7d7a      	ldrb	r2, [r7, #21]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fe2d 	bl	8002420 <TS_IO_Read>
 80007c6:	4603      	mov	r3, r0
 80007c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	7d3a      	ldrb	r2, [r7, #20]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fe1f 	bl	8002420 <TS_IO_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007e6:	7cfb      	ldrb	r3, [r7, #19]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000800:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000814:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200002c4 	.word	0x200002c4
 8000824:	200002c8 	.word	0x200002c8

08000828 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	21a4      	movs	r1, #164	; 0xa4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fdd2 	bl	80023ec <TS_IO_Write>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	21a4      	movs	r1, #164	; 0xa4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fdbe 	bl	80023ec <TS_IO_Write>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200002c4 	.word	0x200002c4

080008c0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008c4:	f7ff fff0 	bl	80008a8 <ft5336_Get_I2C_InitializedStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008ce:	f001 fd83 	bl	80023d8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
  }
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200002c4 	.word	0x200002c4

080008e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b098      	sub	sp, #96	; 0x60
 8000900:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000902:	f003 f90c 	bl	8003b1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000906:	f000 f909 	bl	8000b1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800090a:	f000 ffab 	bl	8001864 <MX_GPIO_Init>
	MX_ADC3_Init();
 800090e:	f000 fa07 	bl	8000d20 <MX_ADC3_Init>
	MX_I2C1_Init();
 8000912:	f000 fab3 	bl	8000e7c <MX_I2C1_Init>
	MX_I2C3_Init();
 8000916:	f000 faf1 	bl	8000efc <MX_I2C3_Init>
	MX_LTDC_Init();
 800091a:	f000 fb2f 	bl	8000f7c <MX_LTDC_Init>
	MX_RTC_Init();
 800091e:	f000 fbaf 	bl	8001080 <MX_RTC_Init>
	MX_SPI2_Init();
 8000922:	f000 fc53 	bl	80011cc <MX_SPI2_Init>
	MX_TIM1_Init();
 8000926:	f000 fc8f 	bl	8001248 <MX_TIM1_Init>
	MX_TIM2_Init();
 800092a:	f000 fce1 	bl	80012f0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800092e:	f000 fd2d 	bl	800138c <MX_TIM3_Init>
	MX_TIM5_Init();
 8000932:	f000 fdb9 	bl	80014a8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000936:	f000 fe05 	bl	8001544 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 800093a:	f000 fedd 	bl	80016f8 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800093e:	f000 ff13 	bl	8001768 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000942:	f000 f99b 	bl	8000c7c <MX_ADC1_Init>
	MX_DAC_Init();
 8000946:	f000 fa3d 	bl	8000dc4 <MX_DAC_Init>
	MX_UART7_Init();
 800094a:	f000 fea5 	bl	8001698 <MX_UART7_Init>
	MX_FMC_Init();
 800094e:	f000 ff3b 	bl	80017c8 <MX_FMC_Init>
	MX_DMA2D_Init();
 8000952:	f000 fa61 	bl	8000e18 <MX_DMA2D_Init>
	/* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 8000956:	f001 fd8d 	bl	8002474 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800095a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800095e:	2000      	movs	r0, #0
 8000960:	f001 fe20 	bl	80025a4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000964:	f001 fdf6 	bl	8002554 <BSP_LCD_GetXSize>
 8000968:	4604      	mov	r4, r0
 800096a:	f001 fe07 	bl	800257c <BSP_LCD_GetYSize>
 800096e:	4603      	mov	r3, r0
 8000970:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000974:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4619      	mov	r1, r3
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fe11 	bl	80025a4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000982:	f001 ff6d 	bl	8002860 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f001 fe6c 	bl	8002664 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 800098c:	4856      	ldr	r0, [pc, #344]	; (8000ae8 <main+0x1ec>)
 800098e:	f001 fec5 	bl	800271c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000992:	4856      	ldr	r0, [pc, #344]	; (8000aec <main+0x1f0>)
 8000994:	f001 fea8 	bl	80026e8 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000998:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800099c:	f001 fe72 	bl	8002684 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 80009a0:	4851      	ldr	r0, [pc, #324]	; (8000ae8 <main+0x1ec>)
 80009a2:	f001 fe87 	bl	80026b4 <BSP_LCD_SetBackColor>

	// ============== affichage sol
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80009a6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80009aa:	f001 fe6b 	bl	8002684 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, HAUTEUR_SOL, 480, 272 - HAUTEUR_SOL);
 80009ae:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <main+0x1f4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <main+0x1f4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fed1 	bl	800276c <BSP_LCD_FillRect>

	// ===============  creation des blocs ==================
	blocs[1] = 1 + (10 << 8) + (5 << 4);
 80009ca:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <main+0x1f8>)
 80009cc:	f640 2251 	movw	r2, #2641	; 0xa51
 80009d0:	805a      	strh	r2, [r3, #2]

	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80009d2:	4849      	ldr	r0, [pc, #292]	; (8000af8 <main+0x1fc>)
 80009d4:	f001 fe56 	bl	8002684 <BSP_LCD_SetTextColor>
	int iterateur_blocs = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (iterateur_blocs = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009e0:	e02d      	b.n	8000a3e <main+0x142>
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
			iterateur_blocs += 1) {
		if ((blocs[iterateur_blocs] & (15)) != 0) {
 80009e2:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <main+0x1f8>)
 80009e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d022      	beq.n	8000a38 <main+0x13c>
			BSP_LCD_FillRect(
					((blocs[iterateur_blocs] >> 8) & (255)) * blocs_size,
 80009f2:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <main+0x1f8>)
 80009f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <main+0x200>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	fb12 f303 	smulbb	r3, r2, r3
 8000a08:	b298      	uxth	r0, r3
					blocs_size * ((blocs[iterateur_blocs] >> 4) & (15)),
 8000a0a:	4a3a      	ldr	r2, [pc, #232]	; (8000af4 <main+0x1f8>)
 8000a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b37      	ldr	r3, [pc, #220]	; (8000afc <main+0x200>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	fb12 f303 	smulbb	r3, r2, r3
 8000a26:	b299      	uxth	r1, r3
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <main+0x200>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <main+0x200>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f001 fe9a 	bl	800276c <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
 8000a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	for (iterateur_blocs = 0;
 8000a40:	2b1d      	cmp	r3, #29
 8000a42:	d9ce      	bls.n	80009e2 <main+0xe6>
					blocs_size, blocs_size);
		}
	}

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a44:	f001 fd86 	bl	8002554 <BSP_LCD_GetXSize>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29c      	uxth	r4, r3
 8000a4c:	f001 fd96 	bl	800257c <BSP_LCD_GetYSize>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4620      	mov	r0, r4
 8000a58:	f002 fa18 	bl	8002e8c <BSP_TS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex01 */
	osMutexDef(myMutex01);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8000a60:	2300      	movs	r3, #0
 8000a62:	65bb      	str	r3, [r7, #88]	; 0x58
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f009 fd20 	bl	800a4ae <osMutexCreate>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <main+0x204>)
 8000a72:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <main+0x208>)
 8000a76:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a7a:	461d      	mov	r5, r3
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fcad 	bl	800a3ee <osThreadCreate>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <main+0x20c>)
 8000a98:	601a      	str	r2, [r3, #0]

	/* definition and creation of Player */
	osThreadDef(Player, player, osPriorityNormal, 0, 1024);
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <main+0x210>)
 8000a9c:	f107 041c 	add.w	r4, r7, #28
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PlayerHandle = osThreadCreate(osThread(Player), NULL);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 fc9a 	bl	800a3ee <osThreadCreate>
 8000aba:	4602      	mov	r2, r0
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <main+0x214>)
 8000abe:	601a      	str	r2, [r3, #0]

	/* definition and creation of Game_over */
	osThreadDef(Game_over, game_over, osPriorityHigh, 0, 128);
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <main+0x218>)
 8000ac2:	463c      	mov	r4, r7
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Game_overHandle = osThreadCreate(osThread(Game_over), NULL);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f009 fc89 	bl	800a3ee <osThreadCreate>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <main+0x21c>)
 8000ae0:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000ae2:	f009 fc7d 	bl	800a3e0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x1ea>
 8000ae8:	ff8080ff 	.word	0xff8080ff
 8000aec:	20000038 	.word	0x20000038
 8000af0:	20000028 	.word	0x20000028
 8000af4:	200002cc 	.word	0x200002cc
 8000af8:	ffa52a2a 	.word	0xffa52a2a
 8000afc:	2000002c 	.word	0x2000002c
 8000b00:	20008bc4 	.word	0x20008bc4
 8000b04:	0800c42c 	.word	0x0800c42c
 8000b08:	2000861c 	.word	0x2000861c
 8000b0c:	0800c450 	.word	0x0800c450
 8000b10:	20008bc0 	.word	0x20008bc0
 8000b14:	0800c478 	.word	0x0800c478
 8000b18:	2000881c 	.word	0x2000881c

08000b1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0b4      	sub	sp, #208	; 0xd0
 8000b20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00b fc63 	bl	800c3f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2284      	movs	r2, #132	; 0x84
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00b fc54 	bl	800c3f6 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000b4e:	f005 fe37 	bl	80067c0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <SystemClock_Config+0x154>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <SystemClock_Config+0x154>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <SystemClock_Config+0x154>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <SystemClock_Config+0x158>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a41      	ldr	r2, [pc, #260]	; (8000c74 <SystemClock_Config+0x158>)
 8000b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <SystemClock_Config+0x158>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000b82:	2309      	movs	r3, #9
 8000b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000ba4:	2319      	movs	r3, #25
 8000ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000baa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bbe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fe5c 	bl	8006880 <HAL_RCC_OscConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xb6>
		Error_Handler();
 8000bce:	f001 faa9 	bl	8002124 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000bd2:	f005 fe05 	bl	80067e0 <HAL_PWREx_EnableOverDrive>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xc4>
		Error_Handler();
 8000bdc:	f001 faa2 	bl	8002124 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000c02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c06:	2106      	movs	r1, #6
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 f8dd 	bl	8006dc8 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xfc>
		Error_Handler();
 8000c14:	f001 fa86 	bl	8002124 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <SystemClock_Config+0x15c>)
 8000c1a:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART6
			| RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c20:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c22:	2305      	movs	r3, #5
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c3c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c42:	2300      	movs	r3, #0
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 faba 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x14a>
		Error_Handler();
 8000c62:	f001 fa5f 	bl	8002124 <Error_Handler>
	}
}
 8000c66:	bf00      	nop
 8000c68:	37d0      	adds	r7, #208	; 0xd0
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000
 8000c78:	00015868 	.word	0x00015868

08000c7c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MX_ADC1_Init+0x9c>)
 8000c92:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c9a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_ADC1_Init+0xa0>)
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cde:	f002 ff6d 	bl	8003bbc <HAL_ADC_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0x70>
		Error_Handler();
 8000ce8:	f001 fa1c 	bl	8002124 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_ADC1_Init+0x98>)
 8000cfe:	f003 f8f3 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000d08:	f001 fa0c 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20008908 	.word	0x20008908
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d26:	463b      	mov	r3, r7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <MX_ADC3_Init+0x9c>)
 8000d36:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <MX_ADC3_Init+0xa0>)
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000d82:	f002 ff1b 	bl	8003bbc <HAL_ADC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000d8c:	f001 f9ca 	bl	8002124 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000d90:	2306      	movs	r3, #6
 8000d92:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_ADC3_Init+0x98>)
 8000da2:	f003 f8a1 	bl	8003ee8 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000dac:	f001 f9ba 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20008950 	.word	0x20008950
 8000dbc:	40012200 	.word	0x40012200
 8000dc0:	0f000001 	.word	0x0f000001

08000dc4 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_DAC_Init+0x4c>)
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <MX_DAC_Init+0x50>)
 8000dd6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_DAC_Init+0x4c>)
 8000dda:	f003 fbab 	bl	8004534 <HAL_DAC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_DAC_Init+0x24>
		Error_Handler();
 8000de4:	f001 f99e 	bl	8002124 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_DAC_Init+0x4c>)
 8000df8:	f003 fc12 	bl	8004620 <HAL_DAC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DAC_Init+0x42>
		Error_Handler();
 8000e02:	f001 f98f 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20008a18 	.word	0x20008a18
 8000e14:	40007400 	.word	0x40007400

08000e18 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <MX_DMA2D_Init+0x60>)
 8000e20:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e4e:	f003 fe1d 	bl	8004a8c <HAL_DMA2D_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000e58:	f001 f964 	bl	8002124 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_DMA2D_Init+0x5c>)
 8000e60:	f003 ff72 	bl	8004d48 <HAL_DMA2D_ConfigLayer>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000e6a:	f001 f95b 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20008b0c 	.word	0x20008b0c
 8000e78:	4002b000 	.word	0x4002b000

08000e7c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb8:	f004 fb5a 	bl	8005570 <HAL_I2C_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000ec2:	f001 f92f 	bl	8002124 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eca:	f005 f869 	bl	8005fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ed4:	f001 f926 	bl	8002124 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000edc:	f005 f8ab 	bl	8006036 <HAL_I2CEx_ConfigDigitalFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000ee6:	f001 f91d 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20008790 	.word	0x20008790
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	00c0eaff 	.word	0x00c0eaff

08000efc <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MX_I2C3_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <MX_I2C3_Init+0x7c>)
 8000f0a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f38:	f004 fb1a 	bl	8005570 <HAL_I2C_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C3_Init+0x4a>
		Error_Handler();
 8000f42:	f001 f8ef 	bl	8002124 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f4a:	f005 f829 	bl	8005fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000f54:	f001 f8e6 	bl	8002124 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f5c:	f005 f86b 	bl	8006036 <HAL_I2CEx_ConfigDigitalFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x6e>
		Error_Handler();
 8000f66:	f001 f8dd 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20008620 	.word	0x20008620
 8000f74:	40005c00 	.word	0x40005c00
 8000f78:	00c0eaff 	.word	0x00c0eaff

08000f7c <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2234      	movs	r2, #52	; 0x34
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f00b fa34 	bl	800c3f6 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000f90:	4a3a      	ldr	r2, [pc, #232]	; (800107c <MX_LTDC_Init+0x100>)
 8000f92:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fa0:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fae:	2228      	movs	r2, #40	; 0x28
 8000fb0:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fb4:	2209      	movs	r2, #9
 8000fb6:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fba:	2235      	movs	r2, #53	; 0x35
 8000fbc:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fc0:	220b      	movs	r2, #11
 8000fc2:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fc6:	f240 2215 	movw	r2, #533	; 0x215
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fce:	f240 121b 	movw	r2, #283	; 0x11b
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fd6:	f240 2235 	movw	r2, #565	; 0x235
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fde:	f240 121d 	movw	r2, #285	; 0x11d
 8000fe2:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000ffc:	481e      	ldr	r0, [pc, #120]	; (8001078 <MX_LTDC_Init+0xfc>)
 8000ffe:	f005 f867 	bl	80060d0 <HAL_LTDC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_LTDC_Init+0x90>
		Error_Handler();
 8001008:	f001 f88c 	bl	8002124 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001010:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001014:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800101a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800101e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001024:	23ff      	movs	r3, #255	; 0xff
 8001026:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800102c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001030:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001036:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 800103c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001042:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_LTDC_Init+0xfc>)
 8001062:	f005 f9c7 	bl	80063f4 <HAL_LTDC_ConfigLayer>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_LTDC_Init+0xf4>
		Error_Handler();
 800106c:	f001 f85a 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3738      	adds	r7, #56	; 0x38
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20008860 	.word	0x20008860
 800107c:	40016800 	.word	0x40016800

08001080 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b092      	sub	sp, #72	; 0x48
 8001084:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = { 0 };
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = { 0 };
 800109c:	463b      	mov	r3, r7
 800109e:	222c      	movs	r2, #44	; 0x2c
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00b f9a7 	bl	800c3f6 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <MX_RTC_Init+0x144>)
 80010aa:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <MX_RTC_Init+0x148>)
 80010ac:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_RTC_Init+0x144>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80010b4:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <MX_RTC_Init+0x144>)
 80010b6:	227f      	movs	r2, #127	; 0x7f
 80010b8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <MX_RTC_Init+0x144>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <MX_RTC_Init+0x144>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <MX_RTC_Init+0x144>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <MX_RTC_Init+0x144>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <MX_RTC_Init+0x144>)
 80010d4:	f006 fc6a 	bl	80079ac <HAL_RTC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0x62>
		Error_Handler();
 80010de:	f001 f821 	bl	8002124 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80010fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	482f      	ldr	r0, [pc, #188]	; (80011c4 <MX_RTC_Init+0x144>)
 8001106:	f006 fccd 	bl	8007aa4 <HAL_RTC_SetTime>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_RTC_Init+0x94>
		Error_Handler();
 8001110:	f001 f808 	bl	8002124 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	4823      	ldr	r0, [pc, #140]	; (80011c4 <MX_RTC_Init+0x144>)
 8001136:	f006 fd73 	bl	8007c20 <HAL_RTC_SetDate>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_RTC_Init+0xc4>
		Error_Handler();
 8001140:	f000 fff0 	bl	8002124 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001148:	2300      	movs	r3, #0
 800114a:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 800114c:	2300      	movs	r3, #0
 800114e:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8001174:	463b      	mov	r3, r7
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_RTC_Init+0x144>)
 800117c:	f006 fdf8 	bl	8007d70 <HAL_RTC_SetAlarm>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x10a>
		Error_Handler();
 8001186:	f000 ffcd 	bl	8002124 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 800118a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8001190:	463b      	mov	r3, r7
 8001192:	2201      	movs	r2, #1
 8001194:	4619      	mov	r1, r3
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_RTC_Init+0x144>)
 8001198:	f006 fdea 	bl	8007d70 <HAL_RTC_SetAlarm>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0x126>
		Error_Handler();
 80011a2:	f000 ffbf 	bl	8002124 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 80011a6:	2202      	movs	r2, #2
 80011a8:	2100      	movs	r1, #0
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_RTC_Init+0x144>)
 80011ac:	f006 ff6a 	bl	8008084 <HAL_RTCEx_SetTimeStamp>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_RTC_Init+0x13a>
			RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
		Error_Handler();
 80011b6:	f000 ffb5 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3748      	adds	r7, #72	; 0x48
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20008a2c 	.word	0x20008a2c
 80011c8:	40002800 	.word	0x40002800

080011cc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_SPI2_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_SPI2_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_SPI2_Init+0x74>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_SPI2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_SPI2_Init+0x74>)
 80011e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011ea:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_SPI2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_SPI2_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_SPI2_Init+0x74>)
 80011fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011fe:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_SPI2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_SPI2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_SPI2_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_SPI2_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_SPI2_Init+0x74>)
 800121a:	2207      	movs	r2, #7
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_SPI2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_SPI2_Init+0x74>)
 8001226:	2208      	movs	r2, #8
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_SPI2_Init+0x74>)
 800122c:	f006 ffff 	bl	800822e <HAL_SPI_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8001236:	f000 ff75 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000866c 	.word	0x2000866c
 8001244:	40003800 	.word	0x40003800

08001248 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_TIM1_Init+0xa0>)
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <MX_TIM1_Init+0xa4>)
 800126a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM1_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM1_Init+0xa0>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM1_Init+0xa0>)
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM1_Init+0xa0>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM1_Init+0xa0>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM1_Init+0xa0>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001292:	4815      	ldr	r0, [pc, #84]	; (80012e8 <MX_TIM1_Init+0xa0>)
 8001294:	f007 f85d 	bl	8008352 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800129e:	f000 ff41 	bl	8002124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_TIM1_Init+0xa0>)
 80012b0:	f007 fb10 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x76>
		Error_Handler();
 80012ba:	f000 ff33 	bl	8002124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_TIM1_Init+0xa0>)
 80012d0:	f008 f844 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80012da:	f000 ff23 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20008a4c 	.word	0x20008a4c
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM2_Init+0x98>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM2_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM2_Init+0x98>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM2_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM2_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM2_Init+0x98>)
 8001338:	f007 f80b 	bl	8008352 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001342:	f000 feef 	bl	8002124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM2_Init+0x98>)
 8001354:	f007 fabe 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x72>
		Error_Handler();
 800135e:	f000 fee1 	bl	8002124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM2_Init+0x98>)
 8001370:	f007 fff4 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800137a:	f000 fed3 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20008b4c 	.word	0x20008b4c

0800138c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80013a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013d0:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <MX_TIM3_Init+0x118>)
 80013d2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80013f4:	482a      	ldr	r0, [pc, #168]	; (80014a0 <MX_TIM3_Init+0x114>)
 80013f6:	f006 ffac 	bl	8008352 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x78>
		Error_Handler();
 8001400:	f000 fe90 	bl	8002124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800140a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140e:	4619      	mov	r1, r3
 8001410:	4823      	ldr	r0, [pc, #140]	; (80014a0 <MX_TIM3_Init+0x114>)
 8001412:	f007 fa5f 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x94>
		Error_Handler();
 800141c:	f000 fe82 	bl	8002124 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <MX_TIM3_Init+0x114>)
 8001422:	f006 ffeb 	bl	80083fc <HAL_TIM_PWM_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0xa4>
		Error_Handler();
 800142c:	f000 fe7a 	bl	8002124 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	4619      	mov	r1, r3
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM3_Init+0x114>)
 8001440:	f007 fb02 	bl	8008a48 <HAL_TIM_SlaveConfigSynchro>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0xc2>
		Error_Handler();
 800144a:	f000 fe6b 	bl	8002124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <MX_TIM3_Init+0x114>)
 800145e:	f007 ff7d 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001468:	f000 fe5c 	bl	8002124 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM3_Init+0x114>)
 8001484:	f007 f90e 	bl	80086a4 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 800148e:	f000 fe49 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM3_Init+0x114>)
 8001494:	f002 f8ae 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3750      	adds	r7, #80	; 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20008820 	.word	0x20008820
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM5_Init+0x94>)
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <MX_TIM5_Init+0x98>)
 80014ca:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM5_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_TIM5_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_TIM5_Init+0x94>)
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_TIM5_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_TIM5_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_TIM5_Init+0x94>)
 80014ee:	f006 ff30 	bl	8008352 <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM5_Init+0x54>
		Error_Handler();
 80014f8:	f000 fe14 	bl	8002124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM5_Init+0x94>)
 800150a:	f007 f9e3 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM5_Init+0x70>
		Error_Handler();
 8001514:	f000 fe06 	bl	8002124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM5_Init+0x94>)
 8001526:	f007 ff19 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001530:	f000 fdf8 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200087dc 	.word	0x200087dc
 8001540:	40000c00 	.word	0x40000c00

08001544 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b09a      	sub	sp, #104	; 0x68
 8001548:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800154a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	222c      	movs	r2, #44	; 0x2c
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f00a ff39 	bl	800c3f6 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001586:	4a43      	ldr	r2, [pc, #268]	; (8001694 <MX_TIM8_Init+0x150>)
 8001588:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <MX_TIM8_Init+0x14c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80015b0:	4837      	ldr	r0, [pc, #220]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015b2:	f006 fece 	bl	8008352 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM8_Init+0x7c>
		Error_Handler();
 80015bc:	f000 fdb2 	bl	8002124 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80015c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ca:	4619      	mov	r1, r3
 80015cc:	4830      	ldr	r0, [pc, #192]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015ce:	f007 f981 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM8_Init+0x98>
		Error_Handler();
 80015d8:	f000 fda4 	bl	8002124 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <MX_TIM8_Init+0x14c>)
 80015de:	f006 ff0d 	bl	80083fc <HAL_TIM_PWM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xa8>
		Error_Handler();
 80015e8:	f000 fd9c 	bl	8002124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80015f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fc:	4619      	mov	r1, r3
 80015fe:	4824      	ldr	r0, [pc, #144]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001600:	f007 feac 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800160a:	f000 fd8b 	bl	8002124 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8001626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162a:	220c      	movs	r2, #12
 800162c:	4619      	mov	r1, r3
 800162e:	4818      	ldr	r0, [pc, #96]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001630:	f007 f838 	bl	80086a4 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800163a:	f000 fd73 	bl	8002124 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001674:	f007 ff00 	bl	8009478 <HAL_TIMEx_ConfigBreakDeadTime>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM8_Init+0x13e>
			!= HAL_OK) {
		Error_Handler();
 800167e:	f000 fd51 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM8_Init+0x14c>)
 8001684:	f001 ffb6 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3768      	adds	r7, #104	; 0x68
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20008750 	.word	0x20008750
 8001694:	40010400 	.word	0x40010400

08001698 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_UART7_Init+0x58>)
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_UART7_Init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_UART7_Init+0x58>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_UART7_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_UART7_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_UART7_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_UART7_Init+0x58>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_UART7_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_UART7_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_UART7_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_UART7_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_UART7_Init+0x58>)
 80016dc:	f007 ff68 	bl	80095b0 <HAL_UART_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_UART7_Init+0x52>
		Error_Handler();
 80016e6:	f000 fd1d 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200086d0 	.word	0x200086d0
 80016f4:	40007800 	.word	0x40007800

080016f8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_USART1_UART_Init+0x68>)
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <MX_USART1_UART_Init+0x6c>)
 8001700:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_USART1_UART_Init+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_USART1_UART_Init+0x68>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <MX_USART1_UART_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
			| UART_ADVFEATURE_DMADISABLEONERROR_INIT;
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_USART1_UART_Init+0x68>)
 800173c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
	huart1.AdvancedInit.DMADisableonRxError =
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_USART1_UART_Init+0x68>)
 8001744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c
			UART_ADVFEATURE_DMA_DISABLEONRXERROR;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART1_UART_Init+0x68>)
 800174c:	f007 ff30 	bl	80095b0 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x62>
		Error_Handler();
 8001756:	f000 fce5 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20008998 	.word	0x20008998
 8001764:	40011000 	.word	0x40011000

08001768 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_USART6_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART6_UART_Init+0x58>)
 80017ac:	f007 ff00 	bl	80095b0 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART6_UART_Init+0x52>
		Error_Handler();
 80017b6:	f000 fcb5 	bl	8002124 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20008a8c 	.word	0x20008a8c
 80017c4:	40011400 	.word	0x40011400

080017c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_FMC_Init+0x94>)
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <MX_FMC_Init+0x98>)
 80017e4:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_FMC_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_FMC_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_FMC_Init+0x94>)
 80017f4:	2204      	movs	r2, #4
 80017f6:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_FMC_Init+0x94>)
 80017fa:	2210      	movs	r2, #16
 80017fc:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_FMC_Init+0x94>)
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_FMC_Init+0x94>)
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_FMC_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_FMC_Init+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_FMC_Init+0x94>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_FMC_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8001822:	2310      	movs	r3, #16
 8001824:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8001826:	2310      	movs	r3, #16
 8001828:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 800182a:	2310      	movs	r3, #16
 800182c:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 800182e:	2310      	movs	r3, #16
 8001830:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8001832:	2310      	movs	r3, #16
 8001834:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8001836:	2310      	movs	r3, #16
 8001838:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 800183a:	2310      	movs	r3, #16
 800183c:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_FMC_Init+0x94>)
 8001844:	f006 fc74 	bl	8008130 <HAL_SDRAM_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_FMC_Init+0x8a>
		Error_Handler();
 800184e:	f000 fc69 	bl	8002124 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20008b8c 	.word	0x20008b8c
 8001860:	a0000140 	.word	0xa0000140

08001864 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	; 0x40
 8001868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	4bb0      	ldr	r3, [pc, #704]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4aaf      	ldr	r2, [pc, #700]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4bad      	ldr	r3, [pc, #692]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4baa      	ldr	r3, [pc, #680]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4aa9      	ldr	r2, [pc, #676]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4ba7      	ldr	r3, [pc, #668]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4ba4      	ldr	r3, [pc, #656]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4aa3      	ldr	r2, [pc, #652]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80018c2:	4b9e      	ldr	r3, [pc, #632]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a9d      	ldr	r2, [pc, #628]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b9b      	ldr	r3, [pc, #620]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80018da:	4b98      	ldr	r3, [pc, #608]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a97      	ldr	r2, [pc, #604]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b95      	ldr	r3, [pc, #596]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a91      	ldr	r2, [pc, #580]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800190a:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a8b      	ldr	r2, [pc, #556]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001922:	4b86      	ldr	r3, [pc, #536]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b83      	ldr	r3, [pc, #524]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b7d      	ldr	r3, [pc, #500]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001952:	4b7a      	ldr	r3, [pc, #488]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a79      	ldr	r2, [pc, #484]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b77      	ldr	r3, [pc, #476]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	4b74      	ldr	r3, [pc, #464]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a73      	ldr	r2, [pc, #460]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b71      	ldr	r3, [pc, #452]	; (8001b3c <MX_GPIO_Init+0x2d8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2160      	movs	r1, #96	; 0x60
 8001986:	486e      	ldr	r0, [pc, #440]	; (8001b40 <MX_GPIO_Init+0x2dc>)
 8001988:	f003 fdd8 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800198c:	2201      	movs	r2, #1
 800198e:	2120      	movs	r1, #32
 8001990:	486c      	ldr	r0, [pc, #432]	; (8001b44 <MX_GPIO_Init+0x2e0>)
 8001992:	f003 fdd3 	bl	800553c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2108      	movs	r1, #8
 800199a:	486a      	ldr	r0, [pc, #424]	; (8001b44 <MX_GPIO_Init+0x2e0>)
 800199c:	f003 fdce 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2108      	movs	r1, #8
 80019a4:	4868      	ldr	r0, [pc, #416]	; (8001b48 <MX_GPIO_Init+0x2e4>)
 80019a6:	f003 fdc9 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2108      	movs	r1, #8
 80019ae:	4867      	ldr	r0, [pc, #412]	; (8001b4c <MX_GPIO_Init+0x2e8>)
 80019b0:	f003 fdc4 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4863      	ldr	r0, [pc, #396]	; (8001b48 <MX_GPIO_Init+0x2e4>)
 80019bc:	f003 fdbe 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 80019c0:	2200      	movs	r2, #0
 80019c2:	f645 6140 	movw	r1, #24128	; 0x5e40
 80019c6:	4862      	ldr	r0, [pc, #392]	; (8001b50 <MX_GPIO_Init+0x2ec>)
 80019c8:	f003 fdb8 	bl	800553c <HAL_GPIO_WritePin>
			LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin | LED18_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2108      	movs	r1, #8
 80019d0:	4860      	ldr	r0, [pc, #384]	; (8001b54 <MX_GPIO_Init+0x2f0>)
 80019d2:	f003 fdb3 	bl	800553c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019d6:	2308      	movs	r3, #8
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4855      	ldr	r0, [pc, #340]	; (8001b40 <MX_GPIO_Init+0x2dc>)
 80019ea:	f003 fadb 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
	 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D2_Pin
 80019ee:	f643 0323 	movw	r3, #14371	; 0x3823
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a00:	230a      	movs	r3, #10
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4853      	ldr	r0, [pc, #332]	; (8001b58 <MX_GPIO_Init+0x2f4>)
 8001a0c:	f003 faca 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP2_Pin BP1_Pin */
	GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin;
 8001a10:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	484d      	ldr	r0, [pc, #308]	; (8001b5c <MX_GPIO_Init+0x2f8>)
 8001a26:	f003 fabd 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED14_Pin LED15_Pin */
	GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8001a2a:	2360      	movs	r3, #96	; 0x60
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	483f      	ldr	r0, [pc, #252]	; (8001b40 <MX_GPIO_Init+0x2dc>)
 8001a42:	f003 faaf 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4841      	ldr	r0, [pc, #260]	; (8001b60 <MX_GPIO_Init+0x2fc>)
 8001a5c:	f003 faa2 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a60:	2340      	movs	r3, #64	; 0x40
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <MX_GPIO_Init+0x300>)
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4834      	ldr	r0, [pc, #208]	; (8001b44 <MX_GPIO_Init+0x2e0>)
 8001a74:	f003 fa96 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8001a78:	2328      	movs	r3, #40	; 0x28
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	482d      	ldr	r0, [pc, #180]	; (8001b44 <MX_GPIO_Init+0x2e0>)
 8001a90:	f003 fa88 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LCD_DISP_Pin;
 8001a94:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4826      	ldr	r0, [pc, #152]	; (8001b48 <MX_GPIO_Init+0x2e4>)
 8001aae:	f003 fa79 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4828      	ldr	r0, [pc, #160]	; (8001b68 <MX_GPIO_Init+0x304>)
 8001ac8:	f003 fa6c 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001acc:	2308      	movs	r3, #8
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <MX_GPIO_Init+0x2e8>)
 8001ae4:	f003 fa5e 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4812      	ldr	r0, [pc, #72]	; (8001b44 <MX_GPIO_Init+0x2e0>)
 8001afc:	f003 fa52 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001b00:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_GPIO_Init+0x2ec>)
 8001b16:	f003 fa45 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
	 LED2_Pin LED18_Pin */
	GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8001b1a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			| LED2_Pin | LED18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_GPIO_Init+0x2ec>)
 8001b34:	f003 fa36 	bl	8004fa4 <HAL_GPIO_Init>
 8001b38:	e018      	b.n	8001b6c <MX_GPIO_Init+0x308>
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40022800 	.word	0x40022800
 8001b50:	40021c00 	.word	0x40021c00
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40022400 	.word	0x40022400
 8001b64:	10120000 	.word	0x10120000
 8001b68:	40020800 	.word	0x40020800

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b72:	4b2c      	ldr	r3, [pc, #176]	; (8001c24 <MX_GPIO_Init+0x3c0>)
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4829      	ldr	r0, [pc, #164]	; (8001c28 <MX_GPIO_Init+0x3c4>)
 8001b82:	f003 fa0f 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b86:	2310      	movs	r3, #16
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b96:	230a      	movs	r3, #10
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4822      	ldr	r0, [pc, #136]	; (8001c2c <MX_GPIO_Init+0x3c8>)
 8001ba2:	f003 f9ff 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
	GPIO_InitStruct.Pin = BP_JOYSTICK_Pin | RMII_RXER_Pin;
 8001ba6:	2384      	movs	r3, #132	; 0x84
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481d      	ldr	r0, [pc, #116]	; (8001c30 <MX_GPIO_Init+0x3cc>)
 8001bba:	f003 f9f3 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bce:	230a      	movs	r3, #10
 8001bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <MX_GPIO_Init+0x3d0>)
 8001bda:	f003 f9e3 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pin : EXT_RST_Pin */
	GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001bde:	2308      	movs	r3, #8
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480e      	ldr	r0, [pc, #56]	; (8001c30 <MX_GPIO_Init+0x3cc>)
 8001bf6:	f003 f9d5 	bl	8004fa4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001bfa:	2328      	movs	r3, #40	; 0x28
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c12:	4619      	mov	r1, r3
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <MX_GPIO_Init+0x3d4>)
 8001c16:	f003 f9c5 	bl	8004fa4 <HAL_GPIO_Init>

}
 8001c1a:	bf00      	nop
 8001c1c:	3740      	adds	r7, #64	; 0x40
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	10120000 	.word	0x10120000
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40021800 	.word	0x40021800
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020000 	.word	0x40020000

08001c3c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f008 fc1e 	bl	800a486 <osDelay>
 8001c4a:	e7fb      	b.n	8001c44 <StartDefaultTask+0x8>

08001c4c <jump.12868>:

	int iterateur_blocs_collision = 0;
	int bloc_x;
	int bloc_y;

	void jump(uint8_t etat_saut) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
 8001c56:	4663      	mov	r3, ip
 8001c58:	f8c7 c000 	str.w	ip, [r7]
		if (etat_saut == 0) {
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	d102      	bne.n	8001c68 <jump.12868+0x1c>
			joueur_dy = 10;
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <jump.12868+0x34>)
 8001c64:	601a      	str	r2, [r3, #0]
		} else if (etat_saut == 1) {
			joueur_dy = 10;
		}
	}
 8001c66:	e004      	b.n	8001c72 <jump.12868+0x26>
		} else if (etat_saut == 1) {
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	2a01      	cmp	r2, #1
 8001c6c:	d101      	bne.n	8001c72 <jump.12868+0x26>
			joueur_dy = 10;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <jump.12868+0x34>)
 8001c70:	601a      	str	r2, [r3, #0]
	}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	41200000 	.word	0x41200000

08001c84 <player>:
void player(void const *argument) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b096      	sub	sp, #88	; 0x58
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c90:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 8001c92:	2314      	movs	r3, #20
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
	xLastWakeTime = xTaskGetTickCount();
 8001c96:	f009 fb9d 	bl	800b3d4 <xTaskGetTickCount>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	623b      	str	r3, [r7, #32]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
	uint8_t etat_saut = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t etat_bouton_saut = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t etat_bouton_saut_old = 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	float joueur_dy = 0;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
	float gravite = 0.666;
 8001ccc:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <player+0x1f4>)
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t joueur_height = 32;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t joueur_width = 32;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	float joueur_x = 230;
 8001cdc:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <player+0x1f8>)
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
	float joueur_y = HAUTEUR_SOL - joueur_height;
 8001ce0:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <player+0x1fc>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float joueur_x_old = 230;
 8001cf6:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <player+0x1f8>)
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
	float joueur_y_old = 232;
 8001cfa:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <player+0x200>)
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t joystick_x = 2077;
 8001cfe:	f640 031d 	movw	r3, #2077	; 0x81d
 8001d02:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int iterateur_blocs_collision = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Infinite loop */
	for (;;) {

		joueur_x_old = joueur_x;
 8001d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
		joueur_y_old = joueur_y;
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
		etat_bouton_saut_old = etat_bouton_saut;
 8001d10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		etat_bouton_saut = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1c:	485a      	ldr	r0, [pc, #360]	; (8001e88 <player+0x204>)
 8001d1e:	f003 fbf5 	bl	800550c <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		if ((etat_bouton_saut == 0) && (etat_bouton_saut_old == 1)) {
 8001d28:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d110      	bne.n	8001d52 <player+0xce>
 8001d30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10c      	bne.n	8001d52 <player+0xce>
			jump(etat_saut);
 8001d38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	469c      	mov	ip, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff ff82 	bl	8001c4c <jump.12868>
			etat_saut = etat_saut + 1;
 8001d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		//recuperation du joystick
		sConfig.Channel = ADC_CHANNEL_8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	613b      	str	r3, [r7, #16]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	484b      	ldr	r0, [pc, #300]	; (8001e8c <player+0x208>)
 8001d5e:	f002 f8c3 	bl	8003ee8 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d62:	484a      	ldr	r0, [pc, #296]	; (8001e8c <player+0x208>)
 8001d64:	f001 ff6e 	bl	8003c44 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001d68:	bf00      	nop
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	4847      	ldr	r0, [pc, #284]	; (8001e8c <player+0x208>)
 8001d6e:	f002 f829 	bl	8003dc4 <HAL_ADC_PollForConversion>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f8      	bne.n	8001d6a <player+0xe6>
			;
		//joystick_y = HAL_ADC_GetValue(&hadc3);

		HAL_ADC_Start(&hadc1);
 8001d78:	4845      	ldr	r0, [pc, #276]	; (8001e90 <player+0x20c>)
 8001d7a:	f001 ff63 	bl	8003c44 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001d7e:	bf00      	nop
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	4843      	ldr	r0, [pc, #268]	; (8001e90 <player+0x20c>)
 8001d84:	f002 f81e 	bl	8003dc4 <HAL_ADC_PollForConversion>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f8      	bne.n	8001d80 <player+0xfc>
			;
		joystick_x = HAL_ADC_GetValue(&hadc1);
 8001d8e:	4840      	ldr	r0, [pc, #256]	; (8001e90 <player+0x20c>)
 8001d90:	f002 f89c 	bl	8003ecc <HAL_ADC_GetValue>
 8001d94:	4603      	mov	r3, r0
 8001d96:	85fb      	strh	r3, [r7, #46]	; 0x2e

		// ========== maj coord player ================

		joueur_x = joueur_x - (joystick_x - 2077) * 20 * 270 / (1000 * 2077);
 8001d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d9a:	f6a3 031d 	subw	r3, r3, #2077	; 0x81d
 8001d9e:	f241 5218 	movw	r2, #5400	; 0x1518
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <player+0x210>)
 8001da8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dac:	441a      	add	r2, r3
 8001dae:	1512      	asrs	r2, r2, #20
 8001db0:	17db      	asrs	r3, r3, #31
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50


		joueur_dy = joueur_dy - gravite;
 8001dc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dcc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd4:	edc7 7a02 	vstr	s15, [r7, #8]
		joueur_y = joueur_y - joueur_dy;
 8001dd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ddc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		if (joueur_y >= HAUTEUR_SOL - joueur_height) {
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <player+0x1fc>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	db0d      	blt.n	8001e24 <player+0x1a0>
			joueur_y = HAUTEUR_SOL - joueur_height;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <player+0x1fc>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			etat_saut = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		// bounds of screen
		if (joueur_x <= 0)
 8001e24:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d803      	bhi.n	8001e3a <player+0x1b6>
			joueur_x = 0;
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	653b      	str	r3, [r7, #80]	; 0x50
 8001e38:	e01a      	b.n	8001e70 <player+0x1ec>
		else if (joueur_x + joueur_width >= 480)
 8001e3a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001e98 <player+0x214>
 8001e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	db09      	blt.n	8001e70 <player+0x1ec>
			joueur_x = 480 - joueur_width;
 8001e5c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001e60:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		//================ collisions ============
		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 8001e70:	2300      	movs	r3, #0
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e74:	e0d4      	b.n	8002020 <player+0x39c>
 8001e76:	bf00      	nop
 8001e78:	3f2a7efa 	.word	0x3f2a7efa
 8001e7c:	43660000 	.word	0x43660000
 8001e80:	20000028 	.word	0x20000028
 8001e84:	43680000 	.word	0x43680000
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	20008950 	.word	0x20008950
 8001e90:	20008908 	.word	0x20008908
 8001e94:	813dee19 	.word	0x813dee19
 8001e98:	43f00000 	.word	0x43f00000
		{
			bloc_x = ((blocs[iterateur_blocs_collision]>>8 & 255))*24;
 8001e9c:	4a8b      	ldr	r2, [pc, #556]	; (80020cc <player+0x448>)
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
			bloc_y = ((blocs[iterateur_blocs_collision]>>4 & 15))*24;
 8001eb4:	4a85      	ldr	r2, [pc, #532]	; (80020cc <player+0x448>)
 8001eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
			if( (bloc_x < joueur_x + joueur_width ) && (bloc_x + blocs_size > joueur_x) && (bloc_y < joueur_y + joueur_height )&&( bloc_y + blocs_size > joueur_y))
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ee4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	f140 8091 	bpl.w	800201a <player+0x396>
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <player+0x44c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	4413      	add	r3, r2
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	f140 8081 	bpl.w	800201a <player+0x396>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d56c      	bpl.n	800201a <player+0x396>
 8001f40:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <player+0x44c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	4413      	add	r3, r2
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d55d      	bpl.n	800201a <player+0x396>
			{
				if(joueur_y < bloc_y)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d50c      	bpl.n	8001f90 <player+0x30c>
				{
					joueur_dy=0;
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y - joueur_height;
 8001f7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				}
				if(joueur_y > bloc_y)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	dd0c      	ble.n	8001fc2 <player+0x33e>
				{
					joueur_dy=0;
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y + blocs_size;
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <player+0x44c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	4413      	add	r3, r2
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				}
				if(joueur_x < bloc_x)
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d509      	bpl.n	8001fee <player+0x36a>
				{

					joueur_x = bloc_x - joueur_width;
 8001fda:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				}
				if(joueur_x > bloc_x)
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	dd09      	ble.n	800201a <player+0x396>
				{

					joueur_x = bloc_x + blocs_size;
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <player+0x44c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	4413      	add	r3, r2
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 800201a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800201c:	3301      	adds	r3, #1
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002022:	2b1d      	cmp	r3, #29
 8002024:	f67f af3a 	bls.w	8001e9c <player+0x218>



		//=============== affichage

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002028:	482a      	ldr	r0, [pc, #168]	; (80020d4 <player+0x450>)
 800202a:	f000 fb2b 	bl	8002684 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 800202e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
 800203a:	b298      	uxth	r0, r3
 800203c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b299      	uxth	r1, r3
 800204a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800204e:	b29a      	uxth	r2, r3
 8002050:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002054:	b29b      	uxth	r3, r3
 8002056:	f000 fb89 	bl	800276c <BSP_LCD_FillRect>
				joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 800205a:	481f      	ldr	r0, [pc, #124]	; (80020d8 <player+0x454>)
 800205c:	f000 fb12 	bl	8002684 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x_old, (uint16_t) joueur_y_old,
 8002060:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002068:	ee17 3a90 	vmov	r3, s15
 800206c:	b298      	uxth	r0, r3
 800206e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b299      	uxth	r1, r3
 800207c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002080:	b29a      	uxth	r2, r3
 8002082:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002086:	b29b      	uxth	r3, r3
 8002088:	f000 fb70 	bl	800276c <BSP_LCD_FillRect>
				joueur_width, joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800208c:	4811      	ldr	r0, [pc, #68]	; (80020d4 <player+0x450>)
 800208e:	f000 faf9 	bl	8002684 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 8002092:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	b298      	uxth	r0, r3
 80020a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a8:	ee17 3a90 	vmov	r3, s15
 80020ac:	b299      	uxth	r1, r3
 80020ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f000 fb57 	bl	800276c <BSP_LCD_FillRect>
				joueur_height);

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80020be:	f107 0320 	add.w	r3, r7, #32
 80020c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020c4:	4618      	mov	r0, r3
 80020c6:	f008 ffc1 	bl	800b04c <vTaskDelayUntil>
		joueur_x_old = joueur_x;
 80020ca:	e61d      	b.n	8001d08 <player+0x84>
 80020cc:	200002cc 	.word	0x200002cc
 80020d0:	2000002c 	.word	0x2000002c
 80020d4:	ffff0000 	.word	0xffff0000
 80020d8:	ff8080ff 	.word	0xff8080ff

080020dc <game_over>:
 * @brief Function implementing the Game_over thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_game_over */
void game_over(void const *argument) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN game_over */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 80020e4:	2314      	movs	r3, #20
 80020e6:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80020e8:	f009 f974 	bl	800b3d4 <xTaskGetTickCount>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f008 ffa8 	bl	800b04c <vTaskDelayUntil>
 80020fc:	e7f8      	b.n	80020f0 <game_over+0x14>
	...

08002100 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002112:	f001 fd11 	bl	8003b38 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40001000 	.word	0x40001000

08002124 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800212a:	e7fe      	b.n	800212a <Error_Handler+0x6>

0800212c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a51      	ldr	r2, [pc, #324]	; (800227c <I2Cx_MspInit+0x150>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d14d      	bne.n	80021d8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <I2Cx_MspInit+0x154>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a4f      	ldr	r2, [pc, #316]	; (8002280 <I2Cx_MspInit+0x154>)
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <I2Cx_MspInit+0x154>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002158:	2312      	movs	r3, #18
 800215a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002164:	2304      	movs	r3, #4
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4845      	ldr	r0, [pc, #276]	; (8002284 <I2Cx_MspInit+0x158>)
 8002170:	f002 ff18 	bl	8004fa4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	4619      	mov	r1, r3
 8002180:	4840      	ldr	r0, [pc, #256]	; (8002284 <I2Cx_MspInit+0x158>)
 8002182:	f002 ff0f 	bl	8004fa4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002186:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <I2Cx_MspInit+0x154>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a3d      	ldr	r2, [pc, #244]	; (8002280 <I2Cx_MspInit+0x154>)
 800218c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <I2Cx_MspInit+0x154>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <I2Cx_MspInit+0x154>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a37      	ldr	r2, [pc, #220]	; (8002280 <I2Cx_MspInit+0x154>)
 80021a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021a8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80021aa:	4b35      	ldr	r3, [pc, #212]	; (8002280 <I2Cx_MspInit+0x154>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <I2Cx_MspInit+0x154>)
 80021b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021b4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	210f      	movs	r1, #15
 80021ba:	2048      	movs	r0, #72	; 0x48
 80021bc:	f002 f990 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80021c0:	2048      	movs	r0, #72	; 0x48
 80021c2:	f002 f9a9 	bl	8004518 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	210f      	movs	r1, #15
 80021ca:	2049      	movs	r0, #73	; 0x49
 80021cc:	f002 f988 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80021d0:	2049      	movs	r0, #73	; 0x49
 80021d2:	f002 f9a1 	bl	8004518 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80021d6:	e04d      	b.n	8002274 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <I2Cx_MspInit+0x154>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <I2Cx_MspInit+0x154>)
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	6313      	str	r3, [r2, #48]	; 0x30
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <I2Cx_MspInit+0x154>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80021f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021f6:	2312      	movs	r3, #18
 80021f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002202:	2304      	movs	r3, #4
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	481e      	ldr	r0, [pc, #120]	; (8002288 <I2Cx_MspInit+0x15c>)
 800220e:	f002 fec9 	bl	8004fa4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	481a      	ldr	r0, [pc, #104]	; (8002288 <I2Cx_MspInit+0x15c>)
 8002220:	f002 fec0 	bl	8004fa4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <I2Cx_MspInit+0x154>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a15      	ldr	r2, [pc, #84]	; (8002280 <I2Cx_MspInit+0x154>)
 800222a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <I2Cx_MspInit+0x154>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <I2Cx_MspInit+0x154>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <I2Cx_MspInit+0x154>)
 8002242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002246:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <I2Cx_MspInit+0x154>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <I2Cx_MspInit+0x154>)
 800224e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002252:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	210f      	movs	r1, #15
 8002258:	201f      	movs	r0, #31
 800225a:	f002 f941 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800225e:	201f      	movs	r0, #31
 8002260:	f002 f95a 	bl	8004518 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	210f      	movs	r1, #15
 8002268:	2020      	movs	r0, #32
 800226a:	f002 f939 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800226e:	2020      	movs	r0, #32
 8002270:	f002 f952 	bl	8004518 <HAL_NVIC_EnableIRQ>
}
 8002274:	bf00      	nop
 8002276:	3730      	adds	r7, #48	; 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000308 	.word	0x20000308
 8002280:	40023800 	.word	0x40023800
 8002284:	40021c00 	.word	0x40021c00
 8002288:	40020400 	.word	0x40020400

0800228c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f003 fc59 	bl	8005b4c <HAL_I2C_GetState>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d125      	bne.n	80022ec <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <I2Cx_Init+0x68>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <I2Cx_Init+0x6c>)
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e002      	b.n	80022b6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <I2Cx_Init+0x70>)
 80022b4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <I2Cx_Init+0x74>)
 80022ba:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff23 	bl	800212c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f003 f942 	bl	8005570 <HAL_I2C_Init>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000308 	.word	0x20000308
 80022f8:	40005c00 	.word	0x40005c00
 80022fc:	40005400 	.word	0x40005400
 8002300:	40912732 	.word	0x40912732

08002304 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af04      	add	r7, sp, #16
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	72fb      	strb	r3, [r7, #11]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	b299      	uxth	r1, r3
 8002326:	88f8      	ldrh	r0, [r7, #6]
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f003 faec 	bl	8005918 <HAL_I2C_Mem_Read>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800234a:	7afb      	ldrb	r3, [r7, #11]
 800234c:	4619      	mov	r1, r3
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f832 	bl	80023b8 <I2Cx_Error>
  }
  return status;    
 8002354:	7dfb      	ldrb	r3, [r7, #23]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	; 0x28
 8002362:	af04      	add	r7, sp, #16
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	4608      	mov	r0, r1
 8002368:	4611      	mov	r1, r2
 800236a:	461a      	mov	r2, r3
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]
 8002370:	460b      	mov	r3, r1
 8002372:	813b      	strh	r3, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	b299      	uxth	r1, r3
 8002380:	88f8      	ldrh	r0, [r7, #6]
 8002382:	893a      	ldrh	r2, [r7, #8]
 8002384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4603      	mov	r3, r0
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f003 f9ab 	bl	80056f0 <HAL_I2C_Mem_Write>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	4619      	mov	r1, r3
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f805 	bl	80023b8 <I2Cx_Error>
  }
  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f003 f963 	bl	8005690 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ff5e 	bl	800228c <I2Cx_Init>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <TS_IO_Init+0x10>)
 80023de:	f7ff ff55 	bl	800228c <I2Cx_Init>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000308 	.word	0x20000308

080023ec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	460b      	mov	r3, r1
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023fe:	79bb      	ldrb	r3, [r7, #6]
 8002400:	b29a      	uxth	r2, r3
 8002402:	79f9      	ldrb	r1, [r7, #7]
 8002404:	2301      	movs	r3, #1
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	1d7b      	adds	r3, r7, #5
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2301      	movs	r3, #1
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <TS_IO_Write+0x30>)
 8002410:	f7ff ffa5 	bl	800235e <I2Cx_WriteMultiple>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000308 	.word	0x20000308

08002420 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	4603      	mov	r3, r0
 8002428:	460a      	mov	r2, r1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	4613      	mov	r3, r2
 800242e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002434:	79bb      	ldrb	r3, [r7, #6]
 8002436:	b29a      	uxth	r2, r3
 8002438:	79f9      	ldrb	r1, [r7, #7]
 800243a:	2301      	movs	r3, #1
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	f107 030f 	add.w	r3, r7, #15
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <TS_IO_Read+0x38>)
 8002448:	f7ff ff5c 	bl	8002304 <I2Cx_ReadMultiple>

  return read_value;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000308 	.word	0x20000308

0800245c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 fb87 	bl	8003b78 <HAL_Delay>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002478:	4b31      	ldr	r3, [pc, #196]	; (8002540 <BSP_LCD_Init+0xcc>)
 800247a:	2228      	movs	r2, #40	; 0x28
 800247c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <BSP_LCD_Init+0xcc>)
 8002480:	2209      	movs	r2, #9
 8002482:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <BSP_LCD_Init+0xcc>)
 8002486:	2235      	movs	r2, #53	; 0x35
 8002488:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <BSP_LCD_Init+0xcc>)
 800248c:	220b      	movs	r2, #11
 800248e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <BSP_LCD_Init+0xcc>)
 8002492:	f240 121b 	movw	r2, #283	; 0x11b
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <BSP_LCD_Init+0xcc>)
 800249a:	f240 2215 	movw	r2, #533	; 0x215
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024a2:	f240 121d 	movw	r2, #285	; 0x11d
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024aa:	f240 2235 	movw	r2, #565	; 0x235
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024b0:	2100      	movs	r1, #0
 80024b2:	4823      	ldr	r0, [pc, #140]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024b4:	f000 facc 	bl	8002a50 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024be:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024c2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80024c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <BSP_LCD_Init+0xcc>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <BSP_LCD_Init+0xd0>)
 80024fc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024fe:	4810      	ldr	r0, [pc, #64]	; (8002540 <BSP_LCD_Init+0xcc>)
 8002500:	f003 ffb6 	bl	8006470 <HAL_LTDC_GetState>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800250a:	2100      	movs	r1, #0
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <BSP_LCD_Init+0xcc>)
 800250e:	f000 f9c5 	bl	800289c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002512:	480b      	ldr	r0, [pc, #44]	; (8002540 <BSP_LCD_Init+0xcc>)
 8002514:	f003 fddc 	bl	80060d0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <BSP_LCD_Init+0xd4>)
 8002520:	f003 f80c 	bl	800553c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2108      	movs	r1, #8
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <BSP_LCD_Init+0xd8>)
 800252a:	f003 f807 	bl	800553c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800252e:	f000 faf7 	bl	8002b20 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <BSP_LCD_Init+0xdc>)
 8002534:	f000 f8d8 	bl	80026e8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20008bc8 	.word	0x20008bc8
 8002544:	40016800 	.word	0x40016800
 8002548:	40022000 	.word	0x40022000
 800254c:	40022800 	.word	0x40022800
 8002550:	20000030 	.word	0x20000030

08002554 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <BSP_LCD_GetXSize+0x20>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <BSP_LCD_GetXSize+0x24>)
 800255e:	2134      	movs	r1, #52	; 0x34
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	681b      	ldr	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000394 	.word	0x20000394
 8002578:	20008bc8 	.word	0x20008bc8

0800257c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <BSP_LCD_GetYSize+0x20>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <BSP_LCD_GetYSize+0x24>)
 8002586:	2134      	movs	r1, #52	; 0x34
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3364      	adds	r3, #100	; 0x64
 8002590:	681b      	ldr	r3, [r3, #0]
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	20000394 	.word	0x20000394
 80025a0:	20008bc8 	.word	0x20008bc8

080025a4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b090      	sub	sp, #64	; 0x40
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80025b4:	f7ff ffce 	bl	8002554 <BSP_LCD_GetXSize>
 80025b8:	4603      	mov	r3, r0
 80025ba:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025c0:	f7ff ffdc 	bl	800257c <BSP_LCD_GetYSize>
 80025c4:	4603      	mov	r3, r0
 80025c6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80025d0:	23ff      	movs	r3, #255	; 0xff
 80025d2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025f0:	2307      	movs	r3, #7
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80025f4:	f7ff ffae 	bl	8002554 <BSP_LCD_GetXSize>
 80025f8:	4603      	mov	r3, r0
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80025fc:	f7ff ffbe 	bl	800257c <BSP_LCD_GetYSize>
 8002600:	4603      	mov	r3, r0
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	4619      	mov	r1, r3
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb4>)
 800260e:	f003 fef1 	bl	80063f4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	4911      	ldr	r1, [pc, #68]	; (800265c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3304      	adds	r3, #4
 8002622:	f04f 32ff 	mov.w	r2, #4294967295
 8002626:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	490c      	ldr	r1, [pc, #48]	; (800265c <BSP_LCD_LayerDefaultInit+0xb8>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3308      	adds	r3, #8
 8002638:	4a09      	ldr	r2, [pc, #36]	; (8002660 <BSP_LCD_LayerDefaultInit+0xbc>)
 800263a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	4907      	ldr	r1, [pc, #28]	; (800265c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	3740      	adds	r7, #64	; 0x40
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20008bc8 	.word	0x20008bc8
 800265c:	20000398 	.word	0x20000398
 8002660:	20000030 	.word	0x20000030

08002664 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <BSP_LCD_SelectLayer+0x1c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
} 
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000394 	.word	0x20000394

08002684 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <BSP_LCD_SetTextColor+0x28>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <BSP_LCD_SetTextColor+0x2c>)
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000394 	.word	0x20000394
 80026b0:	20000398 	.word	0x20000398

080026b4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <BSP_LCD_SetBackColor+0x2c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4908      	ldr	r1, [pc, #32]	; (80026e4 <BSP_LCD_SetBackColor+0x30>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3304      	adds	r3, #4
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000394 	.word	0x20000394
 80026e4:	20000398 	.word	0x20000398

080026e8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <BSP_LCD_SetFont+0x2c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4908      	ldr	r1, [pc, #32]	; (8002718 <BSP_LCD_SetFont+0x30>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	3308      	adds	r3, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000394 	.word	0x20000394
 8002718:	20000398 	.word	0x20000398

0800271c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b085      	sub	sp, #20
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <BSP_LCD_Clear+0x48>)
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <BSP_LCD_Clear+0x48>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <BSP_LCD_Clear+0x4c>)
 800272e:	2134      	movs	r1, #52	; 0x34
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461d      	mov	r5, r3
 800273c:	f7ff ff0a 	bl	8002554 <BSP_LCD_GetXSize>
 8002740:	4606      	mov	r6, r0
 8002742:	f7ff ff1b 	bl	800257c <BSP_LCD_GetYSize>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2300      	movs	r3, #0
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	4632      	mov	r2, r6
 8002754:	4629      	mov	r1, r5
 8002756:	4620      	mov	r0, r4
 8002758:	f000 f996 	bl	8002a88 <LL_FillBuffer>
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002764:	20000394 	.word	0x20000394
 8002768:	20008bc8 	.word	0x20008bc8

0800276c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af02      	add	r7, sp, #8
 8002774:	4604      	mov	r4, r0
 8002776:	4608      	mov	r0, r1
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4623      	mov	r3, r4
 800277e:	80fb      	strh	r3, [r7, #6]
 8002780:	4603      	mov	r3, r0
 8002782:	80bb      	strh	r3, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4930      	ldr	r1, [pc, #192]	; (8002858 <BSP_LCD_FillRect+0xec>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff6e 	bl	8002684 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2b      	ldr	r2, [pc, #172]	; (800285c <BSP_LCD_FillRect+0xf0>)
 80027ae:	2134      	movs	r1, #52	; 0x34
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	3348      	adds	r3, #72	; 0x48
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d114      	bne.n	80027e8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a26      	ldr	r2, [pc, #152]	; (800285c <BSP_LCD_FillRect+0xf0>)
 80027c4:	2134      	movs	r1, #52	; 0x34
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	335c      	adds	r3, #92	; 0x5c
 80027ce:	681c      	ldr	r4, [r3, #0]
 80027d0:	f7ff fec0 	bl	8002554 <BSP_LCD_GetXSize>
 80027d4:	4602      	mov	r2, r0
 80027d6:	88bb      	ldrh	r3, [r7, #4]
 80027d8:	fb03 f202 	mul.w	r2, r3, r2
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4423      	add	r3, r4
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e013      	b.n	8002810 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <BSP_LCD_FillRect+0xf0>)
 80027ee:	2134      	movs	r1, #52	; 0x34
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	681c      	ldr	r4, [r3, #0]
 80027fa:	f7ff feab 	bl	8002554 <BSP_LCD_GetXSize>
 80027fe:	4602      	mov	r2, r0
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	fb03 f202 	mul.w	r2, r3, r2
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4423      	add	r3, r4
 800280e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 8002812:	681c      	ldr	r4, [r3, #0]
 8002814:	68fd      	ldr	r5, [r7, #12]
 8002816:	887e      	ldrh	r6, [r7, #2]
 8002818:	f8b7 8000 	ldrh.w	r8, [r7]
 800281c:	f7ff fe9a 	bl	8002554 <BSP_LCD_GetXSize>
 8002820:	4602      	mov	r2, r0
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	1ad1      	subs	r1, r2, r3
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <BSP_LCD_FillRect+0xe8>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	480b      	ldr	r0, [pc, #44]	; (8002858 <BSP_LCD_FillRect+0xec>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4403      	add	r3, r0
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	9100      	str	r1, [sp, #0]
 800283c:	4643      	mov	r3, r8
 800283e:	4632      	mov	r2, r6
 8002840:	4629      	mov	r1, r5
 8002842:	4620      	mov	r0, r4
 8002844:	f000 f920 	bl	8002a88 <LL_FillBuffer>
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002852:	bf00      	nop
 8002854:	20000394 	.word	0x20000394
 8002858:	20000398 	.word	0x20000398
 800285c:	20008bc8 	.word	0x20008bc8

08002860 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <BSP_LCD_DisplayOn+0x30>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <BSP_LCD_DisplayOn+0x30>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <BSP_LCD_DisplayOn+0x34>)
 800287c:	f002 fe5e 	bl	800553c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002880:	2201      	movs	r2, #1
 8002882:	2108      	movs	r1, #8
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <BSP_LCD_DisplayOn+0x38>)
 8002886:	f002 fe59 	bl	800553c <HAL_GPIO_WritePin>
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20008bc8 	.word	0x20008bc8
 8002894:	40022000 	.word	0x40022000
 8002898:	40022800 	.word	0x40022800

0800289c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b090      	sub	sp, #64	; 0x40
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a63      	ldr	r2, [pc, #396]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ee:	4b52      	ldr	r3, [pc, #328]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a45      	ldr	r2, [pc, #276]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 800293c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 800296c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <BSP_LCD_MspInit+0x19c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800297e:	2310      	movs	r3, #16
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800298a:	2302      	movs	r3, #2
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800298e:	230e      	movs	r3, #14
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002996:	4619      	mov	r1, r3
 8002998:	4828      	ldr	r0, [pc, #160]	; (8002a3c <BSP_LCD_MspInit+0x1a0>)
 800299a:	f002 fb03 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800299e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80029a8:	2309      	movs	r3, #9
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80029ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b0:	4619      	mov	r1, r3
 80029b2:	4823      	ldr	r0, [pc, #140]	; (8002a40 <BSP_LCD_MspInit+0x1a4>)
 80029b4:	f002 faf6 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80029b8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029c2:	230e      	movs	r3, #14
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80029c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ca:	4619      	mov	r1, r3
 80029cc:	481d      	ldr	r0, [pc, #116]	; (8002a44 <BSP_LCD_MspInit+0x1a8>)
 80029ce:	f002 fae9 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80029d2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029dc:	230e      	movs	r3, #14
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80029e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e4:	4619      	mov	r1, r3
 80029e6:	4818      	ldr	r0, [pc, #96]	; (8002a48 <BSP_LCD_MspInit+0x1ac>)
 80029e8:	f002 fadc 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80029ec:	23f7      	movs	r3, #247	; 0xf7
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029f4:	230e      	movs	r3, #14
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80029f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029fc:	4619      	mov	r1, r3
 80029fe:	4813      	ldr	r0, [pc, #76]	; (8002a4c <BSP_LCD_MspInit+0x1b0>)
 8002a00:	f002 fad0 	bl	8004fa4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <BSP_LCD_MspInit+0x1a8>)
 8002a16:	f002 fac5 	bl	8004fa4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a26:	4619      	mov	r1, r3
 8002a28:	4808      	ldr	r0, [pc, #32]	; (8002a4c <BSP_LCD_MspInit+0x1b0>)
 8002a2a:	f002 fabb 	bl	8004fa4 <HAL_GPIO_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	3740      	adds	r7, #64	; 0x40
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40022400 	.word	0x40022400
 8002a4c:	40022800 	.word	0x40022800

08002a50 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <BSP_LCD_ClockConfig+0x34>)
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <BSP_LCD_ClockConfig+0x34>)
 8002a62:	22c0      	movs	r2, #192	; 0xc0
 8002a64:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <BSP_LCD_ClockConfig+0x34>)
 8002a68:	2205      	movs	r2, #5
 8002a6a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <BSP_LCD_ClockConfig+0x34>)
 8002a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a74:	4803      	ldr	r0, [pc, #12]	; (8002a84 <BSP_LCD_ClockConfig+0x34>)
 8002a76:	f004 fbab 	bl	80071d0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200003b0 	.word	0x200003b0

08002a88 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <LL_FillBuffer+0x88>)
 8002a98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a9c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <LL_FillBuffer+0x8c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <LL_FillBuffer+0x90>)
 8002aa4:	2134      	movs	r1, #52	; 0x34
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3348      	adds	r3, #72	; 0x48
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d103      	bne.n	8002abc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <LL_FillBuffer+0x88>)
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	e002      	b.n	8002ac2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <LL_FillBuffer+0x88>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <LL_FillBuffer+0x88>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <LL_FillBuffer+0x88>)
 8002aca:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <LL_FillBuffer+0x94>)
 8002acc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002ace:	4810      	ldr	r0, [pc, #64]	; (8002b10 <LL_FillBuffer+0x88>)
 8002ad0:	f001 ffdc 	bl	8004a8c <HAL_DMA2D_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d115      	bne.n	8002b06 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	480c      	ldr	r0, [pc, #48]	; (8002b10 <LL_FillBuffer+0x88>)
 8002ade:	f002 f933 	bl	8004d48 <HAL_DMA2D_ConfigLayer>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10e      	bne.n	8002b06 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69f9      	ldr	r1, [r7, #28]
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <LL_FillBuffer+0x88>)
 8002af4:	f002 f814 	bl	8004b20 <HAL_DMA2D_Start>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002afe:	210a      	movs	r1, #10
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <LL_FillBuffer+0x88>)
 8002b02:	f002 f838 	bl	8004b76 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000354 	.word	0x20000354
 8002b14:	20000394 	.word	0x20000394
 8002b18:	20008bc8 	.word	0x20008bc8
 8002b1c:	4002b000 	.word	0x4002b000

08002b20 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b26:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <BSP_SDRAM_Init+0xb0>)
 8002b28:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b32:	2207      	movs	r2, #7
 8002b34:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b3e:	2207      	movs	r2, #7
 8002b40:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b44:	2202      	movs	r2, #2
 8002b46:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002b50:	2202      	movs	r2, #2
 8002b52:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b62:	2204      	movs	r2, #4
 8002b64:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b68:	2210      	movs	r2, #16
 8002b6a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b78:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b86:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002b96:	2100      	movs	r1, #0
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002b9a:	f000 f87f 	bl	8002c9c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002b9e:	490d      	ldr	r1, [pc, #52]	; (8002bd4 <BSP_SDRAM_Init+0xb4>)
 8002ba0:	480a      	ldr	r0, [pc, #40]	; (8002bcc <BSP_SDRAM_Init+0xac>)
 8002ba2:	f005 fac5 	bl	8008130 <HAL_SDRAM_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <BSP_SDRAM_Init+0xb8>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e002      	b.n	8002bba <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <BSP_SDRAM_Init+0xb8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002bba:	f240 6003 	movw	r0, #1539	; 0x603
 8002bbe:	f000 f80d 	bl	8002bdc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <BSP_SDRAM_Init+0xb8>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20008c70 	.word	0x20008c70
 8002bd0:	a0000140 	.word	0xa0000140
 8002bd4:	20000434 	.word	0x20000434
 8002bd8:	20000040 	.word	0x20000040

08002bdc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002be8:	4b2a      	ldr	r3, [pc, #168]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c06:	4824      	ldr	r0, [pc, #144]	; (8002c98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c08:	f005 fac6 	bl	8008198 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f000 ffb3 	bl	8003b78 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c2e:	4919      	ldr	r1, [pc, #100]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c30:	4819      	ldr	r0, [pc, #100]	; (8002c98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c32:	f005 fab1 	bl	8008198 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c38:	2203      	movs	r2, #3
 8002c3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3e:	2210      	movs	r2, #16
 8002c40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c44:	2208      	movs	r2, #8
 8002c46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c52:	4910      	ldr	r1, [pc, #64]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c54:	4810      	ldr	r0, [pc, #64]	; (8002c98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c56:	f005 fa9f 	bl	8008198 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c5a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c5e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c62:	2204      	movs	r2, #4
 8002c64:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c68:	2210      	movs	r2, #16
 8002c6a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c76:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7c:	4905      	ldr	r1, [pc, #20]	; (8002c94 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c7e:	4806      	ldr	r0, [pc, #24]	; (8002c98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c80:	f005 fa8a 	bl	8008198 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4804      	ldr	r0, [pc, #16]	; (8002c98 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c88:	f005 fab1 	bl	80081ee <HAL_SDRAM_ProgramRefreshRate>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000450 	.word	0x20000450
 8002c98:	20008c70 	.word	0x20008c70

08002c9c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b090      	sub	sp, #64	; 0x40
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	4a6f      	ldr	r2, [pc, #444]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6393      	str	r3, [r2, #56]	; 0x38
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd6:	4b64      	ldr	r3, [pc, #400]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a63      	ldr	r2, [pc, #396]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cee:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a5d      	ldr	r2, [pc, #372]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d1e:	4b52      	ldr	r3, [pc, #328]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d36:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a4b      	ldr	r2, [pc, #300]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a45      	ldr	r2, [pc, #276]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <BSP_SDRAM_MspInit+0x1cc>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d72:	230c      	movs	r3, #12
 8002d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002d76:	2308      	movs	r3, #8
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	483a      	ldr	r0, [pc, #232]	; (8002e6c <BSP_SDRAM_MspInit+0x1d0>)
 8002d82:	f002 f90f 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d90:	4619      	mov	r1, r3
 8002d92:	4837      	ldr	r0, [pc, #220]	; (8002e70 <BSP_SDRAM_MspInit+0x1d4>)
 8002d94:	f002 f906 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d98:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da2:	4619      	mov	r1, r3
 8002da4:	4833      	ldr	r0, [pc, #204]	; (8002e74 <BSP_SDRAM_MspInit+0x1d8>)
 8002da6:	f002 f8fd 	bl	8004fa4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002daa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db4:	4619      	mov	r1, r3
 8002db6:	4830      	ldr	r0, [pc, #192]	; (8002e78 <BSP_SDRAM_MspInit+0x1dc>)
 8002db8:	f002 f8f4 	bl	8004fa4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002dbc:	f248 1333 	movw	r3, #33075	; 0x8133
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	482c      	ldr	r0, [pc, #176]	; (8002e7c <BSP_SDRAM_MspInit+0x1e0>)
 8002dca:	f002 f8eb 	bl	8004fa4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002dce:	2328      	movs	r3, #40	; 0x28
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4829      	ldr	r0, [pc, #164]	; (8002e80 <BSP_SDRAM_MspInit+0x1e4>)
 8002dda:	f002 f8e3 	bl	8004fa4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e00:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e08:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e16:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e20:	2203      	movs	r2, #3
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e32:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <BSP_SDRAM_MspInit+0x1ec>)
 8002e34:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002e42:	4810      	ldr	r0, [pc, #64]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e44:	f001 fcf2 	bl	800482c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e48:	480e      	ldr	r0, [pc, #56]	; (8002e84 <BSP_SDRAM_MspInit+0x1e8>)
 8002e4a:	f001 fc41 	bl	80046d0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	210f      	movs	r1, #15
 8002e52:	2038      	movs	r0, #56	; 0x38
 8002e54:	f001 fb44 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e58:	2038      	movs	r0, #56	; 0x38
 8002e5a:	f001 fb5d 	bl	8004518 <HAL_NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3740      	adds	r7, #64	; 0x40
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	40021c00 	.word	0x40021c00
 8002e84:	20000460 	.word	0x20000460
 8002e88:	40026410 	.word	0x40026410

08002e8c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	460a      	mov	r2, r1
 8002e96:	80fb      	strh	r3, [r7, #6]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <BSP_TS_Init+0x68>)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <BSP_TS_Init+0x6c>)
 8002ea8:	88bb      	ldrh	r3, [r7, #4]
 8002eaa:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <BSP_TS_Init+0x70>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2070      	movs	r0, #112	; 0x70
 8002eb2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <BSP_TS_Init+0x70>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2070      	movs	r0, #112	; 0x70
 8002eba:	4798      	blx	r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b51      	cmp	r3, #81	; 0x51
 8002ec0:	d111      	bne.n	8002ee6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <BSP_TS_Init+0x74>)
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <BSP_TS_Init+0x70>)
 8002ec6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <BSP_TS_Init+0x78>)
 8002eca:	2270      	movs	r2, #112	; 0x70
 8002ecc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <BSP_TS_Init+0x7c>)
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <BSP_TS_Init+0x74>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <BSP_TS_Init+0x78>)
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
 8002ee4:	e001      	b.n	8002eea <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200004c4 	.word	0x200004c4
 8002ef8:	200004c6 	.word	0x200004c6
 8002efc:	20000000 	.word	0x20000000
 8002f00:	200004c0 	.word	0x200004c0
 8002f04:	200004c9 	.word	0x200004c9
 8002f08:	200004c8 	.word	0x200004c8

08002f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	210f      	movs	r1, #15
 8002f46:	f06f 0001 	mvn.w	r0, #1
 8002f4a:	f001 fac9 	bl	80044e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <HAL_ADC_MspInit+0xc8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d124      	bne.n	8002fc8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a23      	ldr	r2, [pc, #140]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	481a      	ldr	r0, [pc, #104]	; (800302c <HAL_ADC_MspInit+0xd0>)
 8002fc2:	f001 ffef 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002fc6:	e029      	b.n	800301c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_ADC_MspInit+0xd4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d124      	bne.n	800301c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002ff0:	f043 0320 	orr.w	r3, r3, #32
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_ADC_MspInit+0xcc>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003002:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003008:	2303      	movs	r3, #3
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	4619      	mov	r1, r3
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <HAL_ADC_MspInit+0xd8>)
 8003018:	f001 ffc4 	bl	8004fa4 <HAL_GPIO_Init>
}
 800301c:	bf00      	nop
 800301e:	3730      	adds	r7, #48	; 0x30
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40012000 	.word	0x40012000
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000
 8003030:	40012200 	.word	0x40012200
 8003034:	40021400 	.word	0x40021400

08003038 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_DAC_MspInit+0x84>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d12b      	bne.n	80030b2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 8003060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_DAC_MspInit+0x88>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800308a:	2310      	movs	r3, #16
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308e:	2303      	movs	r3, #3
 8003090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	4619      	mov	r1, r3
 800309c:	4809      	ldr	r0, [pc, #36]	; (80030c4 <HAL_DAC_MspInit+0x8c>)
 800309e:	f001 ff81 	bl	8004fa4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2036      	movs	r0, #54	; 0x36
 80030a8:	f001 fa1a 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030ac:	2036      	movs	r0, #54	; 0x36
 80030ae:	f001 fa33 	bl	8004518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40007400 	.word	0x40007400
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020000 	.word	0x40020000

080030c8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_DMA2D_MspInit+0x38>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10b      	bne.n	80030f2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_DMA2D_MspInit+0x3c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_DMA2D_MspInit+0x3c>)
 80030e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_DMA2D_MspInit+0x3c>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	4002b000 	.word	0x4002b000
 8003104:	40023800 	.word	0x40023800

08003108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <HAL_I2C_MspInit+0xdc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d129      	bne.n	800317e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4b2f      	ldr	r3, [pc, #188]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a2e      	ldr	r2, [pc, #184]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003148:	2312      	movs	r3, #18
 800314a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314c:	2301      	movs	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003154:	2304      	movs	r3, #4
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	4619      	mov	r1, r3
 800315e:	4823      	ldr	r0, [pc, #140]	; (80031ec <HAL_I2C_MspInit+0xe4>)
 8003160:	f001 ff20 	bl	8004fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 800316a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800317c:	e02d      	b.n	80031da <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_I2C_MspInit+0xe8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d128      	bne.n	80031da <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003188:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	6313      	str	r3, [r2, #48]	; 0x30
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80031a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031aa:	2301      	movs	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031b2:	2304      	movs	r3, #4
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	480d      	ldr	r0, [pc, #52]	; (80031f4 <HAL_I2C_MspInit+0xec>)
 80031be:	f001 fef1 	bl	8004fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 80031c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_I2C_MspInit+0xe0>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	; 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40005400 	.word	0x40005400
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40005c00 	.word	0x40005c00
 80031f4:	40021c00 	.word	0x40021c00

080031f8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_I2C_MspDeInit+0x64>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d110      	bne.n	800322c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_I2C_MspDeInit+0x68>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_I2C_MspDeInit+0x68>)
 8003210:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321a:	4812      	ldr	r0, [pc, #72]	; (8003264 <HAL_I2C_MspDeInit+0x6c>)
 800321c:	f002 f86c 	bl	80052f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003224:	480f      	ldr	r0, [pc, #60]	; (8003264 <HAL_I2C_MspDeInit+0x6c>)
 8003226:	f002 f867 	bl	80052f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800322a:	e013      	b.n	8003254 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_I2C_MspDeInit+0x70>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10e      	bne.n	8003254 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003236:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_I2C_MspDeInit+0x68>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HAL_I2C_MspDeInit+0x68>)
 800323c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	4809      	ldr	r0, [pc, #36]	; (800326c <HAL_I2C_MspDeInit+0x74>)
 8003246:	f002 f857 	bl	80052f8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800324a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800324e:	4807      	ldr	r0, [pc, #28]	; (800326c <HAL_I2C_MspDeInit+0x74>)
 8003250:	f002 f852 	bl	80052f8 <HAL_GPIO_DeInit>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40005400 	.word	0x40005400
 8003260:	40023800 	.word	0x40023800
 8003264:	40020400 	.word	0x40020400
 8003268:	40005c00 	.word	0x40005c00
 800326c:	40021c00 	.word	0x40021c00

08003270 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_LTDC_MspInit+0x174>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 80a3 	bne.w	80033da <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003294:	4b54      	ldr	r3, [pc, #336]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	4a53      	ldr	r2, [pc, #332]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 800329a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329e:	6453      	str	r3, [r2, #68]	; 0x44
 80032a0:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a4d      	ldr	r2, [pc, #308]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032b2:	f043 0310 	orr.w	r3, r3, #16
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032c4:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e6:	6313      	str	r3, [r2, #48]	; 0x30
 80032e8:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032f4:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 80032fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_LTDC_MspInit+0x178>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003324:	2310      	movs	r3, #16
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003334:	230e      	movs	r3, #14
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333c:	4619      	mov	r1, r3
 800333e:	482b      	ldr	r0, [pc, #172]	; (80033ec <HAL_LTDC_MspInit+0x17c>)
 8003340:	f001 fe30 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003344:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003356:	230e      	movs	r3, #14
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800335a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335e:	4619      	mov	r1, r3
 8003360:	4823      	ldr	r0, [pc, #140]	; (80033f0 <HAL_LTDC_MspInit+0x180>)
 8003362:	f001 fe1f 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003366:	23f7      	movs	r3, #247	; 0xf7
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003376:	230e      	movs	r3, #14
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800337a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800337e:	4619      	mov	r1, r3
 8003380:	481c      	ldr	r0, [pc, #112]	; (80033f4 <HAL_LTDC_MspInit+0x184>)
 8003382:	f001 fe0f 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2300      	movs	r3, #0
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003398:	2309      	movs	r3, #9
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800339c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a0:	4619      	mov	r1, r3
 80033a2:	4815      	ldr	r0, [pc, #84]	; (80033f8 <HAL_LTDC_MspInit+0x188>)
 80033a4:	f001 fdfe 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80033a8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ba:	230e      	movs	r3, #14
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_LTDC_MspInit+0x18c>)
 80033c6:	f001 fded 	bl	8004fa4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2105      	movs	r1, #5
 80033ce:	2058      	movs	r0, #88	; 0x58
 80033d0:	f001 f886 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80033d4:	2058      	movs	r0, #88	; 0x58
 80033d6:	f001 f89f 	bl	8004518 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3738      	adds	r7, #56	; 0x38
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40016800 	.word	0x40016800
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40022400 	.word	0x40022400
 80033f4:	40022800 	.word	0x40022800
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40022000 	.word	0x40022000

08003400 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a07      	ldr	r2, [pc, #28]	; (800342c <HAL_RTC_MspInit+0x2c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d105      	bne.n	800341e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_RTC_MspInit+0x30>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a06      	ldr	r2, [pc, #24]	; (8003430 <HAL_RTC_MspInit+0x30>)
 8003418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40002800 	.word	0x40002800
 8003430:	40023800 	.word	0x40023800

08003434 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2d      	ldr	r2, [pc, #180]	; (8003508 <HAL_SPI_MspInit+0xd4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d154      	bne.n	8003500 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <HAL_SPI_MspInit+0xd8>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_SPI_MspInit+0xd8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a20      	ldr	r2, [pc, #128]	; (800350c <HAL_SPI_MspInit+0xd8>)
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_SPI_MspInit+0xd8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800349e:	2302      	movs	r3, #2
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034ae:	2305      	movs	r3, #5
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4815      	ldr	r0, [pc, #84]	; (8003510 <HAL_SPI_MspInit+0xdc>)
 80034ba:	f001 fd73 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034ce:	2305      	movs	r3, #5
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <HAL_SPI_MspInit+0xdc>)
 80034da:	f001 fd63 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80034de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ec:	2303      	movs	r3, #3
 80034ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034f0:	2305      	movs	r3, #5
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	4806      	ldr	r0, [pc, #24]	; (8003514 <HAL_SPI_MspInit+0xe0>)
 80034fc:	f001 fd52 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003500:	bf00      	nop
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40003800 	.word	0x40003800
 800350c:	40023800 	.word	0x40023800
 8003510:	40022000 	.word	0x40022000
 8003514:	40020400 	.word	0x40020400

08003518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2e      	ldr	r2, [pc, #184]	; (80035e0 <HAL_TIM_Base_MspInit+0xc8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352a:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6453      	str	r3, [r2, #68]	; 0x44
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003542:	e046      	b.n	80035d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d10c      	bne.n	8003568 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69bb      	ldr	r3, [r7, #24]
}
 8003566:	e034      	b.n	80035d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_TIM_Base_MspInit+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10c      	bne.n	800358c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
}
 800358a:	e022      	b.n	80035d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIM_Base_MspInit+0xd4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
}
 80035ae:	e010      	b.n	80035d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_TIM_Base_MspInit+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10b      	bne.n	80035d2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_TIM_Base_MspInit+0xcc>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_TIM_MspPostInit+0xa8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11c      	bne.n	8003650 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 800361c:	f043 0302 	orr.w	r3, r3, #2
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800362e:	2310      	movs	r3, #16
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800363e:	2302      	movs	r3, #2
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4816      	ldr	r0, [pc, #88]	; (80036a4 <HAL_TIM_MspPostInit+0xb0>)
 800364a:	f001 fcab 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800364e:	e020      	b.n	8003692 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <HAL_TIM_MspPostInit+0xb4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d11b      	bne.n	8003692 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_TIM_MspPostInit+0xac>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003672:	2304      	movs	r3, #4
 8003674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003682:	2303      	movs	r3, #3
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	4619      	mov	r1, r3
 800368c:	4807      	ldr	r0, [pc, #28]	; (80036ac <HAL_TIM_MspPostInit+0xb8>)
 800368e:	f001 fc89 	bl	8004fa4 <HAL_GPIO_Init>
}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40000400 	.word	0x40000400
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40010400 	.word	0x40010400
 80036ac:	40022000 	.word	0x40022000

080036b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_UART_MspInit+0x17c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d128      	bne.n	8003724 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80036d2:	4b57      	ldr	r3, [pc, #348]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b54      	ldr	r3, [pc, #336]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a50      	ldr	r2, [pc, #320]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036f0:	f043 0320 	orr.w	r3, r3, #32
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_UART_MspInit+0x180>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003702:	23c0      	movs	r3, #192	; 0xc0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003712:	2308      	movs	r3, #8
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	4619      	mov	r1, r3
 800371c:	4845      	ldr	r0, [pc, #276]	; (8003834 <HAL_UART_MspInit+0x184>)
 800371e:	f001 fc41 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003722:	e07f      	b.n	8003824 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a43      	ldr	r2, [pc, #268]	; (8003838 <HAL_UART_MspInit+0x188>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d14d      	bne.n	80037ca <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800372e:	4b40      	ldr	r3, [pc, #256]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	6453      	str	r3, [r2, #68]	; 0x44
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_UART_MspInit+0x180>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a39      	ldr	r2, [pc, #228]	; (8003830 <HAL_UART_MspInit+0x180>)
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a33      	ldr	r2, [pc, #204]	; (8003830 <HAL_UART_MspInit+0x180>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_UART_MspInit+0x180>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003786:	2307      	movs	r3, #7
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	4619      	mov	r1, r3
 8003790:	482a      	ldr	r0, [pc, #168]	; (800383c <HAL_UART_MspInit+0x18c>)
 8003792:	f001 fc07 	bl	8004fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037a8:	2307      	movs	r3, #7
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80037ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037b0:	4619      	mov	r1, r3
 80037b2:	4823      	ldr	r0, [pc, #140]	; (8003840 <HAL_UART_MspInit+0x190>)
 80037b4:	f001 fbf6 	bl	8004fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80037b8:	2200      	movs	r2, #0
 80037ba:	2107      	movs	r1, #7
 80037bc:	2025      	movs	r0, #37	; 0x25
 80037be:	f000 fe8f 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037c2:	2025      	movs	r0, #37	; 0x25
 80037c4:	f000 fea8 	bl	8004518 <HAL_NVIC_EnableIRQ>
}
 80037c8:	e02c      	b.n	8003824 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_UART_MspInit+0x194>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d127      	bne.n	8003824 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	6453      	str	r3, [r2, #68]	; 0x44
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
 80037f8:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_UART_MspInit+0x180>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003804:	23c0      	movs	r3, #192	; 0xc0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003814:	2308      	movs	r3, #8
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	4619      	mov	r1, r3
 800381e:	480a      	ldr	r0, [pc, #40]	; (8003848 <HAL_UART_MspInit+0x198>)
 8003820:	f001 fbc0 	bl	8004fa4 <HAL_GPIO_Init>
}
 8003824:	bf00      	nop
 8003826:	3738      	adds	r7, #56	; 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40007800 	.word	0x40007800
 8003830:	40023800 	.word	0x40023800
 8003834:	40021400 	.word	0x40021400
 8003838:	40011000 	.word	0x40011000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020000 	.word	0x40020000
 8003844:	40011400 	.word	0x40011400
 8003848:	40020800 	.word	0x40020800

0800384c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_FMC_MspInit+0x100>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d16d      	bne.n	8003944 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_FMC_MspInit+0x100>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800386e:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_FMC_MspInit+0x104>)
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4a37      	ldr	r2, [pc, #220]	; (8003950 <HAL_FMC_MspInit+0x104>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6393      	str	r3, [r2, #56]	; 0x38
 800387a:	4b35      	ldr	r3, [pc, #212]	; (8003950 <HAL_FMC_MspInit+0x104>)
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003886:	f64f 7383 	movw	r3, #65411	; 0xff83
 800388a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003898:	230c      	movs	r3, #12
 800389a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	482c      	ldr	r0, [pc, #176]	; (8003954 <HAL_FMC_MspInit+0x108>)
 80038a2:	f001 fb7f 	bl	8004fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80038a6:	f248 1333 	movw	r3, #33075	; 0x8133
 80038aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	2303      	movs	r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038b8:	230c      	movs	r3, #12
 80038ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4825      	ldr	r0, [pc, #148]	; (8003958 <HAL_FMC_MspInit+0x10c>)
 80038c2:	f001 fb6f 	bl	8004fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80038c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d4:	2303      	movs	r3, #3
 80038d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038d8:	230c      	movs	r3, #12
 80038da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	481e      	ldr	r0, [pc, #120]	; (800395c <HAL_FMC_MspInit+0x110>)
 80038e2:	f001 fb5f 	bl	8004fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80038e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80038ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2302      	movs	r3, #2
 80038ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038f8:	230c      	movs	r3, #12
 80038fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4817      	ldr	r0, [pc, #92]	; (8003960 <HAL_FMC_MspInit+0x114>)
 8003902:	f001 fb4f 	bl	8004fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8003906:	2328      	movs	r3, #40	; 0x28
 8003908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003916:	230c      	movs	r3, #12
 8003918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4811      	ldr	r0, [pc, #68]	; (8003964 <HAL_FMC_MspInit+0x118>)
 8003920:	f001 fb40 	bl	8004fa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003924:	2308      	movs	r3, #8
 8003926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003934:	230c      	movs	r3, #12
 8003936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	4619      	mov	r1, r3
 800393c:	480a      	ldr	r0, [pc, #40]	; (8003968 <HAL_FMC_MspInit+0x11c>)
 800393e:	f001 fb31 	bl	8004fa4 <HAL_GPIO_Init>
 8003942:	e000      	b.n	8003946 <HAL_FMC_MspInit+0xfa>
    return;
 8003944:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200004cc 	.word	0x200004cc
 8003950:	40023800 	.word	0x40023800
 8003954:	40021000 	.word	0x40021000
 8003958:	40021800 	.word	0x40021800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021400 	.word	0x40021400
 8003964:	40021c00 	.word	0x40021c00
 8003968:	40020800 	.word	0x40020800

0800396c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003974:	f7ff ff6a 	bl	800384c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003990:	2200      	movs	r2, #0
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	2036      	movs	r0, #54	; 0x36
 8003996:	f000 fda3 	bl	80044e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800399a:	2036      	movs	r0, #54	; 0x36
 800399c:	f000 fdbc 	bl	8004518 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_InitTick+0xa0>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_InitTick+0xa0>)
 80039a6:	f043 0310 	orr.w	r3, r3, #16
 80039aa:	6413      	str	r3, [r2, #64]	; 0x40
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_InitTick+0xa0>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039b8:	f107 0210 	add.w	r2, r7, #16
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fbd2 	bl	800716c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80039c8:	f003 fba8 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 80039cc:	4603      	mov	r3, r0
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <HAL_InitTick+0xa4>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9b      	lsrs	r3, r3, #18
 80039dc:	3b01      	subs	r3, #1
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_InitTick+0xa8>)
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <HAL_InitTick+0xac>)
 80039e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_InitTick+0xa8>)
 80039e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_InitTick+0xa8>)
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_InitTick+0xa8>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_InitTick+0xa8>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a00:	4809      	ldr	r0, [pc, #36]	; (8003a28 <HAL_InitTick+0xa8>)
 8003a02:	f004 fca6 	bl	8008352 <HAL_TIM_Base_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a0c:	4806      	ldr	r0, [pc, #24]	; (8003a28 <HAL_InitTick+0xa8>)
 8003a0e:	f004 fccb 	bl	80083a8 <HAL_TIM_Base_Start_IT>
 8003a12:	4603      	mov	r3, r0
 8003a14:	e000      	b.n	8003a18 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3730      	adds	r7, #48	; 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	431bde83 	.word	0x431bde83
 8003a28:	20008ca4 	.word	0x20008ca4
 8003a2c:	40001000 	.word	0x40001000

08003a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <NMI_Handler+0x4>

08003a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <HardFault_Handler+0x4>

08003a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <MemManage_Handler+0x4>

08003a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <BusFault_Handler+0x4>

08003a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <UsageFault_Handler+0x4>

08003a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <USART1_IRQHandler+0x10>)
 8003a62:	f005 fdf3 	bl	800964c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20008998 	.word	0x20008998

08003a70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003a74:	4803      	ldr	r0, [pc, #12]	; (8003a84 <TIM6_DAC_IRQHandler+0x14>)
 8003a76:	f000 fd7f 	bl	8004578 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003a7a:	4803      	ldr	r0, [pc, #12]	; (8003a88 <TIM6_DAC_IRQHandler+0x18>)
 8003a7c:	f004 fcf3 	bl	8008466 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20008a18 	.word	0x20008a18
 8003a88:	20008ca4 	.word	0x20008ca4

08003a8c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <LTDC_IRQHandler+0x10>)
 8003a92:	f002 fbed 	bl	8006270 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20008860 	.word	0x20008860

08003aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <SystemInit+0x28>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <SystemInit+0x28>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <SystemInit+0x28>)
 8003ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aba:	609a      	str	r2, [r3, #8]
#endif
 }
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ad2:	e003      	b.n	8003adc <LoopCopyDataInit>

08003ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ada:	3104      	adds	r1, #4

08003adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003adc:	480b      	ldr	r0, [pc, #44]	; (8003b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ae4:	d3f6      	bcc.n	8003ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ae6:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ae8:	e002      	b.n	8003af0 <LoopFillZerobss>

08003aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003aec:	f842 3b04 	str.w	r3, [r2], #4

08003af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003af4:	d3f9      	bcc.n	8003aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003af6:	f7ff ffd3 	bl	8003aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afa:	f008 fc4d 	bl	800c398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afe:	f7fc fefd 	bl	80008fc <main>
  bx  lr    
 8003b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b04:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003b08:	0800e3f8 	.word	0x0800e3f8
  ldr  r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b10:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8003b14:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8003b18:	20008ce8 	.word	0x20008ce8

08003b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b1c:	e7fe      	b.n	8003b1c <ADC_IRQHandler>

08003b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b22:	2003      	movs	r0, #3
 8003b24:	f000 fcd1 	bl	80044ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7ff ff29 	bl	8003980 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b2e:	f7ff f9ed 	bl	8002f0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_IncTick+0x20>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_IncTick+0x24>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_IncTick+0x24>)
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2000004c 	.word	0x2000004c
 8003b5c:	20008ce4 	.word	0x20008ce4

08003b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return uwTick;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_GetTick+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20008ce4 	.word	0x20008ce4

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff ffee 	bl	8003b60 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d005      	beq.n	8003b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_Delay+0x40>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b9e:	bf00      	nop
 8003ba0:	f7ff ffde 	bl	8003b60 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d8f7      	bhi.n	8003ba0 <HAL_Delay+0x28>
  {
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000004c 	.word	0x2000004c

08003bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e031      	b.n	8003c36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff f9be 	bl	8002f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_ADC_Init+0x84>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	f043 0202 	orr.w	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fab6 	bl	800417c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	f043 0201 	orr.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
 8003c26:	e001      	b.n	8003c2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	ffffeefd 	.word	0xffffeefd

08003c44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ADC_Start+0x1a>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0a0      	b.n	8003da0 <HAL_ADC_Start+0x15c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d018      	beq.n	8003ca6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_ADC_Start+0x168>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a49      	ldr	r2, [pc, #292]	; (8003db0 <HAL_ADC_Start+0x16c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9a      	lsrs	r2, r3, #18
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003c98:	e002      	b.n	8003ca0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f9      	bne.n	8003c9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d174      	bne.n	8003d9e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_ADC_Start+0x170>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	d106      	bne.n	8003cfe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f023 0206 	bic.w	r2, r3, #6
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfc:	e002      	b.n	8003d04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_ADC_Start+0x174>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d136      	bne.n	8003d9e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e02d      	b.n	8003d9e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_ADC_Start+0x178>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10e      	bne.n	8003d6a <HAL_ADC_Start+0x126>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_ADC_Start+0x174>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <HAL_ADC_Start+0x17c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10e      	bne.n	8003d9e <HAL_ADC_Start+0x15a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d9c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	20000044 	.word	0x20000044
 8003db0:	431bde83 	.word	0x431bde83
 8003db4:	fffff8fe 	.word	0xfffff8fe
 8003db8:	40012300 	.word	0x40012300
 8003dbc:	40012000 	.word	0x40012000
 8003dc0:	40012200 	.word	0x40012200

08003dc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d113      	bne.n	8003e0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df0:	d10b      	bne.n	8003e0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e05c      	b.n	8003ec4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003e0a:	f7ff fea9 	bl	8003b60 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e10:	e01a      	b.n	8003e48 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d016      	beq.n	8003e48 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_ADC_PollForConversion+0x6c>
 8003e20:	f7ff fe9e 	bl	8003b60 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d20b      	bcs.n	8003e48 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03d      	b.n	8003ec4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d1dd      	bne.n	8003e12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0212 	mvn.w	r2, #18
 8003e5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d123      	bne.n	8003ec2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11f      	bne.n	8003ec2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d111      	bne.n	8003ec2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1c>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e12a      	b.n	800415a <HAL_ADC_ConfigChannel+0x272>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d93a      	bls.n	8003f8a <HAL_ADC_ConfigChannel+0xa2>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1c:	d035      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68d9      	ldr	r1, [r3, #12]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	3b1e      	subs	r3, #30
 8003f34:	2207      	movs	r2, #7
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a87      	ldr	r2, [pc, #540]	; (8004168 <HAL_ADC_ConfigChannel+0x280>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	061a      	lsls	r2, r3, #24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f62:	e035      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4618      	mov	r0, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3b1e      	subs	r3, #30
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f88:	e022      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6919      	ldr	r1, [r3, #16]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	400a      	ands	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6919      	ldr	r1, [r3, #16]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4403      	add	r3, r0
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d824      	bhi.n	8004022 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3b05      	subs	r3, #5
 8003fea:	221f      	movs	r2, #31
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43da      	mvns	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	400a      	ands	r2, r1
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	4618      	mov	r0, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	3b05      	subs	r3, #5
 8004014:	fa00 f203 	lsl.w	r2, r0, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	635a      	str	r2, [r3, #52]	; 0x34
 8004020:	e04c      	b.n	80040bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d824      	bhi.n	8004074 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	3b23      	subs	r3, #35	; 0x23
 800403c:	221f      	movs	r2, #31
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	400a      	ands	r2, r1
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	4618      	mov	r0, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	3b23      	subs	r3, #35	; 0x23
 8004066:	fa00 f203 	lsl.w	r2, r0, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
 8004072:	e023      	b.n	80040bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	3b41      	subs	r3, #65	; 0x41
 8004086:	221f      	movs	r2, #31
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43da      	mvns	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	400a      	ands	r2, r1
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	3b41      	subs	r3, #65	; 0x41
 80040b0:	fa00 f203 	lsl.w	r2, r0, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_ADC_ConfigChannel+0x284>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10a      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x1f4>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ce:	d105      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 80040d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80040da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_ADC_ConfigChannel+0x284>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d109      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x212>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b12      	cmp	r3, #18
 80040ec:	d105      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 80040f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_ADC_ConfigChannel+0x284>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d125      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x268>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_ADC_ConfigChannel+0x280>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <HAL_ADC_ConfigChannel+0x22e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b11      	cmp	r3, #17
 8004114:	d11c      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <HAL_ADC_ConfigChannel+0x288>)
 800411c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004120:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <HAL_ADC_ConfigChannel+0x280>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_ADC_ConfigChannel+0x28c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a11      	ldr	r2, [pc, #68]	; (8004178 <HAL_ADC_ConfigChannel+0x290>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0c9a      	lsrs	r2, r3, #18
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004142:	e002      	b.n	800414a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	10000012 	.word	0x10000012
 800416c:	40012000 	.word	0x40012000
 8004170:	40012300 	.word	0x40012300
 8004174:	20000044 	.word	0x20000044
 8004178:	431bde83 	.word	0x431bde83

0800417c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004184:	4b78      	ldr	r3, [pc, #480]	; (8004368 <ADC_Init+0x1ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a77      	ldr	r2, [pc, #476]	; (8004368 <ADC_Init+0x1ec>)
 800418a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800418e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004190:	4b75      	ldr	r3, [pc, #468]	; (8004368 <ADC_Init+0x1ec>)
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4973      	ldr	r1, [pc, #460]	; (8004368 <ADC_Init+0x1ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	021a      	lsls	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	4a58      	ldr	r2, [pc, #352]	; (800436c <ADC_Init+0x1f0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800421e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	e00f      	b.n	8004276 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004274:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0202 	bic.w	r2, r2, #2
 8004284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	3b01      	subs	r3, #1
 80042d0:	035a      	lsls	r2, r3, #13
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e007      	b.n	80042ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	3b01      	subs	r3, #1
 8004308:	051a      	lsls	r2, r3, #20
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6899      	ldr	r1, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800432e:	025a      	lsls	r2, r3, #9
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	029a      	lsls	r2, r3, #10
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	40012300 	.word	0x40012300
 800436c:	0f000001 	.word	0x0f000001

08004370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800438c:	4013      	ands	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 800439a:	4313      	orrs	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <__NVIC_SetPriorityGrouping+0x40>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00
 80043b4:	05fa0000 	.word	0x05fa0000

080043b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <__NVIC_GetPriorityGrouping+0x18>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f003 0307 	and.w	r3, r3, #7
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	db0b      	blt.n	80043fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4907      	ldr	r1, [pc, #28]	; (800440c <__NVIC_EnableIRQ+0x38>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2001      	movs	r0, #1
 80043f6:	fa00 f202 	lsl.w	r2, r0, r2
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000e100 	.word	0xe000e100

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <__NVIC_SetPriority+0x4c>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4908      	ldr	r1, [pc, #32]	; (8004460 <__NVIC_SetPriority+0x50>)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3b04      	subs	r3, #4
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf28      	it	cs
 8004482:	2304      	movcs	r3, #4
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3304      	adds	r3, #4
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b03      	subs	r3, #3
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43d9      	mvns	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	4313      	orrs	r3, r2
         );
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff4c 	bl	8004370 <__NVIC_SetPriorityGrouping>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f2:	f7ff ff61 	bl	80043b8 <__NVIC_GetPriorityGrouping>
 80044f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	f7ff ffb1 	bl	8004464 <NVIC_EncodePriority>
 8004502:	4602      	mov	r2, r0
 8004504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff80 	bl	8004410 <__NVIC_SetPriority>
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff54 	bl	80043d4 <__NVIC_EnableIRQ>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e014      	b.n	8004570 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fd6e 	bl	8003038 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458e:	d118      	bne.n	80045c2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2204      	movs	r2, #4
 8004594:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ba:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f825 	bl	800460c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d0:	d118      	bne.n	8004604 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f043 0202 	orr.w	r2, r3, #2
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f85b 	bl	80046ba <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	795b      	ldrb	r3, [r3, #5]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_DAC_ConfigChannel+0x20>
 800463c:	2302      	movs	r3, #2
 800463e:	e036      	b.n	80046ae <HAL_DAC_ConfigChannel+0x8e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004654:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4013      	ands	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	22c0      	movs	r2, #192	; 0xc0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	400a      	ands	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff fa40 	bl	8003b60 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e099      	b.n	8004820 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470c:	e00f      	b.n	800472e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470e:	f7ff fa27 	bl	8003b60 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b05      	cmp	r3, #5
 800471a:	d908      	bls.n	800472e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e078      	b.n	8004820 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e8      	bne.n	800470e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_DMA_Init+0x158>)
 8004748:	4013      	ands	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b04      	cmp	r3, #4
 8004786:	d107      	bne.n	8004798 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	4313      	orrs	r3, r2
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d117      	bne.n	80047f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8df 	bl	8004998 <DMA_CheckFifoParam>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ee:	2301      	movs	r3, #1
 80047f0:	e016      	b.n	8004820 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f896 	bl	800492c <DMA_CalcBaseAndBitshift>
 8004800:	4603      	mov	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	223f      	movs	r2, #63	; 0x3f
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	f010803f 	.word	0xf010803f

0800482c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e050      	b.n	80048e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d101      	bne.n	800484e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	e048      	b.n	80048e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f84c 	bl	800492c <DMA_CalcBaseAndBitshift>
 8004894:	4603      	mov	r3, r0
 8004896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489c:	223f      	movs	r2, #63	; 0x3f
 800489e:	409a      	lsls	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d004      	beq.n	8004906 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e00c      	b.n	8004920 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2205      	movs	r2, #5
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	3b10      	subs	r3, #16
 800493c:	4a13      	ldr	r2, [pc, #76]	; (800498c <DMA_CalcBaseAndBitshift+0x60>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <DMA_CalcBaseAndBitshift+0x64>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d908      	bls.n	800496c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <DMA_CalcBaseAndBitshift+0x68>)
 8004962:	4013      	ands	r3, r2
 8004964:	1d1a      	adds	r2, r3, #4
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
 800496a:	e006      	b.n	800497a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <DMA_CalcBaseAndBitshift+0x68>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	aaaaaaab 	.word	0xaaaaaaab
 8004990:	0800e3e0 	.word	0x0800e3e0
 8004994:	fffffc00 	.word	0xfffffc00

08004998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11f      	bne.n	80049f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d855      	bhi.n	8004a64 <DMA_CheckFifoParam+0xcc>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <DMA_CheckFifoParam+0x28>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049d1 	.word	0x080049d1
 80049c4:	080049e3 	.word	0x080049e3
 80049c8:	080049d1 	.word	0x080049d1
 80049cc:	08004a65 	.word	0x08004a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d045      	beq.n	8004a68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e0:	e042      	b.n	8004a68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ea:	d13f      	bne.n	8004a6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f0:	e03c      	b.n	8004a6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d121      	bne.n	8004a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d836      	bhi.n	8004a70 <DMA_CheckFifoParam+0xd8>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <DMA_CheckFifoParam+0x70>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a19 	.word	0x08004a19
 8004a0c:	08004a1f 	.word	0x08004a1f
 8004a10:	08004a19 	.word	0x08004a19
 8004a14:	08004a31 	.word	0x08004a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e02f      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d024      	beq.n	8004a74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2e:	e021      	b.n	8004a74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a38:	d11e      	bne.n	8004a78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a3e:	e01b      	b.n	8004a78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d902      	bls.n	8004a4c <DMA_CheckFifoParam+0xb4>
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d003      	beq.n	8004a52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a4a:	e018      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a50:	e015      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00e      	beq.n	8004a7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
      break;
 8004a62:	e00b      	b.n	8004a7c <DMA_CheckFifoParam+0xe4>
      break;
 8004a64:	bf00      	nop
 8004a66:	e00a      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a68:	bf00      	nop
 8004a6a:	e008      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a6c:	bf00      	nop
 8004a6e:	e006      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a70:	bf00      	nop
 8004a72:	e004      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;   
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <DMA_CheckFifoParam+0xe6>
      break;
 8004a7c:	bf00      	nop
    }
  } 
  
  return status; 
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e039      	b.n	8004b12 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fe fb08 	bl	80030c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f023 0107 	bic.w	r1, r3, #7
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_DMA2D_Init+0x90>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68d1      	ldr	r1, [r2, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	ffffc000 	.word	0xffffc000

08004b20 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA2D_Start+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e018      	b.n	8004b6e <HAL_DMA2D_Start+0x4e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f988 	bl	8004e6c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d056      	beq.n	8004c40 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004b92:	f7fe ffe5 	bl	8003b60 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b98:	e04b      	b.n	8004c32 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d023      	beq.n	8004bf4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2221      	movs	r2, #33	; 0x21
 8004bde:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2204      	movs	r2, #4
 8004be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0a5      	b.n	8004d40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d01a      	beq.n	8004c32 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004bfc:	f7fe ffb0 	bl	8003b60 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <HAL_DMA2D_PollForTransfer+0x9c>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e086      	b.n	8004d40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ac      	beq.n	8004b9a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d061      	beq.n	8004d26 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fe ff7d 	bl	8003b60 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004c68:	e056      	b.n	8004d18 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02e      	beq.n	8004cda <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	f043 0202 	orr.w	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	f043 0201 	orr.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2229      	movs	r2, #41	; 0x29
 8004cc4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e032      	b.n	8004d40 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d01a      	beq.n	8004d18 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004ce2:	f7fe ff3d 	bl	8003b60 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <HAL_DMA2D_PollForTransfer+0x182>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2203      	movs	r2, #3
 8004d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e013      	b.n	8004d40 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0a1      	beq.n	8004c6a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2212      	movs	r2, #18
 8004d2c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA2D_ConfigLayer+0x20>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e079      	b.n	8004e5c <HAL_DMA2D_ConfigLayer+0x114>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	3318      	adds	r3, #24
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d92:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <HAL_DMA2D_ConfigLayer+0x120>)
 8004d94:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b0a      	cmp	r3, #10
 8004d9c:	d003      	beq.n	8004da6 <HAL_DMA2D_ConfigLayer+0x5e>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b09      	cmp	r3, #9
 8004da4:	d107      	bne.n	8004db6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e005      	b.n	8004dc2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d120      	bne.n	8004e0a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	ea02 0103 	and.w	r1, r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d003      	beq.n	8004dfa <HAL_DMA2D_ConfigLayer+0xb2>
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b09      	cmp	r3, #9
 8004df8:	d127      	bne.n	8004e4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
 8004e08:	e01f      	b.n	8004e4a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	ea02 0103 	and.w	r1, r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b0a      	cmp	r3, #10
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA2D_ConfigLayer+0xf4>
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b09      	cmp	r3, #9
 8004e3a:	d106      	bne.n	8004e4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e48:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	ff03000f 	.word	0xff03000f

08004e6c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b08b      	sub	sp, #44	; 0x2c
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	041a      	lsls	r2, r3, #16
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ea4:	d174      	bne.n	8004f90 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eb4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ebc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d108      	bne.n	8004ede <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	e053      	b.n	8004f86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d106      	bne.n	8004ef4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef2:	e048      	b.n	8004f86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d111      	bne.n	8004f20 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	0cdb      	lsrs	r3, r3, #19
 8004f00:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	0a9b      	lsrs	r3, r3, #10
 8004f06:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	08db      	lsrs	r3, r3, #3
 8004f0c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	02db      	lsls	r3, r3, #11
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	e032      	b.n	8004f86 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d117      	bne.n	8004f58 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	0fdb      	lsrs	r3, r3, #31
 8004f2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	0cdb      	lsrs	r3, r3, #19
 8004f32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	0adb      	lsrs	r3, r3, #11
 8004f38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	03db      	lsls	r3, r3, #15
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e016      	b.n	8004f86 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	0f1b      	lsrs	r3, r3, #28
 8004f5c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	0b1b      	lsrs	r3, r3, #12
 8004f68:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	011a      	lsls	r2, r3, #4
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004f8e:	e003      	b.n	8004f98 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	372c      	adds	r7, #44	; 0x2c
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e175      	b.n	80052b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	f040 8164 	bne.w	80052aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d00b      	beq.n	8005002 <HAL_GPIO_Init+0x5e>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d007      	beq.n	8005002 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff6:	2b11      	cmp	r3, #17
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b12      	cmp	r3, #18
 8005000:	d130      	bne.n	8005064 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	2203      	movs	r2, #3
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005038:	2201      	movs	r2, #1
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0201 	and.w	r2, r3, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	2203      	movs	r2, #3
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0x100>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d123      	bne.n	80050ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	08da      	lsrs	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3208      	adds	r2, #8
 80050ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	220f      	movs	r2, #15
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	08da      	lsrs	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3208      	adds	r2, #8
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 0203 	and.w	r2, r3, #3
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80be 	beq.w	80052aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512e:	4b65      	ldr	r3, [pc, #404]	; (80052c4 <HAL_GPIO_Init+0x320>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4a64      	ldr	r2, [pc, #400]	; (80052c4 <HAL_GPIO_Init+0x320>)
 8005134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005138:	6453      	str	r3, [r2, #68]	; 0x44
 800513a:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_GPIO_Init+0x320>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005146:	4a60      	ldr	r2, [pc, #384]	; (80052c8 <HAL_GPIO_Init+0x324>)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	089b      	lsrs	r3, r3, #2
 800514c:	3302      	adds	r3, #2
 800514e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	220f      	movs	r2, #15
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a57      	ldr	r2, [pc, #348]	; (80052cc <HAL_GPIO_Init+0x328>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d037      	beq.n	80051e2 <HAL_GPIO_Init+0x23e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a56      	ldr	r2, [pc, #344]	; (80052d0 <HAL_GPIO_Init+0x32c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_GPIO_Init+0x23a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a55      	ldr	r2, [pc, #340]	; (80052d4 <HAL_GPIO_Init+0x330>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02b      	beq.n	80051da <HAL_GPIO_Init+0x236>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a54      	ldr	r2, [pc, #336]	; (80052d8 <HAL_GPIO_Init+0x334>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d025      	beq.n	80051d6 <HAL_GPIO_Init+0x232>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a53      	ldr	r2, [pc, #332]	; (80052dc <HAL_GPIO_Init+0x338>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <HAL_GPIO_Init+0x22e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a52      	ldr	r2, [pc, #328]	; (80052e0 <HAL_GPIO_Init+0x33c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d019      	beq.n	80051ce <HAL_GPIO_Init+0x22a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a51      	ldr	r2, [pc, #324]	; (80052e4 <HAL_GPIO_Init+0x340>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0x226>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a50      	ldr	r2, [pc, #320]	; (80052e8 <HAL_GPIO_Init+0x344>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_GPIO_Init+0x222>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4f      	ldr	r2, [pc, #316]	; (80052ec <HAL_GPIO_Init+0x348>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x21e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4e      	ldr	r2, [pc, #312]	; (80052f0 <HAL_GPIO_Init+0x34c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_GPIO_Init+0x21a>
 80051ba:	2309      	movs	r3, #9
 80051bc:	e012      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051be:	230a      	movs	r3, #10
 80051c0:	e010      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051c2:	2308      	movs	r3, #8
 80051c4:	e00e      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051c6:	2307      	movs	r3, #7
 80051c8:	e00c      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051ca:	2306      	movs	r3, #6
 80051cc:	e00a      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051ce:	2305      	movs	r3, #5
 80051d0:	e008      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051d2:	2304      	movs	r3, #4
 80051d4:	e006      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051d6:	2303      	movs	r3, #3
 80051d8:	e004      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051da:	2302      	movs	r3, #2
 80051dc:	e002      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_GPIO_Init+0x240>
 80051e2:	2300      	movs	r3, #0
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	f002 0203 	and.w	r2, r2, #3
 80051ea:	0092      	lsls	r2, r2, #2
 80051ec:	4093      	lsls	r3, r2
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051f4:	4934      	ldr	r1, [pc, #208]	; (80052c8 <HAL_GPIO_Init+0x324>)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	089b      	lsrs	r3, r3, #2
 80051fa:	3302      	adds	r3, #2
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005202:	4b3c      	ldr	r3, [pc, #240]	; (80052f4 <HAL_GPIO_Init+0x350>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005226:	4a33      	ldr	r2, [pc, #204]	; (80052f4 <HAL_GPIO_Init+0x350>)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800522c:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <HAL_GPIO_Init+0x350>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005250:	4a28      	ldr	r2, [pc, #160]	; (80052f4 <HAL_GPIO_Init+0x350>)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005256:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_GPIO_Init+0x350>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_GPIO_Init+0x350>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <HAL_GPIO_Init+0x350>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <HAL_GPIO_Init+0x350>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b0f      	cmp	r3, #15
 80052b4:	f67f ae86 	bls.w	8004fc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80052b8:	bf00      	nop
 80052ba:	3724      	adds	r7, #36	; 0x24
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40013800 	.word	0x40013800
 80052cc:	40020000 	.word	0x40020000
 80052d0:	40020400 	.word	0x40020400
 80052d4:	40020800 	.word	0x40020800
 80052d8:	40020c00 	.word	0x40020c00
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40021400 	.word	0x40021400
 80052e4:	40021800 	.word	0x40021800
 80052e8:	40021c00 	.word	0x40021c00
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40022400 	.word	0x40022400
 80052f4:	40013c00 	.word	0x40013c00

080052f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e0d9      	b.n	80054c8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005314:	2201      	movs	r2, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	429a      	cmp	r2, r3
 800532c:	f040 80c9 	bne.w	80054c2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005330:	4a6a      	ldr	r2, [pc, #424]	; (80054dc <HAL_GPIO_DeInit+0x1e4>)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	3302      	adds	r3, #2
 8005338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	220f      	movs	r2, #15
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a62      	ldr	r2, [pc, #392]	; (80054e0 <HAL_GPIO_DeInit+0x1e8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d037      	beq.n	80053ca <HAL_GPIO_DeInit+0xd2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a61      	ldr	r2, [pc, #388]	; (80054e4 <HAL_GPIO_DeInit+0x1ec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d031      	beq.n	80053c6 <HAL_GPIO_DeInit+0xce>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a60      	ldr	r2, [pc, #384]	; (80054e8 <HAL_GPIO_DeInit+0x1f0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d02b      	beq.n	80053c2 <HAL_GPIO_DeInit+0xca>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <HAL_GPIO_DeInit+0x1f4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d025      	beq.n	80053be <HAL_GPIO_DeInit+0xc6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a5e      	ldr	r2, [pc, #376]	; (80054f0 <HAL_GPIO_DeInit+0x1f8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01f      	beq.n	80053ba <HAL_GPIO_DeInit+0xc2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_GPIO_DeInit+0x1fc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d019      	beq.n	80053b6 <HAL_GPIO_DeInit+0xbe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a5c      	ldr	r2, [pc, #368]	; (80054f8 <HAL_GPIO_DeInit+0x200>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_GPIO_DeInit+0xba>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a5b      	ldr	r2, [pc, #364]	; (80054fc <HAL_GPIO_DeInit+0x204>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00d      	beq.n	80053ae <HAL_GPIO_DeInit+0xb6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a5a      	ldr	r2, [pc, #360]	; (8005500 <HAL_GPIO_DeInit+0x208>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d007      	beq.n	80053aa <HAL_GPIO_DeInit+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a59      	ldr	r2, [pc, #356]	; (8005504 <HAL_GPIO_DeInit+0x20c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <HAL_GPIO_DeInit+0xae>
 80053a2:	2309      	movs	r3, #9
 80053a4:	e012      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053a6:	230a      	movs	r3, #10
 80053a8:	e010      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053aa:	2308      	movs	r3, #8
 80053ac:	e00e      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053ae:	2307      	movs	r3, #7
 80053b0:	e00c      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053b2:	2306      	movs	r3, #6
 80053b4:	e00a      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053b6:	2305      	movs	r3, #5
 80053b8:	e008      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053ba:	2304      	movs	r3, #4
 80053bc:	e006      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053be:	2303      	movs	r3, #3
 80053c0:	e004      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e002      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_GPIO_DeInit+0xd4>
 80053ca:	2300      	movs	r3, #0
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	f002 0203 	and.w	r2, r2, #3
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	4093      	lsls	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d132      	bne.n	8005442 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053dc:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	4948      	ldr	r1, [pc, #288]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	4945      	ldr	r1, [pc, #276]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	43db      	mvns	r3, r3
 8005400:	4941      	ldr	r1, [pc, #260]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 8005402:	4013      	ands	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005406:	4b40      	ldr	r3, [pc, #256]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	43db      	mvns	r3, r3
 800540e:	493e      	ldr	r1, [pc, #248]	; (8005508 <HAL_GPIO_DeInit+0x210>)
 8005410:	4013      	ands	r3, r2
 8005412:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	220f      	movs	r2, #15
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005424:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <HAL_GPIO_DeInit+0x1e4>)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	3302      	adds	r3, #2
 800542c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	43da      	mvns	r2, r3
 8005434:	4829      	ldr	r0, [pc, #164]	; (80054dc <HAL_GPIO_DeInit+0x1e4>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	400a      	ands	r2, r1
 800543c:	3302      	adds	r3, #2
 800543e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	2103      	movs	r1, #3
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	08da      	lsrs	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3208      	adds	r2, #8
 8005460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	220f      	movs	r2, #15
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	08d2      	lsrs	r2, r2, #3
 8005478:	4019      	ands	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3208      	adds	r2, #8
 800547e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	2103      	movs	r1, #3
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	2101      	movs	r1, #1
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	401a      	ands	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2103      	movs	r1, #3
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	401a      	ands	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3301      	adds	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	f67f af22 	bls.w	8005314 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40013800 	.word	0x40013800
 80054e0:	40020000 	.word	0x40020000
 80054e4:	40020400 	.word	0x40020400
 80054e8:	40020800 	.word	0x40020800
 80054ec:	40020c00 	.word	0x40020c00
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40021400 	.word	0x40021400
 80054f8:	40021800 	.word	0x40021800
 80054fc:	40021c00 	.word	0x40021c00
 8005500:	40022000 	.word	0x40022000
 8005504:	40022400 	.word	0x40022400
 8005508:	40013c00 	.word	0x40013c00

0800550c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
 8005528:	e001      	b.n	800552e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800552e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
 8005548:	4613      	mov	r3, r2
 800554a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800554c:	787b      	ldrb	r3, [r7, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005558:	e003      	b.n	8005562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	041a      	lsls	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e07f      	b.n	8005682 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fd fdb6 	bl	8003108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	e006      	b.n	80055f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d104      	bne.n	800560a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <HAL_I2C_Init+0x11c>)
 8005616:	430b      	orrs	r3, r1
 8005618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	ea42 0103 	orr.w	r1, r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	02008000 	.word	0x02008000

08005690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e021      	b.n	80056e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd fd9c 	bl	80031f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	460b      	mov	r3, r1
 8005704:	813b      	strh	r3, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 80f9 	bne.w	800590a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_I2C_Mem_Write+0x34>
 800571e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0ed      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_I2C_Mem_Write+0x4e>
 800573a:	2302      	movs	r3, #2
 800573c:	e0e6      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005746:	f7fe fa0b 	bl	8003b60 <HAL_GetTick>
 800574a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2319      	movs	r3, #25
 8005752:	2201      	movs	r2, #1
 8005754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fad1 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0d1      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2221      	movs	r2, #33	; 0x21
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2240      	movs	r2, #64	; 0x40
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005790:	88f8      	ldrh	r0, [r7, #6]
 8005792:	893a      	ldrh	r2, [r7, #8]
 8005794:	8979      	ldrh	r1, [r7, #10]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4603      	mov	r3, r0
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f9e1 	bl	8005b68 <I2C_RequestMemoryWrite>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0a9      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2bff      	cmp	r3, #255	; 0xff
 80057c0:	d90e      	bls.n	80057e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	8979      	ldrh	r1, [r7, #10]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fbb3 	bl	8005f44 <I2C_TransferConfig>
 80057de:	e00f      	b.n	8005800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	8979      	ldrh	r1, [r7, #10]
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fba2 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fabb 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e07b      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d034      	beq.n	80058b8 <HAL_I2C_Mem_Write+0x1c8>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d130      	bne.n	80058b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	2200      	movs	r2, #0
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa4d 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e04d      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2bff      	cmp	r3, #255	; 0xff
 8005878:	d90e      	bls.n	8005898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	b2da      	uxtb	r2, r3
 8005886:	8979      	ldrh	r1, [r7, #10]
 8005888:	2300      	movs	r3, #0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fb57 	bl	8005f44 <I2C_TransferConfig>
 8005896:	e00f      	b.n	80058b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	8979      	ldrh	r1, [r7, #10]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fb46 	bl	8005f44 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d19e      	bne.n	8005800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fa9a 	bl	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e01a      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2220      	movs	r2, #32
 80058dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6859      	ldr	r1, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_I2C_Mem_Write+0x224>)
 80058ea:	400b      	ands	r3, r1
 80058ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	fe00e800 	.word	0xfe00e800

08005918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4603      	mov	r3, r0
 8005928:	817b      	strh	r3, [r7, #10]
 800592a:	460b      	mov	r3, r1
 800592c:	813b      	strh	r3, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b20      	cmp	r3, #32
 800593c:	f040 80fd 	bne.w	8005b3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_I2C_Mem_Read+0x34>
 8005946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0f1      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_I2C_Mem_Read+0x4e>
 8005962:	2302      	movs	r3, #2
 8005964:	e0ea      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800596e:	f7fe f8f7 	bl	8003b60 <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2319      	movs	r3, #25
 800597a:	2201      	movs	r2, #1
 800597c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f9bd 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0d5      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2222      	movs	r2, #34	; 0x22
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2240      	movs	r2, #64	; 0x40
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059b8:	88f8      	ldrh	r0, [r7, #6]
 80059ba:	893a      	ldrh	r2, [r7, #8]
 80059bc:	8979      	ldrh	r1, [r7, #10]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	4603      	mov	r3, r0
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f921 	bl	8005c10 <I2C_RequestMemoryRead>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0ad      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2bff      	cmp	r3, #255	; 0xff
 80059e8:	d90e      	bls.n	8005a08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	8979      	ldrh	r1, [r7, #10]
 80059f8:	4b52      	ldr	r3, [pc, #328]	; (8005b44 <HAL_I2C_Mem_Read+0x22c>)
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fa9f 	bl	8005f44 <I2C_TransferConfig>
 8005a06:	e00f      	b.n	8005a28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	4b4a      	ldr	r3, [pc, #296]	; (8005b44 <HAL_I2C_Mem_Read+0x22c>)
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fa8e 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2104      	movs	r1, #4
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f964 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07c      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d034      	beq.n	8005ae8 <HAL_I2C_Mem_Read+0x1d0>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d130      	bne.n	8005ae8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f935 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04d      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2bff      	cmp	r3, #255	; 0xff
 8005aa8:	d90e      	bls.n	8005ac8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22ff      	movs	r2, #255	; 0xff
 8005aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	8979      	ldrh	r1, [r7, #10]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fa3f 	bl	8005f44 <I2C_TransferConfig>
 8005ac6:	e00f      	b.n	8005ae8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	8979      	ldrh	r1, [r7, #10]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fa2e 	bl	8005f44 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d19a      	bne.n	8005a28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f982 	bl	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e01a      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_I2C_Mem_Read+0x230>)
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	80002400 	.word	0x80002400
 8005b48:	fe00e800 	.word	0xfe00e800

08005b4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5a:	b2db      	uxtb	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	813b      	strh	r3, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <I2C_RequestMemoryWrite+0xa4>)
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f9d7 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f8f0 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02c      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bba:	e015      	b.n	8005be8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f8d6 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e012      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bde:	893b      	ldrh	r3, [r7, #8]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f884 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	80002000 	.word	0x80002000

08005c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	817b      	strh	r3, [r7, #10]
 8005c22:	460b      	mov	r3, r1
 8005c24:	813b      	strh	r3, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	8979      	ldrh	r1, [r7, #10]
 8005c30:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <I2C_RequestMemoryRead+0xa4>)
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2300      	movs	r3, #0
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f984 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	69b9      	ldr	r1, [r7, #24]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f89d 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e02c      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d105      	bne.n	8005c62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c56:	893b      	ldrh	r3, [r7, #8]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c60:	e015      	b.n	8005c8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	69b9      	ldr	r1, [r7, #24]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f883 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e012      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2140      	movs	r1, #64	; 0x40
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f831 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	80002000 	.word	0x80002000

08005cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d103      	bne.n	8005cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d007      	beq.n	8005cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	619a      	str	r2, [r3, #24]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d10:	e022      	b.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d01e      	beq.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fd ff21 	bl	8003b60 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d113      	bne.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e00f      	b.n	8005d78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d0cd      	beq.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d8c:	e02c      	b.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f870 	bl	8005e78 <I2C_IsAcknowledgeFailed>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e02a      	b.n	8005df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d01e      	beq.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fd fed9 	bl	8003b60 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d113      	bne.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	f043 0220 	orr.w	r2, r3, #32
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e007      	b.n	8005df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d1cb      	bne.n	8005d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0c:	e028      	b.n	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f830 	bl	8005e78 <I2C_IsAcknowledgeFailed>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e026      	b.n	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fd fe9d 	bl	8003b60 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e007      	b.n	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d1cf      	bne.n	8005e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d151      	bne.n	8005f36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e92:	e022      	b.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d01e      	beq.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9c:	f7fd fe60 	bl	8003b60 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <I2C_IsAcknowledgeFailed+0x3a>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d113      	bne.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e02e      	b.n	8005f38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d1d5      	bne.n	8005e94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2210      	movs	r2, #16
 8005eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fedd 	bl	8005cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <I2C_IsAcknowledgeFailed+0xc8>)
 8005f0a:	400b      	ands	r3, r1
 8005f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	4613      	mov	r3, r2
 8005f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	0d5b      	lsrs	r3, r3, #21
 8005f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <I2C_TransferConfig+0x58>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	ea02 0103 	and.w	r1, r2, r3
 8005f6e:	897b      	ldrh	r3, [r7, #10]
 8005f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f74:	7a7b      	ldrb	r3, [r7, #9]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	03ff63ff 	.word	0x03ff63ff

08005fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d138      	bne.n	8006028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e032      	b.n	800602a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2224      	movs	r2, #36	; 0x24
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e000      	b.n	800602a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
  }
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b20      	cmp	r3, #32
 800604a:	d139      	bne.n	80060c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006056:	2302      	movs	r3, #2
 8006058:	e033      	b.n	80060c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2224      	movs	r2, #36	; 0x24
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e0bf      	b.n	8006262 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fd f8ba 	bl	8003270 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006112:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6999      	ldr	r1, [r3, #24]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006128:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b4a      	ldr	r3, [pc, #296]	; (800626c <HAL_LTDC_Init+0x19c>)
 8006144:	400b      	ands	r3, r1
 8006146:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	041b      	lsls	r3, r3, #16
 800614e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68d9      	ldr	r1, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b3e      	ldr	r3, [pc, #248]	; (800626c <HAL_LTDC_Init+0x19c>)
 8006172:	400b      	ands	r3, r1
 8006174:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68d9      	ldr	r1, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6919      	ldr	r1, [r3, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_LTDC_Init+0x19c>)
 80061a0:	400b      	ands	r3, r1
 80061a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6919      	ldr	r1, [r3, #16]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6959      	ldr	r1, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b27      	ldr	r3, [pc, #156]	; (800626c <HAL_LTDC_Init+0x19c>)
 80061ce:	400b      	ands	r3, r1
 80061d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6959      	ldr	r1, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006200:	041b      	lsls	r3, r3, #16
 8006202:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006212:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0206 	orr.w	r2, r2, #6
 800623e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	f000f800 	.word	0xf000f800

08006270 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006286:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d023      	beq.n	80062da <HAL_LTDC_IRQHandler+0x6a>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01e      	beq.n	80062da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0204 	bic.w	r2, r2, #4
 80062aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2204      	movs	r2, #4
 80062b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2204      	movs	r2, #4
 80062c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f86f 	bl	80063b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d023      	beq.n	800632c <HAL_LTDC_IRQHandler+0xbc>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01e      	beq.n	800632c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0202 	bic.w	r2, r2, #2
 80062fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2202      	movs	r2, #2
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800630c:	f043 0202 	orr.w	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2204      	movs	r2, #4
 800631a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f846 	bl	80063b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01b      	beq.n	800636e <HAL_LTDC_IRQHandler+0xfe>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d016      	beq.n	800636e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f82f 	bl	80063cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_LTDC_IRQHandler+0x140>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0208 	bic.w	r2, r2, #8
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2208      	movs	r2, #8
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f818 	bl	80063e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063f4:	b5b0      	push	{r4, r5, r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_LTDC_ConfigLayer+0x1a>
 800640a:	2302      	movs	r3, #2
 800640c:	e02c      	b.n	8006468 <HAL_LTDC_ConfigLayer+0x74>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2134      	movs	r1, #52	; 0x34
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	4413      	add	r3, r2
 800642a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f81f 	bl	800648c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bdb0      	pop	{r4, r5, r7, pc}

08006470 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800647e:	b2db      	uxtb	r3, r3
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	; 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	0c1b      	lsrs	r3, r3, #16
 80064a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a8:	4413      	add	r3, r2
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	4611      	mov	r1, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	01d2      	lsls	r2, r2, #7
 80064c8:	440a      	add	r2, r1
 80064ca:	3284      	adds	r2, #132	; 0x84
 80064cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e2:	4413      	add	r3, r2
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4619      	mov	r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	01db      	lsls	r3, r3, #7
 80064f0:	440b      	add	r3, r1
 80064f2:	3384      	adds	r3, #132	; 0x84
 80064f4:	4619      	mov	r1, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800650a:	4413      	add	r3, r2
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	01db      	lsls	r3, r3, #7
 800651a:	4413      	add	r3, r2
 800651c:	3384      	adds	r3, #132	; 0x84
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	4611      	mov	r1, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	01d2      	lsls	r2, r2, #7
 800652a:	440a      	add	r2, r1
 800652c:	3284      	adds	r2, #132	; 0x84
 800652e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006532:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006542:	4413      	add	r3, r2
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	01db      	lsls	r3, r3, #7
 8006550:	440b      	add	r3, r1
 8006552:	3384      	adds	r3, #132	; 0x84
 8006554:	4619      	mov	r1, r3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	01db      	lsls	r3, r3, #7
 8006566:	4413      	add	r3, r2
 8006568:	3384      	adds	r3, #132	; 0x84
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	6812      	ldr	r2, [r2, #0]
 8006570:	4611      	mov	r1, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	01d2      	lsls	r2, r2, #7
 8006576:	440a      	add	r2, r1
 8006578:	3284      	adds	r2, #132	; 0x84
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	4413      	add	r3, r2
 800658c:	3384      	adds	r3, #132	; 0x84
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065a6:	041b      	lsls	r3, r3, #16
 80065a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	4413      	add	r3, r2
 80065be:	3384      	adds	r3, #132	; 0x84
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	01db      	lsls	r3, r3, #7
 80065cc:	4413      	add	r3, r2
 80065ce:	3384      	adds	r3, #132	; 0x84
 80065d0:	461a      	mov	r2, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065dc:	461a      	mov	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4619      	mov	r1, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	01db      	lsls	r3, r3, #7
 80065f0:	440b      	add	r3, r1
 80065f2:	3384      	adds	r3, #132	; 0x84
 80065f4:	4619      	mov	r1, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	01db      	lsls	r3, r3, #7
 8006606:	4413      	add	r3, r2
 8006608:	3384      	adds	r3, #132	; 0x84
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	4611      	mov	r1, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	01d2      	lsls	r2, r2, #7
 8006616:	440a      	add	r2, r1
 8006618:	3284      	adds	r2, #132	; 0x84
 800661a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800661e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	01db      	lsls	r3, r3, #7
 800662a:	4413      	add	r3, r2
 800662c:	3384      	adds	r3, #132	; 0x84
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	01db      	lsls	r3, r3, #7
 8006640:	4413      	add	r3, r2
 8006642:	3384      	adds	r3, #132	; 0x84
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4619      	mov	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	01db      	lsls	r3, r3, #7
 8006650:	440b      	add	r3, r1
 8006652:	3384      	adds	r3, #132	; 0x84
 8006654:	4619      	mov	r1, r3
 8006656:	4b58      	ldr	r3, [pc, #352]	; (80067b8 <LTDC_SetConfig+0x32c>)
 8006658:	4013      	ands	r3, r2
 800665a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	68f9      	ldr	r1, [r7, #12]
 8006666:	6809      	ldr	r1, [r1, #0]
 8006668:	4608      	mov	r0, r1
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	01c9      	lsls	r1, r1, #7
 800666e:	4401      	add	r1, r0
 8006670:	3184      	adds	r1, #132	; 0x84
 8006672:	4313      	orrs	r3, r2
 8006674:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	01db      	lsls	r3, r3, #7
 8006680:	4413      	add	r3, r2
 8006682:	3384      	adds	r3, #132	; 0x84
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	4413      	add	r3, r2
 8006692:	3384      	adds	r3, #132	; 0x84
 8006694:	461a      	mov	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	01db      	lsls	r3, r3, #7
 80066a4:	4413      	add	r3, r2
 80066a6:	3384      	adds	r3, #132	; 0x84
 80066a8:	461a      	mov	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80066b8:	2304      	movs	r3, #4
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e01b      	b.n	80066f6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80066c6:	2303      	movs	r3, #3
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e014      	b.n	80066f6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d00b      	beq.n	80066ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d007      	beq.n	80066ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d003      	beq.n	80066ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066e8:	2b07      	cmp	r3, #7
 80066ea:	d102      	bne.n	80066f2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80066ec:	2302      	movs	r3, #2
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e001      	b.n	80066f6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80066f2:	2301      	movs	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	4413      	add	r3, r2
 8006702:	3384      	adds	r3, #132	; 0x84
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	4611      	mov	r1, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	01d2      	lsls	r2, r2, #7
 8006710:	440a      	add	r2, r1
 8006712:	3284      	adds	r2, #132	; 0x84
 8006714:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006718:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	041a      	lsls	r2, r3, #16
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	1acb      	subs	r3, r1, r3
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	3303      	adds	r3, #3
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	6809      	ldr	r1, [r1, #0]
 800673c:	4608      	mov	r0, r1
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	01c9      	lsls	r1, r1, #7
 8006742:	4401      	add	r1, r0
 8006744:	3184      	adds	r1, #132	; 0x84
 8006746:	4313      	orrs	r3, r2
 8006748:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	01db      	lsls	r3, r3, #7
 8006754:	4413      	add	r3, r2
 8006756:	3384      	adds	r3, #132	; 0x84
 8006758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	01db      	lsls	r3, r3, #7
 8006764:	440b      	add	r3, r1
 8006766:	3384      	adds	r3, #132	; 0x84
 8006768:	4619      	mov	r1, r3
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <LTDC_SetConfig+0x330>)
 800676c:	4013      	ands	r3, r2
 800676e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	01db      	lsls	r3, r3, #7
 800677a:	4413      	add	r3, r2
 800677c:	3384      	adds	r3, #132	; 0x84
 800677e:	461a      	mov	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	01db      	lsls	r3, r3, #7
 8006790:	4413      	add	r3, r2
 8006792:	3384      	adds	r3, #132	; 0x84
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	4611      	mov	r1, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	01d2      	lsls	r2, r2, #7
 80067a0:	440a      	add	r2, r1
 80067a2:	3284      	adds	r2, #132	; 0x84
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	6013      	str	r3, [r2, #0]
}
 80067aa:	bf00      	nop
 80067ac:	3724      	adds	r7, #36	; 0x24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	fffff8f8 	.word	0xfffff8f8
 80067bc:	fffff800 	.word	0xfffff800

080067c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40007000 	.word	0x40007000

080067e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <HAL_PWREx_EnableOverDrive+0x98>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	4a22      	ldr	r2, [pc, #136]	; (8006878 <HAL_PWREx_EnableOverDrive+0x98>)
 80067f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f4:	6413      	str	r3, [r2, #64]	; 0x40
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HAL_PWREx_EnableOverDrive+0x98>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1d      	ldr	r2, [pc, #116]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800680e:	f7fd f9a7 	bl	8003b60 <HAL_GetTick>
 8006812:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006814:	e009      	b.n	800682a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006816:	f7fd f9a3 	bl	8003b60 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006824:	d901      	bls.n	800682a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e022      	b.n	8006870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006836:	d1ee      	bne.n	8006816 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006838:	4b10      	ldr	r3, [pc, #64]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0f      	ldr	r2, [pc, #60]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 800683e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006844:	f7fd f98c 	bl	8003b60 <HAL_GetTick>
 8006848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800684a:	e009      	b.n	8006860 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800684c:	f7fd f988 	bl	8003b60 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685a:	d901      	bls.n	8006860 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e007      	b.n	8006870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800686c:	d1ee      	bne.n	800684c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	40007000 	.word	0x40007000

08006880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006888:	2300      	movs	r3, #0
 800688a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e291      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8087 	beq.w	80069b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068a4:	4b96      	ldr	r3, [pc, #600]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 030c 	and.w	r3, r3, #12
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d00c      	beq.n	80068ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b0:	4b93      	ldr	r3, [pc, #588]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 030c 	and.w	r3, r3, #12
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d112      	bne.n	80068e2 <HAL_RCC_OscConfig+0x62>
 80068bc:	4b90      	ldr	r3, [pc, #576]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c8:	d10b      	bne.n	80068e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ca:	4b8d      	ldr	r3, [pc, #564]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d06c      	beq.n	80069b0 <HAL_RCC_OscConfig+0x130>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d168      	bne.n	80069b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e26b      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d106      	bne.n	80068fa <HAL_RCC_OscConfig+0x7a>
 80068ec:	4b84      	ldr	r3, [pc, #528]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a83      	ldr	r2, [pc, #524]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80068f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e02e      	b.n	8006958 <HAL_RCC_OscConfig+0xd8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0x9c>
 8006902:	4b7f      	ldr	r3, [pc, #508]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a7e      	ldr	r2, [pc, #504]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b7c      	ldr	r3, [pc, #496]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7b      	ldr	r2, [pc, #492]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e01d      	b.n	8006958 <HAL_RCC_OscConfig+0xd8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006924:	d10c      	bne.n	8006940 <HAL_RCC_OscConfig+0xc0>
 8006926:	4b76      	ldr	r3, [pc, #472]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a75      	ldr	r2, [pc, #468]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 800692c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	4b73      	ldr	r3, [pc, #460]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a72      	ldr	r2, [pc, #456]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e00b      	b.n	8006958 <HAL_RCC_OscConfig+0xd8>
 8006940:	4b6f      	ldr	r3, [pc, #444]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a6e      	ldr	r2, [pc, #440]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	4b6c      	ldr	r3, [pc, #432]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6b      	ldr	r2, [pc, #428]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fd f8fe 	bl	8003b60 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006968:	f7fd f8fa 	bl	8003b60 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	; 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e21f      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697a:	4b61      	ldr	r3, [pc, #388]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0xe8>
 8006986:	e014      	b.n	80069b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fd f8ea 	bl	8003b60 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006990:	f7fd f8e6 	bl	8003b60 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	; 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e20b      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a2:	4b57      	ldr	r3, [pc, #348]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0x110>
 80069ae:	e000      	b.n	80069b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d069      	beq.n	8006a92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069be:	4b50      	ldr	r3, [pc, #320]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ca:	4b4d      	ldr	r3, [pc, #308]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d11c      	bne.n	8006a10 <HAL_RCC_OscConfig+0x190>
 80069d6:	4b4a      	ldr	r3, [pc, #296]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d116      	bne.n	8006a10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069e2:	4b47      	ldr	r3, [pc, #284]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_RCC_OscConfig+0x17a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d001      	beq.n	80069fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1df      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fa:	4b41      	ldr	r3, [pc, #260]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	493d      	ldr	r1, [pc, #244]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a0e:	e040      	b.n	8006a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d023      	beq.n	8006a60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a18:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a38      	ldr	r2, [pc, #224]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fd f89c 	bl	8003b60 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a2c:	f7fd f898 	bl	8003b60 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e1bd      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3e:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4929      	ldr	r1, [pc, #164]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	600b      	str	r3, [r1, #0]
 8006a5e:	e018      	b.n	8006a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6c:	f7fd f878 	bl	8003b60 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a74:	f7fd f874 	bl	8003b60 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e199      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d038      	beq.n	8006b10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d019      	beq.n	8006ada <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab2:	f7fd f855 	bl	8003b60 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aba:	f7fd f851 	bl	8003b60 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e176      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x23a>
 8006ad8:	e01a      	b.n	8006b10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ada:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ade:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <HAL_RCC_OscConfig+0x280>)
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae6:	f7fd f83b 	bl	8003b60 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aec:	e00a      	b.n	8006b04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aee:	f7fd f837 	bl	8003b60 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d903      	bls.n	8006b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e15c      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
 8006b00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b04:	4b91      	ldr	r3, [pc, #580]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ee      	bne.n	8006aee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80a4 	beq.w	8006c66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1e:	4b8b      	ldr	r3, [pc, #556]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10d      	bne.n	8006b46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	4b88      	ldr	r3, [pc, #544]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a87      	ldr	r2, [pc, #540]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b85      	ldr	r3, [pc, #532]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b46:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <HAL_RCC_OscConfig+0x4d0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d118      	bne.n	8006b84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b52:	4b7f      	ldr	r3, [pc, #508]	; (8006d50 <HAL_RCC_OscConfig+0x4d0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a7e      	ldr	r2, [pc, #504]	; (8006d50 <HAL_RCC_OscConfig+0x4d0>)
 8006b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b5e:	f7fc ffff 	bl	8003b60 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b66:	f7fc fffb 	bl	8003b60 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b64      	cmp	r3, #100	; 0x64
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e120      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b78:	4b75      	ldr	r3, [pc, #468]	; (8006d50 <HAL_RCC_OscConfig+0x4d0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCC_OscConfig+0x31a>
 8006b8c:	4b6f      	ldr	r3, [pc, #444]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	4a6e      	ldr	r2, [pc, #440]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	6713      	str	r3, [r2, #112]	; 0x70
 8006b98:	e02d      	b.n	8006bf6 <HAL_RCC_OscConfig+0x376>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x33c>
 8006ba2:	4b6a      	ldr	r3, [pc, #424]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a69      	ldr	r2, [pc, #420]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	4b67      	ldr	r3, [pc, #412]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a66      	ldr	r2, [pc, #408]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bba:	e01c      	b.n	8006bf6 <HAL_RCC_OscConfig+0x376>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d10c      	bne.n	8006bde <HAL_RCC_OscConfig+0x35e>
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4a60      	ldr	r2, [pc, #384]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	f043 0304 	orr.w	r3, r3, #4
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd0:	4b5e      	ldr	r3, [pc, #376]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	4a5d      	ldr	r2, [pc, #372]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	6713      	str	r3, [r2, #112]	; 0x70
 8006bdc:	e00b      	b.n	8006bf6 <HAL_RCC_OscConfig+0x376>
 8006bde:	4b5b      	ldr	r3, [pc, #364]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a5a      	ldr	r2, [pc, #360]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	4b58      	ldr	r3, [pc, #352]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	4a57      	ldr	r2, [pc, #348]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	f023 0304 	bic.w	r3, r3, #4
 8006bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d015      	beq.n	8006c2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fc ffaf 	bl	8003b60 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c04:	e00a      	b.n	8006c1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c06:	f7fc ffab 	bl	8003b60 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e0ce      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0ee      	beq.n	8006c06 <HAL_RCC_OscConfig+0x386>
 8006c28:	e014      	b.n	8006c54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2a:	f7fc ff99 	bl	8003b60 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c30:	e00a      	b.n	8006c48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c32:	f7fc ff95 	bl	8003b60 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e0b8      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c48:	4b40      	ldr	r3, [pc, #256]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1ee      	bne.n	8006c32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d105      	bne.n	8006c66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c5a:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	4a3b      	ldr	r2, [pc, #236]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a4 	beq.w	8006db8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 030c 	and.w	r3, r3, #12
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d06b      	beq.n	8006d54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d149      	bne.n	8006d18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c84:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a30      	ldr	r2, [pc, #192]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fc ff66 	bl	8003b60 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fc ff62 	bl	8003b60 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e087      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69da      	ldr	r2, [r3, #28]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ce2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce4:	4b19      	ldr	r3, [pc, #100]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fc ff36 	bl	8003b60 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fc ff32 	bl	8003b60 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e057      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x478>
 8006d16:	e04f      	b.n	8006db8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fc ff1c 	bl	8003b60 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2c:	f7fc ff18 	bl	8003b60 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e03d      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3e:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <HAL_RCC_OscConfig+0x4cc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x4ac>
 8006d4a:	e035      	b.n	8006db8 <HAL_RCC_OscConfig+0x538>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d54:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <HAL_RCC_OscConfig+0x544>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d028      	beq.n	8006db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d121      	bne.n	8006db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d11a      	bne.n	8006db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d84:	4013      	ands	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d111      	bne.n	8006db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d107      	bne.n	8006db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800

08006dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0d0      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de0:	4b6a      	ldr	r3, [pc, #424]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d910      	bls.n	8006e10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b67      	ldr	r3, [pc, #412]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 020f 	bic.w	r2, r3, #15
 8006df6:	4965      	ldr	r1, [pc, #404]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b63      	ldr	r3, [pc, #396]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e0b8      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d020      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e28:	4b59      	ldr	r3, [pc, #356]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4a58      	ldr	r2, [pc, #352]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d005      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e40:	4b53      	ldr	r3, [pc, #332]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	4a52      	ldr	r2, [pc, #328]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4c:	4b50      	ldr	r3, [pc, #320]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	494d      	ldr	r1, [pc, #308]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d040      	beq.n	8006eec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d107      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e72:	4b47      	ldr	r3, [pc, #284]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d115      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e07f      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e073      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9a:	4b3d      	ldr	r3, [pc, #244]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e06b      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eaa:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 0203 	bic.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4936      	ldr	r1, [pc, #216]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ebc:	f7fc fe50 	bl	8003b60 <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7fc fe4c 	bl	8003b60 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e053      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	4b2d      	ldr	r3, [pc, #180]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 020c 	and.w	r2, r3, #12
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1eb      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eec:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d210      	bcs.n	8006f1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 020f 	bic.w	r2, r3, #15
 8006f02:	4922      	ldr	r1, [pc, #136]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0a:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e032      	b.n	8006f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4916      	ldr	r1, [pc, #88]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	490e      	ldr	r1, [pc, #56]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f5a:	f000 f821 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8006f5e:	4601      	mov	r1, r0
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <HAL_RCC_ClockConfig+0x1cc>)
 8006f6c:	5cd3      	ldrb	r3, [r2, r3]
 8006f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <HAL_RCC_ClockConfig+0x1d0>)
 8006f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <HAL_RCC_ClockConfig+0x1d4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fc fd00 	bl	8003980 <HAL_InitTick>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40023c00 	.word	0x40023c00
 8006f90:	40023800 	.word	0x40023800
 8006f94:	0800e3c8 	.word	0x0800e3c8
 8006f98:	20000044 	.word	0x20000044
 8006f9c:	20000048 	.word	0x20000048

08006fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb6:	4b50      	ldr	r3, [pc, #320]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 030c 	and.w	r3, r3, #12
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d007      	beq.n	8006fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d008      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 808d 	bne.w	80070e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fcc:	4b4b      	ldr	r3, [pc, #300]	; (80070fc <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fce:	60bb      	str	r3, [r7, #8]
      break;
 8006fd0:	e08c      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd2:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fd4:	60bb      	str	r3, [r7, #8]
      break;
 8006fd6:	e089      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd8:	4b47      	ldr	r3, [pc, #284]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fe2:	4b45      	ldr	r3, [pc, #276]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d023      	beq.n	8007036 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b42      	ldr	r3, [pc, #264]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	f04f 0400 	mov.w	r4, #0
 8006ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	ea03 0501 	and.w	r5, r3, r1
 8007004:	ea04 0602 	and.w	r6, r4, r2
 8007008:	4a3d      	ldr	r2, [pc, #244]	; (8007100 <HAL_RCC_GetSysClockFreq+0x160>)
 800700a:	fb02 f106 	mul.w	r1, r2, r6
 800700e:	2200      	movs	r2, #0
 8007010:	fb02 f205 	mul.w	r2, r2, r5
 8007014:	440a      	add	r2, r1
 8007016:	493a      	ldr	r1, [pc, #232]	; (8007100 <HAL_RCC_GetSysClockFreq+0x160>)
 8007018:	fba5 0101 	umull	r0, r1, r5, r1
 800701c:	1853      	adds	r3, r2, r1
 800701e:	4619      	mov	r1, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f04f 0400 	mov.w	r4, #0
 8007026:	461a      	mov	r2, r3
 8007028:	4623      	mov	r3, r4
 800702a:	f7f9 f8f1 	bl	8000210 <__aeabi_uldivmod>
 800702e:	4603      	mov	r3, r0
 8007030:	460c      	mov	r4, r1
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e049      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007036:	4b30      	ldr	r3, [pc, #192]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	099b      	lsrs	r3, r3, #6
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	ea03 0501 	and.w	r5, r3, r1
 800704c:	ea04 0602 	and.w	r6, r4, r2
 8007050:	4629      	mov	r1, r5
 8007052:	4632      	mov	r2, r6
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	f04f 0400 	mov.w	r4, #0
 800705c:	0154      	lsls	r4, r2, #5
 800705e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007062:	014b      	lsls	r3, r1, #5
 8007064:	4619      	mov	r1, r3
 8007066:	4622      	mov	r2, r4
 8007068:	1b49      	subs	r1, r1, r5
 800706a:	eb62 0206 	sbc.w	r2, r2, r6
 800706e:	f04f 0300 	mov.w	r3, #0
 8007072:	f04f 0400 	mov.w	r4, #0
 8007076:	0194      	lsls	r4, r2, #6
 8007078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800707c:	018b      	lsls	r3, r1, #6
 800707e:	1a5b      	subs	r3, r3, r1
 8007080:	eb64 0402 	sbc.w	r4, r4, r2
 8007084:	f04f 0100 	mov.w	r1, #0
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	00e2      	lsls	r2, r4, #3
 800708e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007092:	00d9      	lsls	r1, r3, #3
 8007094:	460b      	mov	r3, r1
 8007096:	4614      	mov	r4, r2
 8007098:	195b      	adds	r3, r3, r5
 800709a:	eb44 0406 	adc.w	r4, r4, r6
 800709e:	f04f 0100 	mov.w	r1, #0
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	02a2      	lsls	r2, r4, #10
 80070a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80070ac:	0299      	lsls	r1, r3, #10
 80070ae:	460b      	mov	r3, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	4621      	mov	r1, r4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f04f 0400 	mov.w	r4, #0
 80070bc:	461a      	mov	r2, r3
 80070be:	4623      	mov	r3, r4
 80070c0:	f7f9 f8a6 	bl	8000210 <__aeabi_uldivmod>
 80070c4:	4603      	mov	r3, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	3301      	adds	r3, #1
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	60bb      	str	r3, [r7, #8]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80070e8:	60bb      	str	r3, [r7, #8]
      break;
 80070ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ec:	68bb      	ldr	r3, [r7, #8]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40023800 	.word	0x40023800
 80070fc:	00f42400 	.word	0x00f42400
 8007100:	017d7840 	.word	0x017d7840

08007104 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007108:	4b03      	ldr	r3, [pc, #12]	; (8007118 <HAL_RCC_GetHCLKFreq+0x14>)
 800710a:	681b      	ldr	r3, [r3, #0]
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000044 	.word	0x20000044

0800711c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007120:	f7ff fff0 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 8007124:	4601      	mov	r1, r0
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	0a9b      	lsrs	r3, r3, #10
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	4a03      	ldr	r2, [pc, #12]	; (8007140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007132:	5cd3      	ldrb	r3, [r2, r3]
 8007134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40023800 	.word	0x40023800
 8007140:	0800e3d8 	.word	0x0800e3d8

08007144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007148:	f7ff ffdc 	bl	8007104 <HAL_RCC_GetHCLKFreq>
 800714c:	4601      	mov	r1, r0
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	0b5b      	lsrs	r3, r3, #13
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	4a03      	ldr	r2, [pc, #12]	; (8007168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800715a:	5cd3      	ldrb	r3, [r2, r3]
 800715c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40023800 	.word	0x40023800
 8007168:	0800e3d8 	.word	0x0800e3d8

0800716c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	220f      	movs	r2, #15
 800717a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800717c:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <HAL_RCC_GetClockConfig+0x5c>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 0203 	and.w	r2, r3, #3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <HAL_RCC_GetClockConfig+0x5c>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <HAL_RCC_GetClockConfig+0x5c>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <HAL_RCC_GetClockConfig+0x60>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	601a      	str	r2, [r3, #0]
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40023c00 	.word	0x40023c00

080071d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071f8:	4b69      	ldr	r3, [pc, #420]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4a68      	ldr	r2, [pc, #416]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007202:	6093      	str	r3, [r2, #8]
 8007204:	4b66      	ldr	r3, [pc, #408]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720c:	4964      	ldr	r1, [pc, #400]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720e:	4313      	orrs	r3, r2
 8007210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d017      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800722a:	4b5d      	ldr	r3, [pc, #372]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	4959      	ldr	r1, [pc, #356]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007248:	d101      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800724a:	2301      	movs	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007256:	2301      	movs	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d017      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007266:	4b4e      	ldr	r3, [pc, #312]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	494a      	ldr	r1, [pc, #296]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007284:	d101      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007292:	2301      	movs	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 808b 	beq.w	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072b4:	4b3a      	ldr	r3, [pc, #232]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	4a39      	ldr	r2, [pc, #228]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072be:	6413      	str	r3, [r2, #64]	; 0x40
 80072c0:	4b37      	ldr	r3, [pc, #220]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072cc:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a34      	ldr	r2, [pc, #208]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072d8:	f7fc fc42 	bl	8003b60 <HAL_GetTick>
 80072dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e0:	f7fc fc3e 	bl	8003b60 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b64      	cmp	r3, #100	; 0x64
 80072ec:	d901      	bls.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e355      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072f2:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f0      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072fe:	4b28      	ldr	r3, [pc, #160]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d035      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d02e      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800731c:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007330:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007332:	4b1b      	ldr	r3, [pc, #108]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800733c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800733e:	4a18      	ldr	r2, [pc, #96]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007344:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d114      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007350:	f7fc fc06 	bl	8003b60 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007356:	e00a      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007358:	f7fc fc02 	bl	8003b60 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	; 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e317      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736e:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0ee      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007386:	d111      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007396:	400b      	ands	r3, r1
 8007398:	4901      	ldr	r1, [pc, #4]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
 800739e:	e00b      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40007000 	.word	0x40007000
 80073a8:	0ffffcff 	.word	0x0ffffcff
 80073ac:	4bb0      	ldr	r3, [pc, #704]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4aaf      	ldr	r2, [pc, #700]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	4bad      	ldr	r3, [pc, #692]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c4:	49aa      	ldr	r1, [pc, #680]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073d6:	4ba6      	ldr	r3, [pc, #664]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073dc:	4aa4      	ldr	r2, [pc, #656]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073e6:	4ba2      	ldr	r3, [pc, #648]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	499f      	ldr	r1, [pc, #636]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007404:	4b9a      	ldr	r3, [pc, #616]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007412:	4997      	ldr	r1, [pc, #604]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007426:	4b92      	ldr	r3, [pc, #584]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007434:	498e      	ldr	r1, [pc, #568]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007448:	4b89      	ldr	r3, [pc, #548]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	4986      	ldr	r1, [pc, #536]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800746a:	4b81      	ldr	r3, [pc, #516]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007478:	497d      	ldr	r1, [pc, #500]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800748c:	4b78      	ldr	r3, [pc, #480]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007492:	f023 0203 	bic.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	4975      	ldr	r1, [pc, #468]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074ae:	4b70      	ldr	r3, [pc, #448]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	f023 020c 	bic.w	r2, r3, #12
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074bc:	496c      	ldr	r1, [pc, #432]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d0:	4b67      	ldr	r3, [pc, #412]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	4964      	ldr	r1, [pc, #400]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074f2:	4b5f      	ldr	r3, [pc, #380]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	495b      	ldr	r1, [pc, #364]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007514:	4b56      	ldr	r3, [pc, #344]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	4953      	ldr	r1, [pc, #332]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007536:	4b4e      	ldr	r3, [pc, #312]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	494a      	ldr	r1, [pc, #296]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007558:	4b45      	ldr	r3, [pc, #276]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007566:	4942      	ldr	r1, [pc, #264]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800757a:	4b3d      	ldr	r3, [pc, #244]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007588:	4939      	ldr	r1, [pc, #228]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800759c:	4b34      	ldr	r3, [pc, #208]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	4931      	ldr	r1, [pc, #196]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d011      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075be:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075cc:	4928      	ldr	r1, [pc, #160]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075dc:	d101      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075ee:	2301      	movs	r3, #1
 80075f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fe:	4b1c      	ldr	r3, [pc, #112]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760c:	4918      	ldr	r1, [pc, #96]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007620:	4b13      	ldr	r3, [pc, #76]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007630:	490f      	ldr	r1, [pc, #60]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007646:	f040 80d8 	bne.w	80077fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a08      	ldr	r2, [pc, #32]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007656:	f7fc fa83 	bl	8003b60 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800765c:	e00a      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800765e:	f7fc fa7f 	bl	8003b60 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b64      	cmp	r3, #100	; 0x64
 800766a:	d903      	bls.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e196      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007670:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007674:	4b6c      	ldr	r3, [pc, #432]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1ee      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d021      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	2b00      	cmp	r3, #0
 8007692:	d11d      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007694:	4b64      	ldr	r3, [pc, #400]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076a2:	4b61      	ldr	r3, [pc, #388]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a8:	0e1b      	lsrs	r3, r3, #24
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	019a      	lsls	r2, r3, #6
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	431a      	orrs	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	061b      	lsls	r3, r3, #24
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	071b      	lsls	r3, r3, #28
 80076c8:	4957      	ldr	r1, [pc, #348]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d004      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e4:	d00a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02e      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076fa:	d129      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076fc:	4b4a      	ldr	r3, [pc, #296]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800770a:	4b47      	ldr	r3, [pc, #284]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800770c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007710:	0f1b      	lsrs	r3, r3, #28
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	019a      	lsls	r2, r3, #6
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	061b      	lsls	r3, r3, #24
 800772a:	431a      	orrs	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	071b      	lsls	r3, r3, #28
 8007730:	493d      	ldr	r1, [pc, #244]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007738:	4b3b      	ldr	r3, [pc, #236]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800773a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773e:	f023 021f 	bic.w	r2, r3, #31
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	3b01      	subs	r3, #1
 8007748:	4937      	ldr	r1, [pc, #220]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01d      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800775c:	4b32      	ldr	r3, [pc, #200]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800775e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007762:	0e1b      	lsrs	r3, r3, #24
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800776a:	4b2f      	ldr	r3, [pc, #188]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007770:	0f1b      	lsrs	r3, r3, #28
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	019a      	lsls	r2, r3, #6
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	431a      	orrs	r2, r3
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	061b      	lsls	r3, r3, #24
 800778a:	431a      	orrs	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	071b      	lsls	r3, r3, #28
 8007790:	4925      	ldr	r1, [pc, #148]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d011      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	019a      	lsls	r2, r3, #6
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	061b      	lsls	r3, r3, #24
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	071b      	lsls	r3, r3, #28
 80077c0:	4919      	ldr	r1, [pc, #100]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077c8:	4b17      	ldr	r3, [pc, #92]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a16      	ldr	r2, [pc, #88]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d4:	f7fc f9c4 	bl	8003b60 <HAL_GetTick>
 80077d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077dc:	f7fc f9c0 	bl	8003b60 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b64      	cmp	r3, #100	; 0x64
 80077e8:	d901      	bls.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e0d7      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f0      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f040 80cd 	bne.w	800799c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a08      	ldr	r2, [pc, #32]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800780c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7fc f9a7 	bl	8003b60 <HAL_GetTick>
 8007812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007814:	e00a      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007816:	f7fc f9a3 	bl	8003b60 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b64      	cmp	r3, #100	; 0x64
 8007822:	d903      	bls.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0ba      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007828:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800782c:	4b5e      	ldr	r3, [pc, #376]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007838:	d0ed      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02e      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d12a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007862:	4b51      	ldr	r3, [pc, #324]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007870:	4b4d      	ldr	r3, [pc, #308]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	019a      	lsls	r2, r3, #6
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	061b      	lsls	r3, r3, #24
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	4944      	ldr	r1, [pc, #272]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800789e:	4b42      	ldr	r3, [pc, #264]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	493d      	ldr	r1, [pc, #244]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d022      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078cc:	d11d      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078ce:	4b36      	ldr	r3, [pc, #216]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	0e1b      	lsrs	r3, r3, #24
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078dc:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e2:	0f1b      	lsrs	r3, r3, #28
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	019a      	lsls	r2, r3, #6
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	431a      	orrs	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	061b      	lsls	r3, r3, #24
 80078fc:	431a      	orrs	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	071b      	lsls	r3, r3, #28
 8007902:	4929      	ldr	r1, [pc, #164]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d028      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007924:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	061b      	lsls	r3, r3, #24
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	4917      	ldr	r1, [pc, #92]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	4911      	ldr	r1, [pc, #68]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a0e      	ldr	r2, [pc, #56]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800796e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007974:	f7fc f8f4 	bl	8003b60 <HAL_GetTick>
 8007978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800797a:	e008      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800797c:	f7fc f8f0 	bl	8003b60 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b64      	cmp	r3, #100	; 0x64
 8007988:	d901      	bls.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e007      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800799a:	d1ef      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40023800 	.word	0x40023800

080079ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e06b      	b.n	8007a96 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	7f5b      	ldrb	r3, [r3, #29]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fb fd16 	bl	8003400 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	22ca      	movs	r2, #202	; 0xca
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2253      	movs	r2, #83	; 0x53
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fb00 	bl	8007ff0 <RTC_EnterInitMode>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	22ff      	movs	r2, #255	; 0xff
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2204      	movs	r2, #4
 8007a02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e046      	b.n	8007a96 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6899      	ldr	r1, [r3, #8]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b23      	ldr	r3, [pc, #140]	; (8007aa0 <HAL_RTC_Init+0xf4>)
 8007a14:	400b      	ands	r3, r1
 8007a16:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6899      	ldr	r1, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	68d2      	ldr	r2, [r2, #12]
 8007a3e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6919      	ldr	r1, [r3, #16]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	041a      	lsls	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a62:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0208 	bic.w	r2, r2, #8
 8007a72:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699a      	ldr	r2, [r3, #24]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	22ff      	movs	r2, #255	; 0xff
 8007a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	ff8fffbf 	.word	0xff8fffbf

08007aa4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	7f1b      	ldrb	r3, [r3, #28]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_RTC_SetTime+0x1c>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e0a8      	b.n	8007c12 <HAL_RTC_SetTime+0x16e>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d126      	bne.n	8007b20 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 faac 	bl	8008048 <RTC_ByteToBcd2>
 8007af0:	4603      	mov	r3, r0
 8007af2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 faa5 	bl	8008048 <RTC_ByteToBcd2>
 8007afe:	4603      	mov	r3, r0
 8007b00:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b02:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	789b      	ldrb	r3, [r3, #2]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fa9d 	bl	8008048 <RTC_ByteToBcd2>
 8007b0e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b10:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	7b1b      	ldrb	r3, [r3, #12]
 8007b18:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e018      	b.n	8007b52 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2200      	movs	r2, #0
 8007b32:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b40:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b46:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	7b1b      	ldrb	r3, [r3, #12]
 8007b4c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	22ca      	movs	r2, #202	; 0xca
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2253      	movs	r2, #83	; 0x53
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fa44 	bl	8007ff0 <RTC_EnterInitMode>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	22ff      	movs	r2, #255	; 0xff
 8007b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e045      	b.n	8007c12 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	4b23      	ldr	r3, [pc, #140]	; (8007c1c <HAL_RTC_SetTime+0x178>)
 8007b8e:	400b      	ands	r3, r1
 8007b90:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ba0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6899      	ldr	r1, [r3, #8]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bc8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d111      	bne.n	8007bfc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f9e1 	bl	8007fa0 <HAL_RTC_WaitForSynchro>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	22ff      	movs	r2, #255	; 0xff
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e00a      	b.n	8007c12 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	22ff      	movs	r2, #255	; 0xff
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c10:	2300      	movs	r3, #0
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	007f7f7f 	.word	0x007f7f7f

08007c20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c20:	b590      	push	{r4, r7, lr}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	7f1b      	ldrb	r3, [r3, #28]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_RTC_SetDate+0x1c>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e092      	b.n	8007d62 <HAL_RTC_SetDate+0x142>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2202      	movs	r2, #2
 8007c46:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10e      	bne.n	8007c6c <HAL_RTC_SetDate+0x4c>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	f023 0310 	bic.w	r3, r3, #16
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	330a      	adds	r3, #10
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d11c      	bne.n	8007cac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f9e6 	bl	8008048 <RTC_ByteToBcd2>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f9df 	bl	8008048 <RTC_ByteToBcd2>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007c8e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f9d7 	bl	8008048 <RTC_ByteToBcd2>
 8007c9a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007c9c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	e00e      	b.n	8007cca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	78db      	ldrb	r3, [r3, #3]
 8007cb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007cb8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007cbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	22ca      	movs	r2, #202	; 0xca
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2253      	movs	r2, #83	; 0x53
 8007cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f988 	bl	8007ff0 <RTC_EnterInitMode>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	22ff      	movs	r2, #255	; 0xff
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e031      	b.n	8007d62 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	6979      	ldr	r1, [r7, #20]
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <HAL_RTC_SetDate+0x14c>)
 8007d06:	400b      	ands	r3, r1
 8007d08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d18:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d111      	bne.n	8007d4c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f939 	bl	8007fa0 <HAL_RTC_WaitForSynchro>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	22ff      	movs	r2, #255	; 0xff
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e00a      	b.n	8007d62 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	22ff      	movs	r2, #255	; 0xff
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007d60:	2300      	movs	r3, #0
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd90      	pop	{r4, r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	00ffff3f 	.word	0x00ffff3f

08007d70 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	7f1b      	ldrb	r3, [r3, #28]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_RTC_SetAlarm+0x24>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e101      	b.n	8007f98 <HAL_RTC_SetAlarm+0x228>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d137      	bne.n	8007e16 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f942 	bl	8008048 <RTC_ByteToBcd2>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f93b 	bl	8008048 <RTC_ByteToBcd2>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007dd6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	789b      	ldrb	r3, [r3, #2]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f933 	bl	8008048 <RTC_ByteToBcd2>
 8007de2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007de4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	7b1b      	ldrb	r3, [r3, #12]
 8007dec:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007dee:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f925 	bl	8008048 <RTC_ByteToBcd2>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e02:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e023      	b.n	8007e5e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007e36:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007e3c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	7b1b      	ldrb	r3, [r3, #12]
 8007e42:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007e44:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e4c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007e4e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007e54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	22ca      	movs	r2, #202	; 0xca
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2253      	movs	r2, #83	; 0x53
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	d13f      	bne.n	8007f04 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e92:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ea2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ea4:	f7fb fe5c 	bl	8003b60 <HAL_GetTick>
 8007ea8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007eaa:	e013      	b.n	8007ed4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007eac:	f7fb fe58 	bl	8003b60 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eba:	d90b      	bls.n	8007ed4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	22ff      	movs	r2, #255	; 0xff
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e061      	b.n	8007f98 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0e4      	beq.n	8007eac <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f00:	609a      	str	r2, [r3, #8]
 8007f02:	e03e      	b.n	8007f82 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f12:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f22:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f24:	f7fb fe1c 	bl	8003b60 <HAL_GetTick>
 8007f28:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007f2a:	e013      	b.n	8007f54 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f2c:	f7fb fe18 	bl	8003b60 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f3a:	d90b      	bls.n	8007f54 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	22ff      	movs	r2, #255	; 0xff
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2203      	movs	r2, #3
 8007f48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e021      	b.n	8007f98 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0e4      	beq.n	8007f2c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f80:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3724      	adds	r7, #36	; 0x24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fbc:	f7fb fdd0 	bl	8003b60 <HAL_GetTick>
 8007fc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fc2:	e009      	b.n	8007fd8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fc4:	f7fb fdcc 	bl	8003b60 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e007      	b.n	8007fe8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0ee      	beq.n	8007fc4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d119      	bne.n	800803e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008014:	f7fb fda4 	bl	8003b60 <HAL_GetTick>
 8008018:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800801a:	e009      	b.n	8008030 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800801c:	f7fb fda0 	bl	8003b60 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800802a:	d901      	bls.n	8008030 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e007      	b.n	8008040 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0ee      	beq.n	800801c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008056:	e005      	b.n	8008064 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	3b0a      	subs	r3, #10
 8008062:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	2b09      	cmp	r3, #9
 8008068:	d8f6      	bhi.n	8008058 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	b2da      	uxtb	r2, r3
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	4313      	orrs	r3, r2
 8008076:	b2db      	uxtb	r3, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	7f1b      	ldrb	r3, [r3, #28]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800809c:	2302      	movs	r3, #2
 800809e:	e03e      	b.n	800811e <HAL_RTCEx_SetTimeStamp+0x9a>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2202      	movs	r2, #2
 80080aa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	4b1e      	ldr	r3, [pc, #120]	; (800812c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	22ca      	movs	r2, #202	; 0xca
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2253      	movs	r2, #83	; 0x53
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0206 	bic.w	r2, r2, #6
 80080de:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008106:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	22ff      	movs	r2, #255	; 0xff
 800810e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	fffff7f7 	.word	0xfffff7f7

08008130 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e025      	b.n	8008190 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7fb fc07 	bl	800396c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3304      	adds	r3, #4
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f001 fff7 	bl	800a164 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	461a      	mov	r2, r3
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	f002 f861 	bl	800a248 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d101      	bne.n	80081b4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80081b0:	2302      	movs	r3, #2
 80081b2:	e018      	b.n	80081e6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68b9      	ldr	r1, [r7, #8]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f002 f8bf 	bl	800a348 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d104      	bne.n	80081dc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2205      	movs	r2, #5
 80081d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80081da:	e003      	b.n	80081e4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d101      	bne.n	8008208 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
 8008206:	e00e      	b.n	8008226 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f002 f8b7 	bl	800a38a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e084      	b.n	800834a <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fb f8ea 	bl	8003434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008280:	d902      	bls.n	8008288 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e002      	b.n	800828e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800828c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008296:	d007      	beq.n	80082a8 <HAL_SPI_Init+0x7a>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082a0:	d002      	beq.n	80082a8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082b8:	d903      	bls.n	80082c2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2202      	movs	r2, #2
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
 80082c0:	e002      	b.n	80082c8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	ea42 0103 	orr.w	r1, r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	f003 0204 	and.w	r2, r3, #4
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	ea42 0103 	orr.w	r1, r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e01d      	b.n	80083a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fb f8cd 	bl	8003518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3304      	adds	r3, #4
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f000 fbc3 	bl	8008b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <HAL_TIM_Base_Start_IT+0x50>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b06      	cmp	r3, #6
 80083d0:	d00b      	beq.n	80083ea <HAL_TIM_Base_Start_IT+0x42>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d8:	d007      	beq.n	80083ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0201 	orr.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	00010007 	.word	0x00010007

080083fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e01d      	b.n	800844a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f815 	bl	8008452 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f000 fb6e 	bl	8008b1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d122      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b02      	cmp	r3, #2
 8008488:	d11b      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f06f 0202 	mvn.w	r2, #2
 8008492:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fb19 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 80084ae:	e005      	b.n	80084bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb0b 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb1c 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d122      	bne.n	8008516 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d11b      	bne.n	8008516 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f06f 0204 	mvn.w	r2, #4
 80084e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 faef 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 8008502:	e005      	b.n	8008510 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fae1 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 faf2 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b08      	cmp	r3, #8
 8008522:	d122      	bne.n	800856a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b08      	cmp	r3, #8
 8008530:	d11b      	bne.n	800856a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f06f 0208 	mvn.w	r2, #8
 800853a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2204      	movs	r2, #4
 8008540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fac5 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 8008556:	e005      	b.n	8008564 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fab7 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fac8 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b10      	cmp	r3, #16
 8008576:	d122      	bne.n	80085be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0310 	and.w	r3, r3, #16
 8008582:	2b10      	cmp	r3, #16
 8008584:	d11b      	bne.n	80085be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f06f 0210 	mvn.w	r2, #16
 800858e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2208      	movs	r2, #8
 8008594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fa9b 	bl	8008ae0 <HAL_TIM_IC_CaptureCallback>
 80085aa:	e005      	b.n	80085b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa8d 	bl	8008acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa9e 	bl	8008af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d10e      	bne.n	80085ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d107      	bne.n	80085ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f06f 0201 	mvn.w	r2, #1
 80085e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7f9 fd8b 	bl	8002100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b80      	cmp	r3, #128	; 0x80
 80085f6:	d10e      	bne.n	8008616 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d107      	bne.n	8008616 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800860e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 ffb9 	bl	8009588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008624:	d10e      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d107      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800863c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 ffac 	bl	800959c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b40      	cmp	r3, #64	; 0x40
 8008650:	d10e      	bne.n	8008670 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d107      	bne.n	8008670 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa4c 	bl	8008b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b20      	cmp	r3, #32
 800867c:	d10e      	bne.n	800869c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b20      	cmp	r3, #32
 800868a:	d107      	bne.n	800869c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0220 	mvn.w	r2, #32
 8008694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 ff6c 	bl	8009574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e105      	b.n	80088ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2202      	movs	r2, #2
 80086ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b14      	cmp	r3, #20
 80086d2:	f200 80f0 	bhi.w	80088b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008731 	.word	0x08008731
 80086e0:	080088b7 	.word	0x080088b7
 80086e4:	080088b7 	.word	0x080088b7
 80086e8:	080088b7 	.word	0x080088b7
 80086ec:	08008771 	.word	0x08008771
 80086f0:	080088b7 	.word	0x080088b7
 80086f4:	080088b7 	.word	0x080088b7
 80086f8:	080088b7 	.word	0x080088b7
 80086fc:	080087b3 	.word	0x080087b3
 8008700:	080088b7 	.word	0x080088b7
 8008704:	080088b7 	.word	0x080088b7
 8008708:	080088b7 	.word	0x080088b7
 800870c:	080087f3 	.word	0x080087f3
 8008710:	080088b7 	.word	0x080088b7
 8008714:	080088b7 	.word	0x080088b7
 8008718:	080088b7 	.word	0x080088b7
 800871c:	08008835 	.word	0x08008835
 8008720:	080088b7 	.word	0x080088b7
 8008724:	080088b7 	.word	0x080088b7
 8008728:	080088b7 	.word	0x080088b7
 800872c:	08008875 	.word	0x08008875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fa90 	bl	8008c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0208 	orr.w	r2, r2, #8
 800874a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0204 	bic.w	r2, r2, #4
 800875a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6999      	ldr	r1, [r3, #24]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	619a      	str	r2, [r3, #24]
      break;
 800876e:	e0a3      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fae2 	bl	8008d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800878a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6999      	ldr	r1, [r3, #24]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	021a      	lsls	r2, r3, #8
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	619a      	str	r2, [r3, #24]
      break;
 80087b0:	e082      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fb39 	bl	8008e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0208 	orr.w	r2, r2, #8
 80087cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69da      	ldr	r2, [r3, #28]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0204 	bic.w	r2, r2, #4
 80087dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69d9      	ldr	r1, [r3, #28]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	61da      	str	r2, [r3, #28]
      break;
 80087f0:	e062      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fb8f 	bl	8008f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800880c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69da      	ldr	r2, [r3, #28]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800881c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69d9      	ldr	r1, [r3, #28]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	021a      	lsls	r2, r3, #8
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	61da      	str	r2, [r3, #28]
      break;
 8008832:	e041      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fbc6 	bl	8008fcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0208 	orr.w	r2, r2, #8
 800884e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0204 	bic.w	r2, r2, #4
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008872:	e021      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fbf8 	bl	8009070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800888e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800889e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	021a      	lsls	r2, r3, #8
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088b4:	e000      	b.n	80088b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80088b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_TIM_ConfigClockSource+0x18>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e0a6      	b.n	8008a3a <HAL_TIM_ConfigClockSource+0x166>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4b4f      	ldr	r3, [pc, #316]	; (8008a44 <HAL_TIM_ConfigClockSource+0x170>)
 8008908:	4013      	ands	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008912:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b40      	cmp	r3, #64	; 0x40
 8008922:	d067      	beq.n	80089f4 <HAL_TIM_ConfigClockSource+0x120>
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d80b      	bhi.n	8008940 <HAL_TIM_ConfigClockSource+0x6c>
 8008928:	2b10      	cmp	r3, #16
 800892a:	d073      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0x140>
 800892c:	2b10      	cmp	r3, #16
 800892e:	d802      	bhi.n	8008936 <HAL_TIM_ConfigClockSource+0x62>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d06f      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008934:	e078      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008936:	2b20      	cmp	r3, #32
 8008938:	d06c      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0x140>
 800893a:	2b30      	cmp	r3, #48	; 0x30
 800893c:	d06a      	beq.n	8008a14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800893e:	e073      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008940:	2b70      	cmp	r3, #112	; 0x70
 8008942:	d00d      	beq.n	8008960 <HAL_TIM_ConfigClockSource+0x8c>
 8008944:	2b70      	cmp	r3, #112	; 0x70
 8008946:	d804      	bhi.n	8008952 <HAL_TIM_ConfigClockSource+0x7e>
 8008948:	2b50      	cmp	r3, #80	; 0x50
 800894a:	d033      	beq.n	80089b4 <HAL_TIM_ConfigClockSource+0xe0>
 800894c:	2b60      	cmp	r3, #96	; 0x60
 800894e:	d041      	beq.n	80089d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008950:	e06a      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008956:	d066      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0x152>
 8008958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800895c:	d017      	beq.n	800898e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800895e:	e063      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6899      	ldr	r1, [r3, #8]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f000 fcd4 	bl	800931c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008982:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	609a      	str	r2, [r3, #8]
      break;
 800898c:	e04c      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f000 fcbd 	bl	800931c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089b0:	609a      	str	r2, [r3, #8]
      break;
 80089b2:	e039      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	6859      	ldr	r1, [r3, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	461a      	mov	r2, r3
 80089c2:	f000 fc31 	bl	8009228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2150      	movs	r1, #80	; 0x50
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fc8a 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 80089d2:	e029      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	6859      	ldr	r1, [r3, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	461a      	mov	r2, r3
 80089e2:	f000 fc50 	bl	8009286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2160      	movs	r1, #96	; 0x60
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fc7a 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 80089f2:	e019      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6818      	ldr	r0, [r3, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	461a      	mov	r2, r3
 8008a02:	f000 fc11 	bl	8009228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2140      	movs	r1, #64	; 0x40
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fc6a 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 8008a12:	e009      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f000 fc61 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 8008a24:	e000      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	fffeff88 	.word	0xfffeff88

08008a48 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e031      	b.n	8008ac4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fb50 	bl	8009118 <TIM_SlaveTimer_SetConfig>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e018      	b.n	8008ac4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ab0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <TIM_Base_SetConfig+0x114>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3a:	d00f      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a3d      	ldr	r2, [pc, #244]	; (8008c34 <TIM_Base_SetConfig+0x118>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00b      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a3c      	ldr	r2, [pc, #240]	; (8008c38 <TIM_Base_SetConfig+0x11c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d007      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a3b      	ldr	r2, [pc, #236]	; (8008c3c <TIM_Base_SetConfig+0x120>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a3a      	ldr	r2, [pc, #232]	; (8008c40 <TIM_Base_SetConfig+0x124>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d108      	bne.n	8008b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a2f      	ldr	r2, [pc, #188]	; (8008c30 <TIM_Base_SetConfig+0x114>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d02b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7c:	d027      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2c      	ldr	r2, [pc, #176]	; (8008c34 <TIM_Base_SetConfig+0x118>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d023      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2b      	ldr	r2, [pc, #172]	; (8008c38 <TIM_Base_SetConfig+0x11c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d01f      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <TIM_Base_SetConfig+0x120>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a29      	ldr	r2, [pc, #164]	; (8008c40 <TIM_Base_SetConfig+0x124>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d017      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a28      	ldr	r2, [pc, #160]	; (8008c44 <TIM_Base_SetConfig+0x128>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d013      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a27      	ldr	r2, [pc, #156]	; (8008c48 <TIM_Base_SetConfig+0x12c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00f      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a26      	ldr	r2, [pc, #152]	; (8008c4c <TIM_Base_SetConfig+0x130>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00b      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a25      	ldr	r2, [pc, #148]	; (8008c50 <TIM_Base_SetConfig+0x134>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d007      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a24      	ldr	r2, [pc, #144]	; (8008c54 <TIM_Base_SetConfig+0x138>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d003      	beq.n	8008bce <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a23      	ldr	r2, [pc, #140]	; (8008c58 <TIM_Base_SetConfig+0x13c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d108      	bne.n	8008be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <TIM_Base_SetConfig+0x114>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_Base_SetConfig+0xf8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a0c      	ldr	r2, [pc, #48]	; (8008c40 <TIM_Base_SetConfig+0x124>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d103      	bne.n	8008c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	615a      	str	r2, [r3, #20]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40010400 	.word	0x40010400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800
 8008c50:	40001800 	.word	0x40001800
 8008c54:	40001c00 	.word	0x40001c00
 8008c58:	40002000 	.word	0x40002000

08008c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	f023 0201 	bic.w	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4b2b      	ldr	r3, [pc, #172]	; (8008d34 <TIM_OC1_SetConfig+0xd8>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f023 0302 	bic.w	r3, r3, #2
 8008ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a21      	ldr	r2, [pc, #132]	; (8008d38 <TIM_OC1_SetConfig+0xdc>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC1_SetConfig+0x64>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a20      	ldr	r2, [pc, #128]	; (8008d3c <TIM_OC1_SetConfig+0xe0>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10c      	bne.n	8008cda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0308 	bic.w	r3, r3, #8
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f023 0304 	bic.w	r3, r3, #4
 8008cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <TIM_OC1_SetConfig+0xdc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC1_SetConfig+0x8e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a15      	ldr	r2, [pc, #84]	; (8008d3c <TIM_OC1_SetConfig+0xe0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d111      	bne.n	8008d0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	621a      	str	r2, [r3, #32]
}
 8008d28:	bf00      	nop
 8008d2a:	371c      	adds	r7, #28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	fffeff8f 	.word	0xfffeff8f
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40010400 	.word	0x40010400

08008d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	f023 0210 	bic.w	r2, r3, #16
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4b2e      	ldr	r3, [pc, #184]	; (8008e24 <TIM_OC2_SetConfig+0xe4>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0320 	bic.w	r3, r3, #32
 8008d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a23      	ldr	r2, [pc, #140]	; (8008e28 <TIM_OC2_SetConfig+0xe8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_OC2_SetConfig+0x68>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a22      	ldr	r2, [pc, #136]	; (8008e2c <TIM_OC2_SetConfig+0xec>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d10d      	bne.n	8008dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a18      	ldr	r2, [pc, #96]	; (8008e28 <TIM_OC2_SetConfig+0xe8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d003      	beq.n	8008dd4 <TIM_OC2_SetConfig+0x94>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a17      	ldr	r2, [pc, #92]	; (8008e2c <TIM_OC2_SetConfig+0xec>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d113      	bne.n	8008dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	621a      	str	r2, [r3, #32]
}
 8008e16:	bf00      	nop
 8008e18:	371c      	adds	r7, #28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	feff8fff 	.word	0xfeff8fff
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	40010400 	.word	0x40010400

08008e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4b2d      	ldr	r3, [pc, #180]	; (8008f10 <TIM_OC3_SetConfig+0xe0>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a22      	ldr	r2, [pc, #136]	; (8008f14 <TIM_OC3_SetConfig+0xe4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d003      	beq.n	8008e96 <TIM_OC3_SetConfig+0x66>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a21      	ldr	r2, [pc, #132]	; (8008f18 <TIM_OC3_SetConfig+0xe8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d10d      	bne.n	8008eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <TIM_OC3_SetConfig+0xe4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <TIM_OC3_SetConfig+0x92>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <TIM_OC3_SetConfig+0xe8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d113      	bne.n	8008eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	621a      	str	r2, [r3, #32]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	fffeff8f 	.word	0xfffeff8f
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40010400 	.word	0x40010400

08008f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <TIM_OC4_SetConfig+0xa4>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	031b      	lsls	r3, r3, #12
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <TIM_OC4_SetConfig+0xa8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <TIM_OC4_SetConfig+0x68>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a12      	ldr	r2, [pc, #72]	; (8008fc8 <TIM_OC4_SetConfig+0xac>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d109      	bne.n	8008f98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	feff8fff 	.word	0xfeff8fff
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40010400 	.word	0x40010400

08008fcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <TIM_OC5_SetConfig+0x98>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800900c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a12      	ldr	r2, [pc, #72]	; (8009068 <TIM_OC5_SetConfig+0x9c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_OC5_SetConfig+0x5e>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a11      	ldr	r2, [pc, #68]	; (800906c <TIM_OC5_SetConfig+0xa0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d109      	bne.n	800903e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009030:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4313      	orrs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	621a      	str	r2, [r3, #32]
}
 8009058:	bf00      	nop
 800905a:	371c      	adds	r7, #28
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	fffeff8f 	.word	0xfffeff8f
 8009068:	40010000 	.word	0x40010000
 800906c:	40010400 	.word	0x40010400

08009070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4b1c      	ldr	r3, [pc, #112]	; (800910c <TIM_OC6_SetConfig+0x9c>)
 800909c:	4013      	ands	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	051b      	lsls	r3, r3, #20
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a13      	ldr	r2, [pc, #76]	; (8009110 <TIM_OC6_SetConfig+0xa0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC6_SetConfig+0x60>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a12      	ldr	r2, [pc, #72]	; (8009114 <TIM_OC6_SetConfig+0xa4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d109      	bne.n	80090e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	029b      	lsls	r3, r3, #10
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	621a      	str	r2, [r3, #32]
}
 80090fe:	bf00      	nop
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	feff8fff 	.word	0xfeff8fff
 8009110:	40010000 	.word	0x40010000
 8009114:	40010400 	.word	0x40010400

08009118 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009130:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009140:	4013      	ands	r3, r2
 8009142:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	4313      	orrs	r3, r2
 800914c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	2b30      	cmp	r3, #48	; 0x30
 800915c:	d05c      	beq.n	8009218 <TIM_SlaveTimer_SetConfig+0x100>
 800915e:	2b30      	cmp	r3, #48	; 0x30
 8009160:	d806      	bhi.n	8009170 <TIM_SlaveTimer_SetConfig+0x58>
 8009162:	2b10      	cmp	r3, #16
 8009164:	d058      	beq.n	8009218 <TIM_SlaveTimer_SetConfig+0x100>
 8009166:	2b20      	cmp	r3, #32
 8009168:	d056      	beq.n	8009218 <TIM_SlaveTimer_SetConfig+0x100>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d054      	beq.n	8009218 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800916e:	e054      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009170:	2b50      	cmp	r3, #80	; 0x50
 8009172:	d03d      	beq.n	80091f0 <TIM_SlaveTimer_SetConfig+0xd8>
 8009174:	2b50      	cmp	r3, #80	; 0x50
 8009176:	d802      	bhi.n	800917e <TIM_SlaveTimer_SetConfig+0x66>
 8009178:	2b40      	cmp	r3, #64	; 0x40
 800917a:	d010      	beq.n	800919e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800917c:	e04d      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800917e:	2b60      	cmp	r3, #96	; 0x60
 8009180:	d040      	beq.n	8009204 <TIM_SlaveTimer_SetConfig+0xec>
 8009182:	2b70      	cmp	r3, #112	; 0x70
 8009184:	d000      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009186:	e048      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	68d9      	ldr	r1, [r3, #12]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f000 f8c0 	bl	800931c <TIM_ETR_SetConfig>
      break;
 800919c:	e03d      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	d101      	bne.n	80091aa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e038      	b.n	800921c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0201 	bic.w	r2, r2, #1
 80091c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	621a      	str	r2, [r3, #32]
      break;
 80091ee:	e014      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	6899      	ldr	r1, [r3, #8]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f000 f813 	bl	8009228 <TIM_TI1_ConfigInputStage>
      break;
 8009202:	e00a      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6818      	ldr	r0, [r3, #0]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6899      	ldr	r1, [r3, #8]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	461a      	mov	r2, r3
 8009212:	f000 f838 	bl	8009286 <TIM_TI2_ConfigInputStage>
      break;
 8009216:	e000      	b.n	800921a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009218:	bf00      	nop
  }
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	fffefff8 	.word	0xfffefff8

08009228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	f023 0201 	bic.w	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f023 030a 	bic.w	r3, r3, #10
 8009264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	621a      	str	r2, [r3, #32]
}
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009286:	b480      	push	{r7}
 8009288:	b087      	sub	sp, #28
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f023 0210 	bic.w	r2, r3, #16
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	031b      	lsls	r3, r3, #12
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	f043 0307 	orr.w	r3, r3, #7
 8009308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	609a      	str	r2, [r3, #8]
}
 8009310:	bf00      	nop
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	021a      	lsls	r2, r3, #8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	431a      	orrs	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4313      	orrs	r3, r2
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	609a      	str	r2, [r3, #8]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009370:	2302      	movs	r3, #2
 8009372:	e06d      	b.n	8009450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a30      	ldr	r2, [pc, #192]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d004      	beq.n	80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a2f      	ldr	r2, [pc, #188]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d108      	bne.n	80093ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a20      	ldr	r2, [pc, #128]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d022      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e6:	d01d      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d018      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d013      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1a      	ldr	r2, [pc, #104]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d00e      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a15      	ldr	r2, [pc, #84]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d009      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a16      	ldr	r2, [pc, #88]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a15      	ldr	r2, [pc, #84]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d10c      	bne.n	800943e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800942a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	4313      	orrs	r3, r2
 8009434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	40010000 	.word	0x40010000
 8009460:	40010400 	.word	0x40010400
 8009464:	40000400 	.word	0x40000400
 8009468:	40000800 	.word	0x40000800
 800946c:	40000c00 	.word	0x40000c00
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800

08009478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009490:	2302      	movs	r3, #2
 8009492:	e065      	b.n	8009560 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	041b      	lsls	r3, r3, #16
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a16      	ldr	r2, [pc, #88]	; (800956c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d004      	beq.n	8009522 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a14      	ldr	r2, [pc, #80]	; (8009570 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d115      	bne.n	800954e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	40010000 	.word	0x40010000
 8009570:	40010400 	.word	0x40010400

08009574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e040      	b.n	8009644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fa f86c 	bl	80036b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2224      	movs	r2, #36	; 0x24
 80095dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0201 	bic.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f972 	bl	80098d8 <UART_SetConfig>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e022      	b.n	8009644 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fc10 	bl	8009e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800961a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689a      	ldr	r2, [r3, #8]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800962a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0201 	orr.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fc97 	bl	8009f70 <UART_CheckIdleState>
 8009642:	4603      	mov	r3, r0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009672:	4013      	ands	r3, r2
 8009674:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d113      	bne.n	80096a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00e      	beq.n	80096a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	d009      	beq.n	80096a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 8100 	beq.w	800989a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
      }
      return;
 80096a2:	e0fa      	b.n	800989a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80d5 	beq.w	8009856 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d105      	bne.n	80096c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80ca 	beq.w	8009856 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00e      	beq.n	80096ea <HAL_UART_IRQHandler+0x9e>
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2201      	movs	r2, #1
 80096dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e2:	f043 0201 	orr.w	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <HAL_UART_IRQHandler+0xc6>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2202      	movs	r2, #2
 8009704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	f043 0204 	orr.w	r2, r3, #4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00e      	beq.n	800973a <HAL_UART_IRQHandler+0xee>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2204      	movs	r2, #4
 800972c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009732:	f043 0202 	orr.w	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b00      	cmp	r3, #0
 8009742:	d013      	beq.n	800976c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d104      	bne.n	8009758 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2208      	movs	r2, #8
 800975e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009764:	f043 0208 	orr.w	r2, r3, #8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00f      	beq.n	8009796 <HAL_UART_IRQHandler+0x14a>
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00a      	beq.n	8009796 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800978e:	f043 0220 	orr.w	r2, r3, #32
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d07f      	beq.n	800989e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00c      	beq.n	80097c2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d2:	2b40      	cmp	r3, #64	; 0x40
 80097d4:	d004      	beq.n	80097e0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d031      	beq.n	8009844 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fc6f 	bl	800a0c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d123      	bne.n	800983c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009802:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d013      	beq.n	8009834 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009810:	4a26      	ldr	r2, [pc, #152]	; (80098ac <HAL_UART_IRQHandler+0x260>)
 8009812:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009818:	4618      	mov	r0, r3
 800981a:	f7fb f865 	bl	80048e8 <HAL_DMA_Abort_IT>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d016      	beq.n	8009852 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800982e:	4610      	mov	r0, r2
 8009830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009832:	e00e      	b.n	8009852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f845 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983a:	e00a      	b.n	8009852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f841 	bl	80098c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009842:	e006      	b.n	8009852 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f83d 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009850:	e025      	b.n	800989e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009852:	bf00      	nop
    return;
 8009854:	e023      	b.n	800989e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00d      	beq.n	800987c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009866:	2b00      	cmp	r3, #0
 8009868:	d008      	beq.n	800987c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
    }
    return;
 800987a:	e012      	b.n	80098a2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <HAL_UART_IRQHandler+0x258>
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc4d 	bl	800a130 <UART_EndTransmit_IT>
    return;
 8009896:	bf00      	nop
 8009898:	e004      	b.n	80098a4 <HAL_UART_IRQHandler+0x258>
      return;
 800989a:	bf00      	nop
 800989c:	e002      	b.n	80098a4 <HAL_UART_IRQHandler+0x258>
    return;
 800989e:	bf00      	nop
 80098a0:	e000      	b.n	80098a4 <HAL_UART_IRQHandler+0x258>
    return;
 80098a2:	bf00      	nop
  }

}
 80098a4:	3720      	adds	r7, #32
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	0800a105 	.word	0x0800a105

080098b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4bb1      	ldr	r3, [pc, #708]	; (8009bcc <UART_SetConfig+0x2f4>)
 8009908:	4013      	ands	r3, r2
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6812      	ldr	r2, [r2, #0]
 800990e:	6939      	ldr	r1, [r7, #16]
 8009910:	430b      	orrs	r3, r1
 8009912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	430a      	orrs	r2, r1
 800994c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a9f      	ldr	r2, [pc, #636]	; (8009bd0 <UART_SetConfig+0x2f8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d121      	bne.n	800999c <UART_SetConfig+0xc4>
 8009958:	4b9e      	ldr	r3, [pc, #632]	; (8009bd4 <UART_SetConfig+0x2fc>)
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2b03      	cmp	r3, #3
 8009964:	d816      	bhi.n	8009994 <UART_SetConfig+0xbc>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <UART_SetConfig+0x94>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	0800997d 	.word	0x0800997d
 8009970:	08009989 	.word	0x08009989
 8009974:	08009983 	.word	0x08009983
 8009978:	0800998f 	.word	0x0800998f
 800997c:	2301      	movs	r3, #1
 800997e:	77fb      	strb	r3, [r7, #31]
 8009980:	e151      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009982:	2302      	movs	r3, #2
 8009984:	77fb      	strb	r3, [r7, #31]
 8009986:	e14e      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009988:	2304      	movs	r3, #4
 800998a:	77fb      	strb	r3, [r7, #31]
 800998c:	e14b      	b.n	8009c26 <UART_SetConfig+0x34e>
 800998e:	2308      	movs	r3, #8
 8009990:	77fb      	strb	r3, [r7, #31]
 8009992:	e148      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009994:	2310      	movs	r3, #16
 8009996:	77fb      	strb	r3, [r7, #31]
 8009998:	bf00      	nop
 800999a:	e144      	b.n	8009c26 <UART_SetConfig+0x34e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a8d      	ldr	r2, [pc, #564]	; (8009bd8 <UART_SetConfig+0x300>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d134      	bne.n	8009a10 <UART_SetConfig+0x138>
 80099a6:	4b8b      	ldr	r3, [pc, #556]	; (8009bd4 <UART_SetConfig+0x2fc>)
 80099a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ac:	f003 030c 	and.w	r3, r3, #12
 80099b0:	2b0c      	cmp	r3, #12
 80099b2:	d829      	bhi.n	8009a08 <UART_SetConfig+0x130>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <UART_SetConfig+0xe4>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099f1 	.word	0x080099f1
 80099c0:	08009a09 	.word	0x08009a09
 80099c4:	08009a09 	.word	0x08009a09
 80099c8:	08009a09 	.word	0x08009a09
 80099cc:	080099fd 	.word	0x080099fd
 80099d0:	08009a09 	.word	0x08009a09
 80099d4:	08009a09 	.word	0x08009a09
 80099d8:	08009a09 	.word	0x08009a09
 80099dc:	080099f7 	.word	0x080099f7
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	08009a09 	.word	0x08009a09
 80099e8:	08009a09 	.word	0x08009a09
 80099ec:	08009a03 	.word	0x08009a03
 80099f0:	2300      	movs	r3, #0
 80099f2:	77fb      	strb	r3, [r7, #31]
 80099f4:	e117      	b.n	8009c26 <UART_SetConfig+0x34e>
 80099f6:	2302      	movs	r3, #2
 80099f8:	77fb      	strb	r3, [r7, #31]
 80099fa:	e114      	b.n	8009c26 <UART_SetConfig+0x34e>
 80099fc:	2304      	movs	r3, #4
 80099fe:	77fb      	strb	r3, [r7, #31]
 8009a00:	e111      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a02:	2308      	movs	r3, #8
 8009a04:	77fb      	strb	r3, [r7, #31]
 8009a06:	e10e      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a08:	2310      	movs	r3, #16
 8009a0a:	77fb      	strb	r3, [r7, #31]
 8009a0c:	bf00      	nop
 8009a0e:	e10a      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a71      	ldr	r2, [pc, #452]	; (8009bdc <UART_SetConfig+0x304>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d120      	bne.n	8009a5c <UART_SetConfig+0x184>
 8009a1a:	4b6e      	ldr	r3, [pc, #440]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d00f      	beq.n	8009a48 <UART_SetConfig+0x170>
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d802      	bhi.n	8009a32 <UART_SetConfig+0x15a>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <UART_SetConfig+0x164>
 8009a30:	e010      	b.n	8009a54 <UART_SetConfig+0x17c>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d005      	beq.n	8009a42 <UART_SetConfig+0x16a>
 8009a36:	2b30      	cmp	r3, #48	; 0x30
 8009a38:	d009      	beq.n	8009a4e <UART_SetConfig+0x176>
 8009a3a:	e00b      	b.n	8009a54 <UART_SetConfig+0x17c>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	77fb      	strb	r3, [r7, #31]
 8009a40:	e0f1      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a42:	2302      	movs	r3, #2
 8009a44:	77fb      	strb	r3, [r7, #31]
 8009a46:	e0ee      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a48:	2304      	movs	r3, #4
 8009a4a:	77fb      	strb	r3, [r7, #31]
 8009a4c:	e0eb      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a4e:	2308      	movs	r3, #8
 8009a50:	77fb      	strb	r3, [r7, #31]
 8009a52:	e0e8      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a54:	2310      	movs	r3, #16
 8009a56:	77fb      	strb	r3, [r7, #31]
 8009a58:	bf00      	nop
 8009a5a:	e0e4      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a5f      	ldr	r2, [pc, #380]	; (8009be0 <UART_SetConfig+0x308>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d120      	bne.n	8009aa8 <UART_SetConfig+0x1d0>
 8009a66:	4b5b      	ldr	r3, [pc, #364]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d00f      	beq.n	8009a94 <UART_SetConfig+0x1bc>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d802      	bhi.n	8009a7e <UART_SetConfig+0x1a6>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <UART_SetConfig+0x1b0>
 8009a7c:	e010      	b.n	8009aa0 <UART_SetConfig+0x1c8>
 8009a7e:	2b80      	cmp	r3, #128	; 0x80
 8009a80:	d005      	beq.n	8009a8e <UART_SetConfig+0x1b6>
 8009a82:	2bc0      	cmp	r3, #192	; 0xc0
 8009a84:	d009      	beq.n	8009a9a <UART_SetConfig+0x1c2>
 8009a86:	e00b      	b.n	8009aa0 <UART_SetConfig+0x1c8>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e0cb      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	77fb      	strb	r3, [r7, #31]
 8009a92:	e0c8      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a94:	2304      	movs	r3, #4
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e0c5      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	77fb      	strb	r3, [r7, #31]
 8009a9e:	e0c2      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	bf00      	nop
 8009aa6:	e0be      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a4d      	ldr	r2, [pc, #308]	; (8009be4 <UART_SetConfig+0x30c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d124      	bne.n	8009afc <UART_SetConfig+0x224>
 8009ab2:	4b48      	ldr	r3, [pc, #288]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac0:	d012      	beq.n	8009ae8 <UART_SetConfig+0x210>
 8009ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac6:	d802      	bhi.n	8009ace <UART_SetConfig+0x1f6>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <UART_SetConfig+0x204>
 8009acc:	e012      	b.n	8009af4 <UART_SetConfig+0x21c>
 8009ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad2:	d006      	beq.n	8009ae2 <UART_SetConfig+0x20a>
 8009ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ad8:	d009      	beq.n	8009aee <UART_SetConfig+0x216>
 8009ada:	e00b      	b.n	8009af4 <UART_SetConfig+0x21c>
 8009adc:	2300      	movs	r3, #0
 8009ade:	77fb      	strb	r3, [r7, #31]
 8009ae0:	e0a1      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	77fb      	strb	r3, [r7, #31]
 8009ae6:	e09e      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009ae8:	2304      	movs	r3, #4
 8009aea:	77fb      	strb	r3, [r7, #31]
 8009aec:	e09b      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009aee:	2308      	movs	r3, #8
 8009af0:	77fb      	strb	r3, [r7, #31]
 8009af2:	e098      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009af4:	2310      	movs	r3, #16
 8009af6:	77fb      	strb	r3, [r7, #31]
 8009af8:	bf00      	nop
 8009afa:	e094      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a39      	ldr	r2, [pc, #228]	; (8009be8 <UART_SetConfig+0x310>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d124      	bne.n	8009b50 <UART_SetConfig+0x278>
 8009b06:	4b33      	ldr	r3, [pc, #204]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b14:	d012      	beq.n	8009b3c <UART_SetConfig+0x264>
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b1a:	d802      	bhi.n	8009b22 <UART_SetConfig+0x24a>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <UART_SetConfig+0x258>
 8009b20:	e012      	b.n	8009b48 <UART_SetConfig+0x270>
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d006      	beq.n	8009b36 <UART_SetConfig+0x25e>
 8009b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b2c:	d009      	beq.n	8009b42 <UART_SetConfig+0x26a>
 8009b2e:	e00b      	b.n	8009b48 <UART_SetConfig+0x270>
 8009b30:	2301      	movs	r3, #1
 8009b32:	77fb      	strb	r3, [r7, #31]
 8009b34:	e077      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b36:	2302      	movs	r3, #2
 8009b38:	77fb      	strb	r3, [r7, #31]
 8009b3a:	e074      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	77fb      	strb	r3, [r7, #31]
 8009b40:	e071      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b42:	2308      	movs	r3, #8
 8009b44:	77fb      	strb	r3, [r7, #31]
 8009b46:	e06e      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	77fb      	strb	r3, [r7, #31]
 8009b4c:	bf00      	nop
 8009b4e:	e06a      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a25      	ldr	r2, [pc, #148]	; (8009bec <UART_SetConfig+0x314>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d124      	bne.n	8009ba4 <UART_SetConfig+0x2cc>
 8009b5a:	4b1e      	ldr	r3, [pc, #120]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d012      	beq.n	8009b90 <UART_SetConfig+0x2b8>
 8009b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6e:	d802      	bhi.n	8009b76 <UART_SetConfig+0x29e>
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d007      	beq.n	8009b84 <UART_SetConfig+0x2ac>
 8009b74:	e012      	b.n	8009b9c <UART_SetConfig+0x2c4>
 8009b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b7a:	d006      	beq.n	8009b8a <UART_SetConfig+0x2b2>
 8009b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b80:	d009      	beq.n	8009b96 <UART_SetConfig+0x2be>
 8009b82:	e00b      	b.n	8009b9c <UART_SetConfig+0x2c4>
 8009b84:	2300      	movs	r3, #0
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e04d      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e04a      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b90:	2304      	movs	r3, #4
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e047      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b96:	2308      	movs	r3, #8
 8009b98:	77fb      	strb	r3, [r7, #31]
 8009b9a:	e044      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009b9c:	2310      	movs	r3, #16
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	bf00      	nop
 8009ba2:	e040      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a11      	ldr	r2, [pc, #68]	; (8009bf0 <UART_SetConfig+0x318>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d139      	bne.n	8009c22 <UART_SetConfig+0x34a>
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <UART_SetConfig+0x2fc>)
 8009bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bbc:	d027      	beq.n	8009c0e <UART_SetConfig+0x336>
 8009bbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc2:	d817      	bhi.n	8009bf4 <UART_SetConfig+0x31c>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01c      	beq.n	8009c02 <UART_SetConfig+0x32a>
 8009bc8:	e027      	b.n	8009c1a <UART_SetConfig+0x342>
 8009bca:	bf00      	nop
 8009bcc:	efff69f3 	.word	0xefff69f3
 8009bd0:	40011000 	.word	0x40011000
 8009bd4:	40023800 	.word	0x40023800
 8009bd8:	40004400 	.word	0x40004400
 8009bdc:	40004800 	.word	0x40004800
 8009be0:	40004c00 	.word	0x40004c00
 8009be4:	40005000 	.word	0x40005000
 8009be8:	40011400 	.word	0x40011400
 8009bec:	40007800 	.word	0x40007800
 8009bf0:	40007c00 	.word	0x40007c00
 8009bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf8:	d006      	beq.n	8009c08 <UART_SetConfig+0x330>
 8009bfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bfe:	d009      	beq.n	8009c14 <UART_SetConfig+0x33c>
 8009c00:	e00b      	b.n	8009c1a <UART_SetConfig+0x342>
 8009c02:	2300      	movs	r3, #0
 8009c04:	77fb      	strb	r3, [r7, #31]
 8009c06:	e00e      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009c08:	2302      	movs	r3, #2
 8009c0a:	77fb      	strb	r3, [r7, #31]
 8009c0c:	e00b      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009c0e:	2304      	movs	r3, #4
 8009c10:	77fb      	strb	r3, [r7, #31]
 8009c12:	e008      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009c14:	2308      	movs	r3, #8
 8009c16:	77fb      	strb	r3, [r7, #31]
 8009c18:	e005      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009c1a:	2310      	movs	r3, #16
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	bf00      	nop
 8009c20:	e001      	b.n	8009c26 <UART_SetConfig+0x34e>
 8009c22:	2310      	movs	r3, #16
 8009c24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c2e:	d17f      	bne.n	8009d30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009c30:	7ffb      	ldrb	r3, [r7, #31]
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d85c      	bhi.n	8009cf0 <UART_SetConfig+0x418>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <UART_SetConfig+0x364>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c81 	.word	0x08009c81
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009cf1 	.word	0x08009cf1
 8009c4c:	08009cb9 	.word	0x08009cb9
 8009c50:	08009cf1 	.word	0x08009cf1
 8009c54:	08009cf1 	.word	0x08009cf1
 8009c58:	08009cf1 	.word	0x08009cf1
 8009c5c:	08009cd9 	.word	0x08009cd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c60:	f7fd fa5c 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8009c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	005a      	lsls	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	085b      	lsrs	r3, r3, #1
 8009c70:	441a      	add	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	61bb      	str	r3, [r7, #24]
        break;
 8009c7e:	e03a      	b.n	8009cf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c80:	f7fd fa60 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 8009c84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	005a      	lsls	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	441a      	add	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	61bb      	str	r3, [r7, #24]
        break;
 8009c9e:	e02a      	b.n	8009cf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	085a      	lsrs	r2, r3, #1
 8009ca6:	4b5f      	ldr	r3, [pc, #380]	; (8009e24 <UART_SetConfig+0x54c>)
 8009ca8:	4413      	add	r3, r2
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6852      	ldr	r2, [r2, #4]
 8009cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	61bb      	str	r3, [r7, #24]
        break;
 8009cb6:	e01e      	b.n	8009cf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cb8:	f7fd f972 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8009cbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	005a      	lsls	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	085b      	lsrs	r3, r3, #1
 8009cc8:	441a      	add	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	61bb      	str	r3, [r7, #24]
        break;
 8009cd6:	e00e      	b.n	8009cf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	61bb      	str	r3, [r7, #24]
        break;
 8009cee:	e002      	b.n	8009cf6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	75fb      	strb	r3, [r7, #23]
        break;
 8009cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b0f      	cmp	r3, #15
 8009cfa:	d916      	bls.n	8009d2a <UART_SetConfig+0x452>
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d02:	d212      	bcs.n	8009d2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f023 030f 	bic.w	r3, r3, #15
 8009d0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	085b      	lsrs	r3, r3, #1
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	897b      	ldrh	r3, [r7, #10]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	897a      	ldrh	r2, [r7, #10]
 8009d26:	60da      	str	r2, [r3, #12]
 8009d28:	e070      	b.n	8009e0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	75fb      	strb	r3, [r7, #23]
 8009d2e:	e06d      	b.n	8009e0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009d30:	7ffb      	ldrb	r3, [r7, #31]
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d859      	bhi.n	8009dea <UART_SetConfig+0x512>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <UART_SetConfig+0x464>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d7f 	.word	0x08009d7f
 8009d44:	08009d9d 	.word	0x08009d9d
 8009d48:	08009deb 	.word	0x08009deb
 8009d4c:	08009db5 	.word	0x08009db5
 8009d50:	08009deb 	.word	0x08009deb
 8009d54:	08009deb 	.word	0x08009deb
 8009d58:	08009deb 	.word	0x08009deb
 8009d5c:	08009dd3 	.word	0x08009dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d60:	f7fd f9dc 	bl	800711c <HAL_RCC_GetPCLK1Freq>
 8009d64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	085a      	lsrs	r2, r3, #1
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	61bb      	str	r3, [r7, #24]
        break;
 8009d7c:	e038      	b.n	8009df0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d7e:	f7fd f9e1 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 8009d82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	085a      	lsrs	r2, r3, #1
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	441a      	add	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	61bb      	str	r3, [r7, #24]
        break;
 8009d9a:	e029      	b.n	8009df0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	085a      	lsrs	r2, r3, #1
 8009da2:	4b21      	ldr	r3, [pc, #132]	; (8009e28 <UART_SetConfig+0x550>)
 8009da4:	4413      	add	r3, r2
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	6852      	ldr	r2, [r2, #4]
 8009daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	61bb      	str	r3, [r7, #24]
        break;
 8009db2:	e01d      	b.n	8009df0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009db4:	f7fd f8f4 	bl	8006fa0 <HAL_RCC_GetSysClockFreq>
 8009db8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	085a      	lsrs	r2, r3, #1
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	441a      	add	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	61bb      	str	r3, [r7, #24]
        break;
 8009dd0:	e00e      	b.n	8009df0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	61bb      	str	r3, [r7, #24]
        break;
 8009de8:	e002      	b.n	8009df0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
        break;
 8009dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b0f      	cmp	r3, #15
 8009df4:	d908      	bls.n	8009e08 <UART_SetConfig+0x530>
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dfc:	d204      	bcs.n	8009e08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69ba      	ldr	r2, [r7, #24]
 8009e04:	60da      	str	r2, [r3, #12]
 8009e06:	e001      	b.n	8009e0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3720      	adds	r7, #32
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	01e84800 	.word	0x01e84800
 8009e28:	00f42400 	.word	0x00f42400

08009e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	f003 0308 	and.w	r3, r3, #8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	f003 0320 	and.w	r3, r3, #32
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01a      	beq.n	8009f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f2a:	d10a      	bne.n	8009f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	605a      	str	r2, [r3, #4]
  }
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009f7e:	f7f9 fdef 	bl	8003b60 <HAL_GetTick>
 8009f82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0308 	and.w	r3, r3, #8
 8009f8e:	2b08      	cmp	r3, #8
 8009f90:	d10e      	bne.n	8009fb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f814 	bl	8009fce <UART_WaitOnFlagUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e00a      	b.n	8009fc6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	603b      	str	r3, [r7, #0]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fde:	e05d      	b.n	800a09c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	d059      	beq.n	800a09c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe8:	f7f9 fdba 	bl	8003b60 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	69ba      	ldr	r2, [r7, #24]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d302      	bcc.n	8009ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d11b      	bne.n	800a036 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a00c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e042      	b.n	800a0bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d02b      	beq.n	800a09c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a052:	d123      	bne.n	800a09c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a05c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a06c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0201 	bic.w	r2, r2, #1
 800a07c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2220      	movs	r2, #32
 800a082:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2220      	movs	r2, #32
 800a088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2220      	movs	r2, #32
 800a08e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e00f      	b.n	800a0bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2301      	moveq	r3, #1
 800a0ae:	2300      	movne	r3, #0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d092      	beq.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0201 	bic.w	r2, r2, #1
 800a0ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fbce 	bl	80098c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a128:	bf00      	nop
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a146:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2220      	movs	r2, #32
 800a14c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fbab 	bl	80098b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d027      	beq.n	800a1ce <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4b2f      	ldr	r3, [pc, #188]	; (800a244 <FMC_SDRAM_Init+0xe0>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a194:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a19a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a1a0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a1a6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a1ac:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a1b2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a1b8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a1be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	e032      	b.n	800a234 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1da:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a1e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a1ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	4b12      	ldr	r3, [pc, #72]	; (800a244 <FMC_SDRAM_Init+0xe0>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a208:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a20e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a214:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a21a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a220:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4313      	orrs	r3, r2
 800a226:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	ffff8000 	.word	0xffff8000

0800a248 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d02e      	beq.n	800a2c0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a26e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a27e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	3b01      	subs	r3, #1
 800a286:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a288:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	3b01      	subs	r3, #1
 800a290:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a292:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	3b01      	subs	r3, #1
 800a29a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a29c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a2a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	609a      	str	r2, [r3, #8]
 800a2be:	e039      	b.n	800a334 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <FMC_SDRAM_Timing_Init+0xfc>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2f2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a302:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	3b01      	subs	r3, #1
 800a30a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a30c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a316:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a320:	4313      	orrs	r3, r2
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	4313      	orrs	r3, r2
 800a326:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	ff0f0fff 	.word	0xff0f0fff

0800a348 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a360:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	3b01      	subs	r3, #1
 800a368:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a36a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	695a      	ldr	r2, [r3, #20]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a3be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3c2:	2b84      	cmp	r3, #132	; 0x84
 800a3c4:	d005      	beq.n	800a3d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a3c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3303      	adds	r3, #3
 800a3d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a3e4:	f000 fee8 	bl	800b1b8 <vTaskStartScheduler>
  
  return osOK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f0:	b089      	sub	sp, #36	; 0x24
 800a3f2:	af04      	add	r7, sp, #16
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d020      	beq.n	800a442 <osThreadCreate+0x54>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01c      	beq.n	800a442 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685c      	ldr	r4, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681d      	ldr	r5, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691e      	ldr	r6, [r3, #16]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff ffc8 	bl	800a3b0 <makeFreeRtosPriority>
 800a420:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a42a:	9202      	str	r2, [sp, #8]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	9100      	str	r1, [sp, #0]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	4632      	mov	r2, r6
 800a434:	4629      	mov	r1, r5
 800a436:	4620      	mov	r0, r4
 800a438:	f000 fc70 	bl	800ad1c <xTaskCreateStatic>
 800a43c:	4603      	mov	r3, r0
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e01c      	b.n	800a47c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685c      	ldr	r4, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a44e:	b29e      	uxth	r6, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff ffaa 	bl	800a3b0 <makeFreeRtosPriority>
 800a45c:	4602      	mov	r2, r0
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	9200      	str	r2, [sp, #0]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	4632      	mov	r2, r6
 800a46a:	4629      	mov	r1, r5
 800a46c:	4620      	mov	r0, r4
 800a46e:	f000 fcb5 	bl	800addc <xTaskCreate>
 800a472:	4603      	mov	r3, r0
 800a474:	2b01      	cmp	r3, #1
 800a476:	d001      	beq.n	800a47c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	e000      	b.n	800a47e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a486 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <osDelay+0x16>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	e000      	b.n	800a49e <osDelay+0x18>
 800a49c:	2301      	movs	r3, #1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fe54 	bl	800b14c <vTaskDelay>
  
  return osOK;
 800a4a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d007      	beq.n	800a4ce <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	f000 fa38 	bl	800a93a <xQueueCreateMutexStatic>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	e003      	b.n	800a4d6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	f000 fa1b 	bl	800a90a <xQueueCreateMutex>
 800a4d4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f103 0208 	add.w	r2, r3, #8
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f103 0208 	add.w	r2, r3, #8
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f103 0208 	add.w	r2, r3, #8
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a596:	d103      	bne.n	800a5a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e00c      	b.n	800a5ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	e002      	b.n	800a5ae <vListInsert+0x2e>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d2f6      	bcs.n	800a5a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6892      	ldr	r2, [r2, #8]
 800a608:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6852      	ldr	r2, [r2, #4]
 800a612:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d103      	bne.n	800a626 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
	...

0800a648 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10b      	bne.n	800a674 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	b672      	cpsid	i
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	b662      	cpsie	i
 800a670:	60bb      	str	r3, [r7, #8]
 800a672:	e7fe      	b.n	800a672 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a674:	f001 fbd0 	bl	800be18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	441a      	add	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6aa:	fb01 f303 	mul.w	r3, r1, r3
 800a6ae:	441a      	add	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	22ff      	movs	r2, #255	; 0xff
 800a6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	22ff      	movs	r2, #255	; 0xff
 800a6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d114      	bne.n	800a6f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d01a      	beq.n	800a708 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3310      	adds	r3, #16
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 ffc8 	bl	800b66c <xTaskRemoveFromEventList>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <xQueueGenericReset+0xd0>)
 800a6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	e009      	b.n	800a708 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	3310      	adds	r3, #16
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff fef0 	bl	800a4de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3324      	adds	r3, #36	; 0x24
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff feeb 	bl	800a4de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a708:	f001 fbb8 	bl	800be7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a70c:	2301      	movs	r3, #1
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	; 0x38
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <xQueueGenericCreateStatic+0x2c>
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	62bb      	str	r3, [r7, #40]	; 0x28
 800a746:	e7fe      	b.n	800a746 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <xQueueGenericCreateStatic+0x4a>
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	b672      	cpsid	i
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	b662      	cpsie	i
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
 800a764:	e7fe      	b.n	800a764 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <xQueueGenericCreateStatic+0x56>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <xQueueGenericCreateStatic+0x5a>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <xQueueGenericCreateStatic+0x5c>
 800a776:	2300      	movs	r3, #0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <xQueueGenericCreateStatic+0x78>
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	b672      	cpsid	i
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	b662      	cpsie	i
 800a790:	623b      	str	r3, [r7, #32]
 800a792:	e7fe      	b.n	800a792 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <xQueueGenericCreateStatic+0x84>
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <xQueueGenericCreateStatic+0x88>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e000      	b.n	800a7a6 <xQueueGenericCreateStatic+0x8a>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10b      	bne.n	800a7c2 <xQueueGenericCreateStatic+0xa6>
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	b672      	cpsid	i
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	b662      	cpsie	i
 800a7be:	61fb      	str	r3, [r7, #28]
 800a7c0:	e7fe      	b.n	800a7c0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7c2:	2348      	movs	r3, #72	; 0x48
 800a7c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b48      	cmp	r3, #72	; 0x48
 800a7ca:	d00b      	beq.n	800a7e4 <xQueueGenericCreateStatic+0xc8>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	b672      	cpsid	i
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	b662      	cpsie	i
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00d      	beq.n	800a80c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	4613      	mov	r3, r2
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	68b9      	ldr	r1, [r7, #8]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f846 	bl	800a898 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a80e:	4618      	mov	r0, r3
 800a810:	3730      	adds	r7, #48	; 0x30
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a816:	b580      	push	{r7, lr}
 800a818:	b08a      	sub	sp, #40	; 0x28
 800a81a:	af02      	add	r7, sp, #8
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	4613      	mov	r3, r2
 800a822:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <xQueueGenericCreate+0x2c>
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	b672      	cpsid	i
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	b662      	cpsie	i
 800a83e:	613b      	str	r3, [r7, #16]
 800a840:	e7fe      	b.n	800a840 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e004      	b.n	800a858 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	fb02 f303 	mul.w	r3, r2, r3
 800a856:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3348      	adds	r3, #72	; 0x48
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fbbb 	bl	800bfd8 <pvPortMalloc>
 800a862:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d011      	beq.n	800a88e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	3348      	adds	r3, #72	; 0x48
 800a872:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a87c:	79fa      	ldrb	r2, [r7, #7]
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	4613      	mov	r3, r2
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f805 	bl	800a898 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a88e:	69bb      	ldr	r3, [r7, #24]
	}
 800a890:	4618      	mov	r0, r3
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d103      	bne.n	800a8b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	69ba      	ldr	r2, [r7, #24]
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	e002      	b.n	800a8ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	69b8      	ldr	r0, [r7, #24]
 800a8ca:	f7ff febd 	bl	800a648 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00e      	beq.n	800a902 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f837 	bl	800a970 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	4603      	mov	r3, r0
 800a912:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a914:	2301      	movs	r3, #1
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	2300      	movs	r3, #0
 800a91a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	461a      	mov	r2, r3
 800a920:	6939      	ldr	r1, [r7, #16]
 800a922:	6978      	ldr	r0, [r7, #20]
 800a924:	f7ff ff77 	bl	800a816 <xQueueGenericCreate>
 800a928:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff ffd3 	bl	800a8d6 <prvInitialiseMutex>

		return xNewQueue;
 800a930:	68fb      	ldr	r3, [r7, #12]
	}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af02      	add	r7, sp, #8
 800a940:	4603      	mov	r3, r0
 800a942:	6039      	str	r1, [r7, #0]
 800a944:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a946:	2301      	movs	r3, #1
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	2300      	movs	r3, #0
 800a94c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2200      	movs	r2, #0
 800a956:	6939      	ldr	r1, [r7, #16]
 800a958:	6978      	ldr	r0, [r7, #20]
 800a95a:	f7ff fedf 	bl	800a71c <xQueueGenericCreateStatic>
 800a95e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff ffb8 	bl	800a8d6 <prvInitialiseMutex>

		return xNewQueue;
 800a966:	68fb      	ldr	r3, [r7, #12]
	}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08e      	sub	sp, #56	; 0x38
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a97e:	2300      	movs	r3, #0
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <xQueueGenericSend+0x34>
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	b672      	cpsid	i
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	b662      	cpsie	i
 800a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9a2:	e7fe      	b.n	800a9a2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <xQueueGenericSend+0x42>
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <xQueueGenericSend+0x46>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <xQueueGenericSend+0x48>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <xQueueGenericSend+0x64>
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	b672      	cpsid	i
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	b662      	cpsie	i
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9d2:	e7fe      	b.n	800a9d2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d103      	bne.n	800a9e2 <xQueueGenericSend+0x72>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <xQueueGenericSend+0x76>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <xQueueGenericSend+0x78>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10b      	bne.n	800aa04 <xQueueGenericSend+0x94>
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	b672      	cpsid	i
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	b662      	cpsie	i
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	e7fe      	b.n	800aa02 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa04:	f000 fff0 	bl	800b9e8 <xTaskGetSchedulerState>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <xQueueGenericSend+0xa4>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <xQueueGenericSend+0xa8>
 800aa14:	2301      	movs	r3, #1
 800aa16:	e000      	b.n	800aa1a <xQueueGenericSend+0xaa>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <xQueueGenericSend+0xc6>
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	b672      	cpsid	i
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	b662      	cpsie	i
 800aa32:	61fb      	str	r3, [r7, #28]
 800aa34:	e7fe      	b.n	800aa34 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa36:	f001 f9ef 	bl	800be18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d302      	bcc.n	800aa4c <xQueueGenericSend+0xdc>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d129      	bne.n	800aaa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa52:	f000 f88f 	bl	800ab74 <prvCopyDataToQueue>
 800aa56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d010      	beq.n	800aa82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	3324      	adds	r3, #36	; 0x24
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 fe01 	bl	800b66c <xTaskRemoveFromEventList>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d013      	beq.n	800aa98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa70:	4b3f      	ldr	r3, [pc, #252]	; (800ab70 <xQueueGenericSend+0x200>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	e00a      	b.n	800aa98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa88:	4b39      	ldr	r3, [pc, #228]	; (800ab70 <xQueueGenericSend+0x200>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa98:	f001 f9f0 	bl	800be7c <vPortExitCritical>
				return pdPASS;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e063      	b.n	800ab68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d103      	bne.n	800aaae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa6:	f001 f9e9 	bl	800be7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e05c      	b.n	800ab68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d106      	bne.n	800aac2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fe3b 	bl	800b734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aabe:	2301      	movs	r3, #1
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aac2:	f001 f9db 	bl	800be7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac6:	f000 fbd9 	bl	800b27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaca:	f001 f9a5 	bl	800be18 <vPortEnterCritical>
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad4:	b25b      	sxtb	r3, r3
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d103      	bne.n	800aae4 <xQueueGenericSend+0x174>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaea:	b25b      	sxtb	r3, r3
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf0:	d103      	bne.n	800aafa <xQueueGenericSend+0x18a>
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aafa:	f001 f9bf 	bl	800be7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aafe:	1d3a      	adds	r2, r7, #4
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fe2a 	bl	800b760 <xTaskCheckForTimeOut>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d124      	bne.n	800ab5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab14:	f000 f8ea 	bl	800acec <prvIsQueueFull>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d018      	beq.n	800ab50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	3310      	adds	r3, #16
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4611      	mov	r1, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fd7a 	bl	800b620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab2e:	f000 f88b 	bl	800ac48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab32:	f000 fbb1 	bl	800b298 <xTaskResumeAll>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f47f af7c 	bne.w	800aa36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <xQueueGenericSend+0x200>)
 800ab40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	e772      	b.n	800aa36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab52:	f000 f879 	bl	800ac48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab56:	f000 fb9f 	bl	800b298 <xTaskResumeAll>
 800ab5a:	e76c      	b.n	800aa36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab5e:	f000 f873 	bl	800ac48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab62:	f000 fb99 	bl	800b298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3738      	adds	r7, #56	; 0x38
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10d      	bne.n	800abae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d14d      	bne.n	800ac36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 ff40 	bl	800ba24 <xTaskPriorityDisinherit>
 800aba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	609a      	str	r2, [r3, #8]
 800abac:	e043      	b.n	800ac36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d119      	bne.n	800abe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6858      	ldr	r0, [r3, #4]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbc:	461a      	mov	r2, r3
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	f001 fc0e 	bl	800c3e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	441a      	add	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d32b      	bcc.n	800ac36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	605a      	str	r2, [r3, #4]
 800abe6:	e026      	b.n	800ac36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68d8      	ldr	r0, [r3, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	461a      	mov	r2, r3
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	f001 fbf4 	bl	800c3e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	425b      	negs	r3, r3
 800ac02:	441a      	add	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d207      	bcs.n	800ac24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	425b      	negs	r3, r3
 800ac1e:	441a      	add	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d105      	bne.n	800ac36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac3e:	697b      	ldr	r3, [r7, #20]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac50:	f001 f8e2 	bl	800be18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac5c:	e011      	b.n	800ac82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d012      	beq.n	800ac8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3324      	adds	r3, #36	; 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fcfe 	bl	800b66c <xTaskRemoveFromEventList>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac76:	f000 fdd7 	bl	800b828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dce9      	bgt.n	800ac5e <prvUnlockQueue+0x16>
 800ac8a:	e000      	b.n	800ac8e <prvUnlockQueue+0x46>
					break;
 800ac8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	22ff      	movs	r2, #255	; 0xff
 800ac92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac96:	f001 f8f1 	bl	800be7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac9a:	f001 f8bd 	bl	800be18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aca6:	e011      	b.n	800accc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d012      	beq.n	800acd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3310      	adds	r3, #16
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fcd9 	bl	800b66c <xTaskRemoveFromEventList>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acc0:	f000 fdb2 	bl	800b828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800accc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	dce9      	bgt.n	800aca8 <prvUnlockQueue+0x60>
 800acd4:	e000      	b.n	800acd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	22ff      	movs	r2, #255	; 0xff
 800acdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ace0:	f001 f8cc 	bl	800be7c <vPortExitCritical>
}
 800ace4:	bf00      	nop
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf4:	f001 f890 	bl	800be18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d102      	bne.n	800ad0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad04:	2301      	movs	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	e001      	b.n	800ad0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad0e:	f001 f8b5 	bl	800be7c <vPortExitCritical>

	return xReturn;
 800ad12:	68fb      	ldr	r3, [r7, #12]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08e      	sub	sp, #56	; 0x38
 800ad20:	af04      	add	r7, sp, #16
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <xTaskCreateStatic+0x2c>
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	b672      	cpsid	i
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	b662      	cpsie	i
 800ad44:	623b      	str	r3, [r7, #32]
 800ad46:	e7fe      	b.n	800ad46 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10b      	bne.n	800ad66 <xTaskCreateStatic+0x4a>
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	b672      	cpsid	i
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	b662      	cpsie	i
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e7fe      	b.n	800ad64 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad66:	2354      	movs	r3, #84	; 0x54
 800ad68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b54      	cmp	r3, #84	; 0x54
 800ad6e:	d00b      	beq.n	800ad88 <xTaskCreateStatic+0x6c>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	b672      	cpsid	i
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	b662      	cpsie	i
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	e7fe      	b.n	800ad86 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01e      	beq.n	800adce <xTaskCreateStatic+0xb2>
 800ad90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01b      	beq.n	800adce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ada8:	2300      	movs	r3, #0
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	9302      	str	r3, [sp, #8]
 800adb0:	f107 0314 	add.w	r3, r7, #20
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 f850 	bl	800ae66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc8:	f000 f8d6 	bl	800af78 <prvAddNewTaskToReadyList>
 800adcc:	e001      	b.n	800add2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800add2:	697b      	ldr	r3, [r7, #20]
	}
 800add4:	4618      	mov	r0, r3
 800add6:	3728      	adds	r7, #40	; 0x28
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08c      	sub	sp, #48	; 0x30
 800ade0:	af04      	add	r7, sp, #16
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	4613      	mov	r3, r2
 800adea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 f8f1 	bl	800bfd8 <pvPortMalloc>
 800adf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00e      	beq.n	800ae1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adfe:	2054      	movs	r0, #84	; 0x54
 800ae00:	f001 f8ea 	bl	800bfd8 <pvPortMalloc>
 800ae04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	631a      	str	r2, [r3, #48]	; 0x30
 800ae12:	e005      	b.n	800ae20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae14:	6978      	ldr	r0, [r7, #20]
 800ae16:	f001 f9a7 	bl	800c168 <vPortFree>
 800ae1a:	e001      	b.n	800ae20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d017      	beq.n	800ae56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	2300      	movs	r3, #0
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f000 f80e 	bl	800ae66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae4a:	69f8      	ldr	r0, [r7, #28]
 800ae4c:	f000 f894 	bl	800af78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae50:	2301      	movs	r3, #1
 800ae52:	61bb      	str	r3, [r7, #24]
 800ae54:	e002      	b.n	800ae5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae56:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
 800ae72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae78:	6879      	ldr	r1, [r7, #4]
 800ae7a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ae7e:	440b      	add	r3, r1
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f023 0307 	bic.w	r3, r3, #7
 800ae8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	f003 0307 	and.w	r3, r3, #7
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <prvInitialiseNewTask+0x4a>
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	b672      	cpsid	i
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	b662      	cpsie	i
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e7fe      	b.n	800aeae <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01f      	beq.n	800aef6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	e012      	b.n	800aee2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	4413      	add	r3, r2
 800aec2:	7819      	ldrb	r1, [r3, #0]
 800aec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	3334      	adds	r3, #52	; 0x34
 800aecc:	460a      	mov	r2, r1
 800aece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	4413      	add	r3, r2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	3301      	adds	r3, #1
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	2b0f      	cmp	r3, #15
 800aee6:	d9e9      	bls.n	800aebc <prvInitialiseNewTask+0x56>
 800aee8:	e000      	b.n	800aeec <prvInitialiseNewTask+0x86>
			{
				break;
 800aeea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aef4:	e003      	b.n	800aefe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	2b06      	cmp	r3, #6
 800af02:	d901      	bls.n	800af08 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af04:	2306      	movs	r3, #6
 800af06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	2200      	movs	r2, #0
 800af18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	3304      	adds	r3, #4
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fafd 	bl	800a51e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	3318      	adds	r3, #24
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff faf8 	bl	800a51e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	f1c3 0207 	rsb	r2, r3, #7
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2200      	movs	r2, #0
 800af48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	68f9      	ldr	r1, [r7, #12]
 800af56:	69b8      	ldr	r0, [r7, #24]
 800af58:	f000 fe52 	bl	800bc00 <pxPortInitialiseStack>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6e:	bf00      	nop
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af80:	f000 ff4a 	bl	800be18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af84:	4b2a      	ldr	r3, [pc, #168]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3301      	adds	r3, #1
 800af8a:	4a29      	ldr	r2, [pc, #164]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af8e:	4b29      	ldr	r3, [pc, #164]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af96:	4a27      	ldr	r2, [pc, #156]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af9c:	4b24      	ldr	r3, [pc, #144]	; (800b030 <prvAddNewTaskToReadyList+0xb8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d110      	bne.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afa4:	f000 fc64 	bl	800b870 <prvInitialiseTaskLists>
 800afa8:	e00d      	b.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afaa:	4b23      	ldr	r3, [pc, #140]	; (800b038 <prvAddNewTaskToReadyList+0xc0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afb2:	4b20      	ldr	r3, [pc, #128]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d802      	bhi.n	800afc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afc0:	4a1c      	ldr	r2, [pc, #112]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afc6:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <prvAddNewTaskToReadyList+0xc4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	4a1b      	ldr	r2, [pc, #108]	; (800b03c <prvAddNewTaskToReadyList+0xc4>)
 800afce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	2201      	movs	r2, #1
 800afd6:	409a      	lsls	r2, r3
 800afd8:	4b19      	ldr	r3, [pc, #100]	; (800b040 <prvAddNewTaskToReadyList+0xc8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4313      	orrs	r3, r2
 800afde:	4a18      	ldr	r2, [pc, #96]	; (800b040 <prvAddNewTaskToReadyList+0xc8>)
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4a15      	ldr	r2, [pc, #84]	; (800b044 <prvAddNewTaskToReadyList+0xcc>)
 800aff0:	441a      	add	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f7ff fa9d 	bl	800a538 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800affe:	f000 ff3d 	bl	800be7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b002:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <prvAddNewTaskToReadyList+0xc0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00e      	beq.n	800b028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b00a:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <prvAddNewTaskToReadyList+0xbc>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	429a      	cmp	r2, r3
 800b016:	d207      	bcs.n	800b028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b018:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <prvAddNewTaskToReadyList+0xd0>)
 800b01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	200005d0 	.word	0x200005d0
 800b034:	200004d0 	.word	0x200004d0
 800b038:	200005dc 	.word	0x200005dc
 800b03c:	200005ec 	.word	0x200005ec
 800b040:	200005d8 	.word	0x200005d8
 800b044:	200004d4 	.word	0x200004d4
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08a      	sub	sp, #40	; 0x28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b056:	2300      	movs	r3, #0
 800b058:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10b      	bne.n	800b078 <vTaskDelayUntil+0x2c>
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	b672      	cpsid	i
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	b662      	cpsie	i
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e7fe      	b.n	800b076 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10b      	bne.n	800b096 <vTaskDelayUntil+0x4a>
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	b672      	cpsid	i
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	b662      	cpsie	i
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	e7fe      	b.n	800b094 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800b096:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <vTaskDelayUntil+0xf4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <vTaskDelayUntil+0x6a>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	b672      	cpsid	i
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	b662      	cpsie	i
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	e7fe      	b.n	800b0b4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800b0b6:	f000 f8e1 	bl	800b27c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b0ba:	4b22      	ldr	r3, [pc, #136]	; (800b144 <vTaskDelayUntil+0xf8>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6a3a      	ldr	r2, [r7, #32]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d20b      	bcs.n	800b0ec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d211      	bcs.n	800b102 <vTaskDelayUntil+0xb6>
 800b0de:	69fa      	ldr	r2, [r7, #28]
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d90d      	bls.n	800b102 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ea:	e00a      	b.n	800b102 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	69fa      	ldr	r2, [r7, #28]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d303      	bcc.n	800b0fe <vTaskDelayUntil+0xb2>
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d901      	bls.n	800b102 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b0fe:	2301      	movs	r3, #1
 800b100:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d006      	beq.n	800b11c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fd0c 	bl	800bb34 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b11c:	f000 f8bc 	bl	800b298 <xTaskResumeAll>
 800b120:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d107      	bne.n	800b138 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b128:	4b07      	ldr	r3, [pc, #28]	; (800b148 <vTaskDelayUntil+0xfc>)
 800b12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b138:	bf00      	nop
 800b13a:	3728      	adds	r7, #40	; 0x28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	200005f8 	.word	0x200005f8
 800b144:	200005d4 	.word	0x200005d4
 800b148:	e000ed04 	.word	0xe000ed04

0800b14c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d018      	beq.n	800b190 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b15e:	4b14      	ldr	r3, [pc, #80]	; (800b1b0 <vTaskDelay+0x64>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00b      	beq.n	800b17e <vTaskDelay+0x32>
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	b672      	cpsid	i
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	b662      	cpsie	i
 800b17a:	60bb      	str	r3, [r7, #8]
 800b17c:	e7fe      	b.n	800b17c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b17e:	f000 f87d 	bl	800b27c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b182:	2100      	movs	r1, #0
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fcd5 	bl	800bb34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b18a:	f000 f885 	bl	800b298 <xTaskResumeAll>
 800b18e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d107      	bne.n	800b1a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b196:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <vTaskDelay+0x68>)
 800b198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	200005f8 	.word	0x200005f8
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	; 0x28
 800b1bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	1d39      	adds	r1, r7, #4
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f5 f99e 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	9202      	str	r2, [sp, #8]
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	460a      	mov	r2, r1
 800b1e6:	491f      	ldr	r1, [pc, #124]	; (800b264 <vTaskStartScheduler+0xac>)
 800b1e8:	481f      	ldr	r0, [pc, #124]	; (800b268 <vTaskStartScheduler+0xb0>)
 800b1ea:	f7ff fd97 	bl	800ad1c <xTaskCreateStatic>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4b1e      	ldr	r3, [pc, #120]	; (800b26c <vTaskStartScheduler+0xb4>)
 800b1f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1f4:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <vTaskStartScheduler+0xb4>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e001      	b.n	800b206 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d117      	bne.n	800b23c <vTaskStartScheduler+0x84>
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	b672      	cpsid	i
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	b662      	cpsie	i
 800b220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <vTaskStartScheduler+0xb8>)
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b22a:	4b12      	ldr	r3, [pc, #72]	; (800b274 <vTaskStartScheduler+0xbc>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b230:	4b11      	ldr	r3, [pc, #68]	; (800b278 <vTaskStartScheduler+0xc0>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b236:	f000 fd73 	bl	800bd20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b23a:	e00f      	b.n	800b25c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b242:	d10b      	bne.n	800b25c <vTaskStartScheduler+0xa4>
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	b672      	cpsid	i
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	b662      	cpsie	i
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e7fe      	b.n	800b25a <vTaskStartScheduler+0xa2>
}
 800b25c:	bf00      	nop
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	0800c494 	.word	0x0800c494
 800b268:	0800b841 	.word	0x0800b841
 800b26c:	200005f4 	.word	0x200005f4
 800b270:	200005f0 	.word	0x200005f0
 800b274:	200005dc 	.word	0x200005dc
 800b278:	200005d4 	.word	0x200005d4

0800b27c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b280:	4b04      	ldr	r3, [pc, #16]	; (800b294 <vTaskSuspendAll+0x18>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3301      	adds	r3, #1
 800b286:	4a03      	ldr	r2, [pc, #12]	; (800b294 <vTaskSuspendAll+0x18>)
 800b288:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b28a:	bf00      	nop
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	200005f8 	.word	0x200005f8

0800b298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2a6:	4b42      	ldr	r3, [pc, #264]	; (800b3b0 <xTaskResumeAll+0x118>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <xTaskResumeAll+0x2e>
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	b672      	cpsid	i
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	b662      	cpsie	i
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	e7fe      	b.n	800b2c4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2c6:	f000 fda7 	bl	800be18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2ca:	4b39      	ldr	r3, [pc, #228]	; (800b3b0 <xTaskResumeAll+0x118>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	4a37      	ldr	r2, [pc, #220]	; (800b3b0 <xTaskResumeAll+0x118>)
 800b2d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d4:	4b36      	ldr	r3, [pc, #216]	; (800b3b0 <xTaskResumeAll+0x118>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d161      	bne.n	800b3a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2dc:	4b35      	ldr	r3, [pc, #212]	; (800b3b4 <xTaskResumeAll+0x11c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d05d      	beq.n	800b3a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2e4:	e02e      	b.n	800b344 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e6:	4b34      	ldr	r3, [pc, #208]	; (800b3b8 <xTaskResumeAll+0x120>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3318      	adds	r3, #24
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff f97d 	bl	800a5f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff f978 	bl	800a5f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	2201      	movs	r2, #1
 800b308:	409a      	lsls	r2, r3
 800b30a:	4b2c      	ldr	r3, [pc, #176]	; (800b3bc <xTaskResumeAll+0x124>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4313      	orrs	r3, r2
 800b310:	4a2a      	ldr	r2, [pc, #168]	; (800b3bc <xTaskResumeAll+0x124>)
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4a27      	ldr	r2, [pc, #156]	; (800b3c0 <xTaskResumeAll+0x128>)
 800b322:	441a      	add	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3304      	adds	r3, #4
 800b328:	4619      	mov	r1, r3
 800b32a:	4610      	mov	r0, r2
 800b32c:	f7ff f904 	bl	800a538 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4b23      	ldr	r3, [pc, #140]	; (800b3c4 <xTaskResumeAll+0x12c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d302      	bcc.n	800b344 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b33e:	4b22      	ldr	r3, [pc, #136]	; (800b3c8 <xTaskResumeAll+0x130>)
 800b340:	2201      	movs	r2, #1
 800b342:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b344:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <xTaskResumeAll+0x120>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1cc      	bne.n	800b2e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b352:	f000 fb29 	bl	800b9a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b356:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <xTaskResumeAll+0x134>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d010      	beq.n	800b384 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b362:	f000 f847 	bl	800b3f4 <xTaskIncrementTick>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b36c:	4b16      	ldr	r3, [pc, #88]	; (800b3c8 <xTaskResumeAll+0x130>)
 800b36e:	2201      	movs	r2, #1
 800b370:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3b01      	subs	r3, #1
 800b376:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1f1      	bne.n	800b362 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b37e:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <xTaskResumeAll+0x134>)
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b384:	4b10      	ldr	r3, [pc, #64]	; (800b3c8 <xTaskResumeAll+0x130>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d009      	beq.n	800b3a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b38c:	2301      	movs	r3, #1
 800b38e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b390:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <xTaskResumeAll+0x138>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3a0:	f000 fd6c 	bl	800be7c <vPortExitCritical>

	return xAlreadyYielded;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200005f8 	.word	0x200005f8
 800b3b4:	200005d0 	.word	0x200005d0
 800b3b8:	20000590 	.word	0x20000590
 800b3bc:	200005d8 	.word	0x200005d8
 800b3c0:	200004d4 	.word	0x200004d4
 800b3c4:	200004d0 	.word	0x200004d0
 800b3c8:	200005e4 	.word	0x200005e4
 800b3cc:	200005e0 	.word	0x200005e0
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <xTaskGetTickCount+0x1c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3e0:	687b      	ldr	r3, [r7, #4]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	200005d4 	.word	0x200005d4

0800b3f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3fe:	4b4f      	ldr	r3, [pc, #316]	; (800b53c <xTaskIncrementTick+0x148>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f040 8089 	bne.w	800b51a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b408:	4b4d      	ldr	r3, [pc, #308]	; (800b540 <xTaskIncrementTick+0x14c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b410:	4a4b      	ldr	r2, [pc, #300]	; (800b540 <xTaskIncrementTick+0x14c>)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d121      	bne.n	800b460 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b41c:	4b49      	ldr	r3, [pc, #292]	; (800b544 <xTaskIncrementTick+0x150>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <xTaskIncrementTick+0x4a>
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	b672      	cpsid	i
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	b662      	cpsie	i
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	e7fe      	b.n	800b43c <xTaskIncrementTick+0x48>
 800b43e:	4b41      	ldr	r3, [pc, #260]	; (800b544 <xTaskIncrementTick+0x150>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	4b40      	ldr	r3, [pc, #256]	; (800b548 <xTaskIncrementTick+0x154>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a3e      	ldr	r2, [pc, #248]	; (800b544 <xTaskIncrementTick+0x150>)
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	4a3e      	ldr	r2, [pc, #248]	; (800b548 <xTaskIncrementTick+0x154>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	4b3e      	ldr	r3, [pc, #248]	; (800b54c <xTaskIncrementTick+0x158>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	4a3c      	ldr	r2, [pc, #240]	; (800b54c <xTaskIncrementTick+0x158>)
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	f000 faa4 	bl	800b9a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b460:	4b3b      	ldr	r3, [pc, #236]	; (800b550 <xTaskIncrementTick+0x15c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	d348      	bcc.n	800b4fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b46a:	4b36      	ldr	r3, [pc, #216]	; (800b544 <xTaskIncrementTick+0x150>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b474:	4b36      	ldr	r3, [pc, #216]	; (800b550 <xTaskIncrementTick+0x15c>)
 800b476:	f04f 32ff 	mov.w	r2, #4294967295
 800b47a:	601a      	str	r2, [r3, #0]
					break;
 800b47c:	e03e      	b.n	800b4fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47e:	4b31      	ldr	r3, [pc, #196]	; (800b544 <xTaskIncrementTick+0x150>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	429a      	cmp	r2, r3
 800b494:	d203      	bcs.n	800b49e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b496:	4a2e      	ldr	r2, [pc, #184]	; (800b550 <xTaskIncrementTick+0x15c>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b49c:	e02e      	b.n	800b4fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff f8a5 	bl	800a5f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3318      	adds	r3, #24
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7ff f89c 	bl	800a5f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	2201      	movs	r2, #1
 800b4c0:	409a      	lsls	r2, r3
 800b4c2:	4b24      	ldr	r3, [pc, #144]	; (800b554 <xTaskIncrementTick+0x160>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	4a22      	ldr	r2, [pc, #136]	; (800b554 <xTaskIncrementTick+0x160>)
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a1f      	ldr	r2, [pc, #124]	; (800b558 <xTaskIncrementTick+0x164>)
 800b4da:	441a      	add	r2, r3
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f7ff f828 	bl	800a538 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	4b1b      	ldr	r3, [pc, #108]	; (800b55c <xTaskIncrementTick+0x168>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d3b9      	bcc.n	800b46a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4fa:	e7b6      	b.n	800b46a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4fc:	4b17      	ldr	r3, [pc, #92]	; (800b55c <xTaskIncrementTick+0x168>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b502:	4915      	ldr	r1, [pc, #84]	; (800b558 <xTaskIncrementTick+0x164>)
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	440b      	add	r3, r1
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d907      	bls.n	800b524 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800b514:	2301      	movs	r3, #1
 800b516:	617b      	str	r3, [r7, #20]
 800b518:	e004      	b.n	800b524 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b51a:	4b11      	ldr	r3, [pc, #68]	; (800b560 <xTaskIncrementTick+0x16c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	4a0f      	ldr	r2, [pc, #60]	; (800b560 <xTaskIncrementTick+0x16c>)
 800b522:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b524:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <xTaskIncrementTick+0x170>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b530:	697b      	ldr	r3, [r7, #20]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200005f8 	.word	0x200005f8
 800b540:	200005d4 	.word	0x200005d4
 800b544:	20000588 	.word	0x20000588
 800b548:	2000058c 	.word	0x2000058c
 800b54c:	200005e8 	.word	0x200005e8
 800b550:	200005f0 	.word	0x200005f0
 800b554:	200005d8 	.word	0x200005d8
 800b558:	200004d4 	.word	0x200004d4
 800b55c:	200004d0 	.word	0x200004d0
 800b560:	200005e0 	.word	0x200005e0
 800b564:	200005e4 	.word	0x200005e4

0800b568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b56e:	4b27      	ldr	r3, [pc, #156]	; (800b60c <vTaskSwitchContext+0xa4>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b576:	4b26      	ldr	r3, [pc, #152]	; (800b610 <vTaskSwitchContext+0xa8>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b57c:	e040      	b.n	800b600 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b57e:	4b24      	ldr	r3, [pc, #144]	; (800b610 <vTaskSwitchContext+0xa8>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b584:	4b23      	ldr	r3, [pc, #140]	; (800b614 <vTaskSwitchContext+0xac>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	fab3 f383 	clz	r3, r3
 800b590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b592:	7afb      	ldrb	r3, [r7, #11]
 800b594:	f1c3 031f 	rsb	r3, r3, #31
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	491f      	ldr	r1, [pc, #124]	; (800b618 <vTaskSwitchContext+0xb0>)
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10b      	bne.n	800b5c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	b672      	cpsid	i
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	b662      	cpsie	i
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	e7fe      	b.n	800b5c4 <vTaskSwitchContext+0x5c>
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4a11      	ldr	r2, [pc, #68]	; (800b618 <vTaskSwitchContext+0xb0>)
 800b5d2:	4413      	add	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	605a      	str	r2, [r3, #4]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d104      	bne.n	800b5f6 <vTaskSwitchContext+0x8e>
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	605a      	str	r2, [r3, #4]
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	4a07      	ldr	r2, [pc, #28]	; (800b61c <vTaskSwitchContext+0xb4>)
 800b5fe:	6013      	str	r3, [r2, #0]
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	200005f8 	.word	0x200005f8
 800b610:	200005e4 	.word	0x200005e4
 800b614:	200005d8 	.word	0x200005d8
 800b618:	200004d4 	.word	0x200004d4
 800b61c:	200004d0 	.word	0x200004d0

0800b620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10b      	bne.n	800b648 <vTaskPlaceOnEventList+0x28>
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	b672      	cpsid	i
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	b662      	cpsie	i
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e7fe      	b.n	800b646 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <vTaskPlaceOnEventList+0x48>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3318      	adds	r3, #24
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7fe ff95 	bl	800a580 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b656:	2101      	movs	r1, #1
 800b658:	6838      	ldr	r0, [r7, #0]
 800b65a:	f000 fa6b 	bl	800bb34 <prvAddCurrentTaskToDelayedList>
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	200004d0 	.word	0x200004d0

0800b66c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10b      	bne.n	800b69a <xTaskRemoveFromEventList+0x2e>
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	b672      	cpsid	i
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	b662      	cpsie	i
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	e7fe      	b.n	800b698 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3318      	adds	r3, #24
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe ffa7 	bl	800a5f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a4:	4b1d      	ldr	r3, [pc, #116]	; (800b71c <xTaskRemoveFromEventList+0xb0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d11c      	bne.n	800b6e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe ff9e 	bl	800a5f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	409a      	lsls	r2, r3
 800b6be:	4b18      	ldr	r3, [pc, #96]	; (800b720 <xTaskRemoveFromEventList+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	4a16      	ldr	r2, [pc, #88]	; (800b720 <xTaskRemoveFromEventList+0xb4>)
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4a13      	ldr	r2, [pc, #76]	; (800b724 <xTaskRemoveFromEventList+0xb8>)
 800b6d6:	441a      	add	r2, r3
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fe ff2a 	bl	800a538 <vListInsertEnd>
 800b6e4:	e005      	b.n	800b6f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	3318      	adds	r3, #24
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	480e      	ldr	r0, [pc, #56]	; (800b728 <xTaskRemoveFromEventList+0xbc>)
 800b6ee:	f7fe ff23 	bl	800a538 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <xTaskRemoveFromEventList+0xc0>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d905      	bls.n	800b70c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b700:	2301      	movs	r3, #1
 800b702:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b704:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <xTaskRemoveFromEventList+0xc4>)
 800b706:	2201      	movs	r2, #1
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	e001      	b.n	800b710 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b710:	697b      	ldr	r3, [r7, #20]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3718      	adds	r7, #24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	200005f8 	.word	0x200005f8
 800b720:	200005d8 	.word	0x200005d8
 800b724:	200004d4 	.word	0x200004d4
 800b728:	20000590 	.word	0x20000590
 800b72c:	200004d0 	.word	0x200004d0
 800b730:	200005e4 	.word	0x200005e4

0800b734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b73c:	4b06      	ldr	r3, [pc, #24]	; (800b758 <vTaskInternalSetTimeOutState+0x24>)
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <vTaskInternalSetTimeOutState+0x28>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	605a      	str	r2, [r3, #4]
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	200005e8 	.word	0x200005e8
 800b75c:	200005d4 	.word	0x200005d4

0800b760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10b      	bne.n	800b788 <xTaskCheckForTimeOut+0x28>
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	b672      	cpsid	i
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	b662      	cpsie	i
 800b784:	613b      	str	r3, [r7, #16]
 800b786:	e7fe      	b.n	800b786 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10b      	bne.n	800b7a6 <xTaskCheckForTimeOut+0x46>
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	b672      	cpsid	i
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	b662      	cpsie	i
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e7fe      	b.n	800b7a4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b7a6:	f000 fb37 	bl	800be18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7aa:	4b1d      	ldr	r3, [pc, #116]	; (800b820 <xTaskCheckForTimeOut+0xc0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c2:	d102      	bne.n	800b7ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	e023      	b.n	800b812 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <xTaskCheckForTimeOut+0xc4>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d007      	beq.n	800b7e6 <xTaskCheckForTimeOut+0x86>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d302      	bcc.n	800b7e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	e015      	b.n	800b812 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d20b      	bcs.n	800b808 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff ff99 	bl	800b734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b802:	2300      	movs	r3, #0
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	e004      	b.n	800b812 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b812:	f000 fb33 	bl	800be7c <vPortExitCritical>

	return xReturn;
 800b816:	69fb      	ldr	r3, [r7, #28]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3720      	adds	r7, #32
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	200005d4 	.word	0x200005d4
 800b824:	200005e8 	.word	0x200005e8

0800b828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b82c:	4b03      	ldr	r3, [pc, #12]	; (800b83c <vTaskMissedYield+0x14>)
 800b82e:	2201      	movs	r2, #1
 800b830:	601a      	str	r2, [r3, #0]
}
 800b832:	bf00      	nop
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	200005e4 	.word	0x200005e4

0800b840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b848:	f000 f852 	bl	800b8f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <prvIdleTask+0x28>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d9f9      	bls.n	800b848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <prvIdleTask+0x2c>)
 800b856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b864:	e7f0      	b.n	800b848 <prvIdleTask+0x8>
 800b866:	bf00      	nop
 800b868:	200004d4 	.word	0x200004d4
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b876:	2300      	movs	r3, #0
 800b878:	607b      	str	r3, [r7, #4]
 800b87a:	e00c      	b.n	800b896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4a12      	ldr	r2, [pc, #72]	; (800b8d0 <prvInitialiseTaskLists+0x60>)
 800b888:	4413      	add	r3, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fe27 	bl	800a4de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3301      	adds	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b06      	cmp	r3, #6
 800b89a:	d9ef      	bls.n	800b87c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b89c:	480d      	ldr	r0, [pc, #52]	; (800b8d4 <prvInitialiseTaskLists+0x64>)
 800b89e:	f7fe fe1e 	bl	800a4de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8a2:	480d      	ldr	r0, [pc, #52]	; (800b8d8 <prvInitialiseTaskLists+0x68>)
 800b8a4:	f7fe fe1b 	bl	800a4de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8a8:	480c      	ldr	r0, [pc, #48]	; (800b8dc <prvInitialiseTaskLists+0x6c>)
 800b8aa:	f7fe fe18 	bl	800a4de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8ae:	480c      	ldr	r0, [pc, #48]	; (800b8e0 <prvInitialiseTaskLists+0x70>)
 800b8b0:	f7fe fe15 	bl	800a4de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8b4:	480b      	ldr	r0, [pc, #44]	; (800b8e4 <prvInitialiseTaskLists+0x74>)
 800b8b6:	f7fe fe12 	bl	800a4de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <prvInitialiseTaskLists+0x78>)
 800b8bc:	4a05      	ldr	r2, [pc, #20]	; (800b8d4 <prvInitialiseTaskLists+0x64>)
 800b8be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <prvInitialiseTaskLists+0x7c>)
 800b8c2:	4a05      	ldr	r2, [pc, #20]	; (800b8d8 <prvInitialiseTaskLists+0x68>)
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200004d4 	.word	0x200004d4
 800b8d4:	20000560 	.word	0x20000560
 800b8d8:	20000574 	.word	0x20000574
 800b8dc:	20000590 	.word	0x20000590
 800b8e0:	200005a4 	.word	0x200005a4
 800b8e4:	200005bc 	.word	0x200005bc
 800b8e8:	20000588 	.word	0x20000588
 800b8ec:	2000058c 	.word	0x2000058c

0800b8f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8f6:	e019      	b.n	800b92c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8f8:	f000 fa8e 	bl	800be18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fc:	4b0f      	ldr	r3, [pc, #60]	; (800b93c <prvCheckTasksWaitingTermination+0x4c>)
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe fe72 	bl	800a5f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <prvCheckTasksWaitingTermination+0x50>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3b01      	subs	r3, #1
 800b914:	4a0a      	ldr	r2, [pc, #40]	; (800b940 <prvCheckTasksWaitingTermination+0x50>)
 800b916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <prvCheckTasksWaitingTermination+0x54>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	4a09      	ldr	r2, [pc, #36]	; (800b944 <prvCheckTasksWaitingTermination+0x54>)
 800b920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b922:	f000 faab 	bl	800be7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f80e 	bl	800b948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b92c:	4b05      	ldr	r3, [pc, #20]	; (800b944 <prvCheckTasksWaitingTermination+0x54>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1e1      	bne.n	800b8f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	200005a4 	.word	0x200005a4
 800b940:	200005d0 	.word	0x200005d0
 800b944:	200005b8 	.word	0x200005b8

0800b948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b956:	2b00      	cmp	r3, #0
 800b958:	d108      	bne.n	800b96c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fc02 	bl	800c168 <vPortFree>
				vPortFree( pxTCB );
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fbff 	bl	800c168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b96a:	e019      	b.n	800b9a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b972:	2b01      	cmp	r3, #1
 800b974:	d103      	bne.n	800b97e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fbf6 	bl	800c168 <vPortFree>
	}
 800b97c:	e010      	b.n	800b9a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b984:	2b02      	cmp	r3, #2
 800b986:	d00b      	beq.n	800b9a0 <prvDeleteTCB+0x58>
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	b672      	cpsid	i
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	b662      	cpsie	i
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	e7fe      	b.n	800b99e <prvDeleteTCB+0x56>
	}
 800b9a0:	bf00      	nop
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <prvResetNextTaskUnblockTime+0x38>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d104      	bne.n	800b9c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9c0:	e008      	b.n	800b9d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c2:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <prvResetNextTaskUnblockTime+0x38>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	4a04      	ldr	r2, [pc, #16]	; (800b9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b9d2:	6013      	str	r3, [r2, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	20000588 	.word	0x20000588
 800b9e4:	200005f0 	.word	0x200005f0

0800b9e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ba1c <xTaskGetSchedulerState+0x34>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d102      	bne.n	800b9fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	e008      	b.n	800ba0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fc:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <xTaskGetSchedulerState+0x38>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba04:	2302      	movs	r3, #2
 800ba06:	607b      	str	r3, [r7, #4]
 800ba08:	e001      	b.n	800ba0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba0e:	687b      	ldr	r3, [r7, #4]
	}
 800ba10:	4618      	mov	r0, r3
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	200005dc 	.word	0x200005dc
 800ba20:	200005f8 	.word	0x200005f8

0800ba24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba30:	2300      	movs	r3, #0
 800ba32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d070      	beq.n	800bb1c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba3a:	4b3b      	ldr	r3, [pc, #236]	; (800bb28 <xTaskPriorityDisinherit+0x104>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d00b      	beq.n	800ba5c <xTaskPriorityDisinherit+0x38>
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	b672      	cpsid	i
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	b662      	cpsie	i
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	e7fe      	b.n	800ba5a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10b      	bne.n	800ba7c <xTaskPriorityDisinherit+0x58>
 800ba64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba68:	b672      	cpsid	i
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	b662      	cpsie	i
 800ba78:	60bb      	str	r3, [r7, #8]
 800ba7a:	e7fe      	b.n	800ba7a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba80:	1e5a      	subs	r2, r3, #1
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d044      	beq.n	800bb1c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d140      	bne.n	800bb1c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe fda7 	bl	800a5f2 <uxListRemove>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d115      	bne.n	800bad6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baae:	491f      	ldr	r1, [pc, #124]	; (800bb2c <xTaskPriorityDisinherit+0x108>)
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	440b      	add	r3, r1
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10a      	bne.n	800bad6 <xTaskPriorityDisinherit+0xb2>
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac4:	2201      	movs	r2, #1
 800bac6:	fa02 f303 	lsl.w	r3, r2, r3
 800baca:	43da      	mvns	r2, r3
 800bacc:	4b18      	ldr	r3, [pc, #96]	; (800bb30 <xTaskPriorityDisinherit+0x10c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4013      	ands	r3, r2
 800bad2:	4a17      	ldr	r2, [pc, #92]	; (800bb30 <xTaskPriorityDisinherit+0x10c>)
 800bad4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	f1c3 0207 	rsb	r2, r3, #7
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	2201      	movs	r2, #1
 800baf0:	409a      	lsls	r2, r3
 800baf2:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <xTaskPriorityDisinherit+0x10c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	4a0d      	ldr	r2, [pc, #52]	; (800bb30 <xTaskPriorityDisinherit+0x10c>)
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <xTaskPriorityDisinherit+0x108>)
 800bb0a:	441a      	add	r2, r3
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4619      	mov	r1, r3
 800bb12:	4610      	mov	r0, r2
 800bb14:	f7fe fd10 	bl	800a538 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb1c:	697b      	ldr	r3, [r7, #20]
	}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	200004d0 	.word	0x200004d0
 800bb2c:	200004d4 	.word	0x200004d4
 800bb30:	200005d8 	.word	0x200005d8

0800bb34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb3e:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb44:	4b28      	ldr	r3, [pc, #160]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fd51 	bl	800a5f2 <uxListRemove>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb56:	4b24      	ldr	r3, [pc, #144]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb62:	43da      	mvns	r2, r3
 800bb64:	4b21      	ldr	r3, [pc, #132]	; (800bbec <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	4a20      	ldr	r2, [pc, #128]	; (800bbec <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb74:	d10a      	bne.n	800bb8c <prvAddCurrentTaskToDelayedList+0x58>
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d007      	beq.n	800bb8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7c:	4b1a      	ldr	r3, [pc, #104]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3304      	adds	r3, #4
 800bb82:	4619      	mov	r1, r3
 800bb84:	481a      	ldr	r0, [pc, #104]	; (800bbf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb86:	f7fe fcd7 	bl	800a538 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb8a:	e026      	b.n	800bbda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb94:	4b14      	ldr	r3, [pc, #80]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d209      	bcs.n	800bbb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bba4:	4b13      	ldr	r3, [pc, #76]	; (800bbf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3304      	adds	r3, #4
 800bbae:	4619      	mov	r1, r3
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	f7fe fce5 	bl	800a580 <vListInsert>
}
 800bbb6:	e010      	b.n	800bbda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fe fcdb 	bl	800a580 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d202      	bcs.n	800bbda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bbd4:	4a09      	ldr	r2, [pc, #36]	; (800bbfc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6013      	str	r3, [r2, #0]
}
 800bbda:	bf00      	nop
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	200005d4 	.word	0x200005d4
 800bbe8:	200004d0 	.word	0x200004d0
 800bbec:	200005d8 	.word	0x200005d8
 800bbf0:	200005bc 	.word	0x200005bc
 800bbf4:	2000058c 	.word	0x2000058c
 800bbf8:	20000588 	.word	0x20000588
 800bbfc:	200005f0 	.word	0x200005f0

0800bc00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3b04      	subs	r3, #4
 800bc10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3b04      	subs	r3, #4
 800bc1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f023 0201 	bic.w	r2, r3, #1
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	3b04      	subs	r3, #4
 800bc2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc30:	4a0c      	ldr	r2, [pc, #48]	; (800bc64 <pxPortInitialiseStack+0x64>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3b14      	subs	r3, #20
 800bc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3b04      	subs	r3, #4
 800bc46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f06f 0202 	mvn.w	r2, #2
 800bc4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3b20      	subs	r3, #32
 800bc54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc56:	68fb      	ldr	r3, [r7, #12]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	0800bc69 	.word	0x0800bc69

0800bc68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc72:	4b13      	ldr	r3, [pc, #76]	; (800bcc0 <prvTaskExitError+0x58>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7a:	d00b      	beq.n	800bc94 <prvTaskExitError+0x2c>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	b672      	cpsid	i
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	b662      	cpsie	i
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	e7fe      	b.n	800bc92 <prvTaskExitError+0x2a>
 800bc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc98:	b672      	cpsid	i
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	b662      	cpsie	i
 800bca8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bcaa:	bf00      	nop
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0fc      	beq.n	800bcac <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcb2:	bf00      	nop
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	20000050 	.word	0x20000050
	...

0800bcd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcd0:	4b07      	ldr	r3, [pc, #28]	; (800bcf0 <pxCurrentTCBConst2>)
 800bcd2:	6819      	ldr	r1, [r3, #0]
 800bcd4:	6808      	ldr	r0, [r1, #0]
 800bcd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcda:	f380 8809 	msr	PSP, r0
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f04f 0000 	mov.w	r0, #0
 800bce6:	f380 8811 	msr	BASEPRI, r0
 800bcea:	4770      	bx	lr
 800bcec:	f3af 8000 	nop.w

0800bcf0 <pxCurrentTCBConst2>:
 800bcf0:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop

0800bcf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcf8:	4808      	ldr	r0, [pc, #32]	; (800bd1c <prvPortStartFirstTask+0x24>)
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	6800      	ldr	r0, [r0, #0]
 800bcfe:	f380 8808 	msr	MSP, r0
 800bd02:	f04f 0000 	mov.w	r0, #0
 800bd06:	f380 8814 	msr	CONTROL, r0
 800bd0a:	b662      	cpsie	i
 800bd0c:	b661      	cpsie	f
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	df00      	svc	0
 800bd18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd1a:	bf00      	nop
 800bd1c:	e000ed08 	.word	0xe000ed08

0800bd20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd26:	4b36      	ldr	r3, [pc, #216]	; (800be00 <xPortStartScheduler+0xe0>)
 800bd28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b2e      	ldr	r3, [pc, #184]	; (800be04 <xPortStartScheduler+0xe4>)
 800bd4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd4e:	4b2e      	ldr	r3, [pc, #184]	; (800be08 <xPortStartScheduler+0xe8>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd54:	e009      	b.n	800bd6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bd56:	4b2c      	ldr	r3, [pc, #176]	; (800be08 <xPortStartScheduler+0xe8>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4a2a      	ldr	r2, [pc, #168]	; (800be08 <xPortStartScheduler+0xe8>)
 800bd5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd6a:	78fb      	ldrb	r3, [r7, #3]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd72:	2b80      	cmp	r3, #128	; 0x80
 800bd74:	d0ef      	beq.n	800bd56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd76:	4b24      	ldr	r3, [pc, #144]	; (800be08 <xPortStartScheduler+0xe8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f1c3 0307 	rsb	r3, r3, #7
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d00b      	beq.n	800bd9a <xPortStartScheduler+0x7a>
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	b672      	cpsid	i
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	b662      	cpsie	i
 800bd96:	60bb      	str	r3, [r7, #8]
 800bd98:	e7fe      	b.n	800bd98 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <xPortStartScheduler+0xe8>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	021b      	lsls	r3, r3, #8
 800bda0:	4a19      	ldr	r2, [pc, #100]	; (800be08 <xPortStartScheduler+0xe8>)
 800bda2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bda4:	4b18      	ldr	r3, [pc, #96]	; (800be08 <xPortStartScheduler+0xe8>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdac:	4a16      	ldr	r2, [pc, #88]	; (800be08 <xPortStartScheduler+0xe8>)
 800bdae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdb8:	4b14      	ldr	r3, [pc, #80]	; (800be0c <xPortStartScheduler+0xec>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a13      	ldr	r2, [pc, #76]	; (800be0c <xPortStartScheduler+0xec>)
 800bdbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdc4:	4b11      	ldr	r3, [pc, #68]	; (800be0c <xPortStartScheduler+0xec>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a10      	ldr	r2, [pc, #64]	; (800be0c <xPortStartScheduler+0xec>)
 800bdca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdd0:	f000 f8d4 	bl	800bf7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <xPortStartScheduler+0xf0>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdda:	f000 f8f3 	bl	800bfc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdde:	4b0d      	ldr	r3, [pc, #52]	; (800be14 <xPortStartScheduler+0xf4>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a0c      	ldr	r2, [pc, #48]	; (800be14 <xPortStartScheduler+0xf4>)
 800bde4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bde8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdea:	f7ff ff85 	bl	800bcf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdee:	f7ff fbbb 	bl	800b568 <vTaskSwitchContext>
	prvTaskExitError();
 800bdf2:	f7ff ff39 	bl	800bc68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	e000e400 	.word	0xe000e400
 800be04:	200005fc 	.word	0x200005fc
 800be08:	20000600 	.word	0x20000600
 800be0c:	e000ed20 	.word	0xe000ed20
 800be10:	20000050 	.word	0x20000050
 800be14:	e000ef34 	.word	0xe000ef34

0800be18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	b672      	cpsid	i
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	b662      	cpsie	i
 800be32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be34:	4b0f      	ldr	r3, [pc, #60]	; (800be74 <vPortEnterCritical+0x5c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3301      	adds	r3, #1
 800be3a:	4a0e      	ldr	r2, [pc, #56]	; (800be74 <vPortEnterCritical+0x5c>)
 800be3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be3e:	4b0d      	ldr	r3, [pc, #52]	; (800be74 <vPortEnterCritical+0x5c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d110      	bne.n	800be68 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be46:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <vPortEnterCritical+0x60>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <vPortEnterCritical+0x50>
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	b672      	cpsid	i
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	b662      	cpsie	i
 800be64:	603b      	str	r3, [r7, #0]
 800be66:	e7fe      	b.n	800be66 <vPortEnterCritical+0x4e>
	}
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	20000050 	.word	0x20000050
 800be78:	e000ed04 	.word	0xe000ed04

0800be7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be82:	4b12      	ldr	r3, [pc, #72]	; (800becc <vPortExitCritical+0x50>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <vPortExitCritical+0x26>
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	b672      	cpsid	i
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	b662      	cpsie	i
 800be9e:	607b      	str	r3, [r7, #4]
 800bea0:	e7fe      	b.n	800bea0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <vPortExitCritical+0x50>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3b01      	subs	r3, #1
 800bea8:	4a08      	ldr	r2, [pc, #32]	; (800becc <vPortExitCritical+0x50>)
 800beaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <vPortExitCritical+0x50>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d104      	bne.n	800bebe <vPortExitCritical+0x42>
 800beb4:	2300      	movs	r3, #0
 800beb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bebe:	bf00      	nop
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	20000050 	.word	0x20000050

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	b672      	cpsid	i
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	b662      	cpsie	i
 800bf04:	f7ff fb30 	bl	800b568 <vTaskSwitchContext>
 800bf08:	f04f 0000 	mov.w	r0, #0
 800bf0c:	f380 8811 	msr	BASEPRI, r0
 800bf10:	bc09      	pop	{r0, r3}
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	6808      	ldr	r0, [r1, #0]
 800bf16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1a:	f01e 0f10 	tst.w	lr, #16
 800bf1e:	bf08      	it	eq
 800bf20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf24:	f380 8809 	msr	PSP, r0
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop

0800bf30 <pxCurrentTCBConst>:
 800bf30:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	b672      	cpsid	i
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	b662      	cpsie	i
 800bf52:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf54:	f7ff fa4e 	bl	800b3f4 <xTaskIncrementTick>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf5e:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <SysTick_Handler+0x40>)
 800bf60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	2300      	movs	r3, #0
 800bf68:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <vPortSetupTimerInterrupt+0x38>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <vPortSetupTimerInterrupt+0x3c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <vPortSetupTimerInterrupt+0x40>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	099b      	lsrs	r3, r3, #6
 800bf98:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <vPortSetupTimerInterrupt+0x44>)
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf9e:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	e000e010 	.word	0xe000e010
 800bfb4:	e000e018 	.word	0xe000e018
 800bfb8:	20000044 	.word	0x20000044
 800bfbc:	10624dd3 	.word	0x10624dd3
 800bfc0:	e000e014 	.word	0xe000e014

0800bfc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd4 <vPortEnableVFP+0x10>
 800bfc8:	6801      	ldr	r1, [r0, #0]
 800bfca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfce:	6001      	str	r1, [r0, #0]
 800bfd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfd2:	bf00      	nop
 800bfd4:	e000ed88 	.word	0xe000ed88

0800bfd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	; 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfe4:	f7ff f94a 	bl	800b27c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfe8:	4b5a      	ldr	r3, [pc, #360]	; (800c154 <pvPortMalloc+0x17c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bff0:	f000 f916 	bl	800c220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bff4:	4b58      	ldr	r3, [pc, #352]	; (800c158 <pvPortMalloc+0x180>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f040 8090 	bne.w	800c122 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d01e      	beq.n	800c046 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c008:	2208      	movs	r2, #8
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4413      	add	r3, r2
 800c00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b00      	cmp	r3, #0
 800c018:	d015      	beq.n	800c046 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f023 0307 	bic.w	r3, r3, #7
 800c020:	3308      	adds	r3, #8
 800c022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00b      	beq.n	800c046 <pvPortMalloc+0x6e>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	b672      	cpsid	i
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	b662      	cpsie	i
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e7fe      	b.n	800c044 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d06a      	beq.n	800c122 <pvPortMalloc+0x14a>
 800c04c:	4b43      	ldr	r3, [pc, #268]	; (800c15c <pvPortMalloc+0x184>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d865      	bhi.n	800c122 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c056:	4b42      	ldr	r3, [pc, #264]	; (800c160 <pvPortMalloc+0x188>)
 800c058:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c05a:	4b41      	ldr	r3, [pc, #260]	; (800c160 <pvPortMalloc+0x188>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c060:	e004      	b.n	800c06c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	429a      	cmp	r2, r3
 800c074:	d903      	bls.n	800c07e <pvPortMalloc+0xa6>
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1f1      	bne.n	800c062 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c07e:	4b35      	ldr	r3, [pc, #212]	; (800c154 <pvPortMalloc+0x17c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c084:	429a      	cmp	r2, r3
 800c086:	d04c      	beq.n	800c122 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2208      	movs	r2, #8
 800c08e:	4413      	add	r3, r2
 800c090:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	1ad2      	subs	r2, r2, r3
 800c0a2:	2308      	movs	r3, #8
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d920      	bls.n	800c0ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	f003 0307 	and.w	r3, r3, #7
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <pvPortMalloc+0xfc>
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	b672      	cpsid	i
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	b662      	cpsie	i
 800c0d0:	613b      	str	r3, [r7, #16]
 800c0d2:	e7fe      	b.n	800c0d2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	685a      	ldr	r2, [r3, #4]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	1ad2      	subs	r2, r2, r3
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0e6:	69b8      	ldr	r0, [r7, #24]
 800c0e8:	f000 f8fc 	bl	800c2e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0ec:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <pvPortMalloc+0x184>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	4a19      	ldr	r2, [pc, #100]	; (800c15c <pvPortMalloc+0x184>)
 800c0f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0fa:	4b18      	ldr	r3, [pc, #96]	; (800c15c <pvPortMalloc+0x184>)
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	4b19      	ldr	r3, [pc, #100]	; (800c164 <pvPortMalloc+0x18c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d203      	bcs.n	800c10e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c106:	4b15      	ldr	r3, [pc, #84]	; (800c15c <pvPortMalloc+0x184>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a16      	ldr	r2, [pc, #88]	; (800c164 <pvPortMalloc+0x18c>)
 800c10c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	4b11      	ldr	r3, [pc, #68]	; (800c158 <pvPortMalloc+0x180>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	431a      	orrs	r2, r3
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	2200      	movs	r2, #0
 800c120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c122:	f7ff f8b9 	bl	800b298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f003 0307 	and.w	r3, r3, #7
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <pvPortMalloc+0x170>
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	b672      	cpsid	i
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	b662      	cpsie	i
 800c144:	60fb      	str	r3, [r7, #12]
 800c146:	e7fe      	b.n	800c146 <pvPortMalloc+0x16e>
	return pvReturn;
 800c148:	69fb      	ldr	r3, [r7, #28]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3728      	adds	r7, #40	; 0x28
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	2000860c 	.word	0x2000860c
 800c158:	20008618 	.word	0x20008618
 800c15c:	20008610 	.word	0x20008610
 800c160:	20008604 	.word	0x20008604
 800c164:	20008614 	.word	0x20008614

0800c168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d04a      	beq.n	800c210 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c17a:	2308      	movs	r3, #8
 800c17c:	425b      	negs	r3, r3
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	4b22      	ldr	r3, [pc, #136]	; (800c218 <vPortFree+0xb0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4013      	ands	r3, r2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10b      	bne.n	800c1ae <vPortFree+0x46>
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	b672      	cpsid	i
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	b662      	cpsie	i
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	e7fe      	b.n	800c1ac <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00b      	beq.n	800c1ce <vPortFree+0x66>
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	b672      	cpsid	i
 800c1bc:	f383 8811 	msr	BASEPRI, r3
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	b662      	cpsie	i
 800c1ca:	60bb      	str	r3, [r7, #8]
 800c1cc:	e7fe      	b.n	800c1cc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	4b11      	ldr	r3, [pc, #68]	; (800c218 <vPortFree+0xb0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d019      	beq.n	800c210 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d115      	bne.n	800c210 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <vPortFree+0xb0>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	401a      	ands	r2, r3
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f4:	f7ff f842 	bl	800b27c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <vPortFree+0xb4>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4413      	add	r3, r2
 800c202:	4a06      	ldr	r2, [pc, #24]	; (800c21c <vPortFree+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c206:	6938      	ldr	r0, [r7, #16]
 800c208:	f000 f86c 	bl	800c2e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c20c:	f7ff f844 	bl	800b298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c210:	bf00      	nop
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	20008618 	.word	0x20008618
 800c21c:	20008610 	.word	0x20008610

0800c220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c22a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c22c:	4b27      	ldr	r3, [pc, #156]	; (800c2cc <prvHeapInit+0xac>)
 800c22e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00c      	beq.n	800c254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3307      	adds	r3, #7
 800c23e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0307 	bic.w	r3, r3, #7
 800c246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	4a1f      	ldr	r2, [pc, #124]	; (800c2cc <prvHeapInit+0xac>)
 800c250:	4413      	add	r3, r2
 800c252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c258:	4a1d      	ldr	r2, [pc, #116]	; (800c2d0 <prvHeapInit+0xb0>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c25e:	4b1c      	ldr	r3, [pc, #112]	; (800c2d0 <prvHeapInit+0xb0>)
 800c260:	2200      	movs	r2, #0
 800c262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	4413      	add	r3, r2
 800c26a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c26c:	2208      	movs	r2, #8
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f023 0307 	bic.w	r3, r3, #7
 800c27a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4a15      	ldr	r2, [pc, #84]	; (800c2d4 <prvHeapInit+0xb4>)
 800c280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c282:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <prvHeapInit+0xb4>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2200      	movs	r2, #0
 800c288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c28a:	4b12      	ldr	r3, [pc, #72]	; (800c2d4 <prvHeapInit+0xb4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	1ad2      	subs	r2, r2, r3
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <prvHeapInit+0xb4>)
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <prvHeapInit+0xb8>)
 800c2ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <prvHeapInit+0xbc>)
 800c2b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2b8:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <prvHeapInit+0xc0>)
 800c2ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2be:	601a      	str	r2, [r3, #0]
}
 800c2c0:	bf00      	nop
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	20000604 	.word	0x20000604
 800c2d0:	20008604 	.word	0x20008604
 800c2d4:	2000860c 	.word	0x2000860c
 800c2d8:	20008614 	.word	0x20008614
 800c2dc:	20008610 	.word	0x20008610
 800c2e0:	20008618 	.word	0x20008618

0800c2e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2ec:	4b28      	ldr	r3, [pc, #160]	; (800c390 <prvInsertBlockIntoFreeList+0xac>)
 800c2ee:	60fb      	str	r3, [r7, #12]
 800c2f0:	e002      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x14>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d8f7      	bhi.n	800c2f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	4413      	add	r3, r2
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	d108      	bne.n	800c326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	441a      	add	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	68ba      	ldr	r2, [r7, #8]
 800c330:	441a      	add	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d118      	bne.n	800c36c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	4b15      	ldr	r3, [pc, #84]	; (800c394 <prvInsertBlockIntoFreeList+0xb0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d00d      	beq.n	800c362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	441a      	add	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	e008      	b.n	800c374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c362:	4b0c      	ldr	r3, [pc, #48]	; (800c394 <prvInsertBlockIntoFreeList+0xb0>)
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	e003      	b.n	800c374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d002      	beq.n	800c382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c382:	bf00      	nop
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20008604 	.word	0x20008604
 800c394:	2000860c 	.word	0x2000860c

0800c398 <__libc_init_array>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	4e0d      	ldr	r6, [pc, #52]	; (800c3d0 <__libc_init_array+0x38>)
 800c39c:	4c0d      	ldr	r4, [pc, #52]	; (800c3d4 <__libc_init_array+0x3c>)
 800c39e:	1ba4      	subs	r4, r4, r6
 800c3a0:	10a4      	asrs	r4, r4, #2
 800c3a2:	2500      	movs	r5, #0
 800c3a4:	42a5      	cmp	r5, r4
 800c3a6:	d109      	bne.n	800c3bc <__libc_init_array+0x24>
 800c3a8:	4e0b      	ldr	r6, [pc, #44]	; (800c3d8 <__libc_init_array+0x40>)
 800c3aa:	4c0c      	ldr	r4, [pc, #48]	; (800c3dc <__libc_init_array+0x44>)
 800c3ac:	f000 f82c 	bl	800c408 <_init>
 800c3b0:	1ba4      	subs	r4, r4, r6
 800c3b2:	10a4      	asrs	r4, r4, #2
 800c3b4:	2500      	movs	r5, #0
 800c3b6:	42a5      	cmp	r5, r4
 800c3b8:	d105      	bne.n	800c3c6 <__libc_init_array+0x2e>
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3c0:	4798      	blx	r3
 800c3c2:	3501      	adds	r5, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__libc_init_array+0xc>
 800c3c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3ca:	4798      	blx	r3
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	e7f2      	b.n	800c3b6 <__libc_init_array+0x1e>
 800c3d0:	0800e3f0 	.word	0x0800e3f0
 800c3d4:	0800e3f0 	.word	0x0800e3f0
 800c3d8:	0800e3f0 	.word	0x0800e3f0
 800c3dc:	0800e3f4 	.word	0x0800e3f4

0800c3e0 <memcpy>:
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	1e43      	subs	r3, r0, #1
 800c3e4:	440a      	add	r2, r1
 800c3e6:	4291      	cmp	r1, r2
 800c3e8:	d100      	bne.n	800c3ec <memcpy+0xc>
 800c3ea:	bd10      	pop	{r4, pc}
 800c3ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3f4:	e7f7      	b.n	800c3e6 <memcpy+0x6>

0800c3f6 <memset>:
 800c3f6:	4402      	add	r2, r0
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d100      	bne.n	800c400 <memset+0xa>
 800c3fe:	4770      	bx	lr
 800c400:	f803 1b01 	strb.w	r1, [r3], #1
 800c404:	e7f9      	b.n	800c3fa <memset+0x4>
	...

0800c408 <_init>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	bf00      	nop
 800c40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c40e:	bc08      	pop	{r3}
 800c410:	469e      	mov	lr, r3
 800c412:	4770      	bx	lr

0800c414 <_fini>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr
