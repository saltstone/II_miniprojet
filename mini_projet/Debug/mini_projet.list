
mini_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc8  0800c550  0800c550  0001c550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e518  0800e518  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e520  0800e520  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e520  0800e520  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800e528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c94  20000054  0800e57c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ce8  0800e57c  00028ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b8f9  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005368  00000000  00000000  0004b97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002568  00000000  00000000  00050ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e0  00000000  00000000  00053250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e0ad  00000000  00000000  00055530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001eda8  00000000  00000000  000835dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114ab6  00000000  00000000  000a2385  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e70  00000000  00000000  001b6eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000054 	.word	0x20000054
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c538 	.word	0x0800c538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000058 	.word	0x20000058
 800020c:	0800c538 	.word	0x0800c538

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000070 	.word	0x20000070
 8000540:	200000c4 	.word	0x200000c4

08000544 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f002 f822 	bl	8002598 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000554:	f000 f9b4 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800058c:	f000 f998 	bl	80008c0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e010      	b.n	80005b8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	21a8      	movs	r1, #168	; 0xa8
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ffdd 	bl	800255c <TS_IO_Read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005a6:	7b7b      	ldrb	r3, [r7, #13]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b51      	cmp	r3, #81	; 0x51
 80005ac:	d101      	bne.n	80005b2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d802      	bhi.n	80005c4 <ft5336_ReadID+0x4e>
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0e8      	beq.n	8000596 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005c4:	7b7b      	ldrb	r3, [r7, #13]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	b29b      	uxth	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f97e 	bl	80008e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f932 	bl	8000850 <ft5336_TS_DisableIT>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ffa7 	bl	800255c <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b05      	cmp	r3, #5
 8000624:	d901      	bls.n	800062a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000630:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <ft5336_TS_DetectTouch+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200002c4 	.word	0x200002c4

08000648 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	429a      	cmp	r2, r3
 8000674:	f080 80cf 	bcs.w	8000816 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d871      	bhi.n	8000764 <ft5336_TS_GetXY+0x11c>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ft5336_TS_GetXY+0x40>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006b1 	.word	0x080006b1
 800068c:	080006c3 	.word	0x080006c3
 8000690:	080006d5 	.word	0x080006d5
 8000694:	080006e7 	.word	0x080006e7
 8000698:	080006f9 	.word	0x080006f9
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	0800071d 	.word	0x0800071d
 80006a4:	0800072f 	.word	0x0800072f
 80006a8:	08000741 	.word	0x08000741
 80006ac:	08000753 	.word	0x08000753
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006b0:	2304      	movs	r3, #4
 80006b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b8:	2306      	movs	r3, #6
 80006ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006bc:	2305      	movs	r3, #5
 80006be:	753b      	strb	r3, [r7, #20]
      break;
 80006c0:	e051      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006c2:	230a      	movs	r3, #10
 80006c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006c6:	2309      	movs	r3, #9
 80006c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006ca:	230c      	movs	r3, #12
 80006cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006ce:	230b      	movs	r3, #11
 80006d0:	753b      	strb	r3, [r7, #20]
      break;
 80006d2:	e048      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006d4:	2310      	movs	r3, #16
 80006d6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d8:	230f      	movs	r3, #15
 80006da:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006dc:	2312      	movs	r3, #18
 80006de:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006e0:	2311      	movs	r3, #17
 80006e2:	753b      	strb	r3, [r7, #20]
      break;
 80006e4:	e03f      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006e6:	2316      	movs	r3, #22
 80006e8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ea:	2315      	movs	r3, #21
 80006ec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006ee:	2318      	movs	r3, #24
 80006f0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006f2:	2317      	movs	r3, #23
 80006f4:	753b      	strb	r3, [r7, #20]
      break;
 80006f6:	e036      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f8:	231c      	movs	r3, #28
 80006fa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006fc:	231b      	movs	r3, #27
 80006fe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000700:	231e      	movs	r3, #30
 8000702:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000704:	231d      	movs	r3, #29
 8000706:	753b      	strb	r3, [r7, #20]
      break;
 8000708:	e02d      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800070a:	2322      	movs	r3, #34	; 0x22
 800070c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800070e:	2321      	movs	r3, #33	; 0x21
 8000710:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000712:	2324      	movs	r3, #36	; 0x24
 8000714:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000716:	2323      	movs	r3, #35	; 0x23
 8000718:	753b      	strb	r3, [r7, #20]
      break;
 800071a:	e024      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800071c:	2328      	movs	r3, #40	; 0x28
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000720:	2327      	movs	r3, #39	; 0x27
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000724:	232a      	movs	r3, #42	; 0x2a
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000728:	2329      	movs	r3, #41	; 0x29
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e01b      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800072e:	232e      	movs	r3, #46	; 0x2e
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000732:	232d      	movs	r3, #45	; 0x2d
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000736:	2330      	movs	r3, #48	; 0x30
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800073a:	232f      	movs	r3, #47	; 0x2f
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e012      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000740:	2334      	movs	r3, #52	; 0x34
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000744:	2333      	movs	r3, #51	; 0x33
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000748:	2336      	movs	r3, #54	; 0x36
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800074c:	2335      	movs	r3, #53	; 0x35
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e009      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000752:	233a      	movs	r3, #58	; 0x3a
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000756:	2339      	movs	r3, #57	; 0x39
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800075a:	233c      	movs	r3, #60	; 0x3c
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800075e:	233b      	movs	r3, #59	; 0x3b
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e000      	b.n	8000766 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000764:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	7dfa      	ldrb	r2, [r7, #23]
 800076c:	4611      	mov	r1, r2
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fef4 	bl	800255c <TS_IO_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000780:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7dba      	ldrb	r2, [r7, #22]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fee6 	bl	800255c <TS_IO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000794:	7cfb      	ldrb	r3, [r7, #19]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7d7a      	ldrb	r2, [r7, #21]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fecb 	bl	800255c <TS_IO_Read>
 80007c6:	4603      	mov	r3, r0
 80007c8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007d2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	7d3a      	ldrb	r2, [r7, #20]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 febd 	bl	800255c <TS_IO_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007e6:	7cfb      	ldrb	r3, [r7, #19]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000800:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ft5336_TS_GetXY+0x1dc>)
 8000804:	881a      	ldrh	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <ft5336_TS_GetXY+0x1d8>)
 8000814:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200002c4 	.word	0x200002c4
 8000824:	200002c8 	.word	0x200002c8

08000828 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	21a4      	movs	r1, #164	; 0xa4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fe70 	bl	8002528 <TS_IO_Write>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	21a4      	movs	r1, #164	; 0xa4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe5c 	bl	8002528 <TS_IO_Write>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200002c4 	.word	0x200002c4

080008c0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008c4:	f7ff fff0 	bl	80008a8 <ft5336_Get_I2C_InitializedStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008ce:	f001 fe21 	bl	8002514 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
  }
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200002c4 	.word	0x200002c4

080008e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b098      	sub	sp, #96	; 0x60
 8000900:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000902:	f003 f9aa 	bl	8003c5a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000906:	f000 f915 	bl	8000b34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800090a:	f000 ffb7 	bl	800187c <MX_GPIO_Init>
	MX_ADC3_Init();
 800090e:	f000 fa13 	bl	8000d38 <MX_ADC3_Init>
	MX_I2C1_Init();
 8000912:	f000 fabf 	bl	8000e94 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000916:	f000 fafd 	bl	8000f14 <MX_I2C3_Init>
	MX_LTDC_Init();
 800091a:	f000 fb3b 	bl	8000f94 <MX_LTDC_Init>
	MX_RTC_Init();
 800091e:	f000 fbbb 	bl	8001098 <MX_RTC_Init>
	MX_SPI2_Init();
 8000922:	f000 fc5f 	bl	80011e4 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000926:	f000 fc9b 	bl	8001260 <MX_TIM1_Init>
	MX_TIM2_Init();
 800092a:	f000 fced 	bl	8001308 <MX_TIM2_Init>
	MX_TIM3_Init();
 800092e:	f000 fd39 	bl	80013a4 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000932:	f000 fdc5 	bl	80014c0 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000936:	f000 fe11 	bl	800155c <MX_TIM8_Init>
	MX_USART1_UART_Init();
 800093a:	f000 fee9 	bl	8001710 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 800093e:	f000 ff1f 	bl	8001780 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000942:	f000 f9a7 	bl	8000c94 <MX_ADC1_Init>
	MX_DAC_Init();
 8000946:	f000 fa49 	bl	8000ddc <MX_DAC_Init>
	MX_UART7_Init();
 800094a:	f000 feb1 	bl	80016b0 <MX_UART7_Init>
	MX_FMC_Init();
 800094e:	f000 ff47 	bl	80017e0 <MX_FMC_Init>
	MX_DMA2D_Init();
 8000952:	f000 fa6d 	bl	8000e30 <MX_DMA2D_Init>
	/* USER CODE BEGIN 2 */

	// init de l’afficheur notamment
	BSP_LCD_Init();
 8000956:	f001 fe2b 	bl	80025b0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800095a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800095e:	2000      	movs	r0, #0
 8000960:	f001 febe 	bl	80026e0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000964:	f001 fe94 	bl	8002690 <BSP_LCD_GetXSize>
 8000968:	4604      	mov	r4, r0
 800096a:	f001 fea5 	bl	80026b8 <BSP_LCD_GetYSize>
 800096e:	4603      	mov	r3, r0
 8000970:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000974:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4619      	mov	r1, r3
 800097c:	2001      	movs	r0, #1
 800097e:	f001 feaf 	bl	80026e0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000982:	f002 f80b 	bl	800299c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f001 ff0a 	bl	80027a0 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 800098c:	485c      	ldr	r0, [pc, #368]	; (8000b00 <main+0x204>)
 800098e:	f001 ff63 	bl	8002858 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000992:	485c      	ldr	r0, [pc, #368]	; (8000b04 <main+0x208>)
 8000994:	f001 ff46 	bl	8002824 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000998:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800099c:	f001 ff10 	bl	80027c0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTBLUE);
 80009a0:	4857      	ldr	r0, [pc, #348]	; (8000b00 <main+0x204>)
 80009a2:	f001 ff25 	bl	80027f0 <BSP_LCD_SetBackColor>

	// ============== affichage sol
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80009a6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80009aa:	f001 ff09 	bl	80027c0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, HAUTEUR_SOL, 480, 272 - HAUTEUR_SOL);
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <main+0x20c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <main+0x20c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	f5c3 7388 	rsb	r3, r3, #272	; 0x110
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 ff6f 	bl	80028a8 <BSP_LCD_FillRect>

	// ===============  creation des blocs ==================
	blocs[1] = 1 + (5 << 8) + (5 << 4);
 80009ca:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <main+0x210>)
 80009cc:	f240 5251 	movw	r2, #1361	; 0x551
 80009d0:	805a      	strh	r2, [r3, #2]
	blocs[2] = 1 + (8 << 8) + (5 << 4);
 80009d2:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <main+0x210>)
 80009d4:	f640 0251 	movw	r2, #2129	; 0x851
 80009d8:	809a      	strh	r2, [r3, #4]
	blocs[3] = 1 + (9 << 8) + (6 << 4);
 80009da:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <main+0x210>)
 80009dc:	f640 1261 	movw	r2, #2401	; 0x961
 80009e0:	80da      	strh	r2, [r3, #6]
	blocs[4] = 1 + (2 << 8) + (5 << 4);
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <main+0x210>)
 80009e4:	f240 2251 	movw	r2, #593	; 0x251
 80009e8:	811a      	strh	r2, [r3, #8]


	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80009ea:	4849      	ldr	r0, [pc, #292]	; (8000b10 <main+0x214>)
 80009ec:	f001 fee8 	bl	80027c0 <BSP_LCD_SetTextColor>
	int iterateur_blocs = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (iterateur_blocs = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009f8:	e02d      	b.n	8000a56 <main+0x15a>
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
			iterateur_blocs += 1) {
		if ((blocs[iterateur_blocs] & (15)) != 0) {
 80009fa:	4a44      	ldr	r2, [pc, #272]	; (8000b0c <main+0x210>)
 80009fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d022      	beq.n	8000a50 <main+0x154>
			BSP_LCD_FillRect(
					((blocs[iterateur_blocs] >> 8) & (255)) * blocs_size,
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <main+0x210>)
 8000a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <main+0x218>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	fb12 f303 	smulbb	r3, r2, r3
 8000a20:	b298      	uxth	r0, r3
					blocs_size * ((blocs[iterateur_blocs] >> 4) & (15)),
 8000a22:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <main+0x210>)
 8000a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			BSP_LCD_FillRect(
 8000a2a:	091b      	lsrs	r3, r3, #4
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <main+0x218>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	fb12 f303 	smulbb	r3, r2, r3
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <main+0x218>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <main+0x218>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	f001 ff2c 	bl	80028a8 <BSP_LCD_FillRect>
			iterateur_blocs += 1) {
 8000a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a52:	3301      	adds	r3, #1
 8000a54:	65fb      	str	r3, [r7, #92]	; 0x5c
			iterateur_blocs < sizeof(blocs) / sizeof(blocs[0]);
 8000a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	for (iterateur_blocs = 0;
 8000a58:	2b1d      	cmp	r3, #29
 8000a5a:	d9ce      	bls.n	80009fa <main+0xfe>
					blocs_size, blocs_size);
		}
	}

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a5c:	f001 fe18 	bl	8002690 <BSP_LCD_GetXSize>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29c      	uxth	r4, r3
 8000a64:	f001 fe28 	bl	80026b8 <BSP_LCD_GetYSize>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f002 faaa 	bl	8002fc8 <BSP_TS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of myMutex01 */
	osMutexDef(myMutex01);
 8000a74:	2300      	movs	r3, #0
 8000a76:	657b      	str	r3, [r7, #84]	; 0x54
 8000a78:	2300      	movs	r3, #0
 8000a7a:	65bb      	str	r3, [r7, #88]	; 0x58
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 fdb2 	bl	800a5ea <osMutexCreate>
 8000a86:	4602      	mov	r2, r0
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <main+0x21c>)
 8000a8a:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <main+0x220>)
 8000a8e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a92:	461d      	mov	r5, r3
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f009 fd3f 	bl	800a52a <osThreadCreate>
 8000aac:	4602      	mov	r2, r0
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <main+0x224>)
 8000ab0:	601a      	str	r2, [r3, #0]

	/* definition and creation of Player */
	osThreadDef(Player, player, osPriorityNormal, 0, 1024);
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <main+0x228>)
 8000ab4:	f107 041c 	add.w	r4, r7, #28
 8000ab8:	461d      	mov	r5, r3
 8000aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	PlayerHandle = osThreadCreate(osThread(Player), NULL);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f009 fd2c 	bl	800a52a <osThreadCreate>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <main+0x22c>)
 8000ad6:	601a      	str	r2, [r3, #0]

	/* definition and creation of Game_over */
	osThreadDef(Game_over, game_over, osPriorityHigh, 0, 128);
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <main+0x230>)
 8000ada:	463c      	mov	r4, r7
 8000adc:	461d      	mov	r5, r3
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Game_overHandle = osThreadCreate(osThread(Game_over), NULL);
 8000aea:	463b      	mov	r3, r7
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f009 fd1b 	bl	800a52a <osThreadCreate>
 8000af4:	4602      	mov	r2, r0
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <main+0x234>)
 8000af8:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000afa:	f009 fd0f 	bl	800a51c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000afe:	e7fe      	b.n	8000afe <main+0x202>
 8000b00:	ff8080ff 	.word	0xff8080ff
 8000b04:	20000038 	.word	0x20000038
 8000b08:	20000028 	.word	0x20000028
 8000b0c:	200002cc 	.word	0x200002cc
 8000b10:	ffa52a2a 	.word	0xffa52a2a
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	20008bc4 	.word	0x20008bc4
 8000b1c:	0800c55c 	.word	0x0800c55c
 8000b20:	2000861c 	.word	0x2000861c
 8000b24:	0800c580 	.word	0x0800c580
 8000b28:	20008bc0 	.word	0x20008bc0
 8000b2c:	0800c5a8 	.word	0x0800c5a8
 8000b30:	2000881c 	.word	0x2000881c

08000b34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0b4      	sub	sp, #208	; 0xd0
 8000b38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00b fcef 	bl	800c526 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2284      	movs	r2, #132	; 0x84
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00b fce0 	bl	800c526 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000b66:	f005 fec9 	bl	80068fc <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b47      	ldr	r3, [pc, #284]	; (8000c88 <SystemClock_Config+0x154>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <SystemClock_Config+0x154>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b44      	ldr	r3, [pc, #272]	; (8000c88 <SystemClock_Config+0x154>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <SystemClock_Config+0x158>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <SystemClock_Config+0x158>)
 8000b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <SystemClock_Config+0x158>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000bbc:	2319      	movs	r3, #25
 8000bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8000bc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 feee 	bl	80069bc <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xb6>
		Error_Handler();
 8000be6:	f001 fb3b 	bl	8002260 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000bea:	f005 fe97 	bl	800691c <HAL_PWREx_EnableOverDrive>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xc4>
		Error_Handler();
 8000bf4:	f001 fb34 	bl	8002260 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000c1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c1e:	2106      	movs	r1, #6
 8000c20:	4618      	mov	r0, r3
 8000c22:	f006 f96f 	bl	8006f04 <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xfc>
		Error_Handler();
 8000c2c:	f001 fb18 	bl	8002260 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <SystemClock_Config+0x15c>)
 8000c32:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART6
			| RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c38:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 fb4c 	bl	800730c <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x14a>
		Error_Handler();
 8000c7a:	f001 faf1 	bl	8002260 <Error_Handler>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	37d0      	adds	r7, #208	; 0xd0
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	00015868 	.word	0x00015868

08000c94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <MX_ADC1_Init+0x9c>)
 8000caa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <MX_ADC1_Init+0xa0>)
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000cf6:	f002 ffff 	bl	8003cf8 <HAL_ADC_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000d00:	f001 faae 	bl	8002260 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_ADC1_Init+0x98>)
 8000d16:	f003 f985 	bl	8004024 <HAL_ADC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000d20:	f001 fa9e 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20008908 	.word	0x20008908
 8000d30:	40012000 	.word	0x40012000
 8000d34:	0f000001 	.word	0x0f000001

08000d38 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <MX_ADC3_Init+0x9c>)
 8000d4e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d56:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <MX_ADC3_Init+0xa0>)
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000d9a:	f002 ffad 	bl	8003cf8 <HAL_ADC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000da4:	f001 fa5c 	bl	8002260 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000da8:	2306      	movs	r3, #6
 8000daa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_ADC3_Init+0x98>)
 8000dba:	f003 f933 	bl	8004024 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000dc4:	f001 fa4c 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20008950 	.word	0x20008950
 8000dd4:	40012200 	.word	0x40012200
 8000dd8:	0f000001 	.word	0x0f000001

08000ddc <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_DAC_Init+0x50>)
 8000dee:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000df2:	f003 fc3d 	bl	8004670 <HAL_DAC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DAC_Init+0x24>
		Error_Handler();
 8000dfc:	f001 fa30 	bl	8002260 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_DAC_Init+0x4c>)
 8000e10:	f003 fca4 	bl	800475c <HAL_DAC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_DAC_Init+0x42>
		Error_Handler();
 8000e1a:	f001 fa21 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20008a18 	.word	0x20008a18
 8000e2c:	40007400 	.word	0x40007400

08000e30 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <MX_DMA2D_Init+0x60>)
 8000e38:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e66:	f003 feaf 	bl	8004bc8 <HAL_DMA2D_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000e70:	f001 f9f6 	bl	8002260 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000e74:	2101      	movs	r1, #1
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_DMA2D_Init+0x5c>)
 8000e78:	f004 f804 	bl	8004e84 <HAL_DMA2D_ConfigLayer>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000e82:	f001 f9ed 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20008b0c 	.word	0x20008b0c
 8000e90:	4002b000 	.word	0x4002b000

08000e94 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <MX_I2C1_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <MX_I2C1_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ed0:	f004 fbec 	bl	80056ac <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000eda:	f001 f9c1 	bl	8002260 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ee2:	f005 f8fb 	bl	80060dc <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000eec:	f001 f9b8 	bl	8002260 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_I2C1_Init+0x74>)
 8000ef4:	f005 f93d 	bl	8006172 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000efe:	f001 f9af 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20008790 	.word	0x20008790
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	00c0eaff 	.word	0x00c0eaff

08000f14 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_I2C3_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <MX_I2C3_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f50:	f004 fbac 	bl	80056ac <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C3_Init+0x4a>
		Error_Handler();
 8000f5a:	f001 f981 	bl	8002260 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f62:	f005 f8bb 	bl	80060dc <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000f6c:	f001 f978 	bl	8002260 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_I2C3_Init+0x74>)
 8000f74:	f005 f8fd 	bl	8006172 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C3_Init+0x6e>
		Error_Handler();
 8000f7e:	f001 f96f 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20008620 	.word	0x20008620
 8000f8c:	40005c00 	.word	0x40005c00
 8000f90:	00c0eaff 	.word	0x00c0eaff

08000f94 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08e      	sub	sp, #56	; 0x38
 8000f98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2234      	movs	r2, #52	; 0x34
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00b fac0 	bl	800c526 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fa8:	4a3a      	ldr	r2, [pc, #232]	; (8001094 <MX_LTDC_Init+0x100>)
 8000faa:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fcc:	2209      	movs	r2, #9
 8000fce:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fd2:	2235      	movs	r2, #53	; 0x35
 8000fd4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fde:	f240 2215 	movw	r2, #533	; 0x215
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fe6:	f240 121b 	movw	r2, #283	; 0x11b
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000fee:	f240 2235 	movw	r2, #565	; 0x235
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000ff6:	f240 121d 	movw	r2, #285	; 0x11d
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_LTDC_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_LTDC_Init+0xfc>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_LTDC_Init+0xfc>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <MX_LTDC_Init+0xfc>)
 8001016:	f005 f8f9 	bl	800620c <HAL_LTDC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_LTDC_Init+0x90>
		Error_Handler();
 8001020:	f001 f91e 	bl	8002260 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001028:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800102c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8001032:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001036:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001038:	2302      	movs	r3, #2
 800103a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800103c:	23ff      	movs	r3, #255	; 0xff
 800103e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001048:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800104a:	2307      	movs	r3, #7
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 800104e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001054:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 800105a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_LTDC_Init+0xfc>)
 800107a:	f005 fa59 	bl	8006530 <HAL_LTDC_ConfigLayer>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_LTDC_Init+0xf4>
		Error_Handler();
 8001084:	f001 f8ec 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20008860 	.word	0x20008860
 8001094:	40016800 	.word	0x40016800

08001098 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b092      	sub	sp, #72	; 0x48
 800109c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800109e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = { 0 };
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RTC_AlarmTypeDef sAlarm = { 0 };
 80010b4:	463b      	mov	r3, r7
 80010b6:	222c      	movs	r2, #44	; 0x2c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00b fa33 	bl	800c526 <memset>
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MX_RTC_Init+0x144>)
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <MX_RTC_Init+0x148>)
 80010c4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <MX_RTC_Init+0x144>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <MX_RTC_Init+0x144>)
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <MX_RTC_Init+0x144>)
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MX_RTC_Init+0x144>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <MX_RTC_Init+0x144>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <MX_RTC_Init+0x144>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80010ea:	483c      	ldr	r0, [pc, #240]	; (80011dc <MX_RTC_Init+0x144>)
 80010ec:	f006 fcfc 	bl	8007ae8 <HAL_RTC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x62>
		Error_Handler();
 80010f6:	f001 f8b3 	bl	8002260 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sTime.Minutes = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sTime.Seconds = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	482f      	ldr	r0, [pc, #188]	; (80011dc <MX_RTC_Init+0x144>)
 800111e:	f006 fd5f 	bl	8007be0 <HAL_RTC_SetTime>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0x94>
		Error_Handler();
 8001128:	f001 f89a 	bl	8002260 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sDate.Month = RTC_MONTH_JANUARY;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sDate.Date = 0x1;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sDate.Year = 0x0;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_RTC_Init+0x144>)
 800114e:	f006 fe05 	bl	8007d5c <HAL_RTC_SetDate>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0xc4>
		Error_Handler();
 8001158:	f001 f882 	bl	8002260 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800115c:	2300      	movs	r3, #0
 800115e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8001160:	2300      	movs	r3, #0
 8001162:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 8001164:	2300      	movs	r3, #0
 8001166:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001180:	2301      	movs	r3, #1
 8001182:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 8001186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800118c:	463b      	mov	r3, r7
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	4812      	ldr	r0, [pc, #72]	; (80011dc <MX_RTC_Init+0x144>)
 8001194:	f006 fe8a 	bl	8007eac <HAL_RTC_SetAlarm>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x10a>
		Error_Handler();
 800119e:	f001 f85f 	bl	8002260 <Error_Handler>
	}
	/** Enable the Alarm B
	 */
	sAlarm.Alarm = RTC_ALARM_B;
 80011a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80011a8:	463b      	mov	r3, r7
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_RTC_Init+0x144>)
 80011b0:	f006 fe7c 	bl	8007eac <HAL_RTC_SetAlarm>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_RTC_Init+0x126>
		Error_Handler();
 80011ba:	f001 f851 	bl	8002260 <Error_Handler>
	}
	/** Enable the TimeStamp
	 */
	if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 80011be:	2202      	movs	r2, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_RTC_Init+0x144>)
 80011c4:	f006 fffc 	bl	80081c0 <HAL_RTCEx_SetTimeStamp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_RTC_Init+0x13a>
			RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
		Error_Handler();
 80011ce:	f001 f847 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3748      	adds	r7, #72	; 0x48
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20008a2c 	.word	0x20008a2c
 80011e0:	40002800 	.word	0x40002800

080011e4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_SPI2_Init+0x74>)
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_SPI2_Init+0x78>)
 80011ec:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_SPI2_Init+0x74>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_SPI2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI2_Init+0x74>)
 80011fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001202:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI2_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_SPI2_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI2_Init+0x74>)
 8001212:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001216:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI2_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_SPI2_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI2_Init+0x74>)
 8001232:	2207      	movs	r2, #7
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_SPI2_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI2_Init+0x74>)
 800123e:	2208      	movs	r2, #8
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_SPI2_Init+0x74>)
 8001244:	f007 f891 	bl	800836a <HAL_SPI_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_SPI2_Init+0x6e>
		Error_Handler();
 800124e:	f001 f807 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000866c 	.word	0x2000866c
 800125c:	40003800 	.word	0x40003800

08001260 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001280:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa4>)
 8001282:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM1_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM1_Init+0xa0>)
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM1_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80012aa:	4815      	ldr	r0, [pc, #84]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012ac:	f007 f8ef 	bl	800848e <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x5a>
		Error_Handler();
 80012b6:	f000 ffd3 	bl	8002260 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012c8:	f007 fba2 	bl	8008a10 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80012d2:	f000 ffc5 	bl	8002260 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM1_Init+0xa0>)
 80012e8:	f008 f8d6 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80012f2:	f000 ffb5 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20008a4c 	.word	0x20008a4c
 8001304:	40010000 	.word	0x40010000

08001308 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0x98>)
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM2_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001350:	f007 f89d 	bl	800848e <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x56>
		Error_Handler();
 800135a:	f000 ff81 	bl	8002260 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM2_Init+0x98>)
 800136c:	f007 fb50 	bl	8008a10 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x72>
		Error_Handler();
 8001376:	f000 ff73 	bl	8002260 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM2_Init+0x98>)
 8001388:	f008 f886 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001392:	f000 ff65 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20008b4c 	.word	0x20008b4c

080013a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <MX_TIM3_Init+0x114>)
 80013e8:	4a34      	ldr	r2, [pc, #208]	; (80014bc <MX_TIM3_Init+0x118>)
 80013ea:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <MX_TIM3_Init+0x114>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <MX_TIM3_Init+0x114>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <MX_TIM3_Init+0x114>)
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_TIM3_Init+0x114>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <MX_TIM3_Init+0x114>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <MX_TIM3_Init+0x114>)
 800140e:	f007 f83e 	bl	800848e <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x78>
		Error_Handler();
 8001418:	f000 ff22 	bl	8002260 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001426:	4619      	mov	r1, r3
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <MX_TIM3_Init+0x114>)
 800142a:	f007 faf1 	bl	8008a10 <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x94>
		Error_Handler();
 8001434:	f000 ff14 	bl	8002260 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001438:	481f      	ldr	r0, [pc, #124]	; (80014b8 <MX_TIM3_Init+0x114>)
 800143a:	f007 f87d 	bl	8008538 <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0xa4>
		Error_Handler();
 8001444:	f000 ff0c 	bl	8002260 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8001450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001454:	4619      	mov	r1, r3
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM3_Init+0x114>)
 8001458:	f007 fb94 	bl	8008b84 <HAL_TIM_SlaveConfigSynchro>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xc2>
		Error_Handler();
 8001462:	f000 fefd 	bl	8002260 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4619      	mov	r1, r3
 8001474:	4810      	ldr	r0, [pc, #64]	; (80014b8 <MX_TIM3_Init+0x114>)
 8001476:	f008 f80f 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001480:	f000 feee 	bl	8002260 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM3_Init+0x114>)
 800149c:	f007 f9a0 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 80014a6:	f000 fedb 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM3_Init+0x114>)
 80014ac:	f002 f940 	bl	8003730 <HAL_TIM_MspPostInit>

}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	; 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20008820 	.word	0x20008820
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_TIM5_Init+0x94>)
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <MX_TIM5_Init+0x98>)
 80014e2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_TIM5_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM5_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_TIM5_Init+0x94>)
 80014f2:	f04f 32ff 	mov.w	r2, #4294967295
 80014f6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_TIM5_Init+0x94>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM5_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_TIM5_Init+0x94>)
 8001506:	f006 ffc2 	bl	800848e <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM5_Init+0x54>
		Error_Handler();
 8001510:	f000 fea6 	bl	8002260 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_TIM5_Init+0x94>)
 8001522:	f007 fa75 	bl	8008a10 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM5_Init+0x70>
		Error_Handler();
 800152c:	f000 fe98 	bl	8002260 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM5_Init+0x94>)
 800153e:	f007 ffab 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001548:	f000 fe8a 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200087dc 	.word	0x200087dc
 8001558:	40000c00 	.word	0x40000c00

0800155c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b09a      	sub	sp, #104	; 0x68
 8001560:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001570:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800157c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	222c      	movs	r2, #44	; 0x2c
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00a ffc5 	bl	800c526 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <MX_TIM8_Init+0x14c>)
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <MX_TIM8_Init+0x150>)
 80015a0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80015c8:	4837      	ldr	r0, [pc, #220]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015ca:	f006 ff60 	bl	800848e <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM8_Init+0x7c>
		Error_Handler();
 80015d4:	f000 fe44 	bl	8002260 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80015de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e2:	4619      	mov	r1, r3
 80015e4:	4830      	ldr	r0, [pc, #192]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015e6:	f007 fa13 	bl	8008a10 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM8_Init+0x98>
		Error_Handler();
 80015f0:	f000 fe36 	bl	8002260 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80015f4:	482c      	ldr	r0, [pc, #176]	; (80016a8 <MX_TIM8_Init+0x14c>)
 80015f6:	f006 ff9f 	bl	8008538 <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM8_Init+0xa8>
		Error_Handler();
 8001600:	f000 fe2e 	bl	8002260 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001610:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001614:	4619      	mov	r1, r3
 8001616:	4824      	ldr	r0, [pc, #144]	; (80016a8 <MX_TIM8_Init+0x14c>)
 8001618:	f007 ff3e 	bl	8009498 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM8_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001622:	f000 fe1d 	bl	8002260 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800163e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001642:	220c      	movs	r2, #12
 8001644:	4619      	mov	r1, r3
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM8_Init+0x14c>)
 8001648:	f007 f8ca 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001652:	f000 fe05 	bl	8002260 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM8_Init+0x14c>)
 800168c:	f007 ff92 	bl	80095b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM8_Init+0x13e>
			!= HAL_OK) {
		Error_Handler();
 8001696:	f000 fde3 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM8_Init+0x14c>)
 800169c:	f002 f848 	bl	8003730 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3768      	adds	r7, #104	; 0x68
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20008750 	.word	0x20008750
 80016ac:	40010400 	.word	0x40010400

080016b0 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_UART7_Init+0x58>)
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <MX_UART7_Init+0x5c>)
 80016b8:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_UART7_Init+0x58>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_UART7_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_UART7_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_UART7_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_UART7_Init+0x58>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_UART7_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_UART7_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_UART7_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_UART7_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_UART7_Init+0x58>)
 80016f4:	f007 fffa 	bl	80096ec <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_UART7_Init+0x52>
		Error_Handler();
 80016fe:	f000 fdaf 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200086d0 	.word	0x200086d0
 800170c:	40007800 	.word	0x40007800

08001710 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <MX_USART1_UART_Init+0x6c>)
 8001718:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_USART1_UART_Init+0x68>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART1_UART_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART1_UART_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_USART1_UART_Init+0x68>)
 800174e:	2230      	movs	r2, #48	; 0x30
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
			| UART_ADVFEATURE_DMADISABLEONERROR_INIT;
	huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
	huart1.AdvancedInit.DMADisableonRxError =
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_USART1_UART_Init+0x68>)
 800175c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c
			UART_ADVFEATURE_DMA_DISABLEONRXERROR;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART1_UART_Init+0x68>)
 8001764:	f007 ffc2 	bl	80096ec <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x62>
		Error_Handler();
 800176e:	f000 fd77 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20008998 	.word	0x20008998
 800177c:	40011000 	.word	0x40011000

08001780 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 8001786:	4a15      	ldr	r2, [pc, #84]	; (80017dc <MX_USART6_UART_Init+0x5c>)
 8001788:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART6_UART_Init+0x58>)
 80017c4:	f007 ff92 	bl	80096ec <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART6_UART_Init+0x52>
		Error_Handler();
 80017ce:	f000 fd47 	bl	8002260 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20008a8c 	.word	0x20008a8c
 80017dc:	40011400 	.word	0x40011400

080017e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <MX_FMC_Init+0x94>)
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <MX_FMC_Init+0x98>)
 80017fc:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_FMC_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_FMC_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_FMC_Init+0x94>)
 800180c:	2204      	movs	r2, #4
 800180e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_FMC_Init+0x94>)
 8001812:	2210      	movs	r2, #16
 8001814:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <MX_FMC_Init+0x94>)
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_FMC_Init+0x94>)
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_FMC_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_FMC_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_FMC_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_FMC_Init+0x94>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 800183a:	2310      	movs	r3, #16
 800183c:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 800183e:	2310      	movs	r3, #16
 8001840:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8001842:	2310      	movs	r3, #16
 8001844:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8001846:	2310      	movs	r3, #16
 8001848:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 800184a:	2310      	movs	r3, #16
 800184c:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 800184e:	2310      	movs	r3, #16
 8001850:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8001852:	2310      	movs	r3, #16
 8001854:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <MX_FMC_Init+0x94>)
 800185c:	f006 fd06 	bl	800826c <HAL_SDRAM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_FMC_Init+0x8a>
		Error_Handler();
 8001866:	f000 fcfb 	bl	8002260 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20008b8c 	.word	0x20008b8c
 8001878:	a0000140 	.word	0xa0000140

0800187c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	4bb0      	ldr	r3, [pc, #704]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4aaf      	ldr	r2, [pc, #700]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4bad      	ldr	r3, [pc, #692]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4baa      	ldr	r3, [pc, #680]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4aa9      	ldr	r2, [pc, #676]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4ba4      	ldr	r3, [pc, #656]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4aa3      	ldr	r2, [pc, #652]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4ba1      	ldr	r3, [pc, #644]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80018da:	4b9e      	ldr	r3, [pc, #632]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a9d      	ldr	r2, [pc, #628]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80018f2:	4b98      	ldr	r3, [pc, #608]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a97      	ldr	r2, [pc, #604]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 80018f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b95      	ldr	r3, [pc, #596]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800190a:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a91      	ldr	r2, [pc, #580]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b8f      	ldr	r3, [pc, #572]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a8b      	ldr	r2, [pc, #556]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a85      	ldr	r2, [pc, #532]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b83      	ldr	r3, [pc, #524]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a7f      	ldr	r2, [pc, #508]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800196a:	4b7a      	ldr	r3, [pc, #488]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a79      	ldr	r2, [pc, #484]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b77      	ldr	r3, [pc, #476]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001982:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a73      	ldr	r2, [pc, #460]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <MX_GPIO_Init+0x2d8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED14_Pin | LED15_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2160      	movs	r1, #96	; 0x60
 800199e:	486e      	ldr	r0, [pc, #440]	; (8001b58 <MX_GPIO_Init+0x2dc>)
 80019a0:	f003 fe6a 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80019a4:	2201      	movs	r2, #1
 80019a6:	2120      	movs	r1, #32
 80019a8:	486c      	ldr	r0, [pc, #432]	; (8001b5c <MX_GPIO_Init+0x2e0>)
 80019aa:	f003 fe65 	bl	8005678 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2108      	movs	r1, #8
 80019b2:	486a      	ldr	r0, [pc, #424]	; (8001b5c <MX_GPIO_Init+0x2e0>)
 80019b4:	f003 fe60 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2108      	movs	r1, #8
 80019bc:	4868      	ldr	r0, [pc, #416]	; (8001b60 <MX_GPIO_Init+0x2e4>)
 80019be:	f003 fe5b 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2108      	movs	r1, #8
 80019c6:	4867      	ldr	r0, [pc, #412]	; (8001b64 <MX_GPIO_Init+0x2e8>)
 80019c8:	f003 fe56 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d2:	4863      	ldr	r0, [pc, #396]	; (8001b60 <MX_GPIO_Init+0x2e4>)
 80019d4:	f003 fe50 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 80019d8:	2200      	movs	r2, #0
 80019da:	f645 6140 	movw	r1, #24128	; 0x5e40
 80019de:	4862      	ldr	r0, [pc, #392]	; (8001b68 <MX_GPIO_Init+0x2ec>)
 80019e0:	f003 fe4a 	bl	8005678 <HAL_GPIO_WritePin>
			LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin | LED2_Pin | LED18_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2108      	movs	r1, #8
 80019e8:	4860      	ldr	r0, [pc, #384]	; (8001b6c <MX_GPIO_Init+0x2f0>)
 80019ea:	f003 fe45 	bl	8005678 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ee:	2308      	movs	r3, #8
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4855      	ldr	r0, [pc, #340]	; (8001b58 <MX_GPIO_Init+0x2dc>)
 8001a02:	f003 fb6d 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
	 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D2_Pin
 8001a06:	f643 0323 	movw	r3, #14371	; 0x3823
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4853      	ldr	r0, [pc, #332]	; (8001b70 <MX_GPIO_Init+0x2f4>)
 8001a24:	f003 fb5c 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP2_Pin BP1_Pin */
	GPIO_InitStruct.Pin = BP2_Pin | BP1_Pin;
 8001a28:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	484d      	ldr	r0, [pc, #308]	; (8001b74 <MX_GPIO_Init+0x2f8>)
 8001a3e:	f003 fb4f 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED14_Pin LED15_Pin */
	GPIO_InitStruct.Pin = LED14_Pin | LED15_Pin;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a56:	4619      	mov	r1, r3
 8001a58:	483f      	ldr	r0, [pc, #252]	; (8001b58 <MX_GPIO_Init+0x2dc>)
 8001a5a:	f003 fb41 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4841      	ldr	r0, [pc, #260]	; (8001b78 <MX_GPIO_Init+0x2fc>)
 8001a74:	f003 fb34 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a78:	2340      	movs	r3, #64	; 0x40
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <MX_GPIO_Init+0x300>)
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4834      	ldr	r0, [pc, #208]	; (8001b5c <MX_GPIO_Init+0x2e0>)
 8001a8c:	f003 fb28 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LED16_Pin;
 8001a90:	2328      	movs	r3, #40	; 0x28
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	482d      	ldr	r0, [pc, #180]	; (8001b5c <MX_GPIO_Init+0x2e0>)
 8001aa8:	f003 fb1a 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = LED3_Pin | LCD_DISP_Pin;
 8001aac:	f241 0308 	movw	r3, #4104	; 0x1008
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4826      	ldr	r0, [pc, #152]	; (8001b60 <MX_GPIO_Init+0x2e4>)
 8001ac6:	f003 fb0b 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	4828      	ldr	r0, [pc, #160]	; (8001b80 <MX_GPIO_Init+0x304>)
 8001ae0:	f003 fafe 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	481a      	ldr	r0, [pc, #104]	; (8001b64 <MX_GPIO_Init+0x2e8>)
 8001afc:	f003 faf0 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b00:	2310      	movs	r3, #16
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	4812      	ldr	r0, [pc, #72]	; (8001b5c <MX_GPIO_Init+0x2e0>)
 8001b14:	f003 fae4 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001b18:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <MX_GPIO_Init+0x2ec>)
 8001b2e:	f003 fad7 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
	 LED2_Pin LED18_Pin */
	GPIO_InitStruct.Pin = LED13_Pin | LED17_Pin | LED11_Pin | LED12_Pin
 8001b32:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
			| LED2_Pin | LED18_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_GPIO_Init+0x2ec>)
 8001b4c:	f003 fac8 	bl	80050e0 <HAL_GPIO_Init>
 8001b50:	e018      	b.n	8001b84 <MX_GPIO_Init+0x308>
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40022800 	.word	0x40022800
 8001b68:	40021c00 	.word	0x40021c00
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40022400 	.word	0x40022400
 8001b7c:	10120000 	.word	0x10120000
 8001b80:	40020800 	.word	0x40020800

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <MX_GPIO_Init+0x3c0>)
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	4829      	ldr	r0, [pc, #164]	; (8001c40 <MX_GPIO_Init+0x3c4>)
 8001b9a:	f003 faa1 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bae:	230a      	movs	r3, #10
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4822      	ldr	r0, [pc, #136]	; (8001c44 <MX_GPIO_Init+0x3c8>)
 8001bba:	f003 fa91 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
	GPIO_InitStruct.Pin = BP_JOYSTICK_Pin | RMII_RXER_Pin;
 8001bbe:	2384      	movs	r3, #132	; 0x84
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_GPIO_Init+0x3cc>)
 8001bd2:	f003 fa85 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001be6:	230a      	movs	r3, #10
 8001be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <MX_GPIO_Init+0x3d0>)
 8001bf2:	f003 fa75 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : EXT_RST_Pin */
	GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <MX_GPIO_Init+0x3cc>)
 8001c0e:	f003 fa67 	bl	80050e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001c12:	2328      	movs	r3, #40	; 0x28
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c22:	230a      	movs	r3, #10
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4808      	ldr	r0, [pc, #32]	; (8001c50 <MX_GPIO_Init+0x3d4>)
 8001c2e:	f003 fa57 	bl	80050e0 <HAL_GPIO_Init>

}
 8001c32:	bf00      	nop
 8001c34:	3740      	adds	r7, #64	; 0x40
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	10120000 	.word	0x10120000
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020000 	.word	0x40020000

08001c54 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f008 fcb0 	bl	800a5c2 <osDelay>
 8001c62:	e7fb      	b.n	8001c5c <StartDefaultTask+0x8>

08001c64 <jump.12870>:

	int iterateur_blocs_collision = 0;
	int bloc_x;
	int bloc_y;

	void jump(uint8_t etat_saut) {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4662      	mov	r2, ip
 8001c70:	f8c7 c000 	str.w	ip, [r7]
		if (etat_saut == 0) {
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <jump.12870+0x1a>
			joueur_dy = 10.5;
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <jump.12870+0x28>)
 8001c7c:	6013      	str	r3, [r2, #0]
		}
	}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	41280000 	.word	0x41280000

08001c90 <player>:
void player(void const *argument) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b098      	sub	sp, #96	; 0x60
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c9c:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = 20;
 8001c9e:	2314      	movs	r3, #20
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
 8001ca2:	f009 fc35 	bl	800b510 <xTaskGetTickCount>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	623b      	str	r3, [r7, #32]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
	uint8_t etat_saut = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t etat_bouton_saut = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t etat_bouton_saut_old = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	float joueur_dy = 0;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
	float joueur_dx = 0;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
	float joueur_dy_limite = -15;
 8001cde:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <player+0x260>)
 8001ce0:	643b      	str	r3, [r7, #64]	; 0x40
	float gravite = 0.6;
 8001ce2:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <player+0x264>)
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t joueur_height = 24;
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t joueur_width = 24;
 8001cec:	2318      	movs	r3, #24
 8001cee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	float joueur_x = 230;
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <player+0x268>)
 8001cf4:	65bb      	str	r3, [r7, #88]	; 0x58
	float joueur_y = HAUTEUR_SOL - joueur_height;
 8001cf6:	4b81      	ldr	r3, [pc, #516]	; (8001efc <player+0x26c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float joueur_x_old = 230;
 8001d0c:	4b7a      	ldr	r3, [pc, #488]	; (8001ef8 <player+0x268>)
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
	float joueur_y_old = 232;
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <player+0x270>)
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t joystick_x = 2077;
 8001d14:	f640 031d 	movw	r3, #2077	; 0x81d
 8001d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int iterateur_blocs_collision = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	653b      	str	r3, [r7, #80]	; 0x50

	/* Infinite loop */
	for (;;) {

		joueur_x_old = joueur_x;
 8001d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
		joueur_y_old = joueur_y;
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
		etat_bouton_saut_old = etat_bouton_saut;
 8001d26:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001d2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		etat_bouton_saut = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d32:	4874      	ldr	r0, [pc, #464]	; (8001f04 <player+0x274>)
 8001d34:	f003 fc88 	bl	8005648 <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		if ((etat_bouton_saut == 0) && (etat_bouton_saut_old == 1)) {
 8001d3e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d110      	bne.n	8001d68 <player+0xd8>
 8001d46:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10c      	bne.n	8001d68 <player+0xd8>
			jump(etat_saut);
 8001d4e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	469c      	mov	ip, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f7ff ff83 	bl	8001c64 <jump.12870>
			etat_saut = etat_saut + 1;
 8001d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001d62:	3301      	adds	r3, #1
 8001d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		//recuperation du joystick
		sConfig.Channel = ADC_CHANNEL_8;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	613b      	str	r3, [r7, #16]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4865      	ldr	r0, [pc, #404]	; (8001f08 <player+0x278>)
 8001d74:	f002 f956 	bl	8004024 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001d78:	4863      	ldr	r0, [pc, #396]	; (8001f08 <player+0x278>)
 8001d7a:	f002 f801 	bl	8003d80 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001d7e:	bf00      	nop
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	4861      	ldr	r0, [pc, #388]	; (8001f08 <player+0x278>)
 8001d84:	f002 f8bc 	bl	8003f00 <HAL_ADC_PollForConversion>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f8      	bne.n	8001d80 <player+0xf0>
			;
		//joystick_y = HAL_ADC_GetValue(&hadc3);

		HAL_ADC_Start(&hadc1);
 8001d8e:	485f      	ldr	r0, [pc, #380]	; (8001f0c <player+0x27c>)
 8001d90:	f001 fff6 	bl	8003d80 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001d94:	bf00      	nop
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	485c      	ldr	r0, [pc, #368]	; (8001f0c <player+0x27c>)
 8001d9a:	f002 f8b1 	bl	8003f00 <HAL_ADC_PollForConversion>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f8      	bne.n	8001d96 <player+0x106>
			;
		joystick_x = HAL_ADC_GetValue(&hadc1);
 8001da4:	4859      	ldr	r0, [pc, #356]	; (8001f0c <player+0x27c>)
 8001da6:	f002 f92f 	bl	8004008 <HAL_ADC_GetValue>
 8001daa:	4603      	mov	r3, r0
 8001dac:	85fb      	strh	r3, [r7, #46]	; 0x2e

		// ========== maj coord player ================

		joueur_dx =  - (joystick_x - 2077) * 20 * 270 / (1000 * 2077);
 8001dae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001db0:	f640 031d 	movw	r3, #2077	; 0x81d
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	f241 5218 	movw	r2, #5400	; 0x1518
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <player+0x280>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	441a      	add	r2, r3
 8001dc6:	1512      	asrs	r2, r2, #20
 8001dc8:	17db      	asrs	r3, r3, #31
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		joueur_x = joueur_x + joueur_dx;
 8001dd8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ddc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		joueur_dy = (float)((joueur_dy - gravite)*(joueur_dy_limite<(joueur_dy - gravite)) + joueur_dy_limite*(joueur_dy_limite>=(joueur_dy - gravite)));
 8001de8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001df8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001dfc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8001e00:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001e04:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d502      	bpl.n	8001e14 <player+0x184>
 8001e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e12:	e001      	b.n	8001e18 <player+0x188>
 8001e14:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001f14 <player+0x284>
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e20:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e28:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001e2c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	db02      	blt.n	8001e3c <player+0x1ac>
 8001e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e3a:	e001      	b.n	8001e40 <player+0x1b0>
 8001e3c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001f14 <player+0x284>
 8001e40:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	edc7 7a02 	vstr	s15, [r7, #8]
		joueur_y = joueur_y - joueur_dy;
 8001e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e54:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		if (joueur_y >= HAUTEUR_SOL - joueur_height) {
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <player+0x26c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	db0d      	blt.n	8001e9c <player+0x20c>
			joueur_y = HAUTEUR_SOL - joueur_height;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <player+0x26c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			etat_saut = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		// bounds of screen
		if (joueur_x <= 0)
 8001e9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	d803      	bhi.n	8001eb2 <player+0x222>
			joueur_x = 0;
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	65bb      	str	r3, [r7, #88]	; 0x58
 8001eb0:	e01a      	b.n	8001ee8 <player+0x258>
		else if (joueur_x + joueur_width >= 480)
 8001eb2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001f18 <player+0x288>
 8001eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	db09      	blt.n	8001ee8 <player+0x258>
			joueur_x = 480 - joueur_width;
 8001ed4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001ed8:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		//================ collisions ============

		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
 8001eec:	e135      	b.n	800215a <player+0x4ca>
 8001eee:	bf00      	nop
 8001ef0:	c1700000 	.word	0xc1700000
 8001ef4:	3f19999a 	.word	0x3f19999a
 8001ef8:	43660000 	.word	0x43660000
 8001efc:	20000028 	.word	0x20000028
 8001f00:	43680000 	.word	0x43680000
 8001f04:	40020000 	.word	0x40020000
 8001f08:	20008950 	.word	0x20008950
 8001f0c:	20008908 	.word	0x20008908
 8001f10:	813dee19 	.word	0x813dee19
 8001f14:	00000000 	.word	0x00000000
 8001f18:	43f00000 	.word	0x43f00000
		{
			bloc_x = ((blocs[iterateur_blocs_collision]>>8 & 255))*blocs_size;
 8001f1c:	4aba      	ldr	r2, [pc, #744]	; (8002208 <player+0x578>)
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	4ab8      	ldr	r2, [pc, #736]	; (800220c <player+0x57c>)
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
			bloc_y = ((blocs[iterateur_blocs_collision]>>4 & 15))*blocs_size;
 8001f34:	4ab4      	ldr	r2, [pc, #720]	; (8002208 <player+0x578>)
 8001f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4ab1      	ldr	r2, [pc, #708]	; (800220c <player+0x57c>)
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24


			if( !((bloc_x >= joueur_x + joueur_width )
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f58:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f64:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	bfac      	ite	ge
 8001f76:	2301      	movge	r3, #1
 8001f78:	2300      	movlt	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f083 0301 	eor.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80e6 	beq.w	8002154 <player+0x4c4>
					||(bloc_x + blocs_size <= joueur_x)
 8001f88:	4ba0      	ldr	r3, [pc, #640]	; (800220c <player+0x57c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	4413      	add	r3, r2
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	bfac      	ite	ge
 8001fa6:	2301      	movge	r3, #1
 8001fa8:	2300      	movlt	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80ce 	beq.w	8002154 <player+0x4c4>
					|| (bloc_y >= joueur_y + joueur_height )
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	bfac      	ite	ge
 8001fe0:	2301      	movge	r3, #1
 8001fe2:	2300      	movlt	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80b1 	beq.w	8002154 <player+0x4c4>
					||( bloc_y + blocs_size <= joueur_y)))
 8001ff2:	4b86      	ldr	r3, [pc, #536]	; (800220c <player+0x57c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	4413      	add	r3, r2
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002002:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	bfac      	ite	ge
 8002010:	2301      	movge	r3, #1
 8002012:	2300      	movlt	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
			if( !((bloc_x >= joueur_x + joueur_width )
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8099 	beq.w	8002154 <player+0x4c4>
			{

				if(joueur_y + joueur_height + joueur_dy -2 < bloc_y)
 8002022:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	ed97 7a02 	vldr	s14, [r7, #8]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002042:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	d510      	bpl.n	800207c <player+0x3ec>
				{
					joueur_dy=0;
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y - joueur_height;
 8002060:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					etat_saut = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800207a:	e06b      	b.n	8002154 <player+0x4c4>
				}
				else if(joueur_y > bloc_y + blocs_size - joueur_dy)
 800207c:	4b63      	ldr	r3, [pc, #396]	; (800220c <player+0x57c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	4413      	add	r3, r2
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800208c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	dd0d      	ble.n	80020be <player+0x42e>
				{
					joueur_dy=0;
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
					joueur_y = bloc_y + blocs_size;
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <player+0x57c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	4413      	add	r3, r2
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80020bc:	e04a      	b.n	8002154 <player+0x4c4>
				}
				else if((joueur_x + joueur_width - 8 < bloc_x )&&(joueur_dx>0))
 80020be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80020d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	d511      	bpl.n	8002112 <player+0x482>
 80020ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	dd0a      	ble.n	8002112 <player+0x482>
				{

					joueur_x = bloc_x - joueur_width;
 80020fc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8002110:	e020      	b.n	8002154 <player+0x4c4>
				}
				else if((joueur_x > bloc_x + blocs_size -8 )&&(joueur_dx<0))
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <player+0x57c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	4413      	add	r3, r2
 800211a:	3b08      	subs	r3, #8
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002124:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dd10      	ble.n	8002154 <player+0x4c4>
 8002132:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	d509      	bpl.n	8002154 <player+0x4c4>
				{

					joueur_x = bloc_x + blocs_size;
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <player+0x57c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	4413      	add	r3, r2
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002150:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		for(iterateur_blocs_collision=0;iterateur_blocs_collision<sizeof(blocs)/sizeof(blocs[0]);iterateur_blocs_collision+=1)
 8002154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002156:	3301      	adds	r3, #1
 8002158:	653b      	str	r3, [r7, #80]	; 0x50
 800215a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800215c:	2b1d      	cmp	r3, #29
 800215e:	f67f aedd 	bls.w	8001f1c <player+0x28c>



		//=============== affichage

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002162:	482b      	ldr	r0, [pc, #172]	; (8002210 <player+0x580>)
 8002164:	f000 fb2c 	bl	80027c0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 8002168:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800216c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002170:	ee17 3a90 	vmov	r3, s15
 8002174:	b298      	uxth	r0, r3
 8002176:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800217a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217e:	ee17 3a90 	vmov	r3, s15
 8002182:	b299      	uxth	r1, r3
 8002184:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002188:	b29a      	uxth	r2, r3
 800218a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800218e:	b29b      	uxth	r3, r3
 8002190:	f000 fb8a 	bl	80028a8 <BSP_LCD_FillRect>
				joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8002194:	481f      	ldr	r0, [pc, #124]	; (8002214 <player+0x584>)
 8002196:	f000 fb13 	bl	80027c0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x_old, (uint16_t) joueur_y_old,
 800219a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800219e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a2:	ee17 3a90 	vmov	r3, s15
 80021a6:	b298      	uxth	r0, r3
 80021a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	b299      	uxth	r1, r3
 80021b6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f000 fb71 	bl	80028a8 <BSP_LCD_FillRect>
				joueur_width, joueur_height);
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80021c6:	4812      	ldr	r0, [pc, #72]	; (8002210 <player+0x580>)
 80021c8:	f000 fafa 	bl	80027c0 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect((uint16_t) joueur_x, (uint16_t) joueur_y, joueur_width,
 80021cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d4:	ee17 3a90 	vmov	r3, s15
 80021d8:	b298      	uxth	r0, r3
 80021da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80021de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	b299      	uxth	r1, r3
 80021e8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f000 fb58 	bl	80028a8 <BSP_LCD_FillRect>
				joueur_height);

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021fe:	4618      	mov	r0, r3
 8002200:	f008 ffc2 	bl	800b188 <vTaskDelayUntil>
		joueur_x_old = joueur_x;
 8002204:	e58b      	b.n	8001d1e <player+0x8e>
 8002206:	bf00      	nop
 8002208:	200002cc 	.word	0x200002cc
 800220c:	2000002c 	.word	0x2000002c
 8002210:	ffff0000 	.word	0xffff0000
 8002214:	ff8080ff 	.word	0xff8080ff

08002218 <game_over>:
 * @brief Function implementing the Game_over thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_game_over */
void game_over(void const *argument) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN game_over */

	//initialisation du sleep
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8002220:	2314      	movs	r3, #20
 8002222:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8002224:	f009 f974 	bl	800b510 <xTaskGetTickCount>
 8002228:	4603      	mov	r3, r0
 800222a:	60bb      	str	r3, [r7, #8]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f008 ffa8 	bl	800b188 <vTaskDelayUntil>
 8002238:	e7f8      	b.n	800222c <game_over+0x14>
	...

0800223c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800224e:	f001 fd11 	bl	8003c74 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40001000 	.word	0x40001000

08002260 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002266:	e7fe      	b.n	8002266 <Error_Handler+0x6>

08002268 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <I2Cx_MspInit+0x150>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d14d      	bne.n	8002314 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <I2Cx_MspInit+0x154>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a4f      	ldr	r2, [pc, #316]	; (80023bc <I2Cx_MspInit+0x154>)
 800227e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <I2Cx_MspInit+0x154>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002294:	2312      	movs	r3, #18
 8002296:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800229c:	2302      	movs	r3, #2
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80022a0:	2304      	movs	r3, #4
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4845      	ldr	r0, [pc, #276]	; (80023c0 <I2Cx_MspInit+0x158>)
 80022ac:	f002 ff18 	bl	80050e0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80022b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	4840      	ldr	r0, [pc, #256]	; (80023c0 <I2Cx_MspInit+0x158>)
 80022be:	f002 ff0f 	bl	80050e0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80022c2:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <I2Cx_MspInit+0x154>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <I2Cx_MspInit+0x154>)
 80022c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <I2Cx_MspInit+0x154>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <I2Cx_MspInit+0x154>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a37      	ldr	r2, [pc, #220]	; (80023bc <I2Cx_MspInit+0x154>)
 80022e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80022e6:	4b35      	ldr	r3, [pc, #212]	; (80023bc <I2Cx_MspInit+0x154>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a34      	ldr	r2, [pc, #208]	; (80023bc <I2Cx_MspInit+0x154>)
 80022ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022f0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	210f      	movs	r1, #15
 80022f6:	2048      	movs	r0, #72	; 0x48
 80022f8:	f002 f990 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80022fc:	2048      	movs	r0, #72	; 0x48
 80022fe:	f002 f9a9 	bl	8004654 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	210f      	movs	r1, #15
 8002306:	2049      	movs	r0, #73	; 0x49
 8002308:	f002 f988 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800230c:	2049      	movs	r0, #73	; 0x49
 800230e:	f002 f9a1 	bl	8004654 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002312:	e04d      	b.n	80023b0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <I2Cx_MspInit+0x154>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <I2Cx_MspInit+0x154>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <I2Cx_MspInit+0x154>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800232c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002330:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002332:	2312      	movs	r3, #18
 8002334:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800233a:	2302      	movs	r3, #2
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800233e:	2304      	movs	r3, #4
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	481e      	ldr	r0, [pc, #120]	; (80023c4 <I2Cx_MspInit+0x15c>)
 800234a:	f002 fec9 	bl	80050e0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	481a      	ldr	r0, [pc, #104]	; (80023c4 <I2Cx_MspInit+0x15c>)
 800235c:	f002 fec0 	bl	80050e0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <I2Cx_MspInit+0x154>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a15      	ldr	r2, [pc, #84]	; (80023bc <I2Cx_MspInit+0x154>)
 8002366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <I2Cx_MspInit+0x154>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <I2Cx_MspInit+0x154>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <I2Cx_MspInit+0x154>)
 800237e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002382:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <I2Cx_MspInit+0x154>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <I2Cx_MspInit+0x154>)
 800238a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800238e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	210f      	movs	r1, #15
 8002394:	201f      	movs	r0, #31
 8002396:	f002 f941 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800239a:	201f      	movs	r0, #31
 800239c:	f002 f95a 	bl	8004654 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	210f      	movs	r1, #15
 80023a4:	2020      	movs	r0, #32
 80023a6:	f002 f939 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80023aa:	2020      	movs	r0, #32
 80023ac:	f002 f952 	bl	8004654 <HAL_NVIC_EnableIRQ>
}
 80023b0:	bf00      	nop
 80023b2:	3730      	adds	r7, #48	; 0x30
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000308 	.word	0x20000308
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40021c00 	.word	0x40021c00
 80023c4:	40020400 	.word	0x40020400

080023c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f003 fc59 	bl	8005c88 <HAL_I2C_GetState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d125      	bne.n	8002428 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <I2Cx_Init+0x68>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <I2Cx_Init+0x6c>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e002      	b.n	80023f2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <I2Cx_Init+0x70>)
 80023f0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a11      	ldr	r2, [pc, #68]	; (800243c <I2Cx_Init+0x74>)
 80023f6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff23 	bl	8002268 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f003 f942 	bl	80056ac <HAL_I2C_Init>
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000308 	.word	0x20000308
 8002434:	40005c00 	.word	0x40005c00
 8002438:	40005400 	.word	0x40005400
 800243c:	40912732 	.word	0x40912732

08002440 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af04      	add	r7, sp, #16
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	72fb      	strb	r3, [r7, #11]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	b299      	uxth	r1, r3
 8002462:	88f8      	ldrh	r0, [r7, #6]
 8002464:	893a      	ldrh	r2, [r7, #8]
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4603      	mov	r3, r0
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f003 faec 	bl	8005a54 <HAL_I2C_Mem_Read>
 800247c:	4603      	mov	r3, r0
 800247e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	4619      	mov	r1, r3
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f832 	bl	80024f4 <I2Cx_Error>
  }
  return status;    
 8002490:	7dfb      	ldrb	r3, [r7, #23]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b08a      	sub	sp, #40	; 0x28
 800249e:	af04      	add	r7, sp, #16
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	72fb      	strb	r3, [r7, #11]
 80024ac:	460b      	mov	r3, r1
 80024ae:	813b      	strh	r3, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	b299      	uxth	r1, r3
 80024bc:	88f8      	ldrh	r0, [r7, #6]
 80024be:	893a      	ldrh	r2, [r7, #8]
 80024c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f003 f9ab 	bl	800582c <HAL_I2C_Mem_Write>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	4619      	mov	r1, r3
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f805 	bl	80024f4 <I2Cx_Error>
  }
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f003 f963 	bl	80057cc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ff5e 	bl	80023c8 <I2Cx_Init>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TS_IO_Init+0x10>)
 800251a:	f7ff ff55 	bl	80023c8 <I2Cx_Init>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000308 	.word	0x20000308

08002528 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af02      	add	r7, sp, #8
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	460b      	mov	r3, r1
 8002534:	71bb      	strb	r3, [r7, #6]
 8002536:	4613      	mov	r3, r2
 8002538:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800253a:	79bb      	ldrb	r3, [r7, #6]
 800253c:	b29a      	uxth	r2, r3
 800253e:	79f9      	ldrb	r1, [r7, #7]
 8002540:	2301      	movs	r3, #1
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	1d7b      	adds	r3, r7, #5
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2301      	movs	r3, #1
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <TS_IO_Write+0x30>)
 800254c:	f7ff ffa5 	bl	800249a <I2Cx_WriteMultiple>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000308 	.word	0x20000308

0800255c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	4603      	mov	r3, r0
 8002564:	460a      	mov	r2, r1
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	4613      	mov	r3, r2
 800256a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	b29a      	uxth	r2, r3
 8002574:	79f9      	ldrb	r1, [r7, #7]
 8002576:	2301      	movs	r3, #1
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f107 030f 	add.w	r3, r7, #15
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2301      	movs	r3, #1
 8002582:	4804      	ldr	r0, [pc, #16]	; (8002594 <TS_IO_Read+0x38>)
 8002584:	f7ff ff5c 	bl	8002440 <I2Cx_ReadMultiple>

  return read_value;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000308 	.word	0x20000308

08002598 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 fb87 	bl	8003cb4 <HAL_Delay>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <BSP_LCD_Init+0xcc>)
 80025b6:	2228      	movs	r2, #40	; 0x28
 80025b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <BSP_LCD_Init+0xcc>)
 80025bc:	2209      	movs	r2, #9
 80025be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <BSP_LCD_Init+0xcc>)
 80025c2:	2235      	movs	r2, #53	; 0x35
 80025c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <BSP_LCD_Init+0xcc>)
 80025c8:	220b      	movs	r2, #11
 80025ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <BSP_LCD_Init+0xcc>)
 80025ce:	f240 121b 	movw	r2, #283	; 0x11b
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <BSP_LCD_Init+0xcc>)
 80025d6:	f240 2215 	movw	r2, #533	; 0x215
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <BSP_LCD_Init+0xcc>)
 80025de:	f240 121d 	movw	r2, #285	; 0x11d
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <BSP_LCD_Init+0xcc>)
 80025e6:	f240 2235 	movw	r2, #565	; 0x235
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80025ec:	2100      	movs	r1, #0
 80025ee:	4823      	ldr	r0, [pc, #140]	; (800267c <BSP_LCD_Init+0xcc>)
 80025f0:	f000 facc 	bl	8002b8c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <BSP_LCD_Init+0xcc>)
 80025f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <BSP_LCD_Init+0xcc>)
 80025fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <BSP_LCD_Init+0xcc>)
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <BSP_LCD_Init+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <BSP_LCD_Init+0xcc>)
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <BSP_LCD_Init+0xcc>)
 800261e:	2200      	movs	r2, #0
 8002620:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <BSP_LCD_Init+0xcc>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <BSP_LCD_Init+0xcc>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <BSP_LCD_Init+0xcc>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <BSP_LCD_Init+0xcc>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <BSP_LCD_Init+0xd0>)
 8002638:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800263a:	4810      	ldr	r0, [pc, #64]	; (800267c <BSP_LCD_Init+0xcc>)
 800263c:	f003 ffb6 	bl	80065ac <HAL_LTDC_GetState>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002646:	2100      	movs	r1, #0
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <BSP_LCD_Init+0xcc>)
 800264a:	f000 f9c5 	bl	80029d8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800264e:	480b      	ldr	r0, [pc, #44]	; (800267c <BSP_LCD_Init+0xcc>)
 8002650:	f003 fddc 	bl	800620c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265a:	480a      	ldr	r0, [pc, #40]	; (8002684 <BSP_LCD_Init+0xd4>)
 800265c:	f003 f80c 	bl	8005678 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002660:	2201      	movs	r2, #1
 8002662:	2108      	movs	r1, #8
 8002664:	4808      	ldr	r0, [pc, #32]	; (8002688 <BSP_LCD_Init+0xd8>)
 8002666:	f003 f807 	bl	8005678 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800266a:	f000 faf7 	bl	8002c5c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <BSP_LCD_Init+0xdc>)
 8002670:	f000 f8d8 	bl	8002824 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20008bc8 	.word	0x20008bc8
 8002680:	40016800 	.word	0x40016800
 8002684:	40022000 	.word	0x40022000
 8002688:	40022800 	.word	0x40022800
 800268c:	20000030 	.word	0x20000030

08002690 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <BSP_LCD_GetXSize+0x20>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <BSP_LCD_GetXSize+0x24>)
 800269a:	2134      	movs	r1, #52	; 0x34
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3360      	adds	r3, #96	; 0x60
 80026a4:	681b      	ldr	r3, [r3, #0]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	20000394 	.word	0x20000394
 80026b4:	20008bc8 	.word	0x20008bc8

080026b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <BSP_LCD_GetYSize+0x20>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <BSP_LCD_GetYSize+0x24>)
 80026c2:	2134      	movs	r1, #52	; 0x34
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3364      	adds	r3, #100	; 0x64
 80026cc:	681b      	ldr	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20000394 	.word	0x20000394
 80026dc:	20008bc8 	.word	0x20008bc8

080026e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b090      	sub	sp, #64	; 0x40
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80026f0:	f7ff ffce 	bl	8002690 <BSP_LCD_GetXSize>
 80026f4:	4603      	mov	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026fc:	f7ff ffdc 	bl	80026b8 <BSP_LCD_GetYSize>
 8002700:	4603      	mov	r3, r0
 8002702:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800270c:	23ff      	movs	r3, #255	; 0xff
 800270e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800272c:	2307      	movs	r3, #7
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002730:	f7ff ffae 	bl	8002690 <BSP_LCD_GetXSize>
 8002734:	4603      	mov	r3, r0
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002738:	f7ff ffbe 	bl	80026b8 <BSP_LCD_GetYSize>
 800273c:	4603      	mov	r3, r0
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4619      	mov	r1, r3
 8002748:	4812      	ldr	r0, [pc, #72]	; (8002794 <BSP_LCD_LayerDefaultInit+0xb4>)
 800274a:	f003 fef1 	bl	8006530 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	4911      	ldr	r1, [pc, #68]	; (8002798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3304      	adds	r3, #4
 800275e:	f04f 32ff 	mov.w	r2, #4294967295
 8002762:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	490c      	ldr	r1, [pc, #48]	; (8002798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3308      	adds	r3, #8
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002776:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	4907      	ldr	r1, [pc, #28]	; (8002798 <BSP_LCD_LayerDefaultInit+0xb8>)
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800278a:	601a      	str	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3740      	adds	r7, #64	; 0x40
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20008bc8 	.word	0x20008bc8
 8002798:	20000398 	.word	0x20000398
 800279c:	20000030 	.word	0x20000030

080027a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <BSP_LCD_SelectLayer+0x1c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
} 
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000394 	.word	0x20000394

080027c0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <BSP_LCD_SetTextColor+0x28>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <BSP_LCD_SetTextColor+0x2c>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000394 	.word	0x20000394
 80027ec:	20000398 	.word	0x20000398

080027f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <BSP_LCD_SetBackColor+0x2c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4908      	ldr	r1, [pc, #32]	; (8002820 <BSP_LCD_SetBackColor+0x30>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3304      	adds	r3, #4
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000394 	.word	0x20000394
 8002820:	20000398 	.word	0x20000398

08002824 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <BSP_LCD_SetFont+0x2c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4908      	ldr	r1, [pc, #32]	; (8002854 <BSP_LCD_SetFont+0x30>)
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3308      	adds	r3, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000394 	.word	0x20000394
 8002854:	20000398 	.word	0x20000398

08002858 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <BSP_LCD_Clear+0x48>)
 8002862:	681c      	ldr	r4, [r3, #0]
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <BSP_LCD_Clear+0x48>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <BSP_LCD_Clear+0x4c>)
 800286a:	2134      	movs	r1, #52	; 0x34
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461d      	mov	r5, r3
 8002878:	f7ff ff0a 	bl	8002690 <BSP_LCD_GetXSize>
 800287c:	4606      	mov	r6, r0
 800287e:	f7ff ff1b 	bl	80026b8 <BSP_LCD_GetYSize>
 8002882:	4602      	mov	r2, r0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	4632      	mov	r2, r6
 8002890:	4629      	mov	r1, r5
 8002892:	4620      	mov	r0, r4
 8002894:	f000 f996 	bl	8002bc4 <LL_FillBuffer>
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a0:	20000394 	.word	0x20000394
 80028a4:	20008bc8 	.word	0x20008bc8

080028a8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80028a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af02      	add	r7, sp, #8
 80028b0:	4604      	mov	r4, r0
 80028b2:	4608      	mov	r0, r1
 80028b4:	4611      	mov	r1, r2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4623      	mov	r3, r4
 80028ba:	80fb      	strh	r3, [r7, #6]
 80028bc:	4603      	mov	r3, r0
 80028be:	80bb      	strh	r3, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4930      	ldr	r1, [pc, #192]	; (8002994 <BSP_LCD_FillRect+0xec>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff6e 	bl	80027c0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <BSP_LCD_FillRect+0xf0>)
 80028ea:	2134      	movs	r1, #52	; 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3348      	adds	r3, #72	; 0x48
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d114      	bne.n	8002924 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <BSP_LCD_FillRect+0xf0>)
 8002900:	2134      	movs	r1, #52	; 0x34
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	335c      	adds	r3, #92	; 0x5c
 800290a:	681c      	ldr	r4, [r3, #0]
 800290c:	f7ff fec0 	bl	8002690 <BSP_LCD_GetXSize>
 8002910:	4602      	mov	r2, r0
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	fb03 f202 	mul.w	r2, r3, r2
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4423      	add	r3, r4
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e013      	b.n	800294c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <BSP_LCD_FillRect+0xf0>)
 800292a:	2134      	movs	r1, #52	; 0x34
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	681c      	ldr	r4, [r3, #0]
 8002936:	f7ff feab 	bl	8002690 <BSP_LCD_GetXSize>
 800293a:	4602      	mov	r2, r0
 800293c:	88bb      	ldrh	r3, [r7, #4]
 800293e:	fb03 f202 	mul.w	r2, r3, r2
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4423      	add	r3, r4
 800294a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 800294e:	681c      	ldr	r4, [r3, #0]
 8002950:	68fd      	ldr	r5, [r7, #12]
 8002952:	887e      	ldrh	r6, [r7, #2]
 8002954:	f8b7 8000 	ldrh.w	r8, [r7]
 8002958:	f7ff fe9a 	bl	8002690 <BSP_LCD_GetXSize>
 800295c:	4602      	mov	r2, r0
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	1ad1      	subs	r1, r2, r3
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <BSP_LCD_FillRect+0xe8>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	480b      	ldr	r0, [pc, #44]	; (8002994 <BSP_LCD_FillRect+0xec>)
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4403      	add	r3, r0
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	9100      	str	r1, [sp, #0]
 8002978:	4643      	mov	r3, r8
 800297a:	4632      	mov	r2, r6
 800297c:	4629      	mov	r1, r5
 800297e:	4620      	mov	r0, r4
 8002980:	f000 f920 	bl	8002bc4 <LL_FillBuffer>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800298e:	bf00      	nop
 8002990:	20000394 	.word	0x20000394
 8002994:	20000398 	.word	0x20000398
 8002998:	20008bc8 	.word	0x20008bc8

0800299c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <BSP_LCD_DisplayOn+0x30>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <BSP_LCD_DisplayOn+0x30>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80029b0:	2201      	movs	r2, #1
 80029b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b6:	4806      	ldr	r0, [pc, #24]	; (80029d0 <BSP_LCD_DisplayOn+0x34>)
 80029b8:	f002 fe5e 	bl	8005678 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80029bc:	2201      	movs	r2, #1
 80029be:	2108      	movs	r1, #8
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <BSP_LCD_DisplayOn+0x38>)
 80029c2:	f002 fe59 	bl	8005678 <HAL_GPIO_WritePin>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20008bc8 	.word	0x20008bc8
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40022800 	.word	0x40022800

080029d8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b090      	sub	sp, #64	; 0x40
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029e2:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 80029e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a57      	ldr	r2, [pc, #348]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a2a:	4b52      	ldr	r3, [pc, #328]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a45      	ldr	r2, [pc, #276]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <BSP_LCD_MspInit+0x19c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002aba:	2310      	movs	r3, #16
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002aca:	230e      	movs	r3, #14
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4828      	ldr	r0, [pc, #160]	; (8002b78 <BSP_LCD_MspInit+0x1a0>)
 8002ad6:	f002 fb03 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002ae4:	2309      	movs	r3, #9
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aec:	4619      	mov	r1, r3
 8002aee:	4823      	ldr	r0, [pc, #140]	; (8002b7c <BSP_LCD_MspInit+0x1a4>)
 8002af0:	f002 faf6 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002af4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002afe:	230e      	movs	r3, #14
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	481d      	ldr	r0, [pc, #116]	; (8002b80 <BSP_LCD_MspInit+0x1a8>)
 8002b0a:	f002 fae9 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002b0e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b18:	230e      	movs	r3, #14
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b20:	4619      	mov	r1, r3
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <BSP_LCD_MspInit+0x1ac>)
 8002b24:	f002 fadc 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002b28:	23f7      	movs	r3, #247	; 0xf7
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b30:	230e      	movs	r3, #14
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <BSP_LCD_MspInit+0x1b0>)
 8002b3c:	f002 fad0 	bl	80050e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480b      	ldr	r0, [pc, #44]	; (8002b80 <BSP_LCD_MspInit+0x1a8>)
 8002b52:	f002 fac5 	bl	80050e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002b56:	2308      	movs	r3, #8
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b62:	4619      	mov	r1, r3
 8002b64:	4808      	ldr	r0, [pc, #32]	; (8002b88 <BSP_LCD_MspInit+0x1b0>)
 8002b66:	f002 fabb 	bl	80050e0 <HAL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	3740      	adds	r7, #64	; 0x40
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40022400 	.word	0x40022400
 8002b88:	40022800 	.word	0x40022800

08002b8c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <BSP_LCD_ClockConfig+0x34>)
 8002b98:	2208      	movs	r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <BSP_LCD_ClockConfig+0x34>)
 8002b9e:	22c0      	movs	r2, #192	; 0xc0
 8002ba0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <BSP_LCD_ClockConfig+0x34>)
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <BSP_LCD_ClockConfig+0x34>)
 8002baa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <BSP_LCD_ClockConfig+0x34>)
 8002bb2:	f004 fbab 	bl	800730c <HAL_RCCEx_PeriphCLKConfig>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200003b0 	.word	0x200003b0

08002bc4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <LL_FillBuffer+0x88>)
 8002bd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bd8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <LL_FillBuffer+0x8c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <LL_FillBuffer+0x90>)
 8002be0:	2134      	movs	r1, #52	; 0x34
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3348      	adds	r3, #72	; 0x48
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d103      	bne.n	8002bf8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <LL_FillBuffer+0x88>)
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	e002      	b.n	8002bfe <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <LL_FillBuffer+0x88>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c06:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <LL_FillBuffer+0x94>)
 8002c08:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002c0a:	4810      	ldr	r0, [pc, #64]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c0c:	f001 ffdc 	bl	8004bc8 <HAL_DMA2D_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c1a:	f002 f933 	bl	8004e84 <HAL_DMA2D_ConfigLayer>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10e      	bne.n	8002c42 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69f9      	ldr	r1, [r7, #28]
 8002c2e:	4807      	ldr	r0, [pc, #28]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c30:	f002 f814 	bl	8004c5c <HAL_DMA2D_Start>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002c3a:	210a      	movs	r1, #10
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <LL_FillBuffer+0x88>)
 8002c3e:	f002 f838 	bl	8004cb2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000354 	.word	0x20000354
 8002c50:	20000394 	.word	0x20000394
 8002c54:	20008bc8 	.word	0x20008bc8
 8002c58:	4002b000 	.word	0x4002b000

08002c5c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c62:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <BSP_SDRAM_Init+0xb0>)
 8002c64:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c6e:	2207      	movs	r2, #7
 8002c70:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c74:	2204      	movs	r2, #4
 8002c76:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c80:	2202      	movs	r2, #2
 8002c82:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cd6:	f000 f87f 	bl	8002dd8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002cdc:	480a      	ldr	r0, [pc, #40]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cde:	f005 fac5 	bl	800826c <HAL_SDRAM_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e002      	b.n	8002cf6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002cf6:	f240 6003 	movw	r0, #1539	; 0x603
 8002cfa:	f000 f80d 	bl	8002d18 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20008c70 	.word	0x20008c70
 8002d0c:	a0000140 	.word	0xa0000140
 8002d10:	20000434 	.word	0x20000434
 8002d14:	20000040 	.word	0x20000040

08002d18 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	4923      	ldr	r1, [pc, #140]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d42:	4824      	ldr	r0, [pc, #144]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d44:	f005 fac6 	bl	80082d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f000 ffb3 	bl	8003cb4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d56:	2210      	movs	r2, #16
 8002d58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d6a:	4919      	ldr	r1, [pc, #100]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6c:	4819      	ldr	r0, [pc, #100]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d6e:	f005 fab1 	bl	80082d4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d74:	2203      	movs	r2, #3
 8002d76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d80:	2208      	movs	r2, #8
 8002d82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d8e:	4910      	ldr	r1, [pc, #64]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d90:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d92:	f005 fa9f 	bl	80082d4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002d96:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002d9a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da4:	2210      	movs	r2, #16
 8002da6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db8:	4905      	ldr	r1, [pc, #20]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dbc:	f005 fa8a 	bl	80082d4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dc4:	f005 fab1 	bl	800832a <HAL_SDRAM_ProgramRefreshRate>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000450 	.word	0x20000450
 8002dd4:	20008c70 	.word	0x20008c70

08002dd8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002de2:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4a6f      	ldr	r2, [pc, #444]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6393      	str	r3, [r2, #56]	; 0x38
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5a:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a51      	ldr	r2, [pc, #324]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a45      	ldr	r2, [pc, #276]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002eae:	230c      	movs	r3, #12
 8002eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	483a      	ldr	r0, [pc, #232]	; (8002fa8 <BSP_SDRAM_MspInit+0x1d0>)
 8002ebe:	f002 f90f 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002ec2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4837      	ldr	r0, [pc, #220]	; (8002fac <BSP_SDRAM_MspInit+0x1d4>)
 8002ed0:	f002 f906 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002ed4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4833      	ldr	r0, [pc, #204]	; (8002fb0 <BSP_SDRAM_MspInit+0x1d8>)
 8002ee2:	f002 f8fd 	bl	80050e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ee6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4830      	ldr	r0, [pc, #192]	; (8002fb4 <BSP_SDRAM_MspInit+0x1dc>)
 8002ef4:	f002 f8f4 	bl	80050e0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002ef8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f02:	4619      	mov	r1, r3
 8002f04:	482c      	ldr	r0, [pc, #176]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e0>)
 8002f06:	f002 f8eb 	bl	80050e0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002f0a:	2328      	movs	r3, #40	; 0x28
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f12:	4619      	mov	r1, r3
 8002f14:	4829      	ldr	r0, [pc, #164]	; (8002fbc <BSP_SDRAM_MspInit+0x1e4>)
 8002f16:	f002 f8e3 	bl	80050e0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f34:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f3c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f44:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f52:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <BSP_SDRAM_MspInit+0x1ec>)
 8002f70:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002f7e:	4810      	ldr	r0, [pc, #64]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f80:	f001 fcf2 	bl	8004968 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002f84:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <BSP_SDRAM_MspInit+0x1e8>)
 8002f86:	f001 fc41 	bl	800480c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	2038      	movs	r0, #56	; 0x38
 8002f90:	f001 fb44 	bl	800461c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f94:	2038      	movs	r0, #56	; 0x38
 8002f96:	f001 fb5d 	bl	8004654 <HAL_NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3740      	adds	r7, #64	; 0x40
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021400 	.word	0x40021400
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021c00 	.word	0x40021c00
 8002fc0:	20000460 	.word	0x20000460
 8002fc4:	40026410 	.word	0x40026410

08002fc8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460a      	mov	r2, r1
 8002fd2:	80fb      	strh	r3, [r7, #6]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <BSP_TS_Init+0x68>)
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <BSP_TS_Init+0x6c>)
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <BSP_TS_Init+0x70>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2070      	movs	r0, #112	; 0x70
 8002fee:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <BSP_TS_Init+0x70>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2070      	movs	r0, #112	; 0x70
 8002ff6:	4798      	blx	r3
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b51      	cmp	r3, #81	; 0x51
 8002ffc:	d111      	bne.n	8003022 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <BSP_TS_Init+0x74>)
 8003000:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <BSP_TS_Init+0x70>)
 8003002:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <BSP_TS_Init+0x78>)
 8003006:	2270      	movs	r2, #112	; 0x70
 8003008:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <BSP_TS_Init+0x7c>)
 800300c:	2208      	movs	r2, #8
 800300e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <BSP_TS_Init+0x74>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <BSP_TS_Init+0x78>)
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	b292      	uxth	r2, r2
 800301c:	4610      	mov	r0, r2
 800301e:	4798      	blx	r3
 8003020:	e001      	b.n	8003026 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003022:	2303      	movs	r3, #3
 8003024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200004c4 	.word	0x200004c4
 8003034:	200004c6 	.word	0x200004c6
 8003038:	20000000 	.word	0x20000000
 800303c:	200004c0 	.word	0x200004c0
 8003040:	200004c9 	.word	0x200004c9
 8003044:	200004c8 	.word	0x200004c8

08003048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_MspInit+0x4c>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_MspInit+0x4c>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_MspInit+0x4c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_MspInit+0x4c>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_MspInit+0x4c>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_MspInit+0x4c>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	210f      	movs	r1, #15
 8003082:	f06f 0001 	mvn.w	r0, #1
 8003086:	f001 fac9 	bl	800461c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_ADC_MspInit+0xc8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d124      	bne.n	8003104 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ee:	2303      	movs	r3, #3
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	481a      	ldr	r0, [pc, #104]	; (8003168 <HAL_ADC_MspInit+0xd0>)
 80030fe:	f001 ffef 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003102:	e029      	b.n	8003158 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_ADC_MspInit+0xd4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d124      	bne.n	8003158 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 8003114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_ADC_MspInit+0xcc>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800313e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003144:	2303      	movs	r3, #3
 8003146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	4619      	mov	r1, r3
 8003152:	4807      	ldr	r0, [pc, #28]	; (8003170 <HAL_ADC_MspInit+0xd8>)
 8003154:	f001 ffc4 	bl	80050e0 <HAL_GPIO_Init>
}
 8003158:	bf00      	nop
 800315a:	3730      	adds	r7, #48	; 0x30
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40012000 	.word	0x40012000
 8003164:	40023800 	.word	0x40023800
 8003168:	40020000 	.word	0x40020000
 800316c:	40012200 	.word	0x40012200
 8003170:	40021400 	.word	0x40021400

08003174 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_DAC_MspInit+0x84>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12b      	bne.n	80031ee <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_DAC_MspInit+0x88>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_DAC_MspInit+0x88>)
 800319c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_DAC_MspInit+0x88>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_DAC_MspInit+0x88>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_DAC_MspInit+0x88>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_DAC_MspInit+0x88>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031c6:	2310      	movs	r3, #16
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ca:	2303      	movs	r3, #3
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	4809      	ldr	r0, [pc, #36]	; (8003200 <HAL_DAC_MspInit+0x8c>)
 80031da:	f001 ff81 	bl	80050e0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	2036      	movs	r0, #54	; 0x36
 80031e4:	f001 fa1a 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031e8:	2036      	movs	r0, #54	; 0x36
 80031ea:	f001 fa33 	bl	8004654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40007400 	.word	0x40007400
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020000 	.word	0x40020000

08003204 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_DMA2D_MspInit+0x38>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10b      	bne.n	800322e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_DMA2D_MspInit+0x3c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_DMA2D_MspInit+0x3c>)
 800321c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_DMA2D_MspInit+0x3c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	4002b000 	.word	0x4002b000
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2f      	ldr	r2, [pc, #188]	; (8003320 <HAL_I2C_MspInit+0xdc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d129      	bne.n	80032ba <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a2e      	ldr	r2, [pc, #184]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800327e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003284:	2312      	movs	r3, #18
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003290:	2304      	movs	r3, #4
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	4619      	mov	r1, r3
 800329a:	4823      	ldr	r0, [pc, #140]	; (8003328 <HAL_I2C_MspInit+0xe4>)
 800329c:	f001 ff20 	bl	80050e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032aa:	6413      	str	r3, [r2, #64]	; 0x40
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032b8:	e02d      	b.n	8003316 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_I2C_MspInit+0xe8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d128      	bne.n	8003316 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80032dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e2:	2312      	movs	r3, #18
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e6:	2301      	movs	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032ee:	2304      	movs	r3, #4
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	4619      	mov	r1, r3
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <HAL_I2C_MspInit+0xec>)
 80032fa:	f001 fef1 	bl	80050e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 8003304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_I2C_MspInit+0xe0>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	bf00      	nop
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40005400 	.word	0x40005400
 8003324:	40023800 	.word	0x40023800
 8003328:	40020400 	.word	0x40020400
 800332c:	40005c00 	.word	0x40005c00
 8003330:	40021c00 	.word	0x40021c00

08003334 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a15      	ldr	r2, [pc, #84]	; (8003398 <HAL_I2C_MspDeInit+0x64>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d110      	bne.n	8003368 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_I2C_MspDeInit+0x68>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_I2C_MspDeInit+0x68>)
 800334c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003356:	4812      	ldr	r0, [pc, #72]	; (80033a0 <HAL_I2C_MspDeInit+0x6c>)
 8003358:	f002 f86c 	bl	8005434 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800335c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003360:	480f      	ldr	r0, [pc, #60]	; (80033a0 <HAL_I2C_MspDeInit+0x6c>)
 8003362:	f002 f867 	bl	8005434 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003366:	e013      	b.n	8003390 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_I2C_MspDeInit+0x70>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10e      	bne.n	8003390 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_I2C_MspDeInit+0x68>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_I2C_MspDeInit+0x68>)
 8003378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <HAL_I2C_MspDeInit+0x74>)
 8003382:	f002 f857 	bl	8005434 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338a:	4807      	ldr	r0, [pc, #28]	; (80033a8 <HAL_I2C_MspDeInit+0x74>)
 800338c:	f002 f852 	bl	8005434 <HAL_GPIO_DeInit>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40005400 	.word	0x40005400
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40005c00 	.word	0x40005c00
 80033a8:	40021c00 	.word	0x40021c00

080033ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a55      	ldr	r2, [pc, #340]	; (8003520 <HAL_LTDC_MspInit+0x174>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f040 80a3 	bne.w	8003516 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033d0:	4b54      	ldr	r3, [pc, #336]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a53      	ldr	r2, [pc, #332]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e8:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033ee:	f043 0310 	orr.w	r3, r3, #16
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a47      	ldr	r2, [pc, #284]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003418:	4b42      	ldr	r3, [pc, #264]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800341e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003422:	6313      	str	r3, [r2, #48]	; 0x30
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	4a35      	ldr	r2, [pc, #212]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003452:	6313      	str	r3, [r2, #48]	; 0x30
 8003454:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_LTDC_MspInit+0x178>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003460:	2310      	movs	r3, #16
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2300      	movs	r3, #0
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003470:	230e      	movs	r3, #14
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	482b      	ldr	r0, [pc, #172]	; (8003528 <HAL_LTDC_MspInit+0x17c>)
 800347c:	f001 fe30 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003480:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003492:	230e      	movs	r3, #14
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349a:	4619      	mov	r1, r3
 800349c:	4823      	ldr	r0, [pc, #140]	; (800352c <HAL_LTDC_MspInit+0x180>)
 800349e:	f001 fe1f 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80034a2:	23f7      	movs	r3, #247	; 0xf7
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ae:	2300      	movs	r3, #0
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034b2:	230e      	movs	r3, #14
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ba:	4619      	mov	r1, r3
 80034bc:	481c      	ldr	r0, [pc, #112]	; (8003530 <HAL_LTDC_MspInit+0x184>)
 80034be:	f001 fe0f 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034d4:	2309      	movs	r3, #9
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034dc:	4619      	mov	r1, r3
 80034de:	4815      	ldr	r0, [pc, #84]	; (8003534 <HAL_LTDC_MspInit+0x188>)
 80034e0:	f001 fdfe 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80034e4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034f6:	230e      	movs	r3, #14
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	4619      	mov	r1, r3
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <HAL_LTDC_MspInit+0x18c>)
 8003502:	f001 fded 	bl	80050e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	2105      	movs	r1, #5
 800350a:	2058      	movs	r0, #88	; 0x58
 800350c:	f001 f886 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003510:	2058      	movs	r0, #88	; 0x58
 8003512:	f001 f89f 	bl	8004654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003516:	bf00      	nop
 8003518:	3738      	adds	r7, #56	; 0x38
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40016800 	.word	0x40016800
 8003524:	40023800 	.word	0x40023800
 8003528:	40021000 	.word	0x40021000
 800352c:	40022400 	.word	0x40022400
 8003530:	40022800 	.word	0x40022800
 8003534:	40021800 	.word	0x40021800
 8003538:	40022000 	.word	0x40022000

0800353c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_RTC_MspInit+0x2c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d105      	bne.n	800355a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_RTC_MspInit+0x30>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_RTC_MspInit+0x30>)
 8003554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40002800 	.word	0x40002800
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_SPI_MspInit+0xd4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d154      	bne.n	800363c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a26      	ldr	r2, [pc, #152]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <HAL_SPI_MspInit+0xd8>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80035da:	2302      	movs	r3, #2
 80035dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035ea:	2305      	movs	r3, #5
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4815      	ldr	r0, [pc, #84]	; (800364c <HAL_SPI_MspInit+0xdc>)
 80035f6:	f001 fd73 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035fa:	2301      	movs	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800360a:	2305      	movs	r3, #5
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	480d      	ldr	r0, [pc, #52]	; (800364c <HAL_SPI_MspInit+0xdc>)
 8003616:	f001 fd63 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800361a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800362c:	2305      	movs	r3, #5
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4806      	ldr	r0, [pc, #24]	; (8003650 <HAL_SPI_MspInit+0xe0>)
 8003638:	f001 fd52 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40003800 	.word	0x40003800
 8003648:	40023800 	.word	0x40023800
 800364c:	40022000 	.word	0x40022000
 8003650:	40020400 	.word	0x40020400

08003654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_TIM_Base_MspInit+0xc8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800367e:	e046      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d10c      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
}
 80036a2:	e034      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_TIM_Base_MspInit+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	e022      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_TIM_Base_MspInit+0xd4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10c      	bne.n	80036ec <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
}
 80036ea:	e010      	b.n	800370e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_TIM_Base_MspInit+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10b      	bne.n	800370e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_TIM_Base_MspInit+0xcc>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40023800 	.word	0x40023800
 8003724:	40000400 	.word	0x40000400
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_TIM_MspPostInit+0xa8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11c      	bne.n	800378c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a21      	ldr	r2, [pc, #132]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800376a:	2310      	movs	r3, #16
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800377a:	2302      	movs	r3, #2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4816      	ldr	r0, [pc, #88]	; (80037e0 <HAL_TIM_MspPostInit+0xb0>)
 8003786:	f001 fcab 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800378a:	e020      	b.n	80037ce <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_TIM_MspPostInit+0xb4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d11b      	bne.n	80037ce <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_TIM_MspPostInit+0xac>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ae:	2304      	movs	r3, #4
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80037be:	2303      	movs	r3, #3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <HAL_TIM_MspPostInit+0xb8>)
 80037ca:	f001 fc89 	bl	80050e0 <HAL_GPIO_Init>
}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40022000 	.word	0x40022000

080037ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08e      	sub	sp, #56	; 0x38
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_UART_MspInit+0x17c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d128      	bne.n	8003860 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800380e:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_UART_MspInit+0x180>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_UART_MspInit+0x180>)
 8003814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b54      	ldr	r3, [pc, #336]	; (800396c <HAL_UART_MspInit+0x180>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_UART_MspInit+0x180>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_UART_MspInit+0x180>)
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b4e      	ldr	r3, [pc, #312]	; (800396c <HAL_UART_MspInit+0x180>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800383e:	23c0      	movs	r3, #192	; 0xc0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384a:	2303      	movs	r3, #3
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800384e:	2308      	movs	r3, #8
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	4845      	ldr	r0, [pc, #276]	; (8003970 <HAL_UART_MspInit+0x184>)
 800385a:	f001 fc41 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800385e:	e07f      	b.n	8003960 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a43      	ldr	r2, [pc, #268]	; (8003974 <HAL_UART_MspInit+0x188>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d14d      	bne.n	8003906 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_UART_MspInit+0x180>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_UART_MspInit+0x180>)
 8003870:	f043 0310 	orr.w	r3, r3, #16
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_UART_MspInit+0x180>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_UART_MspInit+0x180>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a39      	ldr	r2, [pc, #228]	; (800396c <HAL_UART_MspInit+0x180>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_UART_MspInit+0x180>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_UART_MspInit+0x180>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a33      	ldr	r2, [pc, #204]	; (800396c <HAL_UART_MspInit+0x180>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_UART_MspInit+0x180>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038c2:	2307      	movs	r3, #7
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80038c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ca:	4619      	mov	r1, r3
 80038cc:	482a      	ldr	r0, [pc, #168]	; (8003978 <HAL_UART_MspInit+0x18c>)
 80038ce:	f001 fc07 	bl	80050e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80038d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038e4:	2307      	movs	r3, #7
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	4619      	mov	r1, r3
 80038ee:	4823      	ldr	r0, [pc, #140]	; (800397c <HAL_UART_MspInit+0x190>)
 80038f0:	f001 fbf6 	bl	80050e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2107      	movs	r1, #7
 80038f8:	2025      	movs	r0, #37	; 0x25
 80038fa:	f000 fe8f 	bl	800461c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038fe:	2025      	movs	r0, #37	; 0x25
 8003900:	f000 fea8 	bl	8004654 <HAL_NVIC_EnableIRQ>
}
 8003904:	e02c      	b.n	8003960 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_UART_MspInit+0x194>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d127      	bne.n	8003960 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_UART_MspInit+0x180>)
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <HAL_UART_MspInit+0x180>)
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	6453      	str	r3, [r2, #68]	; 0x44
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_UART_MspInit+0x180>)
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_UART_MspInit+0x180>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4a0f      	ldr	r2, [pc, #60]	; (800396c <HAL_UART_MspInit+0x180>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_UART_MspInit+0x180>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003950:	2308      	movs	r3, #8
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003958:	4619      	mov	r1, r3
 800395a:	480a      	ldr	r0, [pc, #40]	; (8003984 <HAL_UART_MspInit+0x198>)
 800395c:	f001 fbc0 	bl	80050e0 <HAL_GPIO_Init>
}
 8003960:	bf00      	nop
 8003962:	3738      	adds	r7, #56	; 0x38
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40007800 	.word	0x40007800
 800396c:	40023800 	.word	0x40023800
 8003970:	40021400 	.word	0x40021400
 8003974:	40011000 	.word	0x40011000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020000 	.word	0x40020000
 8003980:	40011400 	.word	0x40011400
 8003984:	40020800 	.word	0x40020800

08003988 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_FMC_MspInit+0x100>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d16d      	bne.n	8003a80 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_FMC_MspInit+0x100>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <HAL_FMC_MspInit+0x104>)
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <HAL_FMC_MspInit+0x104>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6393      	str	r3, [r2, #56]	; 0x38
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <HAL_FMC_MspInit+0x104>)
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80039c2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	2302      	movs	r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d0:	2303      	movs	r3, #3
 80039d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039d4:	230c      	movs	r3, #12
 80039d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	482c      	ldr	r0, [pc, #176]	; (8003a90 <HAL_FMC_MspInit+0x108>)
 80039de:	f001 fb7f 	bl	80050e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80039e2:	f248 1333 	movw	r3, #33075	; 0x8133
 80039e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f0:	2303      	movs	r3, #3
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f4:	230c      	movs	r3, #12
 80039f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4825      	ldr	r0, [pc, #148]	; (8003a94 <HAL_FMC_MspInit+0x10c>)
 80039fe:	f001 fb6f 	bl	80050e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003a02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a14:	230c      	movs	r3, #12
 8003a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	481e      	ldr	r0, [pc, #120]	; (8003a98 <HAL_FMC_MspInit+0x110>)
 8003a1e:	f001 fb5f 	bl	80050e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a22:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a30:	2303      	movs	r3, #3
 8003a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a34:	230c      	movs	r3, #12
 8003a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4817      	ldr	r0, [pc, #92]	; (8003a9c <HAL_FMC_MspInit+0x114>)
 8003a3e:	f001 fb4f 	bl	80050e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8003a42:	2328      	movs	r3, #40	; 0x28
 8003a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a52:	230c      	movs	r3, #12
 8003a54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4811      	ldr	r0, [pc, #68]	; (8003aa0 <HAL_FMC_MspInit+0x118>)
 8003a5c:	f001 fb40 	bl	80050e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a60:	2308      	movs	r3, #8
 8003a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a70:	230c      	movs	r3, #12
 8003a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	480a      	ldr	r0, [pc, #40]	; (8003aa4 <HAL_FMC_MspInit+0x11c>)
 8003a7a:	f001 fb31 	bl	80050e0 <HAL_GPIO_Init>
 8003a7e:	e000      	b.n	8003a82 <HAL_FMC_MspInit+0xfa>
    return;
 8003a80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200004cc 	.word	0x200004cc
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40021800 	.word	0x40021800
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40021400 	.word	0x40021400
 8003aa0:	40021c00 	.word	0x40021c00
 8003aa4:	40020800 	.word	0x40020800

08003aa8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ab0:	f7ff ff6a 	bl	8003988 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003acc:	2200      	movs	r2, #0
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	2036      	movs	r0, #54	; 0x36
 8003ad2:	f000 fda3 	bl	800461c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ad6:	2036      	movs	r0, #54	; 0x36
 8003ad8:	f000 fdbc 	bl	8004654 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003adc:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <HAL_InitTick+0xa0>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <HAL_InitTick+0xa0>)
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae8:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <HAL_InitTick+0xa0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af4:	f107 0210 	add.w	r2, r7, #16
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fbd2 	bl	80072a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b04:	f003 fba8 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <HAL_InitTick+0xa4>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b1e:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_InitTick+0xac>)
 8003b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b3c:	4809      	ldr	r0, [pc, #36]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b3e:	f004 fca6 	bl	800848e <HAL_TIM_Base_Init>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b48:	4806      	ldr	r0, [pc, #24]	; (8003b64 <HAL_InitTick+0xa8>)
 8003b4a:	f004 fccb 	bl	80084e4 <HAL_TIM_Base_Start_IT>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	e000      	b.n	8003b54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	; 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	431bde83 	.word	0x431bde83
 8003b64:	20008ca4 	.word	0x20008ca4
 8003b68:	40001000 	.word	0x40001000

08003b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <NMI_Handler+0x4>

08003b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <HardFault_Handler+0x4>

08003b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <MemManage_Handler+0x4>

08003b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <BusFault_Handler+0x4>

08003b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <UsageFault_Handler+0x4>

08003b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <USART1_IRQHandler+0x10>)
 8003b9e:	f005 fdf3 	bl	8009788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20008998 	.word	0x20008998

08003bac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003bb0:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <TIM6_DAC_IRQHandler+0x14>)
 8003bb2:	f000 fd7f 	bl	80046b4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003bb6:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <TIM6_DAC_IRQHandler+0x18>)
 8003bb8:	f004 fcf3 	bl	80085a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20008a18 	.word	0x20008a18
 8003bc4:	20008ca4 	.word	0x20008ca4

08003bc8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <LTDC_IRQHandler+0x10>)
 8003bce:	f002 fbed 	bl	80063ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20008860 	.word	0x20008860

08003bdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <SystemInit+0x28>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <SystemInit+0x28>)
 8003be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bf0:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <SystemInit+0x28>)
 8003bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bf6:	609a      	str	r2, [r3, #8]
#endif
 }
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c0e:	e003      	b.n	8003c18 <LoopCopyDataInit>

08003c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c16:	3104      	adds	r1, #4

08003c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c18:	480b      	ldr	r0, [pc, #44]	; (8003c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c20:	d3f6      	bcc.n	8003c10 <CopyDataInit>
  ldr  r2, =_sbss
 8003c22:	4a0b      	ldr	r2, [pc, #44]	; (8003c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c24:	e002      	b.n	8003c2c <LoopFillZerobss>

08003c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c28:	f842 3b04 	str.w	r3, [r2], #4

08003c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c30:	d3f9      	bcc.n	8003c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c32:	f7ff ffd3 	bl	8003bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c36:	f008 fc47 	bl	800c4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c3a:	f7fc fe5f 	bl	80008fc <main>
  bx  lr    
 8003c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003c44:	0800e528 	.word	0x0800e528
  ldr  r0, =_sdata
 8003c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c4c:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8003c50:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8003c54:	20008ce8 	.word	0x20008ce8

08003c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c58:	e7fe      	b.n	8003c58 <ADC_IRQHandler>

08003c5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c5e:	2003      	movs	r0, #3
 8003c60:	f000 fcd1 	bl	8004606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7ff ff29 	bl	8003abc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c6a:	f7ff f9ed 	bl	8003048 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_IncTick+0x20>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_IncTick+0x24>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_IncTick+0x24>)
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	2000004c 	.word	0x2000004c
 8003c98:	20008ce4 	.word	0x20008ce4

08003c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_GetTick+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20008ce4 	.word	0x20008ce4

08003cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff ffee 	bl	8003c9c <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d005      	beq.n	8003cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_Delay+0x40>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cda:	bf00      	nop
 8003cdc:	f7ff ffde 	bl	8003c9c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d8f7      	bhi.n	8003cdc <HAL_Delay+0x28>
  {
  }
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000004c 	.word	0x2000004c

08003cf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e031      	b.n	8003d72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff f9be 	bl	8003098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_ADC_Init+0x84>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	f043 0202 	orr.w	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fab6 	bl	80042b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
 8003d62:	e001      	b.n	8003d68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	ffffeefd 	.word	0xffffeefd

08003d80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_Start+0x1a>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0a0      	b.n	8003edc <HAL_ADC_Start+0x15c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d018      	beq.n	8003de2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003dc0:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <HAL_ADC_Start+0x168>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_ADC_Start+0x16c>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9a      	lsrs	r2, r3, #18
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003dd4:	e002      	b.n	8003ddc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f9      	bne.n	8003dd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d174      	bne.n	8003eda <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df4:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <HAL_ADC_Start+0x170>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d106      	bne.n	8003e3a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f023 0206 	bic.w	r2, r3, #6
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e52:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_ADC_Start+0x174>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d136      	bne.n	8003eda <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	e02d      	b.n	8003eda <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_ADC_Start+0x178>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10e      	bne.n	8003ea6 <HAL_ADC_Start+0x126>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ea4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_ADC_Start+0x174>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_ADC_Start+0x17c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d10e      	bne.n	8003eda <HAL_ADC_Start+0x15a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ed8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000044 	.word	0x20000044
 8003eec:	431bde83 	.word	0x431bde83
 8003ef0:	fffff8fe 	.word	0xfffff8fe
 8003ef4:	40012300 	.word	0x40012300
 8003ef8:	40012000 	.word	0x40012000
 8003efc:	40012200 	.word	0x40012200

08003f00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1c:	d113      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2c:	d10b      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e05c      	b.n	8004000 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f46:	f7ff fea9 	bl	8003c9c <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f4c:	e01a      	b.n	8003f84 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d016      	beq.n	8003f84 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_ADC_PollForConversion+0x6c>
 8003f5c:	f7ff fe9e 	bl	8003c9c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d20b      	bcs.n	8003f84 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e03d      	b.n	8004000 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d1dd      	bne.n	8003f4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f06f 0212 	mvn.w	r2, #18
 8003f9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d123      	bne.n	8003ffe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11f      	bne.n	8003ffe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d111      	bne.n	8003ffe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1c>
 800403c:	2302      	movs	r3, #2
 800403e:	e12a      	b.n	8004296 <HAL_ADC_ConfigChannel+0x272>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b09      	cmp	r3, #9
 800404e:	d93a      	bls.n	80040c6 <HAL_ADC_ConfigChannel+0xa2>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004058:	d035      	beq.n	80040c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	3b1e      	subs	r3, #30
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a87      	ldr	r2, [pc, #540]	; (80042a4 <HAL_ADC_ConfigChannel+0x280>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68d9      	ldr	r1, [r3, #12]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	061a      	lsls	r2, r3, #24
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409e:	e035      	b.n	800410c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4403      	add	r3, r0
 80040b8:	3b1e      	subs	r3, #30
 80040ba:	409a      	lsls	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040c4:	e022      	b.n	800410c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6919      	ldr	r1, [r3, #16]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	2207      	movs	r2, #7
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43da      	mvns	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	400a      	ands	r2, r1
 80040e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6919      	ldr	r1, [r3, #16]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	4603      	mov	r3, r0
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4403      	add	r3, r0
 8004102:	409a      	lsls	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d824      	bhi.n	800415e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	3b05      	subs	r3, #5
 8004126:	221f      	movs	r2, #31
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43da      	mvns	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	400a      	ands	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	4618      	mov	r0, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	3b05      	subs	r3, #5
 8004150:	fa00 f203 	lsl.w	r2, r0, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	635a      	str	r2, [r3, #52]	; 0x34
 800415c:	e04c      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d824      	bhi.n	80041b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	3b23      	subs	r3, #35	; 0x23
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	400a      	ands	r2, r1
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	4618      	mov	r0, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	3b23      	subs	r3, #35	; 0x23
 80041a2:	fa00 f203 	lsl.w	r2, r0, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
 80041ae:	e023      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	3b41      	subs	r3, #65	; 0x41
 80041c2:	221f      	movs	r2, #31
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43da      	mvns	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	400a      	ands	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4618      	mov	r0, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	3b41      	subs	r3, #65	; 0x41
 80041ec:	fa00 f203 	lsl.w	r2, r0, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <HAL_ADC_ConfigChannel+0x284>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10a      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1f4>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420a:	d105      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 8004212:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004216:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <HAL_ADC_ConfigChannel+0x284>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d109      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x212>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b12      	cmp	r3, #18
 8004228:	d105      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 8004230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004234:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_ADC_ConfigChannel+0x284>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d125      	bne.n	800428c <HAL_ADC_ConfigChannel+0x268>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_ADC_ConfigChannel+0x280>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <HAL_ADC_ConfigChannel+0x22e>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b11      	cmp	r3, #17
 8004250:	d11c      	bne.n	800428c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <HAL_ADC_ConfigChannel+0x288>)
 8004258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800425c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <HAL_ADC_ConfigChannel+0x280>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <HAL_ADC_ConfigChannel+0x28c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <HAL_ADC_ConfigChannel+0x290>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0c9a      	lsrs	r2, r3, #18
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800427e:	e002      	b.n	8004286 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	10000012 	.word	0x10000012
 80042a8:	40012000 	.word	0x40012000
 80042ac:	40012300 	.word	0x40012300
 80042b0:	20000044 	.word	0x20000044
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042c0:	4b78      	ldr	r3, [pc, #480]	; (80044a4 <ADC_Init+0x1ec>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <ADC_Init+0x1ec>)
 80042c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042cc:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <ADC_Init+0x1ec>)
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4973      	ldr	r1, [pc, #460]	; (80044a4 <ADC_Init+0x1ec>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800430c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <ADC_Init+0x1f0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800437c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	e00f      	b.n	80043b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0202 	bic.w	r2, r2, #2
 80043c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	005a      	lsls	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	3b01      	subs	r3, #1
 800440c:	035a      	lsls	r2, r3, #13
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e007      	b.n	8004428 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	3b01      	subs	r3, #1
 8004444:	051a      	lsls	r2, r3, #20
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800445c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800446a:	025a      	lsls	r2, r3, #9
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6899      	ldr	r1, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	029a      	lsls	r2, r3, #10
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012300 	.word	0x40012300
 80044a8:	0f000001 	.word	0x0f000001

080044ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	05fa0000 	.word	0x05fa0000

080044f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <__NVIC_GetPriorityGrouping+0x18>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0307 	and.w	r3, r3, #7
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db0b      	blt.n	800453a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4907      	ldr	r1, [pc, #28]	; (8004548 <__NVIC_EnableIRQ+0x38>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db0a      	blt.n	8004576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	490c      	ldr	r1, [pc, #48]	; (8004598 <__NVIC_SetPriority+0x4c>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	440b      	add	r3, r1
 8004570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004574:	e00a      	b.n	800458c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4908      	ldr	r1, [pc, #32]	; (800459c <__NVIC_SetPriority+0x50>)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	3b04      	subs	r3, #4
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	440b      	add	r3, r1
 800458a:	761a      	strb	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f1c3 0307 	rsb	r3, r3, #7
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	bf28      	it	cs
 80045be:	2304      	movcs	r3, #4
 80045c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d902      	bls.n	80045d0 <NVIC_EncodePriority+0x30>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3b03      	subs	r3, #3
 80045ce:	e000      	b.n	80045d2 <NVIC_EncodePriority+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	401a      	ands	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	43d9      	mvns	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	4313      	orrs	r3, r2
         );
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3724      	adds	r7, #36	; 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ff4c 	bl	80044ac <__NVIC_SetPriorityGrouping>
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800462e:	f7ff ff61 	bl	80044f4 <__NVIC_GetPriorityGrouping>
 8004632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	6978      	ldr	r0, [r7, #20]
 800463a:	f7ff ffb1 	bl	80045a0 <NVIC_EncodePriority>
 800463e:	4602      	mov	r2, r0
 8004640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff80 	bl	800454c <__NVIC_SetPriority>
}
 800464c:	bf00      	nop
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff54 	bl	8004510 <__NVIC_EnableIRQ>
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e014      	b.n	80046ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	791b      	ldrb	r3, [r3, #4]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe fd6e 	bl	8003174 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ca:	d118      	bne.n	80046fe <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2204      	movs	r2, #4
 80046d0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f825 	bl	8004748 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470c:	d118      	bne.n	8004740 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2204      	movs	r2, #4
 8004712:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f043 0202 	orr.w	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004728:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f85b 	bl	80047f6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	795b      	ldrb	r3, [r3, #5]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_DAC_ConfigChannel+0x20>
 8004778:	2302      	movs	r3, #2
 800477a:	e036      	b.n	80047ea <HAL_DAC_ConfigChannel+0x8e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2202      	movs	r2, #2
 8004786:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004790:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4013      	ands	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	22c0      	movs	r2, #192	; 0xc0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	400a      	ands	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7ff fa40 	bl	8003c9c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e099      	b.n	800495c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004848:	e00f      	b.n	800486a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800484a:	f7ff fa27 	bl	8003c9c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b05      	cmp	r3, #5
 8004856:	d908      	bls.n	800486a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2203      	movs	r2, #3
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e078      	b.n	800495c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e8      	bne.n	800484a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <HAL_DMA_Init+0x158>)
 8004884:	4013      	ands	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d107      	bne.n	80048d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4313      	orrs	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d117      	bne.n	800492e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8df 	bl	8004ad4 <DMA_CheckFifoParam>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800492a:	2301      	movs	r3, #1
 800492c:	e016      	b.n	800495c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f896 	bl	8004a68 <DMA_CalcBaseAndBitshift>
 800493c:	4603      	mov	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f010803f 	.word	0xf010803f

08004968 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e050      	b.n	8004a1c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d101      	bne.n	800498a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e048      	b.n	8004a1c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2221      	movs	r2, #33	; 0x21
 80049c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f84c 	bl	8004a68 <DMA_CalcBaseAndBitshift>
 80049d0:	4603      	mov	r3, r0
 80049d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	223f      	movs	r2, #63	; 0x3f
 80049da:	409a      	lsls	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e00c      	b.n	8004a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2205      	movs	r2, #5
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	3b10      	subs	r3, #16
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <DMA_CalcBaseAndBitshift+0x60>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <DMA_CalcBaseAndBitshift+0x64>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d908      	bls.n	8004aa8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8004aa6:	e006      	b.n	8004ab6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	aaaaaaab 	.word	0xaaaaaaab
 8004acc:	0800e510 	.word	0x0800e510
 8004ad0:	fffffc00 	.word	0xfffffc00

08004ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11f      	bne.n	8004b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d855      	bhi.n	8004ba0 <DMA_CheckFifoParam+0xcc>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <DMA_CheckFifoParam+0x28>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b1f 	.word	0x08004b1f
 8004b04:	08004b0d 	.word	0x08004b0d
 8004b08:	08004ba1 	.word	0x08004ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d045      	beq.n	8004ba4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1c:	e042      	b.n	8004ba4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b26:	d13f      	bne.n	8004ba8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2c:	e03c      	b.n	8004ba8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b36:	d121      	bne.n	8004b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d836      	bhi.n	8004bac <DMA_CheckFifoParam+0xd8>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <DMA_CheckFifoParam+0x70>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b5b 	.word	0x08004b5b
 8004b4c:	08004b55 	.word	0x08004b55
 8004b50:	08004b6d 	.word	0x08004b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      break;
 8004b58:	e02f      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6a:	e021      	b.n	8004bb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b74:	d11e      	bne.n	8004bb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b7a:	e01b      	b.n	8004bb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d902      	bls.n	8004b88 <DMA_CheckFifoParam+0xb4>
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d003      	beq.n	8004b8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b86:	e018      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b8c:	e015      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00e      	beq.n	8004bb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b9e:	e00b      	b.n	8004bb8 <DMA_CheckFifoParam+0xe4>
      break;
 8004ba0:	bf00      	nop
 8004ba2:	e00a      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;
 8004ba4:	bf00      	nop
 8004ba6:	e008      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;
 8004ba8:	bf00      	nop
 8004baa:	e006      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;
 8004bac:	bf00      	nop
 8004bae:	e004      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;
 8004bb0:	bf00      	nop
 8004bb2:	e002      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;   
 8004bb4:	bf00      	nop
 8004bb6:	e000      	b.n	8004bba <DMA_CheckFifoParam+0xe6>
      break;
 8004bb8:	bf00      	nop
    }
  } 
  
  return status; 
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e039      	b.n	8004c4e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fe fb08 	bl	8003204 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	f023 0107 	bic.w	r1, r3, #7
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <HAL_DMA2D_Init+0x90>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d1      	ldr	r1, [r2, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	ffffc000 	.word	0xffffc000

08004c5c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_DMA2D_Start+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e018      	b.n	8004caa <HAL_DMA2D_Start+0x4e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f988 	bl	8004fa8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d056      	beq.n	8004d7c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004cce:	f7fe ffe5 	bl	8003c9c <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004cd4:	e04b      	b.n	8004d6e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d023      	beq.n	8004d30 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2221      	movs	r2, #33	; 0x21
 8004d1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0a5      	b.n	8004e7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d01a      	beq.n	8004d6e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004d38:	f7fe ffb0 	bl	8003c9c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <HAL_DMA2D_PollForTransfer+0x9c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e086      	b.n	8004e7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ac      	beq.n	8004cd6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d061      	beq.n	8004e62 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d9e:	f7fe ff7d 	bl	8003c9c <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004da4:	e056      	b.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d02e      	beq.n	8004e16 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	f043 0202 	orr.w	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2229      	movs	r2, #41	; 0x29
 8004e00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e032      	b.n	8004e7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d01a      	beq.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004e1e:	f7fe ff3d 	bl	8003c9c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <HAL_DMA2D_PollForTransfer+0x182>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2203      	movs	r2, #3
 8004e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e013      	b.n	8004e7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0a1      	beq.n	8004da6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2212      	movs	r2, #18
 8004e68:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA2D_ConfigLayer+0x20>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e079      	b.n	8004f98 <HAL_DMA2D_ConfigLayer+0x114>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	3318      	adds	r3, #24
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004ece:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004ed0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b0a      	cmp	r3, #10
 8004ed8:	d003      	beq.n	8004ee2 <HAL_DMA2D_ConfigLayer+0x5e>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d107      	bne.n	8004ef2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e005      	b.n	8004efe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d120      	bne.n	8004f46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	ea02 0103 	and.w	r1, r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b0a      	cmp	r3, #10
 8004f2c:	d003      	beq.n	8004f36 <HAL_DMA2D_ConfigLayer+0xb2>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b09      	cmp	r3, #9
 8004f34:	d127      	bne.n	8004f86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	e01f      	b.n	8004f86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	ea02 0103 	and.w	r1, r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b0a      	cmp	r3, #10
 8004f6e:	d003      	beq.n	8004f78 <HAL_DMA2D_ConfigLayer+0xf4>
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b09      	cmp	r3, #9
 8004f76:	d106      	bne.n	8004f86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f84:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	ff03000f 	.word	0xff03000f

08004fa8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b08b      	sub	sp, #44	; 0x2c
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	041a      	lsls	r2, r3, #16
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fe0:	d174      	bne.n	80050cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004fe8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ff8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	431a      	orrs	r2, r3
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	4313      	orrs	r3, r2
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
 8005018:	e053      	b.n	80050c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d106      	bne.n	8005030 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	e048      	b.n	80050c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d111      	bne.n	800505c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	0cdb      	lsrs	r3, r3, #19
 800503c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	0a9b      	lsrs	r3, r3, #10
 8005042:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	02db      	lsls	r3, r3, #11
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	e032      	b.n	80050c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d117      	bne.n	8005094 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	0fdb      	lsrs	r3, r3, #31
 8005068:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	0cdb      	lsrs	r3, r3, #19
 800506e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	0adb      	lsrs	r3, r3, #11
 8005074:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	029b      	lsls	r3, r3, #10
 8005084:	431a      	orrs	r2, r3
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	03db      	lsls	r3, r3, #15
 800508a:	4313      	orrs	r3, r2
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	e016      	b.n	80050c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	0f1b      	lsrs	r3, r3, #28
 8005098:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	0d1b      	lsrs	r3, r3, #20
 800509e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	0b1b      	lsrs	r3, r3, #12
 80050a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	431a      	orrs	r2, r3
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	4313      	orrs	r3, r2
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80050ca:	e003      	b.n	80050d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	60da      	str	r2, [r3, #12]
}
 80050d4:	bf00      	nop
 80050d6:	372c      	adds	r7, #44	; 0x2c
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e175      	b.n	80053ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 8164 	bne.w	80053e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d00b      	beq.n	800513e <HAL_GPIO_Init+0x5e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d007      	beq.n	800513e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005132:	2b11      	cmp	r3, #17
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b12      	cmp	r3, #18
 800513c:	d130      	bne.n	80051a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2203      	movs	r2, #3
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0201 	and.w	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x100>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b12      	cmp	r3, #18
 80051de:	d123      	bne.n	8005228 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	08da      	lsrs	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3208      	adds	r2, #8
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	08da      	lsrs	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3208      	adds	r2, #8
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0203 	and.w	r2, r3, #3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80be 	beq.w	80053e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526a:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_GPIO_Init+0x320>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a64      	ldr	r2, [pc, #400]	; (8005400 <HAL_GPIO_Init+0x320>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_GPIO_Init+0x320>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005282:	4a60      	ldr	r2, [pc, #384]	; (8005404 <HAL_GPIO_Init+0x324>)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_GPIO_Init+0x328>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d037      	beq.n	800531e <HAL_GPIO_Init+0x23e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a56      	ldr	r2, [pc, #344]	; (800540c <HAL_GPIO_Init+0x32c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_GPIO_Init+0x23a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a55      	ldr	r2, [pc, #340]	; (8005410 <HAL_GPIO_Init+0x330>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d02b      	beq.n	8005316 <HAL_GPIO_Init+0x236>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a54      	ldr	r2, [pc, #336]	; (8005414 <HAL_GPIO_Init+0x334>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d025      	beq.n	8005312 <HAL_GPIO_Init+0x232>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a53      	ldr	r2, [pc, #332]	; (8005418 <HAL_GPIO_Init+0x338>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <HAL_GPIO_Init+0x22e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_GPIO_Init+0x33c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d019      	beq.n	800530a <HAL_GPIO_Init+0x22a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a51      	ldr	r2, [pc, #324]	; (8005420 <HAL_GPIO_Init+0x340>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_GPIO_Init+0x226>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a50      	ldr	r2, [pc, #320]	; (8005424 <HAL_GPIO_Init+0x344>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00d      	beq.n	8005302 <HAL_GPIO_Init+0x222>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4f      	ldr	r2, [pc, #316]	; (8005428 <HAL_GPIO_Init+0x348>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <HAL_GPIO_Init+0x21e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4e      	ldr	r2, [pc, #312]	; (800542c <HAL_GPIO_Init+0x34c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_GPIO_Init+0x21a>
 80052f6:	2309      	movs	r3, #9
 80052f8:	e012      	b.n	8005320 <HAL_GPIO_Init+0x240>
 80052fa:	230a      	movs	r3, #10
 80052fc:	e010      	b.n	8005320 <HAL_GPIO_Init+0x240>
 80052fe:	2308      	movs	r3, #8
 8005300:	e00e      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005302:	2307      	movs	r3, #7
 8005304:	e00c      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005306:	2306      	movs	r3, #6
 8005308:	e00a      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800530a:	2305      	movs	r3, #5
 800530c:	e008      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800530e:	2304      	movs	r3, #4
 8005310:	e006      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005312:	2303      	movs	r3, #3
 8005314:	e004      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005316:	2302      	movs	r3, #2
 8005318:	e002      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800531e:	2300      	movs	r3, #0
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	f002 0203 	and.w	r2, r2, #3
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	4093      	lsls	r3, r2
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005330:	4934      	ldr	r1, [pc, #208]	; (8005404 <HAL_GPIO_Init+0x324>)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	3302      	adds	r3, #2
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800533e:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005362:	4a33      	ldr	r2, [pc, #204]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005368:	4b31      	ldr	r3, [pc, #196]	; (8005430 <HAL_GPIO_Init+0x350>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538c:	4a28      	ldr	r2, [pc, #160]	; (8005430 <HAL_GPIO_Init+0x350>)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	f67f ae86 	bls.w	8005100 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	3724      	adds	r7, #36	; 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40023800 	.word	0x40023800
 8005404:	40013800 	.word	0x40013800
 8005408:	40020000 	.word	0x40020000
 800540c:	40020400 	.word	0x40020400
 8005410:	40020800 	.word	0x40020800
 8005414:	40020c00 	.word	0x40020c00
 8005418:	40021000 	.word	0x40021000
 800541c:	40021400 	.word	0x40021400
 8005420:	40021800 	.word	0x40021800
 8005424:	40021c00 	.word	0x40021c00
 8005428:	40022000 	.word	0x40022000
 800542c:	40022400 	.word	0x40022400
 8005430:	40013c00 	.word	0x40013c00

08005434 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e0d9      	b.n	8005604 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005450:	2201      	movs	r2, #1
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4013      	ands	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	f040 80c9 	bne.w	80055fe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800546c:	4a6a      	ldr	r2, [pc, #424]	; (8005618 <HAL_GPIO_DeInit+0x1e4>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	220f      	movs	r2, #15
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a62      	ldr	r2, [pc, #392]	; (800561c <HAL_GPIO_DeInit+0x1e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d037      	beq.n	8005506 <HAL_GPIO_DeInit+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a61      	ldr	r2, [pc, #388]	; (8005620 <HAL_GPIO_DeInit+0x1ec>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d031      	beq.n	8005502 <HAL_GPIO_DeInit+0xce>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a60      	ldr	r2, [pc, #384]	; (8005624 <HAL_GPIO_DeInit+0x1f0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02b      	beq.n	80054fe <HAL_GPIO_DeInit+0xca>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a5f      	ldr	r2, [pc, #380]	; (8005628 <HAL_GPIO_DeInit+0x1f4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d025      	beq.n	80054fa <HAL_GPIO_DeInit+0xc6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a5e      	ldr	r2, [pc, #376]	; (800562c <HAL_GPIO_DeInit+0x1f8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <HAL_GPIO_DeInit+0xc2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <HAL_GPIO_DeInit+0x1fc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d019      	beq.n	80054f2 <HAL_GPIO_DeInit+0xbe>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <HAL_GPIO_DeInit+0x200>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_GPIO_DeInit+0xba>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a5b      	ldr	r2, [pc, #364]	; (8005638 <HAL_GPIO_DeInit+0x204>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00d      	beq.n	80054ea <HAL_GPIO_DeInit+0xb6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a5a      	ldr	r2, [pc, #360]	; (800563c <HAL_GPIO_DeInit+0x208>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <HAL_GPIO_DeInit+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a59      	ldr	r2, [pc, #356]	; (8005640 <HAL_GPIO_DeInit+0x20c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_GPIO_DeInit+0xae>
 80054de:	2309      	movs	r3, #9
 80054e0:	e012      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054e2:	230a      	movs	r3, #10
 80054e4:	e010      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054e6:	2308      	movs	r3, #8
 80054e8:	e00e      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054ea:	2307      	movs	r3, #7
 80054ec:	e00c      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054ee:	2306      	movs	r3, #6
 80054f0:	e00a      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054f2:	2305      	movs	r3, #5
 80054f4:	e008      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054f6:	2304      	movs	r3, #4
 80054f8:	e006      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054fa:	2303      	movs	r3, #3
 80054fc:	e004      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 80054fe:	2302      	movs	r3, #2
 8005500:	e002      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <HAL_GPIO_DeInit+0xd4>
 8005506:	2300      	movs	r3, #0
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	f002 0203 	and.w	r2, r2, #3
 800550e:	0092      	lsls	r2, r2, #2
 8005510:	4093      	lsls	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d132      	bne.n	800557e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005518:	4b4a      	ldr	r3, [pc, #296]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	43db      	mvns	r3, r3
 8005520:	4948      	ldr	r1, [pc, #288]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 8005522:	4013      	ands	r3, r2
 8005524:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	43db      	mvns	r3, r3
 800552e:	4945      	ldr	r1, [pc, #276]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 8005530:	4013      	ands	r3, r2
 8005532:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005534:	4b43      	ldr	r3, [pc, #268]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	43db      	mvns	r3, r3
 800553c:	4941      	ldr	r1, [pc, #260]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 800553e:	4013      	ands	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005542:	4b40      	ldr	r3, [pc, #256]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	43db      	mvns	r3, r3
 800554a:	493e      	ldr	r1, [pc, #248]	; (8005644 <HAL_GPIO_DeInit+0x210>)
 800554c:	4013      	ands	r3, r2
 800554e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	220f      	movs	r2, #15
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005560:	4a2d      	ldr	r2, [pc, #180]	; (8005618 <HAL_GPIO_DeInit+0x1e4>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	3302      	adds	r3, #2
 8005568:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	43da      	mvns	r2, r3
 8005570:	4829      	ldr	r0, [pc, #164]	; (8005618 <HAL_GPIO_DeInit+0x1e4>)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	400a      	ands	r2, r1
 8005578:	3302      	adds	r3, #2
 800557a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2103      	movs	r1, #3
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	08da      	lsrs	r2, r3, #3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3208      	adds	r2, #8
 800559c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	220f      	movs	r2, #15
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	08d2      	lsrs	r2, r2, #3
 80055b4:	4019      	ands	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3208      	adds	r2, #8
 80055ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2103      	movs	r1, #3
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	2101      	movs	r1, #1
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	401a      	ands	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	2103      	movs	r1, #3
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	401a      	ands	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	3301      	adds	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	f67f af22 	bls.w	8005450 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40013800 	.word	0x40013800
 800561c:	40020000 	.word	0x40020000
 8005620:	40020400 	.word	0x40020400
 8005624:	40020800 	.word	0x40020800
 8005628:	40020c00 	.word	0x40020c00
 800562c:	40021000 	.word	0x40021000
 8005630:	40021400 	.word	0x40021400
 8005634:	40021800 	.word	0x40021800
 8005638:	40021c00 	.word	0x40021c00
 800563c:	40022000 	.word	0x40022000
 8005640:	40022400 	.word	0x40022400
 8005644:	40013c00 	.word	0x40013c00

08005648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e001      	b.n	800566a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	807b      	strh	r3, [r7, #2]
 8005684:	4613      	mov	r3, r2
 8005686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005688:	787b      	ldrb	r3, [r7, #1]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568e:	887a      	ldrh	r2, [r7, #2]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005694:	e003      	b.n	800569e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	041a      	lsls	r2, r3, #16
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	619a      	str	r2, [r3, #24]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e07f      	b.n	80057be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fd fdb6 	bl	8003244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800570c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	e006      	b.n	8005734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d104      	bne.n	8005746 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <HAL_I2C_Init+0x11c>)
 8005752:	430b      	orrs	r3, r1
 8005754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	ea42 0103 	orr.w	r1, r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	02008000 	.word	0x02008000

080057cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e021      	b.n	8005822 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2224      	movs	r2, #36	; 0x24
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fd fd9c 	bl	8003334 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4603      	mov	r3, r0
 800583c:	817b      	strh	r3, [r7, #10]
 800583e:	460b      	mov	r3, r1
 8005840:	813b      	strh	r3, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	f040 80f9 	bne.w	8005a46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_I2C_Mem_Write+0x34>
 800585a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005866:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0ed      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_I2C_Mem_Write+0x4e>
 8005876:	2302      	movs	r3, #2
 8005878:	e0e6      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005882:	f7fe fa0b 	bl	8003c9c <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2319      	movs	r3, #25
 800588e:	2201      	movs	r2, #1
 8005890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fad1 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0d1      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2221      	movs	r2, #33	; 0x21
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2240      	movs	r2, #64	; 0x40
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058cc:	88f8      	ldrh	r0, [r7, #6]
 80058ce:	893a      	ldrh	r2, [r7, #8]
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4603      	mov	r3, r0
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f9e1 	bl	8005ca4 <I2C_RequestMemoryWrite>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0a9      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2bff      	cmp	r3, #255	; 0xff
 80058fc:	d90e      	bls.n	800591c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	22ff      	movs	r2, #255	; 0xff
 8005902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	b2da      	uxtb	r2, r3
 800590a:	8979      	ldrh	r1, [r7, #10]
 800590c:	2300      	movs	r3, #0
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fbb3 	bl	8006080 <I2C_TransferConfig>
 800591a:	e00f      	b.n	800593c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	b2da      	uxtb	r2, r3
 800592c:	8979      	ldrh	r1, [r7, #10]
 800592e:	2300      	movs	r3, #0
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 fba2 	bl	8006080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fabb 	bl	8005ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e07b      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d034      	beq.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d130      	bne.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa4d 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04d      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2bff      	cmp	r3, #255	; 0xff
 80059b4:	d90e      	bls.n	80059d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	22ff      	movs	r2, #255	; 0xff
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	8979      	ldrh	r1, [r7, #10]
 80059c4:	2300      	movs	r3, #0
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fb57 	bl	8006080 <I2C_TransferConfig>
 80059d2:	e00f      	b.n	80059f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	8979      	ldrh	r1, [r7, #10]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fb46 	bl	8006080 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d19e      	bne.n	800593c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fa9a 	bl	8005f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01a      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2220      	movs	r2, #32
 8005a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <HAL_I2C_Mem_Write+0x224>)
 8005a26:	400b      	ands	r3, r1
 8005a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	fe00e800 	.word	0xfe00e800

08005a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	817b      	strh	r3, [r7, #10]
 8005a66:	460b      	mov	r3, r1
 8005a68:	813b      	strh	r3, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f040 80fd 	bne.w	8005c76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x34>
 8005a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0f1      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_Mem_Read+0x4e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e0ea      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aaa:	f7fe f8f7 	bl	8003c9c <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2319      	movs	r3, #25
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f9bd 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0d5      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2222      	movs	r2, #34	; 0x22
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2240      	movs	r2, #64	; 0x40
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005af4:	88f8      	ldrh	r0, [r7, #6]
 8005af6:	893a      	ldrh	r2, [r7, #8]
 8005af8:	8979      	ldrh	r1, [r7, #10]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	4603      	mov	r3, r0
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f921 	bl	8005d4c <I2C_RequestMemoryRead>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0ad      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d90e      	bls.n	8005b44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	22ff      	movs	r2, #255	; 0xff
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	8979      	ldrh	r1, [r7, #10]
 8005b34:	4b52      	ldr	r3, [pc, #328]	; (8005c80 <HAL_I2C_Mem_Read+0x22c>)
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fa9f 	bl	8006080 <I2C_TransferConfig>
 8005b42:	e00f      	b.n	8005b64 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	8979      	ldrh	r1, [r7, #10]
 8005b56:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <HAL_I2C_Mem_Read+0x22c>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 fa8e 	bl	8006080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f964 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07c      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d034      	beq.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d130      	bne.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f935 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e04d      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2bff      	cmp	r3, #255	; 0xff
 8005be4:	d90e      	bls.n	8005c04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	8979      	ldrh	r1, [r7, #10]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa3f 	bl	8006080 <I2C_TransferConfig>
 8005c02:	e00f      	b.n	8005c24 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	8979      	ldrh	r1, [r7, #10]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fa2e 	bl	8006080 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d19a      	bne.n	8005b64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f982 	bl	8005f3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e01a      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2220      	movs	r2, #32
 8005c48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_I2C_Mem_Read+0x230>)
 8005c56:	400b      	ands	r3, r1
 8005c58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	80002400 	.word	0x80002400
 8005c84:	fe00e800 	.word	0xfe00e800

08005c88 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	817b      	strh	r3, [r7, #10]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	813b      	strh	r3, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	8979      	ldrh	r1, [r7, #10]
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <I2C_RequestMemoryWrite+0xa4>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f9d7 	bl	8006080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f8f0 	bl	8005ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e02c      	b.n	8005d40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf6:	e015      	b.n	8005d24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f8d6 	bl	8005ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e012      	b.n	8005d40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1a:	893b      	ldrh	r3, [r7, #8]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2180      	movs	r1, #128	; 0x80
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f884 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	80002000 	.word	0x80002000

08005d4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	817b      	strh	r3, [r7, #10]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	813b      	strh	r3, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <I2C_RequestMemoryRead+0xa4>)
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f984 	bl	8006080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	69b9      	ldr	r1, [r7, #24]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f89d 	bl	8005ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e02c      	b.n	8005de6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d92:	893b      	ldrh	r3, [r7, #8]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d9c:	e015      	b.n	8005dca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f883 	bl	8005ebc <I2C_WaitOnTXISFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e012      	b.n	8005de6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2140      	movs	r1, #64	; 0x40
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f831 	bl	8005e3c <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	80002000 	.word	0x80002000

08005df4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d103      	bne.n	8005e12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d007      	beq.n	8005e30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	619a      	str	r2, [r3, #24]
  }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e4c:	e022      	b.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d01e      	beq.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fd ff21 	bl	8003c9c <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d113      	bne.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e00f      	b.n	8005eb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d0cd      	beq.n	8005e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ec8:	e02c      	b.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68b9      	ldr	r1, [r7, #8]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 f870 	bl	8005fb4 <I2C_IsAcknowledgeFailed>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e02a      	b.n	8005f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d01e      	beq.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fd fed9 	bl	8003c9c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d113      	bne.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e007      	b.n	8005f34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d1cb      	bne.n	8005eca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f48:	e028      	b.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f830 	bl	8005fb4 <I2C_IsAcknowledgeFailed>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e026      	b.n	8005fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7fd fe9d 	bl	8003c9c <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d113      	bne.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e007      	b.n	8005fac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d1cf      	bne.n	8005f4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d151      	bne.n	8006072 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fce:	e022      	b.n	8006016 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	d01e      	beq.n	8006016 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fd fe60 	bl	8003c9c <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <I2C_IsAcknowledgeFailed+0x3a>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d113      	bne.n	8006016 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e02e      	b.n	8006074 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b20      	cmp	r3, #32
 8006022:	d1d5      	bne.n	8005fd0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2210      	movs	r2, #16
 800602a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2220      	movs	r2, #32
 8006032:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fedd 	bl	8005df4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <I2C_IsAcknowledgeFailed+0xc8>)
 8006046:	400b      	ands	r3, r1
 8006048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	fe00e800 	.word	0xfe00e800

08006080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	817b      	strh	r3, [r7, #10]
 800608e:	4613      	mov	r3, r2
 8006090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	0d5b      	lsrs	r3, r3, #21
 800609c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <I2C_TransferConfig+0x58>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	43db      	mvns	r3, r3
 80060a6:	ea02 0103 	and.w	r1, r2, r3
 80060aa:	897b      	ldrh	r3, [r7, #10]
 80060ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060b0:	7a7b      	ldrb	r3, [r7, #9]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	431a      	orrs	r2, r3
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	03ff63ff 	.word	0x03ff63ff

080060dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d138      	bne.n	8006164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e032      	b.n	8006166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2224      	movs	r2, #36	; 0x24
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800612e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e000      	b.n	8006166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006172:	b480      	push	{r7}
 8006174:	b085      	sub	sp, #20
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b20      	cmp	r3, #32
 8006186:	d139      	bne.n	80061fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006192:	2302      	movs	r3, #2
 8006194:	e033      	b.n	80061fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e0bf      	b.n	800639e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fd f8ba 	bl	80033ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800624e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006264:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6899      	ldr	r1, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b4a      	ldr	r3, [pc, #296]	; (80063a8 <HAL_LTDC_Init+0x19c>)
 8006280:	400b      	ands	r3, r1
 8006282:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	431a      	orrs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68d9      	ldr	r1, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b3e      	ldr	r3, [pc, #248]	; (80063a8 <HAL_LTDC_Init+0x19c>)
 80062ae:	400b      	ands	r3, r1
 80062b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68d9      	ldr	r1, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b33      	ldr	r3, [pc, #204]	; (80063a8 <HAL_LTDC_Init+0x19c>)
 80062dc:	400b      	ands	r3, r1
 80062de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6919      	ldr	r1, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6959      	ldr	r1, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b27      	ldr	r3, [pc, #156]	; (80063a8 <HAL_LTDC_Init+0x19c>)
 800630a:	400b      	ands	r3, r1
 800630c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	041b      	lsls	r3, r3, #16
 8006314:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6959      	ldr	r1, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0206 	orr.w	r2, r2, #6
 800637a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	f000f800 	.word	0xf000f800

080063ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d023      	beq.n	8006416 <HAL_LTDC_IRQHandler+0x6a>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01e      	beq.n	8006416 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2204      	movs	r2, #4
 8006404:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f86f 	bl	80064f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d023      	beq.n	8006468 <HAL_LTDC_IRQHandler+0xbc>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01e      	beq.n	8006468 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0202 	bic.w	r2, r2, #2
 8006438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2202      	movs	r2, #2
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006448:	f043 0202 	orr.w	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2204      	movs	r2, #4
 8006456:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f846 	bl	80064f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01b      	beq.n	80064aa <HAL_LTDC_IRQHandler+0xfe>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f82f 	bl	8006508 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <HAL_LTDC_IRQHandler+0x140>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0208 	bic.w	r2, r2, #8
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2208      	movs	r2, #8
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f818 	bl	800651c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006530:	b5b0      	push	{r4, r5, r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_LTDC_ConfigLayer+0x1a>
 8006546:	2302      	movs	r3, #2
 8006548:	e02c      	b.n	80065a4 <HAL_LTDC_ConfigLayer+0x74>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2134      	movs	r1, #52	; 0x34
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	4413      	add	r3, r2
 8006566:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4614      	mov	r4, r2
 800656e:	461d      	mov	r5, r3
 8006570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800657a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f81f 	bl	80065c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2201      	movs	r2, #1
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bdb0      	pop	{r4, r5, r7, pc}

080065ac <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065ba:	b2db      	uxtb	r3, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	0c1b      	lsrs	r3, r3, #16
 80065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e4:	4413      	add	r3, r2
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	01db      	lsls	r3, r3, #7
 80065f4:	4413      	add	r3, r2
 80065f6:	3384      	adds	r3, #132	; 0x84
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	4611      	mov	r1, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	01d2      	lsls	r2, r2, #7
 8006604:	440a      	add	r2, r1
 8006606:	3284      	adds	r2, #132	; 0x84
 8006608:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800660c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661e:	4413      	add	r3, r2
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	01db      	lsls	r3, r3, #7
 800662c:	440b      	add	r3, r1
 800662e:	3384      	adds	r3, #132	; 0x84
 8006630:	4619      	mov	r1, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006646:	4413      	add	r3, r2
 8006648:	041b      	lsls	r3, r3, #16
 800664a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	01db      	lsls	r3, r3, #7
 8006656:	4413      	add	r3, r2
 8006658:	3384      	adds	r3, #132	; 0x84
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	4611      	mov	r1, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	01d2      	lsls	r2, r2, #7
 8006666:	440a      	add	r2, r1
 8006668:	3284      	adds	r2, #132	; 0x84
 800666a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800666e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800667e:	4413      	add	r3, r2
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	440b      	add	r3, r1
 800668e:	3384      	adds	r3, #132	; 0x84
 8006690:	4619      	mov	r1, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	01db      	lsls	r3, r3, #7
 80066a2:	4413      	add	r3, r2
 80066a4:	3384      	adds	r3, #132	; 0x84
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	4611      	mov	r1, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	01d2      	lsls	r2, r2, #7
 80066b2:	440a      	add	r2, r1
 80066b4:	3284      	adds	r2, #132	; 0x84
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	01db      	lsls	r3, r3, #7
 80066c6:	4413      	add	r3, r2
 80066c8:	3384      	adds	r3, #132	; 0x84
 80066ca:	461a      	mov	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	061b      	lsls	r3, r3, #24
 80066ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	01db      	lsls	r3, r3, #7
 80066f8:	4413      	add	r3, r2
 80066fa:	3384      	adds	r3, #132	; 0x84
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	01db      	lsls	r3, r3, #7
 8006708:	4413      	add	r3, r2
 800670a:	3384      	adds	r3, #132	; 0x84
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006718:	461a      	mov	r2, r3
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	431a      	orrs	r2, r3
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	431a      	orrs	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	01db      	lsls	r3, r3, #7
 800672c:	440b      	add	r3, r1
 800672e:	3384      	adds	r3, #132	; 0x84
 8006730:	4619      	mov	r1, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	01db      	lsls	r3, r3, #7
 8006742:	4413      	add	r3, r2
 8006744:	3384      	adds	r3, #132	; 0x84
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	4611      	mov	r1, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	01d2      	lsls	r2, r2, #7
 8006752:	440a      	add	r2, r1
 8006754:	3284      	adds	r2, #132	; 0x84
 8006756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800675a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	01db      	lsls	r3, r3, #7
 8006766:	4413      	add	r3, r2
 8006768:	3384      	adds	r3, #132	; 0x84
 800676a:	461a      	mov	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	01db      	lsls	r3, r3, #7
 800677c:	4413      	add	r3, r2
 800677e:	3384      	adds	r3, #132	; 0x84
 8006780:	69da      	ldr	r2, [r3, #28]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	01db      	lsls	r3, r3, #7
 800678c:	440b      	add	r3, r1
 800678e:	3384      	adds	r3, #132	; 0x84
 8006790:	4619      	mov	r1, r3
 8006792:	4b58      	ldr	r3, [pc, #352]	; (80068f4 <LTDC_SetConfig+0x32c>)
 8006794:	4013      	ands	r3, r2
 8006796:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	68f9      	ldr	r1, [r7, #12]
 80067a2:	6809      	ldr	r1, [r1, #0]
 80067a4:	4608      	mov	r0, r1
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	01c9      	lsls	r1, r1, #7
 80067aa:	4401      	add	r1, r0
 80067ac:	3184      	adds	r1, #132	; 0x84
 80067ae:	4313      	orrs	r3, r2
 80067b0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	01db      	lsls	r3, r3, #7
 80067bc:	4413      	add	r3, r2
 80067be:	3384      	adds	r3, #132	; 0x84
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	01db      	lsls	r3, r3, #7
 80067cc:	4413      	add	r3, r2
 80067ce:	3384      	adds	r3, #132	; 0x84
 80067d0:	461a      	mov	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	01db      	lsls	r3, r3, #7
 80067e0:	4413      	add	r3, r2
 80067e2:	3384      	adds	r3, #132	; 0x84
 80067e4:	461a      	mov	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80067f4:	2304      	movs	r3, #4
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e01b      	b.n	8006832 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d102      	bne.n	8006808 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006802:	2303      	movs	r3, #3
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	e014      	b.n	8006832 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b04      	cmp	r3, #4
 800680e:	d00b      	beq.n	8006828 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006814:	2b02      	cmp	r3, #2
 8006816:	d007      	beq.n	8006828 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800681c:	2b03      	cmp	r3, #3
 800681e:	d003      	beq.n	8006828 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006824:	2b07      	cmp	r3, #7
 8006826:	d102      	bne.n	800682e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006828:	2302      	movs	r3, #2
 800682a:	61fb      	str	r3, [r7, #28]
 800682c:	e001      	b.n	8006832 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800682e:	2301      	movs	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	01db      	lsls	r3, r3, #7
 800683c:	4413      	add	r3, r2
 800683e:	3384      	adds	r3, #132	; 0x84
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	4611      	mov	r1, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	01d2      	lsls	r2, r2, #7
 800684c:	440a      	add	r2, r1
 800684e:	3284      	adds	r2, #132	; 0x84
 8006850:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006854:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	041a      	lsls	r2, r3, #16
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6859      	ldr	r1, [r3, #4]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1acb      	subs	r3, r1, r3
 800686c:	69f9      	ldr	r1, [r7, #28]
 800686e:	fb01 f303 	mul.w	r3, r1, r3
 8006872:	3303      	adds	r3, #3
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	6809      	ldr	r1, [r1, #0]
 8006878:	4608      	mov	r0, r1
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	01c9      	lsls	r1, r1, #7
 800687e:	4401      	add	r1, r0
 8006880:	3184      	adds	r1, #132	; 0x84
 8006882:	4313      	orrs	r3, r2
 8006884:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	4413      	add	r3, r2
 8006892:	3384      	adds	r3, #132	; 0x84
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	01db      	lsls	r3, r3, #7
 80068a0:	440b      	add	r3, r1
 80068a2:	3384      	adds	r3, #132	; 0x84
 80068a4:	4619      	mov	r1, r3
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <LTDC_SetConfig+0x330>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	01db      	lsls	r3, r3, #7
 80068b6:	4413      	add	r3, r2
 80068b8:	3384      	adds	r3, #132	; 0x84
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	01db      	lsls	r3, r3, #7
 80068cc:	4413      	add	r3, r2
 80068ce:	3384      	adds	r3, #132	; 0x84
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	4611      	mov	r1, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	01d2      	lsls	r2, r2, #7
 80068dc:	440a      	add	r2, r1
 80068de:	3284      	adds	r2, #132	; 0x84
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	6013      	str	r3, [r2, #0]
}
 80068e6:	bf00      	nop
 80068e8:	3724      	adds	r7, #36	; 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	fffff8f8 	.word	0xfffff8f8
 80068f8:	fffff800 	.word	0xfffff800

080068fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a04      	ldr	r2, [pc, #16]	; (8006918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40007000 	.word	0x40007000

0800691c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006926:	4b23      	ldr	r3, [pc, #140]	; (80069b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006930:	6413      	str	r3, [r2, #64]	; 0x40
 8006932:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800694a:	f7fd f9a7 	bl	8003c9c <HAL_GetTick>
 800694e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006950:	e009      	b.n	8006966 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006952:	f7fd f9a3 	bl	8003c9c <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d901      	bls.n	8006966 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e022      	b.n	80069ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d1ee      	bne.n	8006952 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006974:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006980:	f7fd f98c 	bl	8003c9c <HAL_GetTick>
 8006984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006986:	e009      	b.n	800699c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006988:	f7fd f988 	bl	8003c9c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006996:	d901      	bls.n	800699c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e007      	b.n	80069ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a8:	d1ee      	bne.n	8006988 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40007000 	.word	0x40007000

080069bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80069c4:	2300      	movs	r3, #0
 80069c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e291      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8087 	beq.w	8006aee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069e0:	4b96      	ldr	r3, [pc, #600]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 030c 	and.w	r3, r3, #12
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d00c      	beq.n	8006a06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ec:	4b93      	ldr	r3, [pc, #588]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 030c 	and.w	r3, r3, #12
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d112      	bne.n	8006a1e <HAL_RCC_OscConfig+0x62>
 80069f8:	4b90      	ldr	r3, [pc, #576]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a04:	d10b      	bne.n	8006a1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a06:	4b8d      	ldr	r3, [pc, #564]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d06c      	beq.n	8006aec <HAL_RCC_OscConfig+0x130>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d168      	bne.n	8006aec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e26b      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_OscConfig+0x7a>
 8006a28:	4b84      	ldr	r3, [pc, #528]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a83      	ldr	r2, [pc, #524]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e02e      	b.n	8006a94 <HAL_RCC_OscConfig+0xd8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x9c>
 8006a3e:	4b7f      	ldr	r3, [pc, #508]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7e      	ldr	r2, [pc, #504]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b7c      	ldr	r3, [pc, #496]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a7b      	ldr	r2, [pc, #492]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e01d      	b.n	8006a94 <HAL_RCC_OscConfig+0xd8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCC_OscConfig+0xc0>
 8006a62:	4b76      	ldr	r3, [pc, #472]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a75      	ldr	r2, [pc, #468]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4b73      	ldr	r3, [pc, #460]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a72      	ldr	r2, [pc, #456]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e00b      	b.n	8006a94 <HAL_RCC_OscConfig+0xd8>
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a6e      	ldr	r2, [pc, #440]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6b      	ldr	r2, [pc, #428]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d013      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9c:	f7fd f8fe 	bl	8003c9c <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa4:	f7fd f8fa 	bl	8003c9c <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b64      	cmp	r3, #100	; 0x64
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e21f      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ab6:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCC_OscConfig+0xe8>
 8006ac2:	e014      	b.n	8006aee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fd f8ea 	bl	8003c9c <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006acc:	f7fd f8e6 	bl	8003c9c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b64      	cmp	r3, #100	; 0x64
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e20b      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ade:	4b57      	ldr	r3, [pc, #348]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x110>
 8006aea:	e000      	b.n	8006aee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d069      	beq.n	8006bce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b06:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d11c      	bne.n	8006b4c <HAL_RCC_OscConfig+0x190>
 8006b12:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d116      	bne.n	8006b4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b1e:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <HAL_RCC_OscConfig+0x17a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d001      	beq.n	8006b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e1df      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b36:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	493d      	ldr	r1, [pc, #244]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b4a:	e040      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d023      	beq.n	8006b9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b54:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fd f89c 	bl	8003c9c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b68:	f7fd f898 	bl	8003c9c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e1bd      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7a:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b86:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	4929      	ldr	r1, [pc, #164]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]
 8006b9a:	e018      	b.n	8006bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006ba2:	f023 0301 	bic.w	r3, r3, #1
 8006ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fd f878 	bl	8003c9c <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bb0:	f7fd f874 	bl	8003c9c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e199      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d038      	beq.n	8006c4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d019      	beq.n	8006c16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be6:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fd f855 	bl	8003c9c <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf6:	f7fd f851 	bl	8003c9c <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e176      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x23a>
 8006c14:	e01a      	b.n	8006c4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_RCC_OscConfig+0x280>)
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c22:	f7fd f83b 	bl	8003c9c <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2a:	f7fd f837 	bl	8003c9c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d903      	bls.n	8006c40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e15c      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
 8006c3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c40:	4b91      	ldr	r3, [pc, #580]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1ee      	bne.n	8006c2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 80a4 	beq.w	8006da2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5a:	4b8b      	ldr	r3, [pc, #556]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10d      	bne.n	8006c82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c66:	4b88      	ldr	r3, [pc, #544]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	4a87      	ldr	r2, [pc, #540]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c70:	6413      	str	r3, [r2, #64]	; 0x40
 8006c72:	4b85      	ldr	r3, [pc, #532]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	60bb      	str	r3, [r7, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c82:	4b82      	ldr	r3, [pc, #520]	; (8006e8c <HAL_RCC_OscConfig+0x4d0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d118      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <HAL_RCC_OscConfig+0x4d0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7e      	ldr	r2, [pc, #504]	; (8006e8c <HAL_RCC_OscConfig+0x4d0>)
 8006c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9a:	f7fc ffff 	bl	8003c9c <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca2:	f7fc fffb 	bl	8003c9c <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b64      	cmp	r3, #100	; 0x64
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e120      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	4b75      	ldr	r3, [pc, #468]	; (8006e8c <HAL_RCC_OscConfig+0x4d0>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d106      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x31a>
 8006cc8:	4b6f      	ldr	r3, [pc, #444]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	4a6e      	ldr	r2, [pc, #440]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd4:	e02d      	b.n	8006d32 <HAL_RCC_OscConfig+0x376>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x33c>
 8006cde:	4b6a      	ldr	r3, [pc, #424]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce2:	4a69      	ldr	r2, [pc, #420]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cea:	4b67      	ldr	r3, [pc, #412]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a66      	ldr	r2, [pc, #408]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006cf0:	f023 0304 	bic.w	r3, r3, #4
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf6:	e01c      	b.n	8006d32 <HAL_RCC_OscConfig+0x376>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	d10c      	bne.n	8006d1a <HAL_RCC_OscConfig+0x35e>
 8006d00:	4b61      	ldr	r3, [pc, #388]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d04:	4a60      	ldr	r2, [pc, #384]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d06:	f043 0304 	orr.w	r3, r3, #4
 8006d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0c:	4b5e      	ldr	r3, [pc, #376]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d10:	4a5d      	ldr	r2, [pc, #372]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	6713      	str	r3, [r2, #112]	; 0x70
 8006d18:	e00b      	b.n	8006d32 <HAL_RCC_OscConfig+0x376>
 8006d1a:	4b5b      	ldr	r3, [pc, #364]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4a5a      	ldr	r2, [pc, #360]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	6713      	str	r3, [r2, #112]	; 0x70
 8006d26:	4b58      	ldr	r3, [pc, #352]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a57      	ldr	r2, [pc, #348]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d015      	beq.n	8006d66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3a:	f7fc ffaf 	bl	8003c9c <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d40:	e00a      	b.n	8006d58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d42:	f7fc ffab 	bl	8003c9c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e0ce      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d58:	4b4b      	ldr	r3, [pc, #300]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0ee      	beq.n	8006d42 <HAL_RCC_OscConfig+0x386>
 8006d64:	e014      	b.n	8006d90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d66:	f7fc ff99 	bl	8003c9c <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6c:	e00a      	b.n	8006d84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6e:	f7fc ff95 	bl	8003c9c <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e0b8      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d84:	4b40      	ldr	r3, [pc, #256]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ee      	bne.n	8006d6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d105      	bne.n	8006da2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d96:	4b3c      	ldr	r3, [pc, #240]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	4a3b      	ldr	r2, [pc, #236]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 80a4 	beq.w	8006ef4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dac:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d06b      	beq.n	8006e90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d149      	bne.n	8006e54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc0:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fc ff66 	bl	8003c9c <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd4:	f7fc ff62 	bl	8003c9c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e087      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	4b28      	ldr	r3, [pc, #160]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	4313      	orrs	r3, r2
 8006e18:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a18      	ldr	r2, [pc, #96]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fc ff36 	bl	8003c9c <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e34:	f7fc ff32 	bl	8003c9c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e057      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x478>
 8006e52:	e04f      	b.n	8006ef4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fc ff1c 	bl	8003c9c <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fc ff18 	bl	8003c9c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e03d      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <HAL_RCC_OscConfig+0x4cc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x4ac>
 8006e86:	e035      	b.n	8006ef4 <HAL_RCC_OscConfig+0x538>
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e90:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <HAL_RCC_OscConfig+0x544>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d028      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d121      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d11a      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ec6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d111      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40023800 	.word	0x40023800

08006f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0d0      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f1c:	4b6a      	ldr	r3, [pc, #424]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d910      	bls.n	8006f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b67      	ldr	r3, [pc, #412]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 020f 	bic.w	r2, r3, #15
 8006f32:	4965      	ldr	r1, [pc, #404]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3a:	4b63      	ldr	r3, [pc, #396]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0b8      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d020      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f64:	4b59      	ldr	r3, [pc, #356]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4a58      	ldr	r2, [pc, #352]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f7c:	4b53      	ldr	r3, [pc, #332]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	4a52      	ldr	r2, [pc, #328]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f88:	4b50      	ldr	r3, [pc, #320]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	494d      	ldr	r1, [pc, #308]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d040      	beq.n	8007028 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d107      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fae:	4b47      	ldr	r3, [pc, #284]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d115      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e07f      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc6:	4b41      	ldr	r3, [pc, #260]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e073      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd6:	4b3d      	ldr	r3, [pc, #244]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e06b      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f023 0203 	bic.w	r2, r3, #3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4936      	ldr	r1, [pc, #216]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff8:	f7fc fe50 	bl	8003c9c <HAL_GetTick>
 8006ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007000:	f7fc fe4c 	bl	8003c9c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e053      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	4b2d      	ldr	r3, [pc, #180]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 020c 	and.w	r2, r3, #12
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	429a      	cmp	r2, r3
 8007026:	d1eb      	bne.n	8007000 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007028:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d210      	bcs.n	8007058 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 020f 	bic.w	r2, r3, #15
 800703e:	4922      	ldr	r1, [pc, #136]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4313      	orrs	r3, r2
 8007044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007046:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d001      	beq.n	8007058 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e032      	b.n	80070be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4916      	ldr	r1, [pc, #88]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8007072:	4313      	orrs	r3, r2
 8007074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	490e      	ldr	r1, [pc, #56]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007096:	f000 f821 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 800709a:	4601      	mov	r1, r0
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_RCC_ClockConfig+0x1c8>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_RCC_ClockConfig+0x1cc>)
 80070a8:	5cd3      	ldrb	r3, [r2, r3]
 80070aa:	fa21 f303 	lsr.w	r3, r1, r3
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <HAL_RCC_ClockConfig+0x1d0>)
 80070b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <HAL_RCC_ClockConfig+0x1d4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fc fd00 	bl	8003abc <HAL_InitTick>

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40023c00 	.word	0x40023c00
 80070cc:	40023800 	.word	0x40023800
 80070d0:	0800e4f8 	.word	0x0800e4f8
 80070d4:	20000044 	.word	0x20000044
 80070d8:	20000048 	.word	0x20000048

080070dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	2300      	movs	r3, #0
 80070ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070f2:	4b50      	ldr	r3, [pc, #320]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d007      	beq.n	800710e <HAL_RCC_GetSysClockFreq+0x32>
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d008      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0x38>
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 808d 	bne.w	8007222 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007108:	4b4b      	ldr	r3, [pc, #300]	; (8007238 <HAL_RCC_GetSysClockFreq+0x15c>)
 800710a:	60bb      	str	r3, [r7, #8]
      break;
 800710c:	e08c      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800710e:	4b4b      	ldr	r3, [pc, #300]	; (800723c <HAL_RCC_GetSysClockFreq+0x160>)
 8007110:	60bb      	str	r3, [r7, #8]
      break;
 8007112:	e089      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007114:	4b47      	ldr	r3, [pc, #284]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800711e:	4b45      	ldr	r3, [pc, #276]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d023      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800712a:	4b42      	ldr	r3, [pc, #264]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	099b      	lsrs	r3, r3, #6
 8007130:	f04f 0400 	mov.w	r4, #0
 8007134:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	ea03 0501 	and.w	r5, r3, r1
 8007140:	ea04 0602 	and.w	r6, r4, r2
 8007144:	4a3d      	ldr	r2, [pc, #244]	; (800723c <HAL_RCC_GetSysClockFreq+0x160>)
 8007146:	fb02 f106 	mul.w	r1, r2, r6
 800714a:	2200      	movs	r2, #0
 800714c:	fb02 f205 	mul.w	r2, r2, r5
 8007150:	440a      	add	r2, r1
 8007152:	493a      	ldr	r1, [pc, #232]	; (800723c <HAL_RCC_GetSysClockFreq+0x160>)
 8007154:	fba5 0101 	umull	r0, r1, r5, r1
 8007158:	1853      	adds	r3, r2, r1
 800715a:	4619      	mov	r1, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f04f 0400 	mov.w	r4, #0
 8007162:	461a      	mov	r2, r3
 8007164:	4623      	mov	r3, r4
 8007166:	f7f9 f853 	bl	8000210 <__aeabi_uldivmod>
 800716a:	4603      	mov	r3, r0
 800716c:	460c      	mov	r4, r1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e049      	b.n	8007206 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007172:	4b30      	ldr	r3, [pc, #192]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	f04f 0400 	mov.w	r4, #0
 800717c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	ea03 0501 	and.w	r5, r3, r1
 8007188:	ea04 0602 	and.w	r6, r4, r2
 800718c:	4629      	mov	r1, r5
 800718e:	4632      	mov	r2, r6
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	f04f 0400 	mov.w	r4, #0
 8007198:	0154      	lsls	r4, r2, #5
 800719a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800719e:	014b      	lsls	r3, r1, #5
 80071a0:	4619      	mov	r1, r3
 80071a2:	4622      	mov	r2, r4
 80071a4:	1b49      	subs	r1, r1, r5
 80071a6:	eb62 0206 	sbc.w	r2, r2, r6
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	f04f 0400 	mov.w	r4, #0
 80071b2:	0194      	lsls	r4, r2, #6
 80071b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071b8:	018b      	lsls	r3, r1, #6
 80071ba:	1a5b      	subs	r3, r3, r1
 80071bc:	eb64 0402 	sbc.w	r4, r4, r2
 80071c0:	f04f 0100 	mov.w	r1, #0
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	00e2      	lsls	r2, r4, #3
 80071ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071ce:	00d9      	lsls	r1, r3, #3
 80071d0:	460b      	mov	r3, r1
 80071d2:	4614      	mov	r4, r2
 80071d4:	195b      	adds	r3, r3, r5
 80071d6:	eb44 0406 	adc.w	r4, r4, r6
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	02a2      	lsls	r2, r4, #10
 80071e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80071e8:	0299      	lsls	r1, r3, #10
 80071ea:	460b      	mov	r3, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	4621      	mov	r1, r4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f04f 0400 	mov.w	r4, #0
 80071f8:	461a      	mov	r2, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	f7f9 f808 	bl	8000210 <__aeabi_uldivmod>
 8007200:	4603      	mov	r3, r0
 8007202:	460c      	mov	r4, r1
 8007204:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <HAL_RCC_GetSysClockFreq+0x158>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	3301      	adds	r3, #1
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	60bb      	str	r3, [r7, #8]
      break;
 8007220:	e002      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007222:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007224:	60bb      	str	r3, [r7, #8]
      break;
 8007226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007228:	68bb      	ldr	r3, [r7, #8]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	00f42400 	.word	0x00f42400
 800723c:	017d7840 	.word	0x017d7840

08007240 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007244:	4b03      	ldr	r3, [pc, #12]	; (8007254 <HAL_RCC_GetHCLKFreq+0x14>)
 8007246:	681b      	ldr	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000044 	.word	0x20000044

08007258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800725c:	f7ff fff0 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007260:	4601      	mov	r1, r0
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	0a9b      	lsrs	r3, r3, #10
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4a03      	ldr	r2, [pc, #12]	; (800727c <HAL_RCC_GetPCLK1Freq+0x24>)
 800726e:	5cd3      	ldrb	r3, [r2, r3]
 8007270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40023800 	.word	0x40023800
 800727c:	0800e508 	.word	0x0800e508

08007280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007284:	f7ff ffdc 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007288:	4601      	mov	r1, r0
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	0b5b      	lsrs	r3, r3, #13
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	4a03      	ldr	r2, [pc, #12]	; (80072a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007296:	5cd3      	ldrb	r3, [r2, r3]
 8007298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800729c:	4618      	mov	r0, r3
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40023800 	.word	0x40023800
 80072a4:	0800e508 	.word	0x0800e508

080072a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	220f      	movs	r2, #15
 80072b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <HAL_RCC_GetClockConfig+0x5c>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0203 	and.w	r2, r3, #3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <HAL_RCC_GetClockConfig+0x5c>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072d0:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <HAL_RCC_GetClockConfig+0x5c>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <HAL_RCC_GetClockConfig+0x5c>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	08db      	lsrs	r3, r3, #3
 80072e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <HAL_RCC_GetClockConfig+0x60>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 020f 	and.w	r2, r3, #15
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	601a      	str	r2, [r3, #0]
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800
 8007308:	40023c00 	.word	0x40023c00

0800730c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d012      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007334:	4b69      	ldr	r3, [pc, #420]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4a68      	ldr	r2, [pc, #416]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800733e:	6093      	str	r3, [r2, #8]
 8007340:	4b66      	ldr	r3, [pc, #408]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	4964      	ldr	r1, [pc, #400]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734a:	4313      	orrs	r3, r2
 800734c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007356:	2301      	movs	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d017      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007366:	4b5d      	ldr	r3, [pc, #372]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007374:	4959      	ldr	r1, [pc, #356]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007384:	d101      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073a2:	4b4e      	ldr	r3, [pc, #312]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	494a      	ldr	r1, [pc, #296]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c0:	d101      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073c2:	2301      	movs	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 808b 	beq.w	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073f0:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	4a39      	ldr	r2, [pc, #228]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6413      	str	r3, [r2, #64]	; 0x40
 80073fc:	4b37      	ldr	r3, [pc, #220]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007408:	4b35      	ldr	r3, [pc, #212]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a34      	ldr	r2, [pc, #208]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800740e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007414:	f7fc fc42 	bl	8003c9c <HAL_GetTick>
 8007418:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800741a:	e008      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741c:	f7fc fc3e 	bl	8003c9c <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b64      	cmp	r3, #100	; 0x64
 8007428:	d901      	bls.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e355      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800742e:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800743a:	4b28      	ldr	r3, [pc, #160]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007442:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d035      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	429a      	cmp	r2, r3
 8007456:	d02e      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007458:	4b20      	ldr	r3, [pc, #128]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007460:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800746e:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007478:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007480:	4b16      	ldr	r3, [pc, #88]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d114      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fc fc06 	bl	8003c9c <HAL_GetTick>
 8007490:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007492:	e00a      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007494:	f7fc fc02 	bl	8003c9c <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d901      	bls.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e317      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0ee      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c2:	d111      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074d0:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074d2:	400b      	ands	r3, r1
 80074d4:	4901      	ldr	r1, [pc, #4]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	608b      	str	r3, [r1, #8]
 80074da:	e00b      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80074dc:	40023800 	.word	0x40023800
 80074e0:	40007000 	.word	0x40007000
 80074e4:	0ffffcff 	.word	0x0ffffcff
 80074e8:	4bb0      	ldr	r3, [pc, #704]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	4aaf      	ldr	r2, [pc, #700]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074f2:	6093      	str	r3, [r2, #8]
 80074f4:	4bad      	ldr	r3, [pc, #692]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007500:	49aa      	ldr	r1, [pc, #680]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007502:	4313      	orrs	r3, r2
 8007504:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b00      	cmp	r3, #0
 8007510:	d010      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007512:	4ba6      	ldr	r3, [pc, #664]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007518:	4aa4      	ldr	r2, [pc, #656]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800751a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800751e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007522:	4ba2      	ldr	r3, [pc, #648]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007524:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	499f      	ldr	r1, [pc, #636]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007540:	4b9a      	ldr	r3, [pc, #616]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007546:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800754e:	4997      	ldr	r1, [pc, #604]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007562:	4b92      	ldr	r3, [pc, #584]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007570:	498e      	ldr	r1, [pc, #568]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007584:	4b89      	ldr	r3, [pc, #548]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007592:	4986      	ldr	r1, [pc, #536]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075a6:	4b81      	ldr	r3, [pc, #516]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b4:	497d      	ldr	r1, [pc, #500]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075c8:	4b78      	ldr	r3, [pc, #480]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f023 0203 	bic.w	r2, r3, #3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	4975      	ldr	r1, [pc, #468]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075ea:	4b70      	ldr	r3, [pc, #448]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f0:	f023 020c 	bic.w	r2, r3, #12
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075f8:	496c      	ldr	r1, [pc, #432]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800760c:	4b67      	ldr	r3, [pc, #412]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	4964      	ldr	r1, [pc, #400]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800762e:	4b5f      	ldr	r3, [pc, #380]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007634:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763c:	495b      	ldr	r1, [pc, #364]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007650:	4b56      	ldr	r3, [pc, #344]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	4953      	ldr	r1, [pc, #332]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007672:	4b4e      	ldr	r3, [pc, #312]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007678:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	494a      	ldr	r1, [pc, #296]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007682:	4313      	orrs	r3, r2
 8007684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007694:	4b45      	ldr	r3, [pc, #276]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	4942      	ldr	r1, [pc, #264]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076b6:	4b3d      	ldr	r3, [pc, #244]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c4:	4939      	ldr	r1, [pc, #228]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076d8:	4b34      	ldr	r3, [pc, #208]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076e6:	4931      	ldr	r1, [pc, #196]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d011      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80076fa:	4b2c      	ldr	r3, [pc, #176]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007708:	4928      	ldr	r1, [pc, #160]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800770a:	4313      	orrs	r3, r2
 800770c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007718:	d101      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800771a:	2301      	movs	r3, #1
 800771c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800772a:	2301      	movs	r3, #1
 800772c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800773a:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007748:	4918      	ldr	r1, [pc, #96]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800775c:	4b13      	ldr	r3, [pc, #76]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	490f      	ldr	r1, [pc, #60]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d005      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007782:	f040 80d8 	bne.w	8007936 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a08      	ldr	r2, [pc, #32]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800778c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007792:	f7fc fa83 	bl	8003c9c <HAL_GetTick>
 8007796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007798:	e00a      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800779a:	f7fc fa7f 	bl	8003c9c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b64      	cmp	r3, #100	; 0x64
 80077a6:	d903      	bls.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e196      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80077ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b0:	4b6c      	ldr	r3, [pc, #432]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ee      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d021      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d11d      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077d0:	4b64      	ldr	r3, [pc, #400]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d6:	0c1b      	lsrs	r3, r3, #16
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077de:	4b61      	ldr	r3, [pc, #388]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	019a      	lsls	r2, r3, #6
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	061b      	lsls	r3, r3, #24
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	071b      	lsls	r3, r3, #28
 8007804:	4957      	ldr	r1, [pc, #348]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007820:	d00a      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02e      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007836:	d129      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007838:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783e:	0c1b      	lsrs	r3, r3, #16
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007846:	4b47      	ldr	r3, [pc, #284]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784c:	0f1b      	lsrs	r3, r3, #28
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	019a      	lsls	r2, r3, #6
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	061b      	lsls	r3, r3, #24
 8007866:	431a      	orrs	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	071b      	lsls	r3, r3, #28
 800786c:	493d      	ldr	r1, [pc, #244]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007874:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787a:	f023 021f 	bic.w	r2, r3, #31
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	3b01      	subs	r3, #1
 8007884:	4937      	ldr	r1, [pc, #220]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01d      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007898:	4b32      	ldr	r3, [pc, #200]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	0f1b      	lsrs	r3, r3, #28
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	019a      	lsls	r2, r3, #6
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	431a      	orrs	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	071b      	lsls	r3, r3, #28
 80078cc:	4925      	ldr	r1, [pc, #148]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d011      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	019a      	lsls	r2, r3, #6
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	071b      	lsls	r3, r3, #28
 80078fc:	4919      	ldr	r1, [pc, #100]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007904:	4b17      	ldr	r3, [pc, #92]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800790a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007910:	f7fc f9c4 	bl	8003c9c <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007916:	e008      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007918:	f7fc f9c0 	bl	8003c9c <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	; 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e0d7      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b01      	cmp	r3, #1
 800793a:	f040 80cd 	bne.w	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a08      	ldr	r2, [pc, #32]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800794a:	f7fc f9a7 	bl	8003c9c <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007950:	e00a      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007952:	f7fc f9a3 	bl	8003c9c <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b64      	cmp	r3, #100	; 0x64
 800795e:	d903      	bls.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e0ba      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007964:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007968:	4b5e      	ldr	r3, [pc, #376]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007974:	d0ed      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007992:	2b00      	cmp	r3, #0
 8007994:	d02e      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d12a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800799e:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079ac:	4b4d      	ldr	r3, [pc, #308]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b2:	0f1b      	lsrs	r3, r3, #28
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	019a      	lsls	r2, r3, #6
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	061b      	lsls	r3, r3, #24
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	071b      	lsls	r3, r3, #28
 80079d2:	4944      	ldr	r1, [pc, #272]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079da:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	493d      	ldr	r1, [pc, #244]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d022      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a08:	d11d      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a0a:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	0e1b      	lsrs	r3, r3, #24
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a18:	4b32      	ldr	r3, [pc, #200]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1e:	0f1b      	lsrs	r3, r3, #28
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	019a      	lsls	r2, r3, #6
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	041b      	lsls	r3, r3, #16
 8007a32:	431a      	orrs	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	061b      	lsls	r3, r3, #24
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	071b      	lsls	r3, r3, #28
 8007a3e:	4929      	ldr	r1, [pc, #164]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d028      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a66:	0c1b      	lsrs	r3, r3, #16
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	019a      	lsls	r2, r3, #6
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	071b      	lsls	r3, r3, #28
 8007a86:	4917      	ldr	r1, [pc, #92]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4911      	ldr	r1, [pc, #68]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a0e      	ldr	r2, [pc, #56]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fc f8f4 	bl	8003c9c <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ab8:	f7fc f8f0 	bl	8003c9c <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e007      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aca:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad6:	d1ef      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800

08007ae8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e06b      	b.n	8007bd2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7f5b      	ldrb	r3, [r3, #29]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fb fd16 	bl	800353c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	22ca      	movs	r2, #202	; 0xca
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2253      	movs	r2, #83	; 0x53
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb00 	bl	800812c <RTC_EnterInitMode>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	22ff      	movs	r2, #255	; 0xff
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e046      	b.n	8007bd2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6899      	ldr	r1, [r3, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b23      	ldr	r3, [pc, #140]	; (8007bdc <HAL_RTC_Init+0xf4>)
 8007b50:	400b      	ands	r3, r1
 8007b52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6899      	ldr	r1, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	68d2      	ldr	r2, [r2, #12]
 8007b7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6919      	ldr	r1, [r3, #16]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	041a      	lsls	r2, r3, #16
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b9e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0208 	bic.w	r2, r2, #8
 8007bae:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	22ff      	movs	r2, #255	; 0xff
 8007bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
  }
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	ff8fffbf 	.word	0xff8fffbf

08007be0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	7f1b      	ldrb	r3, [r3, #28]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_RTC_SetTime+0x1c>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e0a8      	b.n	8007d4e <HAL_RTC_SetTime+0x16e>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2202      	movs	r2, #2
 8007c06:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d126      	bne.n	8007c5c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 faac 	bl	8008184 <RTC_ByteToBcd2>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 faa5 	bl	8008184 <RTC_ByteToBcd2>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007c3e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fa9d 	bl	8008184 <RTC_ByteToBcd2>
 8007c4a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007c4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	7b1b      	ldrb	r3, [r3, #12]
 8007c54:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e018      	b.n	8007c8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007c7c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007c82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	7b1b      	ldrb	r3, [r3, #12]
 8007c88:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	22ca      	movs	r2, #202	; 0xca
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2253      	movs	r2, #83	; 0x53
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa44 	bl	800812c <RTC_EnterInitMode>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e045      	b.n	8007d4e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	6979      	ldr	r1, [r7, #20]
 8007cc8:	4b23      	ldr	r3, [pc, #140]	; (8007d58 <HAL_RTC_SetTime+0x178>)
 8007cca:	400b      	ands	r3, r1
 8007ccc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6899      	ldr	r1, [r3, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d111      	bne.n	8007d38 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f9e1 	bl	80080dc <HAL_RTC_WaitForSynchro>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e00a      	b.n	8007d4e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	007f7f7f 	.word	0x007f7f7f

08007d5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	7f1b      	ldrb	r3, [r3, #28]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_RTC_SetDate+0x1c>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e092      	b.n	8007e9e <HAL_RTC_SetDate+0x142>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2202      	movs	r2, #2
 8007d82:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10e      	bne.n	8007da8 <HAL_RTC_SetDate+0x4c>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d008      	beq.n	8007da8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	330a      	adds	r3, #10
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d11c      	bne.n	8007de8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	78db      	ldrb	r3, [r3, #3]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f9e6 	bl	8008184 <RTC_ByteToBcd2>
 8007db8:	4603      	mov	r3, r0
 8007dba:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f9df 	bl	8008184 <RTC_ByteToBcd2>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007dca:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	789b      	ldrb	r3, [r3, #2]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f9d7 	bl	8008184 <RTC_ByteToBcd2>
 8007dd6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007dd8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e00e      	b.n	8007e06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	78db      	ldrb	r3, [r3, #3]
 8007dec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007df4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007dfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	22ca      	movs	r2, #202	; 0xca
 8007e0c:	625a      	str	r2, [r3, #36]	; 0x24
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2253      	movs	r2, #83	; 0x53
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f988 	bl	800812c <RTC_EnterInitMode>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	22ff      	movs	r2, #255	; 0xff
 8007e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e031      	b.n	8007e9e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	6979      	ldr	r1, [r7, #20]
 8007e40:	4b19      	ldr	r3, [pc, #100]	; (8007ea8 <HAL_RTC_SetDate+0x14c>)
 8007e42:	400b      	ands	r3, r1
 8007e44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d111      	bne.n	8007e88 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f939 	bl	80080dc <HAL_RTC_WaitForSynchro>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e00a      	b.n	8007e9e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	22ff      	movs	r2, #255	; 0xff
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd90      	pop	{r4, r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	00ffff3f 	.word	0x00ffff3f

08007eac <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b089      	sub	sp, #36	; 0x24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	7f1b      	ldrb	r3, [r3, #28]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_RTC_SetAlarm+0x24>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e101      	b.n	80080d4 <HAL_RTC_SetAlarm+0x228>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d137      	bne.n	8007f52 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f942 	bl	8008184 <RTC_ByteToBcd2>
 8007f00:	4603      	mov	r3, r0
 8007f02:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f93b 	bl	8008184 <RTC_ByteToBcd2>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007f12:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 f933 	bl	8008184 <RTC_ByteToBcd2>
 8007f1e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007f20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	7b1b      	ldrb	r3, [r3, #12]
 8007f28:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007f2a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f925 	bl	8008184 <RTC_ByteToBcd2>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007f3e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007f46:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e023      	b.n	8007f9a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007f72:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007f78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	7b1b      	ldrb	r3, [r3, #12]
 8007f7e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007f80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007f8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007f90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007f96:	4313      	orrs	r3, r2
 8007f98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	22ca      	movs	r2, #202	; 0xca
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2253      	movs	r2, #83	; 0x53
 8007fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fbe:	d13f      	bne.n	8008040 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fde:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fe0:	f7fb fe5c 	bl	8003c9c <HAL_GetTick>
 8007fe4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007fe6:	e013      	b.n	8008010 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fe8:	f7fb fe58 	bl	8003c9c <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ff6:	d90b      	bls.n	8008010 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2203      	movs	r2, #3
 8008004:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e061      	b.n	80080d4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0e4      	beq.n	8007fe8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800803c:	609a      	str	r2, [r3, #8]
 800803e:	e03e      	b.n	80080be <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800804e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800805e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008060:	f7fb fe1c 	bl	8003c9c <HAL_GetTick>
 8008064:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008066:	e013      	b.n	8008090 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008068:	f7fb fe18 	bl	8003c9c <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008076:	d90b      	bls.n	8008090 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	22ff      	movs	r2, #255	; 0xff
 800807e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2203      	movs	r2, #3
 8008084:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e021      	b.n	80080d4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0e4      	beq.n	8008068 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3724      	adds	r7, #36	; 0x24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd90      	pop	{r4, r7, pc}

080080dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80080f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080f8:	f7fb fdd0 	bl	8003c9c <HAL_GetTick>
 80080fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80080fe:	e009      	b.n	8008114 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008100:	f7fb fdcc 	bl	8003c9c <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800810e:	d901      	bls.n	8008114 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e007      	b.n	8008124 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0ee      	beq.n	8008100 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d119      	bne.n	800817a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008150:	f7fb fda4 	bl	8003c9c <HAL_GetTick>
 8008154:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008156:	e009      	b.n	800816c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008158:	f7fb fda0 	bl	8003c9c <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008166:	d901      	bls.n	800816c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e007      	b.n	800817c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ee      	beq.n	8008158 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008192:	e005      	b.n	80081a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	3b0a      	subs	r3, #10
 800819e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d8f6      	bhi.n	8008194 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b2db      	uxtb	r3, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	7f1b      	ldrb	r3, [r3, #28]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d101      	bne.n	80081dc <HAL_RTCEx_SetTimeStamp+0x1c>
 80081d8:	2302      	movs	r3, #2
 80081da:	e03e      	b.n	800825a <HAL_RTCEx_SetTimeStamp+0x9a>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2202      	movs	r2, #2
 80081e6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	22ca      	movs	r2, #202	; 0xca
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2253      	movs	r2, #83	; 0x53
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0206 	bic.w	r2, r2, #6
 800821a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	430a      	orrs	r2, r1
 800822a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008242:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	22ff      	movs	r2, #255	; 0xff
 800824a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	fffff7f7 	.word	0xfffff7f7

0800826c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e025      	b.n	80082cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fb fc07 	bl	8003aa8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f001 fff7 	bl	800a2a0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	f002 f861 	bl	800a384 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d101      	bne.n	80082f0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e018      	b.n	8008322 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	4618      	mov	r0, r3
 8008302:	f002 f8bf 	bl	800a484 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d104      	bne.n	8008318 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2205      	movs	r2, #5
 8008312:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008316:	e003      	b.n	8008320 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d101      	bne.n	8008344 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008340:	2302      	movs	r3, #2
 8008342:	e00e      	b.n	8008362 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f002 f8b7 	bl	800a4c6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e084      	b.n	8008486 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fb f8ea 	bl	8003570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083bc:	d902      	bls.n	80083c4 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e002      	b.n	80083ca <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80083d2:	d007      	beq.n	80083e4 <HAL_SPI_Init+0x7a>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083dc:	d002      	beq.n	80083e4 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083f4:	d903      	bls.n	80083fe <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30
 80083fc:	e002      	b.n	8008404 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	ea42 0103 	orr.w	r1, r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	0c1b      	lsrs	r3, r3, #16
 8008444:	f003 0204 	and.w	r2, r3, #4
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	ea42 0103 	orr.w	r1, r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e01d      	b.n	80084dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fb f8cd 	bl	8003654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f000 fbc3 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	4b0c      	ldr	r3, [pc, #48]	; (8008534 <HAL_TIM_Base_Start_IT+0x50>)
 8008504:	4013      	ands	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b06      	cmp	r3, #6
 800850c:	d00b      	beq.n	8008526 <HAL_TIM_Base_Start_IT+0x42>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008514:	d007      	beq.n	8008526 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0201 	orr.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	00010007 	.word	0x00010007

08008538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e01d      	b.n	8008586 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f815 	bl	800858e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f000 fb6e 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d122      	bne.n	80085fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d11b      	bne.n	80085fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f06f 0202 	mvn.w	r2, #2
 80085ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fb19 	bl	8008c1c <HAL_TIM_IC_CaptureCallback>
 80085ea:	e005      	b.n	80085f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb0b 	bl	8008c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb1c 	bl	8008c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b04      	cmp	r3, #4
 800860a:	d122      	bne.n	8008652 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b04      	cmp	r3, #4
 8008618:	d11b      	bne.n	8008652 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f06f 0204 	mvn.w	r2, #4
 8008622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 faef 	bl	8008c1c <HAL_TIM_IC_CaptureCallback>
 800863e:	e005      	b.n	800864c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fae1 	bl	8008c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 faf2 	bl	8008c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b08      	cmp	r3, #8
 800865e:	d122      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d11b      	bne.n	80086a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f06f 0208 	mvn.w	r2, #8
 8008676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2204      	movs	r2, #4
 800867c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fac5 	bl	8008c1c <HAL_TIM_IC_CaptureCallback>
 8008692:	e005      	b.n	80086a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fab7 	bl	8008c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fac8 	bl	8008c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d122      	bne.n	80086fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d11b      	bne.n	80086fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f06f 0210 	mvn.w	r2, #16
 80086ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2208      	movs	r2, #8
 80086d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa9b 	bl	8008c1c <HAL_TIM_IC_CaptureCallback>
 80086e6:	e005      	b.n	80086f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa8d 	bl	8008c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa9e 	bl	8008c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b01      	cmp	r3, #1
 8008706:	d10e      	bne.n	8008726 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b01      	cmp	r3, #1
 8008714:	d107      	bne.n	8008726 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f06f 0201 	mvn.w	r2, #1
 800871e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7f9 fd8b 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008730:	2b80      	cmp	r3, #128	; 0x80
 8008732:	d10e      	bne.n	8008752 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d107      	bne.n	8008752 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800874a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 ffb9 	bl	80096c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008760:	d10e      	bne.n	8008780 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d107      	bne.n	8008780 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 ffac 	bl	80096d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d10e      	bne.n	80087ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d107      	bne.n	80087ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa4c 	bl	8008c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d10e      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d107      	bne.n	80087d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0220 	mvn.w	r2, #32
 80087d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 ff6c 	bl	80096b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e105      	b.n	8008a06 <HAL_TIM_PWM_ConfigChannel+0x226>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b14      	cmp	r3, #20
 800880e:	f200 80f0 	bhi.w	80089f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008812:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008818:	0800886d 	.word	0x0800886d
 800881c:	080089f3 	.word	0x080089f3
 8008820:	080089f3 	.word	0x080089f3
 8008824:	080089f3 	.word	0x080089f3
 8008828:	080088ad 	.word	0x080088ad
 800882c:	080089f3 	.word	0x080089f3
 8008830:	080089f3 	.word	0x080089f3
 8008834:	080089f3 	.word	0x080089f3
 8008838:	080088ef 	.word	0x080088ef
 800883c:	080089f3 	.word	0x080089f3
 8008840:	080089f3 	.word	0x080089f3
 8008844:	080089f3 	.word	0x080089f3
 8008848:	0800892f 	.word	0x0800892f
 800884c:	080089f3 	.word	0x080089f3
 8008850:	080089f3 	.word	0x080089f3
 8008854:	080089f3 	.word	0x080089f3
 8008858:	08008971 	.word	0x08008971
 800885c:	080089f3 	.word	0x080089f3
 8008860:	080089f3 	.word	0x080089f3
 8008864:	080089f3 	.word	0x080089f3
 8008868:	080089b1 	.word	0x080089b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fa90 	bl	8008d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699a      	ldr	r2, [r3, #24]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0208 	orr.w	r2, r2, #8
 8008886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0204 	bic.w	r2, r2, #4
 8008896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6999      	ldr	r1, [r3, #24]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	619a      	str	r2, [r3, #24]
      break;
 80088aa:	e0a3      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fae2 	bl	8008e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6999      	ldr	r1, [r3, #24]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	021a      	lsls	r2, r3, #8
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	619a      	str	r2, [r3, #24]
      break;
 80088ec:	e082      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68b9      	ldr	r1, [r7, #8]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fb39 	bl	8008f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0208 	orr.w	r2, r2, #8
 8008908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0204 	bic.w	r2, r2, #4
 8008918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69d9      	ldr	r1, [r3, #28]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	691a      	ldr	r2, [r3, #16]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	61da      	str	r2, [r3, #28]
      break;
 800892c:	e062      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fb8f 	bl	8009058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69d9      	ldr	r1, [r3, #28]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	021a      	lsls	r2, r3, #8
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	61da      	str	r2, [r3, #28]
      break;
 800896e:	e041      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fbc6 	bl	8009108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0204 	bic.w	r2, r2, #4
 800899a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089ae:	e021      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fbf8 	bl	80091ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	021a      	lsls	r2, r3, #8
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089f0:	e000      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80089f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop

08008a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_ConfigClockSource+0x18>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e0a6      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x166>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <HAL_TIM_ConfigClockSource+0x170>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	d067      	beq.n	8008b30 <HAL_TIM_ConfigClockSource+0x120>
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d80b      	bhi.n	8008a7c <HAL_TIM_ConfigClockSource+0x6c>
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d073      	beq.n	8008b50 <HAL_TIM_ConfigClockSource+0x140>
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d802      	bhi.n	8008a72 <HAL_TIM_ConfigClockSource+0x62>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06f      	beq.n	8008b50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008a70:	e078      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d06c      	beq.n	8008b50 <HAL_TIM_ConfigClockSource+0x140>
 8008a76:	2b30      	cmp	r3, #48	; 0x30
 8008a78:	d06a      	beq.n	8008b50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008a7a:	e073      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008a7c:	2b70      	cmp	r3, #112	; 0x70
 8008a7e:	d00d      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x8c>
 8008a80:	2b70      	cmp	r3, #112	; 0x70
 8008a82:	d804      	bhi.n	8008a8e <HAL_TIM_ConfigClockSource+0x7e>
 8008a84:	2b50      	cmp	r3, #80	; 0x50
 8008a86:	d033      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0xe0>
 8008a88:	2b60      	cmp	r3, #96	; 0x60
 8008a8a:	d041      	beq.n	8008b10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008a8c:	e06a      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d066      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x152>
 8008a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a98:	d017      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008a9a:	e063      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6899      	ldr	r1, [r3, #8]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f000 fcd4 	bl	8009458 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008abe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	609a      	str	r2, [r3, #8]
      break;
 8008ac8:	e04c      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6899      	ldr	r1, [r3, #8]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f000 fcbd 	bl	8009458 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008aec:	609a      	str	r2, [r3, #8]
      break;
 8008aee:	e039      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	461a      	mov	r2, r3
 8008afe:	f000 fc31 	bl	8009364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2150      	movs	r1, #80	; 0x50
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f000 fc8a 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8008b0e:	e029      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	6859      	ldr	r1, [r3, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f000 fc50 	bl	80093c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2160      	movs	r1, #96	; 0x60
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fc7a 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8008b2e:	e019      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	6859      	ldr	r1, [r3, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f000 fc11 	bl	8009364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2140      	movs	r1, #64	; 0x40
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fc6a 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8008b4e:	e009      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f000 fc61 	bl	8009422 <TIM_ITRx_SetConfig>
      break;
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	fffeff88 	.word	0xfffeff88

08008b84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e031      	b.n	8008c00 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fb50 	bl	8009254 <TIM_SlaveTimer_SetConfig>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e018      	b.n	8008c00 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bdc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a40      	ldr	r2, [pc, #256]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d013      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c76:	d00f      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a3d      	ldr	r2, [pc, #244]	; (8008d70 <TIM_Base_SetConfig+0x118>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00b      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a3c      	ldr	r2, [pc, #240]	; (8008d74 <TIM_Base_SetConfig+0x11c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d007      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a3b      	ldr	r2, [pc, #236]	; (8008d78 <TIM_Base_SetConfig+0x120>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d003      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a3a      	ldr	r2, [pc, #232]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d108      	bne.n	8008caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a2f      	ldr	r2, [pc, #188]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d02b      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb8:	d027      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2c      	ldr	r2, [pc, #176]	; (8008d70 <TIM_Base_SetConfig+0x118>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d023      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2b      	ldr	r2, [pc, #172]	; (8008d74 <TIM_Base_SetConfig+0x11c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d01f      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <TIM_Base_SetConfig+0x120>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d01b      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d017      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a28      	ldr	r2, [pc, #160]	; (8008d80 <TIM_Base_SetConfig+0x128>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d013      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <TIM_Base_SetConfig+0x12c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d00f      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a26      	ldr	r2, [pc, #152]	; (8008d88 <TIM_Base_SetConfig+0x130>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00b      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a25      	ldr	r2, [pc, #148]	; (8008d8c <TIM_Base_SetConfig+0x134>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d007      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a24      	ldr	r2, [pc, #144]	; (8008d90 <TIM_Base_SetConfig+0x138>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a23      	ldr	r2, [pc, #140]	; (8008d94 <TIM_Base_SetConfig+0x13c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d108      	bne.n	8008d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <TIM_Base_SetConfig+0x114>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_Base_SetConfig+0xf8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a0c      	ldr	r2, [pc, #48]	; (8008d7c <TIM_Base_SetConfig+0x124>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d103      	bne.n	8008d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	615a      	str	r2, [r3, #20]
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40014400 	.word	0x40014400
 8008d88:	40014800 	.word	0x40014800
 8008d8c:	40001800 	.word	0x40001800
 8008d90:	40001c00 	.word	0x40001c00
 8008d94:	40002000 	.word	0x40002000

08008d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	f023 0201 	bic.w	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4b2b      	ldr	r3, [pc, #172]	; (8008e70 <TIM_OC1_SetConfig+0xd8>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0303 	bic.w	r3, r3, #3
 8008dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f023 0302 	bic.w	r3, r3, #2
 8008de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a21      	ldr	r2, [pc, #132]	; (8008e74 <TIM_OC1_SetConfig+0xdc>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC1_SetConfig+0x64>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a20      	ldr	r2, [pc, #128]	; (8008e78 <TIM_OC1_SetConfig+0xe0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10c      	bne.n	8008e16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0308 	bic.w	r3, r3, #8
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f023 0304 	bic.w	r3, r3, #4
 8008e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <TIM_OC1_SetConfig+0xdc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_OC1_SetConfig+0x8e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a15      	ldr	r2, [pc, #84]	; (8008e78 <TIM_OC1_SetConfig+0xe0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d111      	bne.n	8008e4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	621a      	str	r2, [r3, #32]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	fffeff8f 	.word	0xfffeff8f
 8008e74:	40010000 	.word	0x40010000
 8008e78:	40010400 	.word	0x40010400

08008e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0210 	bic.w	r2, r3, #16
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <TIM_OC2_SetConfig+0xe4>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f023 0320 	bic.w	r3, r3, #32
 8008ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a23      	ldr	r2, [pc, #140]	; (8008f64 <TIM_OC2_SetConfig+0xe8>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_OC2_SetConfig+0x68>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a22      	ldr	r2, [pc, #136]	; (8008f68 <TIM_OC2_SetConfig+0xec>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d10d      	bne.n	8008f00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a18      	ldr	r2, [pc, #96]	; (8008f64 <TIM_OC2_SetConfig+0xe8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x94>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <TIM_OC2_SetConfig+0xec>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d113      	bne.n	8008f38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	feff8fff 	.word	0xfeff8fff
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400

08008f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4b2d      	ldr	r3, [pc, #180]	; (800904c <TIM_OC3_SetConfig+0xe0>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a22      	ldr	r2, [pc, #136]	; (8009050 <TIM_OC3_SetConfig+0xe4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d003      	beq.n	8008fd2 <TIM_OC3_SetConfig+0x66>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a21      	ldr	r2, [pc, #132]	; (8009054 <TIM_OC3_SetConfig+0xe8>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d10d      	bne.n	8008fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a17      	ldr	r2, [pc, #92]	; (8009050 <TIM_OC3_SetConfig+0xe4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d003      	beq.n	8008ffe <TIM_OC3_SetConfig+0x92>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a16      	ldr	r2, [pc, #88]	; (8009054 <TIM_OC3_SetConfig+0xe8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d113      	bne.n	8009026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800900c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	fffeff8f 	.word	0xfffeff8f
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400

08009058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4b1e      	ldr	r3, [pc, #120]	; (80090fc <TIM_OC4_SetConfig+0xa4>)
 8009084:	4013      	ands	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	021b      	lsls	r3, r3, #8
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	031b      	lsls	r3, r3, #12
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a13      	ldr	r2, [pc, #76]	; (8009100 <TIM_OC4_SetConfig+0xa8>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_OC4_SetConfig+0x68>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a12      	ldr	r2, [pc, #72]	; (8009104 <TIM_OC4_SetConfig+0xac>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d109      	bne.n	80090d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	019b      	lsls	r3, r3, #6
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	feff8fff 	.word	0xfeff8fff
 8009100:	40010000 	.word	0x40010000
 8009104:	40010400 	.word	0x40010400

08009108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <TIM_OC5_SetConfig+0x98>)
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <TIM_OC5_SetConfig+0x9c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_OC5_SetConfig+0x5e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a11      	ldr	r2, [pc, #68]	; (80091a8 <TIM_OC5_SetConfig+0xa0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d109      	bne.n	800917a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800916c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	621a      	str	r2, [r3, #32]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	fffeff8f 	.word	0xfffeff8f
 80091a4:	40010000 	.word	0x40010000
 80091a8:	40010400 	.word	0x40010400

080091ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <TIM_OC6_SetConfig+0x9c>)
 80091d8:	4013      	ands	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	051b      	lsls	r3, r3, #20
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a13      	ldr	r2, [pc, #76]	; (800924c <TIM_OC6_SetConfig+0xa0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_OC6_SetConfig+0x60>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a12      	ldr	r2, [pc, #72]	; (8009250 <TIM_OC6_SetConfig+0xa4>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d109      	bne.n	8009220 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	feff8fff 	.word	0xfeff8fff
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400

08009254 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	4313      	orrs	r3, r2
 8009276:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4b39      	ldr	r3, [pc, #228]	; (8009360 <TIM_SlaveTimer_SetConfig+0x10c>)
 800927c:	4013      	ands	r3, r2
 800927e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2b30      	cmp	r3, #48	; 0x30
 8009298:	d05c      	beq.n	8009354 <TIM_SlaveTimer_SetConfig+0x100>
 800929a:	2b30      	cmp	r3, #48	; 0x30
 800929c:	d806      	bhi.n	80092ac <TIM_SlaveTimer_SetConfig+0x58>
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d058      	beq.n	8009354 <TIM_SlaveTimer_SetConfig+0x100>
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d056      	beq.n	8009354 <TIM_SlaveTimer_SetConfig+0x100>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d054      	beq.n	8009354 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80092aa:	e054      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80092ac:	2b50      	cmp	r3, #80	; 0x50
 80092ae:	d03d      	beq.n	800932c <TIM_SlaveTimer_SetConfig+0xd8>
 80092b0:	2b50      	cmp	r3, #80	; 0x50
 80092b2:	d802      	bhi.n	80092ba <TIM_SlaveTimer_SetConfig+0x66>
 80092b4:	2b40      	cmp	r3, #64	; 0x40
 80092b6:	d010      	beq.n	80092da <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80092b8:	e04d      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80092ba:	2b60      	cmp	r3, #96	; 0x60
 80092bc:	d040      	beq.n	8009340 <TIM_SlaveTimer_SetConfig+0xec>
 80092be:	2b70      	cmp	r3, #112	; 0x70
 80092c0:	d000      	beq.n	80092c4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80092c2:	e048      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68d9      	ldr	r1, [r3, #12]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f000 f8c0 	bl	8009458 <TIM_ETR_SetConfig>
      break;
 80092d8:	e03d      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d101      	bne.n	80092e6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e038      	b.n	8009358 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6a1a      	ldr	r2, [r3, #32]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800930c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	621a      	str	r2, [r3, #32]
      break;
 800932a:	e014      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	6899      	ldr	r1, [r3, #8]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	461a      	mov	r2, r3
 800933a:	f000 f813 	bl	8009364 <TIM_TI1_ConfigInputStage>
      break;
 800933e:	e00a      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	6899      	ldr	r1, [r3, #8]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	461a      	mov	r2, r3
 800934e:	f000 f838 	bl	80093c2 <TIM_TI2_ConfigInputStage>
      break;
 8009352:	e000      	b.n	8009356 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009354:	bf00      	nop
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	fffefff8 	.word	0xfffefff8

08009364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f023 0201 	bic.w	r2, r3, #1
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800938e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	4313      	orrs	r3, r2
 8009398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f023 030a 	bic.w	r3, r3, #10
 80093a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	621a      	str	r2, [r3, #32]
}
 80093b6:	bf00      	nop
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b087      	sub	sp, #28
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	f023 0210 	bic.w	r2, r3, #16
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	031b      	lsls	r3, r3, #12
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009422:	b480      	push	{r7}
 8009424:	b085      	sub	sp, #20
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4313      	orrs	r3, r2
 8009440:	f043 0307 	orr.w	r3, r3, #7
 8009444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	609a      	str	r2, [r3, #8]
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	021a      	lsls	r2, r3, #8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	431a      	orrs	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e06d      	b.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a30      	ldr	r2, [pc, #192]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d004      	beq.n	80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a2f      	ldr	r2, [pc, #188]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d108      	bne.n	80094f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a20      	ldr	r2, [pc, #128]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d022      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009522:	d01d      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1d      	ldr	r2, [pc, #116]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d018      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d013      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a1a      	ldr	r2, [pc, #104]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00e      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a15      	ldr	r2, [pc, #84]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d009      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a16      	ldr	r2, [pc, #88]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a15      	ldr	r2, [pc, #84]	; (80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10c      	bne.n	800957a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	40010000 	.word	0x40010000
 800959c:	40010400 	.word	0x40010400
 80095a0:	40000400 	.word	0x40000400
 80095a4:	40000800 	.word	0x40000800
 80095a8:	40000c00 	.word	0x40000c00
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40001800 	.word	0x40001800

080095b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e065      	b.n	800969c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	041b      	lsls	r3, r3, #16
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d004      	beq.n	800965e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a14      	ldr	r2, [pc, #80]	; (80096ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d115      	bne.n	800968a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	051b      	lsls	r3, r3, #20
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	40010000 	.word	0x40010000
 80096ac:	40010400 	.word	0x40010400

080096b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e040      	b.n	8009780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fa f86c 	bl	80037ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	; 0x24
 8009718:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f972 	bl	8009a14 <UART_SetConfig>
 8009730:	4603      	mov	r3, r0
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e022      	b.n	8009780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fc10 	bl	8009f68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fc97 	bl	800a0ac <UART_CheckIdleState>
 800977e:	4603      	mov	r3, r0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80097ae:	4013      	ands	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d113      	bne.n	80097e0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f003 0320 	and.w	r3, r3, #32
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d009      	beq.n	80097e0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8100 	beq.w	80099d6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
      }
      return;
 80097de:	e0fa      	b.n	80099d6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80d5 	beq.w	8009992 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d105      	bne.n	80097fe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80ca 	beq.w	8009992 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00e      	beq.n	8009826 <HAL_UART_IRQHandler+0x9e>
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980e:	2b00      	cmp	r3, #0
 8009810:	d009      	beq.n	8009826 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981e:	f043 0201 	orr.w	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <HAL_UART_IRQHandler+0xc6>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2202      	movs	r2, #2
 8009840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009846:	f043 0204 	orr.w	r2, r3, #4
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00e      	beq.n	8009876 <HAL_UART_IRQHandler+0xee>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2204      	movs	r2, #4
 8009868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986e:	f043 0202 	orr.w	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d013      	beq.n	80098a8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2208      	movs	r2, #8
 800989a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a0:	f043 0208 	orr.w	r2, r3, #8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00f      	beq.n	80098d2 <HAL_UART_IRQHandler+0x14a>
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d07f      	beq.n	80099da <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f003 0320 	and.w	r3, r3, #32
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00c      	beq.n	80098fe <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009902:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d004      	beq.n	800991c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009918:	2b00      	cmp	r3, #0
 800991a:	d031      	beq.n	8009980 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fc6f 	bl	800a200 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992c:	2b40      	cmp	r3, #64	; 0x40
 800992e:	d123      	bne.n	8009978 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800993e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d013      	beq.n	8009970 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800994c:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <HAL_UART_IRQHandler+0x260>)
 800994e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009954:	4618      	mov	r0, r3
 8009956:	f7fb f865 	bl	8004a24 <HAL_DMA_Abort_IT>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d016      	beq.n	800998e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800996a:	4610      	mov	r0, r2
 800996c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996e:	e00e      	b.n	800998e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f845 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009976:	e00a      	b.n	800998e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f841 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997e:	e006      	b.n	800998e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f83d 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800998c:	e025      	b.n	80099da <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998e:	bf00      	nop
    return;
 8009990:	e023      	b.n	80099da <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00d      	beq.n	80099b8 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d008      	beq.n	80099b8 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d017      	beq.n	80099de <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
    }
    return;
 80099b6:	e012      	b.n	80099de <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00e      	beq.n	80099e0 <HAL_UART_IRQHandler+0x258>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc4d 	bl	800a26c <UART_EndTransmit_IT>
    return;
 80099d2:	bf00      	nop
 80099d4:	e004      	b.n	80099e0 <HAL_UART_IRQHandler+0x258>
      return;
 80099d6:	bf00      	nop
 80099d8:	e002      	b.n	80099e0 <HAL_UART_IRQHandler+0x258>
    return;
 80099da:	bf00      	nop
 80099dc:	e000      	b.n	80099e0 <HAL_UART_IRQHandler+0x258>
    return;
 80099de:	bf00      	nop
  }

}
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	0800a241 	.word	0x0800a241

080099ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4bb1      	ldr	r3, [pc, #708]	; (8009d08 <UART_SetConfig+0x2f4>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	6939      	ldr	r1, [r7, #16]
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a9f      	ldr	r2, [pc, #636]	; (8009d0c <UART_SetConfig+0x2f8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d121      	bne.n	8009ad8 <UART_SetConfig+0xc4>
 8009a94:	4b9e      	ldr	r3, [pc, #632]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d816      	bhi.n	8009ad0 <UART_SetConfig+0xbc>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <UART_SetConfig+0x94>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009ac5 	.word	0x08009ac5
 8009ab0:	08009abf 	.word	0x08009abf
 8009ab4:	08009acb 	.word	0x08009acb
 8009ab8:	2301      	movs	r3, #1
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e151      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e14e      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e14b      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009aca:	2308      	movs	r3, #8
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e148      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	bf00      	nop
 8009ad6:	e144      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a8d      	ldr	r2, [pc, #564]	; (8009d14 <UART_SetConfig+0x300>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d134      	bne.n	8009b4c <UART_SetConfig+0x138>
 8009ae2:	4b8b      	ldr	r3, [pc, #556]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae8:	f003 030c 	and.w	r3, r3, #12
 8009aec:	2b0c      	cmp	r3, #12
 8009aee:	d829      	bhi.n	8009b44 <UART_SetConfig+0x130>
 8009af0:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0xe4>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b2d 	.word	0x08009b2d
 8009afc:	08009b45 	.word	0x08009b45
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b45 	.word	0x08009b45
 8009b10:	08009b45 	.word	0x08009b45
 8009b14:	08009b45 	.word	0x08009b45
 8009b18:	08009b33 	.word	0x08009b33
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b45 	.word	0x08009b45
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b3f 	.word	0x08009b3f
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	77fb      	strb	r3, [r7, #31]
 8009b30:	e117      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b32:	2302      	movs	r3, #2
 8009b34:	77fb      	strb	r3, [r7, #31]
 8009b36:	e114      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	77fb      	strb	r3, [r7, #31]
 8009b3c:	e111      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b3e:	2308      	movs	r3, #8
 8009b40:	77fb      	strb	r3, [r7, #31]
 8009b42:	e10e      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b44:	2310      	movs	r3, #16
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	bf00      	nop
 8009b4a:	e10a      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a71      	ldr	r2, [pc, #452]	; (8009d18 <UART_SetConfig+0x304>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d120      	bne.n	8009b98 <UART_SetConfig+0x184>
 8009b56:	4b6e      	ldr	r3, [pc, #440]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b60:	2b10      	cmp	r3, #16
 8009b62:	d00f      	beq.n	8009b84 <UART_SetConfig+0x170>
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	d802      	bhi.n	8009b6e <UART_SetConfig+0x15a>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <UART_SetConfig+0x164>
 8009b6c:	e010      	b.n	8009b90 <UART_SetConfig+0x17c>
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d005      	beq.n	8009b7e <UART_SetConfig+0x16a>
 8009b72:	2b30      	cmp	r3, #48	; 0x30
 8009b74:	d009      	beq.n	8009b8a <UART_SetConfig+0x176>
 8009b76:	e00b      	b.n	8009b90 <UART_SetConfig+0x17c>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e0f1      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e0ee      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b84:	2304      	movs	r3, #4
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e0eb      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e0e8      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b90:	2310      	movs	r3, #16
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	bf00      	nop
 8009b96:	e0e4      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a5f      	ldr	r2, [pc, #380]	; (8009d1c <UART_SetConfig+0x308>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d120      	bne.n	8009be4 <UART_SetConfig+0x1d0>
 8009ba2:	4b5b      	ldr	r3, [pc, #364]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bac:	2b40      	cmp	r3, #64	; 0x40
 8009bae:	d00f      	beq.n	8009bd0 <UART_SetConfig+0x1bc>
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	d802      	bhi.n	8009bba <UART_SetConfig+0x1a6>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <UART_SetConfig+0x1b0>
 8009bb8:	e010      	b.n	8009bdc <UART_SetConfig+0x1c8>
 8009bba:	2b80      	cmp	r3, #128	; 0x80
 8009bbc:	d005      	beq.n	8009bca <UART_SetConfig+0x1b6>
 8009bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8009bc0:	d009      	beq.n	8009bd6 <UART_SetConfig+0x1c2>
 8009bc2:	e00b      	b.n	8009bdc <UART_SetConfig+0x1c8>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	77fb      	strb	r3, [r7, #31]
 8009bc8:	e0cb      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	77fb      	strb	r3, [r7, #31]
 8009bce:	e0c8      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	77fb      	strb	r3, [r7, #31]
 8009bd4:	e0c5      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	77fb      	strb	r3, [r7, #31]
 8009bda:	e0c2      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	bf00      	nop
 8009be2:	e0be      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a4d      	ldr	r2, [pc, #308]	; (8009d20 <UART_SetConfig+0x30c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d124      	bne.n	8009c38 <UART_SetConfig+0x224>
 8009bee:	4b48      	ldr	r3, [pc, #288]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfc:	d012      	beq.n	8009c24 <UART_SetConfig+0x210>
 8009bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c02:	d802      	bhi.n	8009c0a <UART_SetConfig+0x1f6>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <UART_SetConfig+0x204>
 8009c08:	e012      	b.n	8009c30 <UART_SetConfig+0x21c>
 8009c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c0e:	d006      	beq.n	8009c1e <UART_SetConfig+0x20a>
 8009c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c14:	d009      	beq.n	8009c2a <UART_SetConfig+0x216>
 8009c16:	e00b      	b.n	8009c30 <UART_SetConfig+0x21c>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	77fb      	strb	r3, [r7, #31]
 8009c1c:	e0a1      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	77fb      	strb	r3, [r7, #31]
 8009c22:	e09e      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c24:	2304      	movs	r3, #4
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e09b      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	77fb      	strb	r3, [r7, #31]
 8009c2e:	e098      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c30:	2310      	movs	r3, #16
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	bf00      	nop
 8009c36:	e094      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a39      	ldr	r2, [pc, #228]	; (8009d24 <UART_SetConfig+0x310>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d124      	bne.n	8009c8c <UART_SetConfig+0x278>
 8009c42:	4b33      	ldr	r3, [pc, #204]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c50:	d012      	beq.n	8009c78 <UART_SetConfig+0x264>
 8009c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c56:	d802      	bhi.n	8009c5e <UART_SetConfig+0x24a>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d007      	beq.n	8009c6c <UART_SetConfig+0x258>
 8009c5c:	e012      	b.n	8009c84 <UART_SetConfig+0x270>
 8009c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c62:	d006      	beq.n	8009c72 <UART_SetConfig+0x25e>
 8009c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c68:	d009      	beq.n	8009c7e <UART_SetConfig+0x26a>
 8009c6a:	e00b      	b.n	8009c84 <UART_SetConfig+0x270>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	77fb      	strb	r3, [r7, #31]
 8009c70:	e077      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c72:	2302      	movs	r3, #2
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e074      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e071      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c7e:	2308      	movs	r3, #8
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e06e      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c84:	2310      	movs	r3, #16
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	bf00      	nop
 8009c8a:	e06a      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a25      	ldr	r2, [pc, #148]	; (8009d28 <UART_SetConfig+0x314>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d124      	bne.n	8009ce0 <UART_SetConfig+0x2cc>
 8009c96:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca4:	d012      	beq.n	8009ccc <UART_SetConfig+0x2b8>
 8009ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009caa:	d802      	bhi.n	8009cb2 <UART_SetConfig+0x29e>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <UART_SetConfig+0x2ac>
 8009cb0:	e012      	b.n	8009cd8 <UART_SetConfig+0x2c4>
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	d006      	beq.n	8009cc6 <UART_SetConfig+0x2b2>
 8009cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cbc:	d009      	beq.n	8009cd2 <UART_SetConfig+0x2be>
 8009cbe:	e00b      	b.n	8009cd8 <UART_SetConfig+0x2c4>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	77fb      	strb	r3, [r7, #31]
 8009cc4:	e04d      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	77fb      	strb	r3, [r7, #31]
 8009cca:	e04a      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e047      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	77fb      	strb	r3, [r7, #31]
 8009cd6:	e044      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	77fb      	strb	r3, [r7, #31]
 8009cdc:	bf00      	nop
 8009cde:	e040      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a11      	ldr	r2, [pc, #68]	; (8009d2c <UART_SetConfig+0x318>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d139      	bne.n	8009d5e <UART_SetConfig+0x34a>
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <UART_SetConfig+0x2fc>)
 8009cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cf8:	d027      	beq.n	8009d4a <UART_SetConfig+0x336>
 8009cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cfe:	d817      	bhi.n	8009d30 <UART_SetConfig+0x31c>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01c      	beq.n	8009d3e <UART_SetConfig+0x32a>
 8009d04:	e027      	b.n	8009d56 <UART_SetConfig+0x342>
 8009d06:	bf00      	nop
 8009d08:	efff69f3 	.word	0xefff69f3
 8009d0c:	40011000 	.word	0x40011000
 8009d10:	40023800 	.word	0x40023800
 8009d14:	40004400 	.word	0x40004400
 8009d18:	40004800 	.word	0x40004800
 8009d1c:	40004c00 	.word	0x40004c00
 8009d20:	40005000 	.word	0x40005000
 8009d24:	40011400 	.word	0x40011400
 8009d28:	40007800 	.word	0x40007800
 8009d2c:	40007c00 	.word	0x40007c00
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d34:	d006      	beq.n	8009d44 <UART_SetConfig+0x330>
 8009d36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d3a:	d009      	beq.n	8009d50 <UART_SetConfig+0x33c>
 8009d3c:	e00b      	b.n	8009d56 <UART_SetConfig+0x342>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e00e      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009d44:	2302      	movs	r3, #2
 8009d46:	77fb      	strb	r3, [r7, #31]
 8009d48:	e00b      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	77fb      	strb	r3, [r7, #31]
 8009d4e:	e008      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009d50:	2308      	movs	r3, #8
 8009d52:	77fb      	strb	r3, [r7, #31]
 8009d54:	e005      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009d56:	2310      	movs	r3, #16
 8009d58:	77fb      	strb	r3, [r7, #31]
 8009d5a:	bf00      	nop
 8009d5c:	e001      	b.n	8009d62 <UART_SetConfig+0x34e>
 8009d5e:	2310      	movs	r3, #16
 8009d60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d6a:	d17f      	bne.n	8009e6c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009d6c:	7ffb      	ldrb	r3, [r7, #31]
 8009d6e:	2b08      	cmp	r3, #8
 8009d70:	d85c      	bhi.n	8009e2c <UART_SetConfig+0x418>
 8009d72:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x364>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009dbd 	.word	0x08009dbd
 8009d80:	08009ddd 	.word	0x08009ddd
 8009d84:	08009e2d 	.word	0x08009e2d
 8009d88:	08009df5 	.word	0x08009df5
 8009d8c:	08009e2d 	.word	0x08009e2d
 8009d90:	08009e2d 	.word	0x08009e2d
 8009d94:	08009e2d 	.word	0x08009e2d
 8009d98:	08009e15 	.word	0x08009e15
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9c:	f7fd fa5c 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8009da0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	005a      	lsls	r2, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	085b      	lsrs	r3, r3, #1
 8009dac:	441a      	add	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	61bb      	str	r3, [r7, #24]
        break;
 8009dba:	e03a      	b.n	8009e32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dbc:	f7fd fa60 	bl	8007280 <HAL_RCC_GetPCLK2Freq>
 8009dc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	005a      	lsls	r2, r3, #1
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	441a      	add	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	61bb      	str	r3, [r7, #24]
        break;
 8009dda:	e02a      	b.n	8009e32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	085a      	lsrs	r2, r3, #1
 8009de2:	4b5f      	ldr	r3, [pc, #380]	; (8009f60 <UART_SetConfig+0x54c>)
 8009de4:	4413      	add	r3, r2
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6852      	ldr	r2, [r2, #4]
 8009dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	61bb      	str	r3, [r7, #24]
        break;
 8009df2:	e01e      	b.n	8009e32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009df4:	f7fd f972 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009df8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	005a      	lsls	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	085b      	lsrs	r3, r3, #1
 8009e04:	441a      	add	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	61bb      	str	r3, [r7, #24]
        break;
 8009e12:	e00e      	b.n	8009e32 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	085b      	lsrs	r3, r3, #1
 8009e1a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	61bb      	str	r3, [r7, #24]
        break;
 8009e2a:	e002      	b.n	8009e32 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]
        break;
 8009e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b0f      	cmp	r3, #15
 8009e36:	d916      	bls.n	8009e66 <UART_SetConfig+0x452>
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3e:	d212      	bcs.n	8009e66 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	f023 030f 	bic.w	r3, r3, #15
 8009e48:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	085b      	lsrs	r3, r3, #1
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	897b      	ldrh	r3, [r7, #10]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	897a      	ldrh	r2, [r7, #10]
 8009e62:	60da      	str	r2, [r3, #12]
 8009e64:	e070      	b.n	8009f48 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	75fb      	strb	r3, [r7, #23]
 8009e6a:	e06d      	b.n	8009f48 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009e6c:	7ffb      	ldrb	r3, [r7, #31]
 8009e6e:	2b08      	cmp	r3, #8
 8009e70:	d859      	bhi.n	8009f26 <UART_SetConfig+0x512>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x464>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ebb 	.word	0x08009ebb
 8009e80:	08009ed9 	.word	0x08009ed9
 8009e84:	08009f27 	.word	0x08009f27
 8009e88:	08009ef1 	.word	0x08009ef1
 8009e8c:	08009f27 	.word	0x08009f27
 8009e90:	08009f27 	.word	0x08009f27
 8009e94:	08009f27 	.word	0x08009f27
 8009e98:	08009f0f 	.word	0x08009f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e9c:	f7fd f9dc 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8009ea0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	085a      	lsrs	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	441a      	add	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	61bb      	str	r3, [r7, #24]
        break;
 8009eb8:	e038      	b.n	8009f2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eba:	f7fd f9e1 	bl	8007280 <HAL_RCC_GetPCLK2Freq>
 8009ebe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	085a      	lsrs	r2, r3, #1
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	441a      	add	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	61bb      	str	r3, [r7, #24]
        break;
 8009ed6:	e029      	b.n	8009f2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	085a      	lsrs	r2, r3, #1
 8009ede:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <UART_SetConfig+0x550>)
 8009ee0:	4413      	add	r3, r2
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6852      	ldr	r2, [r2, #4]
 8009ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	61bb      	str	r3, [r7, #24]
        break;
 8009eee:	e01d      	b.n	8009f2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ef0:	f7fd f8f4 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8009ef4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	085a      	lsrs	r2, r3, #1
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	441a      	add	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	61bb      	str	r3, [r7, #24]
        break;
 8009f0c:	e00e      	b.n	8009f2c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	61bb      	str	r3, [r7, #24]
        break;
 8009f24:	e002      	b.n	8009f2c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
        break;
 8009f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b0f      	cmp	r3, #15
 8009f30:	d908      	bls.n	8009f44 <UART_SetConfig+0x530>
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f38:	d204      	bcs.n	8009f44 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	60da      	str	r2, [r3, #12]
 8009f42:	e001      	b.n	8009f48 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	01e84800 	.word	0x01e84800
 8009f64:	00f42400 	.word	0x00f42400

08009f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00a      	beq.n	8009fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	f003 0308 	and.w	r3, r3, #8
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffc:	f003 0310 	and.w	r3, r3, #16
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00a      	beq.n	800a01a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01a      	beq.n	800a07e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a066:	d10a      	bne.n	800a07e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00a      	beq.n	800a0a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	605a      	str	r2, [r3, #4]
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a0ba:	f7f9 fdef 	bl	8003c9c <HAL_GetTick>
 800a0be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0308 	and.w	r3, r3, #8
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d10e      	bne.n	800a0ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f814 	bl	800a10a <UART_WaitOnFlagUntilTimeout>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e00a      	b.n	800a102 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	603b      	str	r3, [r7, #0]
 800a116:	4613      	mov	r3, r2
 800a118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11a:	e05d      	b.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a122:	d059      	beq.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a124:	f7f9 fdba 	bl	8003c9c <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	d302      	bcc.n	800a13a <UART_WaitOnFlagUntilTimeout+0x30>
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d11b      	bne.n	800a172 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a148:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e042      	b.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d02b      	beq.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a18e:	d123      	bne.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a198:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a1a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e00f      	b.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	69da      	ldr	r2, [r3, #28]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	bf0c      	ite	eq
 800a1e8:	2301      	moveq	r3, #1
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d092      	beq.n	800a11c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a216:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0201 	bic.w	r2, r2, #1
 800a226:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2220      	movs	r2, #32
 800a22c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fbce 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a264:	bf00      	nop
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a282:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff fbab 	bl	80099ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d027      	beq.n	800a30a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4b2f      	ldr	r3, [pc, #188]	; (800a380 <FMC_SDRAM_Init+0xe0>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2d0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a2d6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a2dc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a2e2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a2e8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a2ee:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a2f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e032      	b.n	800a370 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a316:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a320:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a326:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	4b12      	ldr	r3, [pc, #72]	; (800a380 <FMC_SDRAM_Init+0xe0>)
 800a338:	4013      	ands	r3, r2
 800a33a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a344:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a34a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a350:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a356:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a35c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4313      	orrs	r3, r2
 800a362:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	ffff8000 	.word	0xffff8000

0800a384 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d02e      	beq.n	800a3fc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3aa:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a3ba:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a3c4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a3ce:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a3d8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a3e2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	609a      	str	r2, [r3, #8]
 800a3fa:	e039      	b.n	800a470 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	4b1e      	ldr	r3, [pc, #120]	; (800a480 <FMC_SDRAM_Timing_Init+0xfc>)
 800a406:	4013      	ands	r3, r2
 800a408:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	3b01      	subs	r3, #1
 800a410:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	3b01      	subs	r3, #1
 800a418:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a41a:	4313      	orrs	r3, r2
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a42e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a43e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	3b01      	subs	r3, #1
 800a446:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a448:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	3b01      	subs	r3, #1
 800a450:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a452:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	3b01      	subs	r3, #1
 800a45a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a45c:	4313      	orrs	r3, r2
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	4313      	orrs	r3, r2
 800a462:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	ff0f0fff 	.word	0xff0f0fff

0800a484 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a49c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a4a6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	371c      	adds	r7, #28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a4fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4fe:	2b84      	cmp	r3, #132	; 0x84
 800a500:	d005      	beq.n	800a50e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a502:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	3303      	adds	r3, #3
 800a50c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a50e:	68fb      	ldr	r3, [r7, #12]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a520:	f000 fee8 	bl	800b2f4 <vTaskStartScheduler>
  
  return osOK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	bd80      	pop	{r7, pc}

0800a52a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a52a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a52c:	b089      	sub	sp, #36	; 0x24
 800a52e:	af04      	add	r7, sp, #16
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d020      	beq.n	800a57e <osThreadCreate+0x54>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01c      	beq.n	800a57e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685c      	ldr	r4, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681d      	ldr	r5, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691e      	ldr	r6, [r3, #16]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff ffc8 	bl	800a4ec <makeFreeRtosPriority>
 800a55c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a566:	9202      	str	r2, [sp, #8]
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	9100      	str	r1, [sp, #0]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	4632      	mov	r2, r6
 800a570:	4629      	mov	r1, r5
 800a572:	4620      	mov	r0, r4
 800a574:	f000 fc70 	bl	800ae58 <xTaskCreateStatic>
 800a578:	4603      	mov	r3, r0
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	e01c      	b.n	800a5b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685c      	ldr	r4, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a58a:	b29e      	uxth	r6, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff ffaa 	bl	800a4ec <makeFreeRtosPriority>
 800a598:	4602      	mov	r2, r0
 800a59a:	f107 030c 	add.w	r3, r7, #12
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	9200      	str	r2, [sp, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fcb5 	bl	800af18 <xTaskCreate>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d001      	beq.n	800a5b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	e000      	b.n	800a5ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <osDelay+0x16>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	e000      	b.n	800a5da <osDelay+0x18>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fe54 	bl	800b288 <vTaskDelay>
  
  return osOK;
 800a5e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	4619      	mov	r1, r3
 800a600:	2001      	movs	r0, #1
 800a602:	f000 fa38 	bl	800aa76 <xQueueCreateMutexStatic>
 800a606:	4603      	mov	r3, r0
 800a608:	e003      	b.n	800a612 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a60a:	2001      	movs	r0, #1
 800a60c:	f000 fa1b 	bl	800aa46 <xQueueCreateMutex>
 800a610:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f103 0208 	add.w	r2, r3, #8
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f04f 32ff 	mov.w	r2, #4294967295
 800a632:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f103 0208 	add.w	r2, r3, #8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f103 0208 	add.w	r2, r3, #8
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a64e:	bf00      	nop
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d2:	d103      	bne.n	800a6dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	e00c      	b.n	800a6f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e002      	b.n	800a6ea <vListInsert+0x2e>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d2f6      	bcs.n	800a6e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	601a      	str	r2, [r3, #0]
}
 800a722:	bf00      	nop
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6892      	ldr	r2, [r2, #8]
 800a744:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	6852      	ldr	r2, [r2, #4]
 800a74e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d103      	bne.n	800a762 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10b      	bne.n	800a7b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	b672      	cpsid	i
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	b662      	cpsie	i
 800a7ac:	60bb      	str	r3, [r7, #8]
 800a7ae:	e7fe      	b.n	800a7ae <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a7b0:	f001 fbca 	bl	800bf48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7c0:	fb01 f303 	mul.w	r3, r1, r3
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	68f9      	ldr	r1, [r7, #12]
 800a7e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	441a      	add	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	22ff      	movs	r2, #255	; 0xff
 800a7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	22ff      	movs	r2, #255	; 0xff
 800a7fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d114      	bne.n	800a830 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01a      	beq.n	800a844 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3310      	adds	r3, #16
 800a812:	4618      	mov	r0, r3
 800a814:	f000 ffc8 	bl	800b7a8 <xTaskRemoveFromEventList>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d012      	beq.n	800a844 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <xQueueGenericReset+0xd0>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	e009      	b.n	800a844 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	3310      	adds	r3, #16
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fef0 	bl	800a61a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff feeb 	bl	800a61a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a844:	f001 fbb2 	bl	800bfac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a848:	2301      	movs	r3, #1
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	e000ed04 	.word	0xe000ed04

0800a858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	; 0x38
 800a85c:	af02      	add	r7, sp, #8
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10b      	bne.n	800a884 <xQueueGenericCreateStatic+0x2c>
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	b672      	cpsid	i
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	b662      	cpsie	i
 800a880:	62bb      	str	r3, [r7, #40]	; 0x28
 800a882:	e7fe      	b.n	800a882 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10b      	bne.n	800a8a2 <xQueueGenericCreateStatic+0x4a>
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	b672      	cpsid	i
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	b662      	cpsie	i
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a0:	e7fe      	b.n	800a8a0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <xQueueGenericCreateStatic+0x56>
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <xQueueGenericCreateStatic+0x5a>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e000      	b.n	800a8b4 <xQueueGenericCreateStatic+0x5c>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <xQueueGenericCreateStatic+0x78>
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	b672      	cpsid	i
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	b662      	cpsie	i
 800a8cc:	623b      	str	r3, [r7, #32]
 800a8ce:	e7fe      	b.n	800a8ce <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d102      	bne.n	800a8dc <xQueueGenericCreateStatic+0x84>
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <xQueueGenericCreateStatic+0x88>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e000      	b.n	800a8e2 <xQueueGenericCreateStatic+0x8a>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <xQueueGenericCreateStatic+0xa6>
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	b672      	cpsid	i
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	b662      	cpsie	i
 800a8fa:	61fb      	str	r3, [r7, #28]
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8fe:	2348      	movs	r3, #72	; 0x48
 800a900:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b48      	cmp	r3, #72	; 0x48
 800a906:	d00b      	beq.n	800a920 <xQueueGenericCreateStatic+0xc8>
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	b672      	cpsid	i
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	b662      	cpsie	i
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	e7fe      	b.n	800a91e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a920:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00d      	beq.n	800a948 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a934:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4613      	mov	r3, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 f846 	bl	800a9d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3730      	adds	r7, #48	; 0x30
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a952:	b580      	push	{r7, lr}
 800a954:	b08a      	sub	sp, #40	; 0x28
 800a956:	af02      	add	r7, sp, #8
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	4613      	mov	r3, r2
 800a95e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <xQueueGenericCreate+0x2c>
 800a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96a:	b672      	cpsid	i
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	b662      	cpsie	i
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	e7fe      	b.n	800a97c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a984:	2300      	movs	r3, #0
 800a986:	61fb      	str	r3, [r7, #28]
 800a988:	e004      	b.n	800a994 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	3348      	adds	r3, #72	; 0x48
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 fbb5 	bl	800c108 <pvPortMalloc>
 800a99e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d011      	beq.n	800a9ca <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	3348      	adds	r3, #72	; 0x48
 800a9ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 f805 	bl	800a9d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa02:	2101      	movs	r1, #1
 800aa04:	69b8      	ldr	r0, [r7, #24]
 800aa06:	f7ff febd 	bl	800a784 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa32:	2300      	movs	r3, #0
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f837 	bl	800aaac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa50:	2301      	movs	r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6939      	ldr	r1, [r7, #16]
 800aa5e:	6978      	ldr	r0, [r7, #20]
 800aa60:	f7ff ff77 	bl	800a952 <xQueueGenericCreate>
 800aa64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff ffd3 	bl	800aa12 <prvInitialiseMutex>

		return xNewQueue;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af02      	add	r7, sp, #8
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	6039      	str	r1, [r7, #0]
 800aa80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa82:	2301      	movs	r3, #1
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	2300      	movs	r3, #0
 800aa88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aa8a:	79fb      	ldrb	r3, [r7, #7]
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	6939      	ldr	r1, [r7, #16]
 800aa94:	6978      	ldr	r0, [r7, #20]
 800aa96:	f7ff fedf 	bl	800a858 <xQueueGenericCreateStatic>
 800aa9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff ffb8 	bl	800aa12 <prvInitialiseMutex>

		return xNewQueue;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
	}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08e      	sub	sp, #56	; 0x38
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10b      	bne.n	800aae0 <xQueueGenericSend+0x34>
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aade:	e7fe      	b.n	800aade <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <xQueueGenericSend+0x42>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <xQueueGenericSend+0x46>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <xQueueGenericSend+0x48>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10b      	bne.n	800ab10 <xQueueGenericSend+0x64>
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	b672      	cpsid	i
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	b662      	cpsie	i
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0e:	e7fe      	b.n	800ab0e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d103      	bne.n	800ab1e <xQueueGenericSend+0x72>
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d101      	bne.n	800ab22 <xQueueGenericSend+0x76>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <xQueueGenericSend+0x78>
 800ab22:	2300      	movs	r3, #0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10b      	bne.n	800ab40 <xQueueGenericSend+0x94>
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	b672      	cpsid	i
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	b662      	cpsie	i
 800ab3c:	623b      	str	r3, [r7, #32]
 800ab3e:	e7fe      	b.n	800ab3e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab40:	f000 fff0 	bl	800bb24 <xTaskGetSchedulerState>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d102      	bne.n	800ab50 <xQueueGenericSend+0xa4>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <xQueueGenericSend+0xa8>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e000      	b.n	800ab56 <xQueueGenericSend+0xaa>
 800ab54:	2300      	movs	r3, #0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <xQueueGenericSend+0xc6>
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	b672      	cpsid	i
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	b662      	cpsie	i
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	e7fe      	b.n	800ab70 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab72:	f001 f9e9 	bl	800bf48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d302      	bcc.n	800ab88 <xQueueGenericSend+0xdc>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d129      	bne.n	800abdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab8e:	f000 f88f 	bl	800acb0 <prvCopyDataToQueue>
 800ab92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d010      	beq.n	800abbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fe01 	bl	800b7a8 <xTaskRemoveFromEventList>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d013      	beq.n	800abd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abac:	4b3f      	ldr	r3, [pc, #252]	; (800acac <xQueueGenericSend+0x200>)
 800abae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb2:	601a      	str	r2, [r3, #0]
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	e00a      	b.n	800abd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abc4:	4b39      	ldr	r3, [pc, #228]	; (800acac <xQueueGenericSend+0x200>)
 800abc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abd4:	f001 f9ea 	bl	800bfac <vPortExitCritical>
				return pdPASS;
 800abd8:	2301      	movs	r3, #1
 800abda:	e063      	b.n	800aca4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d103      	bne.n	800abea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abe2:	f001 f9e3 	bl	800bfac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e05c      	b.n	800aca4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abec:	2b00      	cmp	r3, #0
 800abee:	d106      	bne.n	800abfe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abf0:	f107 0314 	add.w	r3, r7, #20
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fe3b 	bl	800b870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abfa:	2301      	movs	r3, #1
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abfe:	f001 f9d5 	bl	800bfac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac02:	f000 fbd9 	bl	800b3b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac06:	f001 f99f 	bl	800bf48 <vPortEnterCritical>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac10:	b25b      	sxtb	r3, r3
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d103      	bne.n	800ac20 <xQueueGenericSend+0x174>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac26:	b25b      	sxtb	r3, r3
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2c:	d103      	bne.n	800ac36 <xQueueGenericSend+0x18a>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac36:	f001 f9b9 	bl	800bfac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac3a:	1d3a      	adds	r2, r7, #4
 800ac3c:	f107 0314 	add.w	r3, r7, #20
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fe2a 	bl	800b89c <xTaskCheckForTimeOut>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d124      	bne.n	800ac98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac50:	f000 f8ea 	bl	800ae28 <prvIsQueueFull>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d018      	beq.n	800ac8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4611      	mov	r1, r2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fd7a 	bl	800b75c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6a:	f000 f88b 	bl	800ad84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac6e:	f000 fbb1 	bl	800b3d4 <xTaskResumeAll>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f47f af7c 	bne.w	800ab72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	; (800acac <xQueueGenericSend+0x200>)
 800ac7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	e772      	b.n	800ab72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 f879 	bl	800ad84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac92:	f000 fb9f 	bl	800b3d4 <xTaskResumeAll>
 800ac96:	e76c      	b.n	800ab72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac9a:	f000 f873 	bl	800ad84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac9e:	f000 fb99 	bl	800b3d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aca2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3738      	adds	r7, #56	; 0x38
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10d      	bne.n	800acea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d14d      	bne.n	800ad72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 ff40 	bl	800bb60 <xTaskPriorityDisinherit>
 800ace0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	609a      	str	r2, [r3, #8]
 800ace8:	e043      	b.n	800ad72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d119      	bne.n	800ad24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6858      	ldr	r0, [r3, #4]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf8:	461a      	mov	r2, r3
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	f001 fc08 	bl	800c510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	441a      	add	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d32b      	bcc.n	800ad72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	605a      	str	r2, [r3, #4]
 800ad22:	e026      	b.n	800ad72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	68d8      	ldr	r0, [r3, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	68b9      	ldr	r1, [r7, #8]
 800ad30:	f001 fbee 	bl	800c510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	425b      	negs	r3, r3
 800ad3e:	441a      	add	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	68da      	ldr	r2, [r3, #12]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d207      	bcs.n	800ad60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	425b      	negs	r3, r3
 800ad5a:	441a      	add	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d105      	bne.n	800ad72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ad7a:	697b      	ldr	r3, [r7, #20]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad8c:	f001 f8dc 	bl	800bf48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad98:	e011      	b.n	800adbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3324      	adds	r3, #36	; 0x24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 fcfe 	bl	800b7a8 <xTaskRemoveFromEventList>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800adb2:	f000 fdd7 	bl	800b964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	3b01      	subs	r3, #1
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800adbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dce9      	bgt.n	800ad9a <prvUnlockQueue+0x16>
 800adc6:	e000      	b.n	800adca <prvUnlockQueue+0x46>
					break;
 800adc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	22ff      	movs	r2, #255	; 0xff
 800adce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800add2:	f001 f8eb 	bl	800bfac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800add6:	f001 f8b7 	bl	800bf48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ade0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ade2:	e011      	b.n	800ae08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d012      	beq.n	800ae12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	3310      	adds	r3, #16
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fcd9 	bl	800b7a8 <xTaskRemoveFromEventList>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adfc:	f000 fdb2 	bl	800b964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dce9      	bgt.n	800ade4 <prvUnlockQueue+0x60>
 800ae10:	e000      	b.n	800ae14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	22ff      	movs	r2, #255	; 0xff
 800ae18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae1c:	f001 f8c6 	bl	800bfac <vPortExitCritical>
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae30:	f001 f88a 	bl	800bf48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d102      	bne.n	800ae46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e001      	b.n	800ae4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae4a:	f001 f8af 	bl	800bfac <vPortExitCritical>

	return xReturn;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08e      	sub	sp, #56	; 0x38
 800ae5c:	af04      	add	r7, sp, #16
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10b      	bne.n	800ae84 <xTaskCreateStatic+0x2c>
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	b672      	cpsid	i
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	b662      	cpsie	i
 800ae80:	623b      	str	r3, [r7, #32]
 800ae82:	e7fe      	b.n	800ae82 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10b      	bne.n	800aea2 <xTaskCreateStatic+0x4a>
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	b672      	cpsid	i
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	b662      	cpsie	i
 800ae9e:	61fb      	str	r3, [r7, #28]
 800aea0:	e7fe      	b.n	800aea0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aea2:	2354      	movs	r3, #84	; 0x54
 800aea4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b54      	cmp	r3, #84	; 0x54
 800aeaa:	d00b      	beq.n	800aec4 <xTaskCreateStatic+0x6c>
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	b672      	cpsid	i
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	b662      	cpsie	i
 800aec0:	61bb      	str	r3, [r7, #24]
 800aec2:	e7fe      	b.n	800aec2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aec4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01e      	beq.n	800af0a <xTaskCreateStatic+0xb2>
 800aecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d01b      	beq.n	800af0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aee4:	2300      	movs	r3, #0
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	9302      	str	r3, [sp, #8]
 800aeec:	f107 0314 	add.w	r3, r7, #20
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f850 	bl	800afa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af04:	f000 f8d6 	bl	800b0b4 <prvAddNewTaskToReadyList>
 800af08:	e001      	b.n	800af0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af0e:	697b      	ldr	r3, [r7, #20]
	}
 800af10:	4618      	mov	r0, r3
 800af12:	3728      	adds	r7, #40	; 0x28
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08c      	sub	sp, #48	; 0x30
 800af1c:	af04      	add	r7, sp, #16
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4613      	mov	r3, r2
 800af26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 f8eb 	bl	800c108 <pvPortMalloc>
 800af32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00e      	beq.n	800af58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af3a:	2054      	movs	r0, #84	; 0x54
 800af3c:	f001 f8e4 	bl	800c108 <pvPortMalloc>
 800af40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30
 800af4e:	e005      	b.n	800af5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af50:	6978      	ldr	r0, [r7, #20]
 800af52:	f001 f9a1 	bl	800c298 <vPortFree>
 800af56:	e001      	b.n	800af5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d017      	beq.n	800af92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af6a:	88fa      	ldrh	r2, [r7, #6]
 800af6c:	2300      	movs	r3, #0
 800af6e:	9303      	str	r3, [sp, #12]
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	9302      	str	r3, [sp, #8]
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f80e 	bl	800afa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af86:	69f8      	ldr	r0, [r7, #28]
 800af88:	f000 f894 	bl	800b0b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af8c:	2301      	movs	r3, #1
 800af8e:	61bb      	str	r3, [r7, #24]
 800af90:	e002      	b.n	800af98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af92:	f04f 33ff 	mov.w	r3, #4294967295
 800af96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af98:	69bb      	ldr	r3, [r7, #24]
	}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	607a      	str	r2, [r7, #4]
 800afae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800afba:	440b      	add	r3, r1
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	f023 0307 	bic.w	r3, r3, #7
 800afc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <prvInitialiseNewTask+0x4a>
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	b672      	cpsid	i
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	b662      	cpsie	i
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	e7fe      	b.n	800afea <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01f      	beq.n	800b032 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aff2:	2300      	movs	r3, #0
 800aff4:	61fb      	str	r3, [r7, #28]
 800aff6:	e012      	b.n	800b01e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	4413      	add	r3, r2
 800affe:	7819      	ldrb	r1, [r3, #0]
 800b000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	4413      	add	r3, r2
 800b006:	3334      	adds	r3, #52	; 0x34
 800b008:	460a      	mov	r2, r1
 800b00a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	4413      	add	r3, r2
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d006      	beq.n	800b026 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	3301      	adds	r3, #1
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	2b0f      	cmp	r3, #15
 800b022:	d9e9      	bls.n	800aff8 <prvInitialiseNewTask+0x56>
 800b024:	e000      	b.n	800b028 <prvInitialiseNewTask+0x86>
			{
				break;
 800b026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b030:	e003      	b.n	800b03a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03c:	2b06      	cmp	r3, #6
 800b03e:	d901      	bls.n	800b044 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b040:	2306      	movs	r3, #6
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	2200      	movs	r2, #0
 800b054:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	3304      	adds	r3, #4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fafd 	bl	800a65a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	3318      	adds	r3, #24
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff faf8 	bl	800a65a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b06e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	f1c3 0207 	rsb	r2, r3, #7
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	2200      	movs	r2, #0
 800b084:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	68f9      	ldr	r1, [r7, #12]
 800b092:	69b8      	ldr	r0, [r7, #24]
 800b094:	f000 fe52 	bl	800bd3c <pxPortInitialiseStack>
 800b098:	4602      	mov	r2, r0
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0aa:	bf00      	nop
 800b0ac:	3720      	adds	r7, #32
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0bc:	f000 ff44 	bl	800bf48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0c0:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <prvAddNewTaskToReadyList+0xb8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	4a29      	ldr	r2, [pc, #164]	; (800b16c <prvAddNewTaskToReadyList+0xb8>)
 800b0c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0ca:	4b29      	ldr	r3, [pc, #164]	; (800b170 <prvAddNewTaskToReadyList+0xbc>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0d2:	4a27      	ldr	r2, [pc, #156]	; (800b170 <prvAddNewTaskToReadyList+0xbc>)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0d8:	4b24      	ldr	r3, [pc, #144]	; (800b16c <prvAddNewTaskToReadyList+0xb8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d110      	bne.n	800b102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0e0:	f000 fc64 	bl	800b9ac <prvInitialiseTaskLists>
 800b0e4:	e00d      	b.n	800b102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0e6:	4b23      	ldr	r3, [pc, #140]	; (800b174 <prvAddNewTaskToReadyList+0xc0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0ee:	4b20      	ldr	r3, [pc, #128]	; (800b170 <prvAddNewTaskToReadyList+0xbc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d802      	bhi.n	800b102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0fc:	4a1c      	ldr	r2, [pc, #112]	; (800b170 <prvAddNewTaskToReadyList+0xbc>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b102:	4b1d      	ldr	r3, [pc, #116]	; (800b178 <prvAddNewTaskToReadyList+0xc4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3301      	adds	r3, #1
 800b108:	4a1b      	ldr	r2, [pc, #108]	; (800b178 <prvAddNewTaskToReadyList+0xc4>)
 800b10a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	2201      	movs	r2, #1
 800b112:	409a      	lsls	r2, r3
 800b114:	4b19      	ldr	r3, [pc, #100]	; (800b17c <prvAddNewTaskToReadyList+0xc8>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4313      	orrs	r3, r2
 800b11a:	4a18      	ldr	r2, [pc, #96]	; (800b17c <prvAddNewTaskToReadyList+0xc8>)
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4a15      	ldr	r2, [pc, #84]	; (800b180 <prvAddNewTaskToReadyList+0xcc>)
 800b12c:	441a      	add	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3304      	adds	r3, #4
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f7ff fa9d 	bl	800a674 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b13a:	f000 ff37 	bl	800bfac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b13e:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <prvAddNewTaskToReadyList+0xc0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00e      	beq.n	800b164 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <prvAddNewTaskToReadyList+0xbc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	429a      	cmp	r2, r3
 800b152:	d207      	bcs.n	800b164 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b154:	4b0b      	ldr	r3, [pc, #44]	; (800b184 <prvAddNewTaskToReadyList+0xd0>)
 800b156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200005d0 	.word	0x200005d0
 800b170:	200004d0 	.word	0x200004d0
 800b174:	200005dc 	.word	0x200005dc
 800b178:	200005ec 	.word	0x200005ec
 800b17c:	200005d8 	.word	0x200005d8
 800b180:	200004d4 	.word	0x200004d4
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08a      	sub	sp, #40	; 0x28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b192:	2300      	movs	r3, #0
 800b194:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <vTaskDelayUntil+0x2c>
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	b672      	cpsid	i
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	b662      	cpsie	i
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	e7fe      	b.n	800b1b2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10b      	bne.n	800b1d2 <vTaskDelayUntil+0x4a>
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	b672      	cpsid	i
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	b662      	cpsie	i
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	e7fe      	b.n	800b1d0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800b1d2:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <vTaskDelayUntil+0xf4>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00b      	beq.n	800b1f2 <vTaskDelayUntil+0x6a>
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	b672      	cpsid	i
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	b662      	cpsie	i
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	e7fe      	b.n	800b1f0 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800b1f2:	f000 f8e1 	bl	800b3b8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b1f6:	4b22      	ldr	r3, [pc, #136]	; (800b280 <vTaskDelayUntil+0xf8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	4413      	add	r3, r2
 800b204:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6a3a      	ldr	r2, [r7, #32]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d20b      	bcs.n	800b228 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	429a      	cmp	r2, r3
 800b218:	d211      	bcs.n	800b23e <vTaskDelayUntil+0xb6>
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d90d      	bls.n	800b23e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b222:	2301      	movs	r3, #1
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
 800b226:	e00a      	b.n	800b23e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69fa      	ldr	r2, [r7, #28]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d303      	bcc.n	800b23a <vTaskDelayUntil+0xb2>
 800b232:	69fa      	ldr	r2, [r7, #28]
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	429a      	cmp	r2, r3
 800b238:	d901      	bls.n	800b23e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b23a:	2301      	movs	r3, #1
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	2100      	movs	r1, #0
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fd0c 	bl	800bc70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b258:	f000 f8bc 	bl	800b3d4 <xTaskResumeAll>
 800b25c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d107      	bne.n	800b274 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b264:	4b07      	ldr	r3, [pc, #28]	; (800b284 <vTaskDelayUntil+0xfc>)
 800b266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b274:	bf00      	nop
 800b276:	3728      	adds	r7, #40	; 0x28
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200005f8 	.word	0x200005f8
 800b280:	200005d4 	.word	0x200005d4
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d018      	beq.n	800b2cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <vTaskDelay+0x64>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <vTaskDelay+0x32>
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	b672      	cpsid	i
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	b662      	cpsie	i
 800b2b6:	60bb      	str	r3, [r7, #8]
 800b2b8:	e7fe      	b.n	800b2b8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b2ba:	f000 f87d 	bl	800b3b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2be:	2100      	movs	r1, #0
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fcd5 	bl	800bc70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2c6:	f000 f885 	bl	800b3d4 <xTaskResumeAll>
 800b2ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d107      	bne.n	800b2e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b2d2:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <vTaskDelay+0x68>)
 800b2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	200005f8 	.word	0x200005f8
 800b2f0:	e000ed04 	.word	0xe000ed04

0800b2f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08a      	sub	sp, #40	; 0x28
 800b2f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b302:	463a      	mov	r2, r7
 800b304:	1d39      	adds	r1, r7, #4
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7f5 f900 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	9202      	str	r2, [sp, #8]
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	2300      	movs	r3, #0
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	2300      	movs	r3, #0
 800b320:	460a      	mov	r2, r1
 800b322:	491f      	ldr	r1, [pc, #124]	; (800b3a0 <vTaskStartScheduler+0xac>)
 800b324:	481f      	ldr	r0, [pc, #124]	; (800b3a4 <vTaskStartScheduler+0xb0>)
 800b326:	f7ff fd97 	bl	800ae58 <xTaskCreateStatic>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b1e      	ldr	r3, [pc, #120]	; (800b3a8 <vTaskStartScheduler+0xb4>)
 800b32e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b330:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <vTaskStartScheduler+0xb4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b338:	2301      	movs	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e001      	b.n	800b342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b33e:	2300      	movs	r3, #0
 800b340:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d117      	bne.n	800b378 <vTaskStartScheduler+0x84>
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	b672      	cpsid	i
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	b662      	cpsie	i
 800b35c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <vTaskStartScheduler+0xb8>)
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <vTaskStartScheduler+0xbc>)
 800b368:	2201      	movs	r2, #1
 800b36a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b36c:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <vTaskStartScheduler+0xc0>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b372:	f000 fd6d 	bl	800be50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b376:	e00f      	b.n	800b398 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37e:	d10b      	bne.n	800b398 <vTaskStartScheduler+0xa4>
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	b672      	cpsid	i
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	b662      	cpsie	i
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e7fe      	b.n	800b396 <vTaskStartScheduler+0xa2>
}
 800b398:	bf00      	nop
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	0800c5c4 	.word	0x0800c5c4
 800b3a4:	0800b97d 	.word	0x0800b97d
 800b3a8:	200005f4 	.word	0x200005f4
 800b3ac:	200005f0 	.word	0x200005f0
 800b3b0:	200005dc 	.word	0x200005dc
 800b3b4:	200005d4 	.word	0x200005d4

0800b3b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b3bc:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <vTaskSuspendAll+0x18>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	4a03      	ldr	r2, [pc, #12]	; (800b3d0 <vTaskSuspendAll+0x18>)
 800b3c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b3c6:	bf00      	nop
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	200005f8 	.word	0x200005f8

0800b3d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3e2:	4b42      	ldr	r3, [pc, #264]	; (800b4ec <xTaskResumeAll+0x118>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <xTaskResumeAll+0x2e>
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	b672      	cpsid	i
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	b662      	cpsie	i
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	e7fe      	b.n	800b400 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b402:	f000 fda1 	bl	800bf48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b406:	4b39      	ldr	r3, [pc, #228]	; (800b4ec <xTaskResumeAll+0x118>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3b01      	subs	r3, #1
 800b40c:	4a37      	ldr	r2, [pc, #220]	; (800b4ec <xTaskResumeAll+0x118>)
 800b40e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b410:	4b36      	ldr	r3, [pc, #216]	; (800b4ec <xTaskResumeAll+0x118>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d161      	bne.n	800b4dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b418:	4b35      	ldr	r3, [pc, #212]	; (800b4f0 <xTaskResumeAll+0x11c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d05d      	beq.n	800b4dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b420:	e02e      	b.n	800b480 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b422:	4b34      	ldr	r3, [pc, #208]	; (800b4f4 <xTaskResumeAll+0x120>)
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3318      	adds	r3, #24
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff f97d 	bl	800a72e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3304      	adds	r3, #4
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff f978 	bl	800a72e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	2201      	movs	r2, #1
 800b444:	409a      	lsls	r2, r3
 800b446:	4b2c      	ldr	r3, [pc, #176]	; (800b4f8 <xTaskResumeAll+0x124>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	4a2a      	ldr	r2, [pc, #168]	; (800b4f8 <xTaskResumeAll+0x124>)
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4a27      	ldr	r2, [pc, #156]	; (800b4fc <xTaskResumeAll+0x128>)
 800b45e:	441a      	add	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3304      	adds	r3, #4
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f7ff f904 	bl	800a674 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b470:	4b23      	ldr	r3, [pc, #140]	; (800b500 <xTaskResumeAll+0x12c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	429a      	cmp	r2, r3
 800b478:	d302      	bcc.n	800b480 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b47a:	4b22      	ldr	r3, [pc, #136]	; (800b504 <xTaskResumeAll+0x130>)
 800b47c:	2201      	movs	r2, #1
 800b47e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b480:	4b1c      	ldr	r3, [pc, #112]	; (800b4f4 <xTaskResumeAll+0x120>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1cc      	bne.n	800b422 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b48e:	f000 fb29 	bl	800bae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b492:	4b1d      	ldr	r3, [pc, #116]	; (800b508 <xTaskResumeAll+0x134>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d010      	beq.n	800b4c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b49e:	f000 f847 	bl	800b530 <xTaskIncrementTick>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4a8:	4b16      	ldr	r3, [pc, #88]	; (800b504 <xTaskResumeAll+0x130>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1f1      	bne.n	800b49e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <xTaskResumeAll+0x134>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4c0:	4b10      	ldr	r3, [pc, #64]	; (800b504 <xTaskResumeAll+0x130>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4cc:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <xTaskResumeAll+0x138>)
 800b4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4dc:	f000 fd66 	bl	800bfac <vPortExitCritical>

	return xAlreadyYielded;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200005f8 	.word	0x200005f8
 800b4f0:	200005d0 	.word	0x200005d0
 800b4f4:	20000590 	.word	0x20000590
 800b4f8:	200005d8 	.word	0x200005d8
 800b4fc:	200004d4 	.word	0x200004d4
 800b500:	200004d0 	.word	0x200004d0
 800b504:	200005e4 	.word	0x200005e4
 800b508:	200005e0 	.word	0x200005e0
 800b50c:	e000ed04 	.word	0xe000ed04

0800b510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b516:	4b05      	ldr	r3, [pc, #20]	; (800b52c <xTaskGetTickCount+0x1c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b51c:	687b      	ldr	r3, [r7, #4]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	200005d4 	.word	0x200005d4

0800b530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53a:	4b4f      	ldr	r3, [pc, #316]	; (800b678 <xTaskIncrementTick+0x148>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 8089 	bne.w	800b656 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b544:	4b4d      	ldr	r3, [pc, #308]	; (800b67c <xTaskIncrementTick+0x14c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b54c:	4a4b      	ldr	r2, [pc, #300]	; (800b67c <xTaskIncrementTick+0x14c>)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d121      	bne.n	800b59c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b558:	4b49      	ldr	r3, [pc, #292]	; (800b680 <xTaskIncrementTick+0x150>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <xTaskIncrementTick+0x4a>
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	b672      	cpsid	i
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	b662      	cpsie	i
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	e7fe      	b.n	800b578 <xTaskIncrementTick+0x48>
 800b57a:	4b41      	ldr	r3, [pc, #260]	; (800b680 <xTaskIncrementTick+0x150>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	4b40      	ldr	r3, [pc, #256]	; (800b684 <xTaskIncrementTick+0x154>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a3e      	ldr	r2, [pc, #248]	; (800b680 <xTaskIncrementTick+0x150>)
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4a3e      	ldr	r2, [pc, #248]	; (800b684 <xTaskIncrementTick+0x154>)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	4b3e      	ldr	r3, [pc, #248]	; (800b688 <xTaskIncrementTick+0x158>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3301      	adds	r3, #1
 800b594:	4a3c      	ldr	r2, [pc, #240]	; (800b688 <xTaskIncrementTick+0x158>)
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	f000 faa4 	bl	800bae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b59c:	4b3b      	ldr	r3, [pc, #236]	; (800b68c <xTaskIncrementTick+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d348      	bcc.n	800b638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a6:	4b36      	ldr	r3, [pc, #216]	; (800b680 <xTaskIncrementTick+0x150>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d104      	bne.n	800b5ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <xTaskIncrementTick+0x15c>)
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b6:	601a      	str	r2, [r3, #0]
					break;
 800b5b8:	e03e      	b.n	800b638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	4b31      	ldr	r3, [pc, #196]	; (800b680 <xTaskIncrementTick+0x150>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d203      	bcs.n	800b5da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5d2:	4a2e      	ldr	r2, [pc, #184]	; (800b68c <xTaskIncrementTick+0x15c>)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5d8:	e02e      	b.n	800b638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff f8a5 	bl	800a72e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d004      	beq.n	800b5f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7ff f89c 	bl	800a72e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	409a      	lsls	r2, r3
 800b5fe:	4b24      	ldr	r3, [pc, #144]	; (800b690 <xTaskIncrementTick+0x160>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4313      	orrs	r3, r2
 800b604:	4a22      	ldr	r2, [pc, #136]	; (800b690 <xTaskIncrementTick+0x160>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4a1f      	ldr	r2, [pc, #124]	; (800b694 <xTaskIncrementTick+0x164>)
 800b616:	441a      	add	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7ff f828 	bl	800a674 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	4b1b      	ldr	r3, [pc, #108]	; (800b698 <xTaskIncrementTick+0x168>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	429a      	cmp	r2, r3
 800b630:	d3b9      	bcc.n	800b5a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b636:	e7b6      	b.n	800b5a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b638:	4b17      	ldr	r3, [pc, #92]	; (800b698 <xTaskIncrementTick+0x168>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63e:	4915      	ldr	r1, [pc, #84]	; (800b694 <xTaskIncrementTick+0x164>)
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	440b      	add	r3, r1
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d907      	bls.n	800b660 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	e004      	b.n	800b660 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b656:	4b11      	ldr	r3, [pc, #68]	; (800b69c <xTaskIncrementTick+0x16c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3301      	adds	r3, #1
 800b65c:	4a0f      	ldr	r2, [pc, #60]	; (800b69c <xTaskIncrementTick+0x16c>)
 800b65e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b660:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <xTaskIncrementTick+0x170>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b66c:	697b      	ldr	r3, [r7, #20]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200005f8 	.word	0x200005f8
 800b67c:	200005d4 	.word	0x200005d4
 800b680:	20000588 	.word	0x20000588
 800b684:	2000058c 	.word	0x2000058c
 800b688:	200005e8 	.word	0x200005e8
 800b68c:	200005f0 	.word	0x200005f0
 800b690:	200005d8 	.word	0x200005d8
 800b694:	200004d4 	.word	0x200004d4
 800b698:	200004d0 	.word	0x200004d0
 800b69c:	200005e0 	.word	0x200005e0
 800b6a0:	200005e4 	.word	0x200005e4

0800b6a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6aa:	4b27      	ldr	r3, [pc, #156]	; (800b748 <vTaskSwitchContext+0xa4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6b2:	4b26      	ldr	r3, [pc, #152]	; (800b74c <vTaskSwitchContext+0xa8>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6b8:	e040      	b.n	800b73c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b6ba:	4b24      	ldr	r3, [pc, #144]	; (800b74c <vTaskSwitchContext+0xa8>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c0:	4b23      	ldr	r3, [pc, #140]	; (800b750 <vTaskSwitchContext+0xac>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	fab3 f383 	clz	r3, r3
 800b6cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	f1c3 031f 	rsb	r3, r3, #31
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	491f      	ldr	r1, [pc, #124]	; (800b754 <vTaskSwitchContext+0xb0>)
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10b      	bne.n	800b702 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	b672      	cpsid	i
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	b662      	cpsie	i
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	e7fe      	b.n	800b700 <vTaskSwitchContext+0x5c>
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4a11      	ldr	r2, [pc, #68]	; (800b754 <vTaskSwitchContext+0xb0>)
 800b70e:	4413      	add	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3308      	adds	r3, #8
 800b724:	429a      	cmp	r2, r3
 800b726:	d104      	bne.n	800b732 <vTaskSwitchContext+0x8e>
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	605a      	str	r2, [r3, #4]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	4a07      	ldr	r2, [pc, #28]	; (800b758 <vTaskSwitchContext+0xb4>)
 800b73a:	6013      	str	r3, [r2, #0]
}
 800b73c:	bf00      	nop
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	200005f8 	.word	0x200005f8
 800b74c:	200005e4 	.word	0x200005e4
 800b750:	200005d8 	.word	0x200005d8
 800b754:	200004d4 	.word	0x200004d4
 800b758:	200004d0 	.word	0x200004d0

0800b75c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10b      	bne.n	800b784 <vTaskPlaceOnEventList+0x28>
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e7fe      	b.n	800b782 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b784:	4b07      	ldr	r3, [pc, #28]	; (800b7a4 <vTaskPlaceOnEventList+0x48>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3318      	adds	r3, #24
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7fe ff95 	bl	800a6bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b792:	2101      	movs	r1, #1
 800b794:	6838      	ldr	r0, [r7, #0]
 800b796:	f000 fa6b 	bl	800bc70 <prvAddCurrentTaskToDelayedList>
}
 800b79a:	bf00      	nop
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	200004d0 	.word	0x200004d0

0800b7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10b      	bne.n	800b7d6 <xTaskRemoveFromEventList+0x2e>
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	b672      	cpsid	i
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	b662      	cpsie	i
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e7fe      	b.n	800b7d4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	3318      	adds	r3, #24
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe ffa7 	bl	800a72e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7e0:	4b1d      	ldr	r3, [pc, #116]	; (800b858 <xTaskRemoveFromEventList+0xb0>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11c      	bne.n	800b822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe ff9e 	bl	800a72e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	409a      	lsls	r2, r3
 800b7fa:	4b18      	ldr	r3, [pc, #96]	; (800b85c <xTaskRemoveFromEventList+0xb4>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <xTaskRemoveFromEventList+0xb4>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <xTaskRemoveFromEventList+0xb8>)
 800b812:	441a      	add	r2, r3
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fe ff2a 	bl	800a674 <vListInsertEnd>
 800b820:	e005      	b.n	800b82e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	3318      	adds	r3, #24
 800b826:	4619      	mov	r1, r3
 800b828:	480e      	ldr	r0, [pc, #56]	; (800b864 <xTaskRemoveFromEventList+0xbc>)
 800b82a:	f7fe ff23 	bl	800a674 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <xTaskRemoveFromEventList+0xc0>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	429a      	cmp	r2, r3
 800b83a:	d905      	bls.n	800b848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <xTaskRemoveFromEventList+0xc4>)
 800b842:	2201      	movs	r2, #1
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	e001      	b.n	800b84c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b84c:	697b      	ldr	r3, [r7, #20]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3718      	adds	r7, #24
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	200005f8 	.word	0x200005f8
 800b85c:	200005d8 	.word	0x200005d8
 800b860:	200004d4 	.word	0x200004d4
 800b864:	20000590 	.word	0x20000590
 800b868:	200004d0 	.word	0x200004d0
 800b86c:	200005e4 	.word	0x200005e4

0800b870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b878:	4b06      	ldr	r3, [pc, #24]	; (800b894 <vTaskInternalSetTimeOutState+0x24>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <vTaskInternalSetTimeOutState+0x28>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	605a      	str	r2, [r3, #4]
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	200005e8 	.word	0x200005e8
 800b898:	200005d4 	.word	0x200005d4

0800b89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10b      	bne.n	800b8c4 <xTaskCheckForTimeOut+0x28>
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	b672      	cpsid	i
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	b662      	cpsie	i
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	e7fe      	b.n	800b8c2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10b      	bne.n	800b8e2 <xTaskCheckForTimeOut+0x46>
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	b672      	cpsid	i
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	b662      	cpsie	i
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	e7fe      	b.n	800b8e0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b8e2:	f000 fb31 	bl	800bf48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8e6:	4b1d      	ldr	r3, [pc, #116]	; (800b95c <xTaskCheckForTimeOut+0xc0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fe:	d102      	bne.n	800b906 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	61fb      	str	r3, [r7, #28]
 800b904:	e023      	b.n	800b94e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	4b15      	ldr	r3, [pc, #84]	; (800b960 <xTaskCheckForTimeOut+0xc4>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d007      	beq.n	800b922 <xTaskCheckForTimeOut+0x86>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d302      	bcc.n	800b922 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b91c:	2301      	movs	r3, #1
 800b91e:	61fb      	str	r3, [r7, #28]
 800b920:	e015      	b.n	800b94e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d20b      	bcs.n	800b944 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	1ad2      	subs	r2, r2, r3
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7ff ff99 	bl	800b870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b93e:	2300      	movs	r3, #0
 800b940:	61fb      	str	r3, [r7, #28]
 800b942:	e004      	b.n	800b94e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2200      	movs	r2, #0
 800b948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b94a:	2301      	movs	r3, #1
 800b94c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b94e:	f000 fb2d 	bl	800bfac <vPortExitCritical>

	return xReturn;
 800b952:	69fb      	ldr	r3, [r7, #28]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3720      	adds	r7, #32
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200005d4 	.word	0x200005d4
 800b960:	200005e8 	.word	0x200005e8

0800b964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b964:	b480      	push	{r7}
 800b966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b968:	4b03      	ldr	r3, [pc, #12]	; (800b978 <vTaskMissedYield+0x14>)
 800b96a:	2201      	movs	r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
}
 800b96e:	bf00      	nop
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	200005e4 	.word	0x200005e4

0800b97c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b984:	f000 f852 	bl	800ba2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b988:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <prvIdleTask+0x28>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d9f9      	bls.n	800b984 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <prvIdleTask+0x2c>)
 800b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9a0:	e7f0      	b.n	800b984 <prvIdleTask+0x8>
 800b9a2:	bf00      	nop
 800b9a4:	200004d4 	.word	0x200004d4
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	e00c      	b.n	800b9d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4a12      	ldr	r2, [pc, #72]	; (800ba0c <prvInitialiseTaskLists+0x60>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fe27 	bl	800a61a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b06      	cmp	r3, #6
 800b9d6:	d9ef      	bls.n	800b9b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9d8:	480d      	ldr	r0, [pc, #52]	; (800ba10 <prvInitialiseTaskLists+0x64>)
 800b9da:	f7fe fe1e 	bl	800a61a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9de:	480d      	ldr	r0, [pc, #52]	; (800ba14 <prvInitialiseTaskLists+0x68>)
 800b9e0:	f7fe fe1b 	bl	800a61a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9e4:	480c      	ldr	r0, [pc, #48]	; (800ba18 <prvInitialiseTaskLists+0x6c>)
 800b9e6:	f7fe fe18 	bl	800a61a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ea:	480c      	ldr	r0, [pc, #48]	; (800ba1c <prvInitialiseTaskLists+0x70>)
 800b9ec:	f7fe fe15 	bl	800a61a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9f0:	480b      	ldr	r0, [pc, #44]	; (800ba20 <prvInitialiseTaskLists+0x74>)
 800b9f2:	f7fe fe12 	bl	800a61a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <prvInitialiseTaskLists+0x78>)
 800b9f8:	4a05      	ldr	r2, [pc, #20]	; (800ba10 <prvInitialiseTaskLists+0x64>)
 800b9fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <prvInitialiseTaskLists+0x7c>)
 800b9fe:	4a05      	ldr	r2, [pc, #20]	; (800ba14 <prvInitialiseTaskLists+0x68>)
 800ba00:	601a      	str	r2, [r3, #0]
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	200004d4 	.word	0x200004d4
 800ba10:	20000560 	.word	0x20000560
 800ba14:	20000574 	.word	0x20000574
 800ba18:	20000590 	.word	0x20000590
 800ba1c:	200005a4 	.word	0x200005a4
 800ba20:	200005bc 	.word	0x200005bc
 800ba24:	20000588 	.word	0x20000588
 800ba28:	2000058c 	.word	0x2000058c

0800ba2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba32:	e019      	b.n	800ba68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba34:	f000 fa88 	bl	800bf48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba38:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <prvCheckTasksWaitingTermination+0x4c>)
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fe fe72 	bl	800a72e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <prvCheckTasksWaitingTermination+0x50>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <prvCheckTasksWaitingTermination+0x50>)
 800ba52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba54:	4b0a      	ldr	r3, [pc, #40]	; (800ba80 <prvCheckTasksWaitingTermination+0x54>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <prvCheckTasksWaitingTermination+0x54>)
 800ba5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba5e:	f000 faa5 	bl	800bfac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f80e 	bl	800ba84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <prvCheckTasksWaitingTermination+0x54>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e1      	bne.n	800ba34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200005a4 	.word	0x200005a4
 800ba7c:	200005d0 	.word	0x200005d0
 800ba80:	200005b8 	.word	0x200005b8

0800ba84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fbfc 	bl	800c298 <vPortFree>
				vPortFree( pxTCB );
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fbf9 	bl	800c298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baa6:	e019      	b.n	800badc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d103      	bne.n	800baba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fbf0 	bl	800c298 <vPortFree>
	}
 800bab8:	e010      	b.n	800badc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d00b      	beq.n	800badc <prvDeleteTCB+0x58>
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	b672      	cpsid	i
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	b662      	cpsie	i
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	e7fe      	b.n	800bada <prvDeleteTCB+0x56>
	}
 800badc:	bf00      	nop
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baea:	4b0c      	ldr	r3, [pc, #48]	; (800bb1c <prvResetNextTaskUnblockTime+0x38>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d104      	bne.n	800bafe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baf4:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <prvResetNextTaskUnblockTime+0x3c>)
 800baf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bafa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bafc:	e008      	b.n	800bb10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bafe:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <prvResetNextTaskUnblockTime+0x38>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <prvResetNextTaskUnblockTime+0x3c>)
 800bb0e:	6013      	str	r3, [r2, #0]
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr
 800bb1c:	20000588 	.word	0x20000588
 800bb20:	200005f0 	.word	0x200005f0

0800bb24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb2a:	4b0b      	ldr	r3, [pc, #44]	; (800bb58 <xTaskGetSchedulerState+0x34>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb32:	2301      	movs	r3, #1
 800bb34:	607b      	str	r3, [r7, #4]
 800bb36:	e008      	b.n	800bb4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb38:	4b08      	ldr	r3, [pc, #32]	; (800bb5c <xTaskGetSchedulerState+0x38>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb40:	2302      	movs	r3, #2
 800bb42:	607b      	str	r3, [r7, #4]
 800bb44:	e001      	b.n	800bb4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb4a:	687b      	ldr	r3, [r7, #4]
	}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	200005dc 	.word	0x200005dc
 800bb5c:	200005f8 	.word	0x200005f8

0800bb60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d070      	beq.n	800bc58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb76:	4b3b      	ldr	r3, [pc, #236]	; (800bc64 <xTaskPriorityDisinherit+0x104>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d00b      	beq.n	800bb98 <xTaskPriorityDisinherit+0x38>
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	60fb      	str	r3, [r7, #12]
 800bb96:	e7fe      	b.n	800bb96 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10b      	bne.n	800bbb8 <xTaskPriorityDisinherit+0x58>
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	b672      	cpsid	i
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	b662      	cpsie	i
 800bbb4:	60bb      	str	r3, [r7, #8]
 800bbb6:	e7fe      	b.n	800bbb6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbc:	1e5a      	subs	r2, r3, #1
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d044      	beq.n	800bc58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d140      	bne.n	800bc58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe fda7 	bl	800a72e <uxListRemove>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d115      	bne.n	800bc12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbea:	491f      	ldr	r1, [pc, #124]	; (800bc68 <xTaskPriorityDisinherit+0x108>)
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	440b      	add	r3, r1
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <xTaskPriorityDisinherit+0xb2>
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	2201      	movs	r2, #1
 800bc02:	fa02 f303 	lsl.w	r3, r2, r3
 800bc06:	43da      	mvns	r2, r3
 800bc08:	4b18      	ldr	r3, [pc, #96]	; (800bc6c <xTaskPriorityDisinherit+0x10c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	4a17      	ldr	r2, [pc, #92]	; (800bc6c <xTaskPriorityDisinherit+0x10c>)
 800bc10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1e:	f1c3 0207 	rsb	r2, r3, #7
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	409a      	lsls	r2, r3
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <xTaskPriorityDisinherit+0x10c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	4a0d      	ldr	r2, [pc, #52]	; (800bc6c <xTaskPriorityDisinherit+0x10c>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4a08      	ldr	r2, [pc, #32]	; (800bc68 <xTaskPriorityDisinherit+0x108>)
 800bc46:	441a      	add	r2, r3
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fe fd10 	bl	800a674 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc58:	697b      	ldr	r3, [r7, #20]
	}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	200004d0 	.word	0x200004d0
 800bc68:	200004d4 	.word	0x200004d4
 800bc6c:	200005d8 	.word	0x200005d8

0800bc70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc7a:	4b29      	ldr	r3, [pc, #164]	; (800bd20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc80:	4b28      	ldr	r3, [pc, #160]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3304      	adds	r3, #4
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fe fd51 	bl	800a72e <uxListRemove>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10b      	bne.n	800bcaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bc92:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	2201      	movs	r2, #1
 800bc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc9e:	43da      	mvns	r2, r3
 800bca0:	4b21      	ldr	r3, [pc, #132]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4013      	ands	r3, r2
 800bca6:	4a20      	ldr	r2, [pc, #128]	; (800bd28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bca8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb0:	d10a      	bne.n	800bcc8 <prvAddCurrentTaskToDelayedList+0x58>
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcb8:	4b1a      	ldr	r3, [pc, #104]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	481a      	ldr	r0, [pc, #104]	; (800bd2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bcc2:	f7fe fcd7 	bl	800a674 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcc6:	e026      	b.n	800bd16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4413      	add	r3, r2
 800bcce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcd0:	4b14      	ldr	r3, [pc, #80]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d209      	bcs.n	800bcf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f7fe fce5 	bl	800a6bc <vListInsert>
}
 800bcf2:	e010      	b.n	800bd16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fe fcdb 	bl	800a6bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd06:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d202      	bcs.n	800bd16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd10:	4a09      	ldr	r2, [pc, #36]	; (800bd38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	6013      	str	r3, [r2, #0]
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	200005d4 	.word	0x200005d4
 800bd24:	200004d0 	.word	0x200004d0
 800bd28:	200005d8 	.word	0x200005d8
 800bd2c:	200005bc 	.word	0x200005bc
 800bd30:	2000058c 	.word	0x2000058c
 800bd34:	20000588 	.word	0x20000588
 800bd38:	200005f0 	.word	0x200005f0

0800bd3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3b04      	subs	r3, #4
 800bd4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3b04      	subs	r3, #4
 800bd5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f023 0201 	bic.w	r2, r3, #1
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3b04      	subs	r3, #4
 800bd6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd6c:	4a0c      	ldr	r2, [pc, #48]	; (800bda0 <pxPortInitialiseStack+0x64>)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3b14      	subs	r3, #20
 800bd76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3b04      	subs	r3, #4
 800bd82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f06f 0202 	mvn.w	r2, #2
 800bd8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	3b20      	subs	r3, #32
 800bd90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd92:	68fb      	ldr	r3, [r7, #12]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	0800bda5 	.word	0x0800bda5

0800bda4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdae:	4b13      	ldr	r3, [pc, #76]	; (800bdfc <prvTaskExitError+0x58>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb6:	d00b      	beq.n	800bdd0 <prvTaskExitError+0x2c>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	e7fe      	b.n	800bdce <prvTaskExitError+0x2a>
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	b672      	cpsid	i
 800bdd6:	f383 8811 	msr	BASEPRI, r3
 800bdda:	f3bf 8f6f 	isb	sy
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	b662      	cpsie	i
 800bde4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bde6:	bf00      	nop
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0fc      	beq.n	800bde8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdee:	bf00      	nop
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	20000050 	.word	0x20000050

0800be00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be00:	4b07      	ldr	r3, [pc, #28]	; (800be20 <pxCurrentTCBConst2>)
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	6808      	ldr	r0, [r1, #0]
 800be06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0a:	f380 8809 	msr	PSP, r0
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f04f 0000 	mov.w	r0, #0
 800be16:	f380 8811 	msr	BASEPRI, r0
 800be1a:	4770      	bx	lr
 800be1c:	f3af 8000 	nop.w

0800be20 <pxCurrentTCBConst2>:
 800be20:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be28:	4808      	ldr	r0, [pc, #32]	; (800be4c <prvPortStartFirstTask+0x24>)
 800be2a:	6800      	ldr	r0, [r0, #0]
 800be2c:	6800      	ldr	r0, [r0, #0]
 800be2e:	f380 8808 	msr	MSP, r0
 800be32:	f04f 0000 	mov.w	r0, #0
 800be36:	f380 8814 	msr	CONTROL, r0
 800be3a:	b662      	cpsie	i
 800be3c:	b661      	cpsie	f
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	df00      	svc	0
 800be48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be4a:	bf00      	nop
 800be4c:	e000ed08 	.word	0xe000ed08

0800be50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be56:	4b36      	ldr	r3, [pc, #216]	; (800bf30 <xPortStartScheduler+0xe0>)
 800be58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	22ff      	movs	r2, #255	; 0xff
 800be66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <xPortStartScheduler+0xe4>)
 800be7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be7e:	4b2e      	ldr	r3, [pc, #184]	; (800bf38 <xPortStartScheduler+0xe8>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be84:	e009      	b.n	800be9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800be86:	4b2c      	ldr	r3, [pc, #176]	; (800bf38 <xPortStartScheduler+0xe8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	4a2a      	ldr	r2, [pc, #168]	; (800bf38 <xPortStartScheduler+0xe8>)
 800be8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	b2db      	uxtb	r3, r3
 800be98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea2:	2b80      	cmp	r3, #128	; 0x80
 800bea4:	d0ef      	beq.n	800be86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <xPortStartScheduler+0xe8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1c3 0307 	rsb	r3, r3, #7
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d00b      	beq.n	800beca <xPortStartScheduler+0x7a>
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	60bb      	str	r3, [r7, #8]
 800bec8:	e7fe      	b.n	800bec8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800beca:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <xPortStartScheduler+0xe8>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	4a19      	ldr	r2, [pc, #100]	; (800bf38 <xPortStartScheduler+0xe8>)
 800bed2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bed4:	4b18      	ldr	r3, [pc, #96]	; (800bf38 <xPortStartScheduler+0xe8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bedc:	4a16      	ldr	r2, [pc, #88]	; (800bf38 <xPortStartScheduler+0xe8>)
 800bede:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bee8:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <xPortStartScheduler+0xec>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a13      	ldr	r2, [pc, #76]	; (800bf3c <xPortStartScheduler+0xec>)
 800beee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bef2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bef4:	4b11      	ldr	r3, [pc, #68]	; (800bf3c <xPortStartScheduler+0xec>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a10      	ldr	r2, [pc, #64]	; (800bf3c <xPortStartScheduler+0xec>)
 800befa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800befe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf00:	f000 f8d4 	bl	800c0ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <xPortStartScheduler+0xf0>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf0a:	f000 f8f3 	bl	800c0f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf0e:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <xPortStartScheduler+0xf4>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a0c      	ldr	r2, [pc, #48]	; (800bf44 <xPortStartScheduler+0xf4>)
 800bf14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf1a:	f7ff ff85 	bl	800be28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf1e:	f7ff fbc1 	bl	800b6a4 <vTaskSwitchContext>
	prvTaskExitError();
 800bf22:	f7ff ff3f 	bl	800bda4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	e000e400 	.word	0xe000e400
 800bf34:	200005fc 	.word	0x200005fc
 800bf38:	20000600 	.word	0x20000600
 800bf3c:	e000ed20 	.word	0xe000ed20
 800bf40:	20000050 	.word	0x20000050
 800bf44:	e000ef34 	.word	0xe000ef34

0800bf48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	b672      	cpsid	i
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	b662      	cpsie	i
 800bf62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf64:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <vPortEnterCritical+0x5c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	4a0e      	ldr	r2, [pc, #56]	; (800bfa4 <vPortEnterCritical+0x5c>)
 800bf6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <vPortEnterCritical+0x5c>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d110      	bne.n	800bf98 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <vPortEnterCritical+0x60>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <vPortEnterCritical+0x50>
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	b672      	cpsid	i
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	b662      	cpsie	i
 800bf94:	603b      	str	r3, [r7, #0]
 800bf96:	e7fe      	b.n	800bf96 <vPortEnterCritical+0x4e>
	}
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20000050 	.word	0x20000050
 800bfa8:	e000ed04 	.word	0xe000ed04

0800bfac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <vPortExitCritical+0x50>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10b      	bne.n	800bfd2 <vPortExitCritical+0x26>
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	b672      	cpsid	i
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	b662      	cpsie	i
 800bfce:	607b      	str	r3, [r7, #4]
 800bfd0:	e7fe      	b.n	800bfd0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <vPortExitCritical+0x50>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	4a08      	ldr	r2, [pc, #32]	; (800bffc <vPortExitCritical+0x50>)
 800bfda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfdc:	4b07      	ldr	r3, [pc, #28]	; (800bffc <vPortExitCritical+0x50>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <vPortExitCritical+0x42>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfee:	bf00      	nop
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	20000050 	.word	0x20000050

0800c000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c000:	f3ef 8009 	mrs	r0, PSP
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	4b15      	ldr	r3, [pc, #84]	; (800c060 <pxCurrentTCBConst>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	f01e 0f10 	tst.w	lr, #16
 800c010:	bf08      	it	eq
 800c012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01a:	6010      	str	r0, [r2, #0]
 800c01c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c020:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c024:	b672      	cpsid	i
 800c026:	f380 8811 	msr	BASEPRI, r0
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	b662      	cpsie	i
 800c034:	f7ff fb36 	bl	800b6a4 <vTaskSwitchContext>
 800c038:	f04f 0000 	mov.w	r0, #0
 800c03c:	f380 8811 	msr	BASEPRI, r0
 800c040:	bc09      	pop	{r0, r3}
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	6808      	ldr	r0, [r1, #0]
 800c046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	f01e 0f10 	tst.w	lr, #16
 800c04e:	bf08      	it	eq
 800c050:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c054:	f380 8809 	msr	PSP, r0
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop

0800c060 <pxCurrentTCBConst>:
 800c060:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop

0800c068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	b672      	cpsid	i
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	b662      	cpsie	i
 800c082:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c084:	f7ff fa54 	bl	800b530 <xTaskIncrementTick>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c08e:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <SysTick_Handler+0x40>)
 800c090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	e000ed04 	.word	0xe000ed04

0800c0ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <vPortSetupTimerInterrupt+0x34>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <vPortSetupTimerInterrupt+0x38>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <vPortSetupTimerInterrupt+0x3c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a0a      	ldr	r2, [pc, #40]	; (800c0ec <vPortSetupTimerInterrupt+0x40>)
 800c0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c6:	099b      	lsrs	r3, r3, #6
 800c0c8:	4a09      	ldr	r2, [pc, #36]	; (800c0f0 <vPortSetupTimerInterrupt+0x44>)
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0ce:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <vPortSetupTimerInterrupt+0x34>)
 800c0d0:	2207      	movs	r2, #7
 800c0d2:	601a      	str	r2, [r3, #0]
}
 800c0d4:	bf00      	nop
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	e000e010 	.word	0xe000e010
 800c0e4:	e000e018 	.word	0xe000e018
 800c0e8:	20000044 	.word	0x20000044
 800c0ec:	10624dd3 	.word	0x10624dd3
 800c0f0:	e000e014 	.word	0xe000e014

0800c0f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c104 <vPortEnableVFP+0x10>
 800c0f8:	6801      	ldr	r1, [r0, #0]
 800c0fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0fe:	6001      	str	r1, [r0, #0]
 800c100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c102:	bf00      	nop
 800c104:	e000ed88 	.word	0xe000ed88

0800c108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	; 0x28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c114:	f7ff f950 	bl	800b3b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c118:	4b5a      	ldr	r3, [pc, #360]	; (800c284 <pvPortMalloc+0x17c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c120:	f000 f916 	bl	800c350 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c124:	4b58      	ldr	r3, [pc, #352]	; (800c288 <pvPortMalloc+0x180>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 8090 	bne.w	800c252 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d01e      	beq.n	800c176 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c138:	2208      	movs	r2, #8
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d015      	beq.n	800c176 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f023 0307 	bic.w	r3, r3, #7
 800c150:	3308      	adds	r3, #8
 800c152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <pvPortMalloc+0x6e>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	b672      	cpsid	i
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	b662      	cpsie	i
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	e7fe      	b.n	800c174 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d06a      	beq.n	800c252 <pvPortMalloc+0x14a>
 800c17c:	4b43      	ldr	r3, [pc, #268]	; (800c28c <pvPortMalloc+0x184>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d865      	bhi.n	800c252 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c186:	4b42      	ldr	r3, [pc, #264]	; (800c290 <pvPortMalloc+0x188>)
 800c188:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c18a:	4b41      	ldr	r3, [pc, #260]	; (800c290 <pvPortMalloc+0x188>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c190:	e004      	b.n	800c19c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c194:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d903      	bls.n	800c1ae <pvPortMalloc+0xa6>
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1f1      	bne.n	800c192 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c1ae:	4b35      	ldr	r3, [pc, #212]	; (800c284 <pvPortMalloc+0x17c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d04c      	beq.n	800c252 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	4413      	add	r3, r2
 800c1c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	1ad2      	subs	r2, r2, r3
 800c1d2:	2308      	movs	r3, #8
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d920      	bls.n	800c21c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00b      	beq.n	800c204 <pvPortMalloc+0xfc>
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	b672      	cpsid	i
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	b662      	cpsie	i
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	e7fe      	b.n	800c202 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	1ad2      	subs	r2, r2, r3
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c216:	69b8      	ldr	r0, [r7, #24]
 800c218:	f000 f8fc 	bl	800c414 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c21c:	4b1b      	ldr	r3, [pc, #108]	; (800c28c <pvPortMalloc+0x184>)
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	4a19      	ldr	r2, [pc, #100]	; (800c28c <pvPortMalloc+0x184>)
 800c228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <pvPortMalloc+0x184>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	4b19      	ldr	r3, [pc, #100]	; (800c294 <pvPortMalloc+0x18c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d203      	bcs.n	800c23e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c236:	4b15      	ldr	r3, [pc, #84]	; (800c28c <pvPortMalloc+0x184>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a16      	ldr	r2, [pc, #88]	; (800c294 <pvPortMalloc+0x18c>)
 800c23c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	4b11      	ldr	r3, [pc, #68]	; (800c288 <pvPortMalloc+0x180>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	431a      	orrs	r2, r3
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c252:	f7ff f8bf 	bl	800b3d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <pvPortMalloc+0x170>
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	b672      	cpsid	i
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	b662      	cpsie	i
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	e7fe      	b.n	800c276 <pvPortMalloc+0x16e>
	return pvReturn;
 800c278:	69fb      	ldr	r3, [r7, #28]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3728      	adds	r7, #40	; 0x28
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	2000860c 	.word	0x2000860c
 800c288:	20008618 	.word	0x20008618
 800c28c:	20008610 	.word	0x20008610
 800c290:	20008604 	.word	0x20008604
 800c294:	20008614 	.word	0x20008614

0800c298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d04a      	beq.n	800c340 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c2aa:	2308      	movs	r3, #8
 800c2ac:	425b      	negs	r3, r3
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	4b22      	ldr	r3, [pc, #136]	; (800c348 <vPortFree+0xb0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10b      	bne.n	800c2de <vPortFree+0x46>
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	b672      	cpsid	i
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	b662      	cpsie	i
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	e7fe      	b.n	800c2dc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <vPortFree+0x66>
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	b672      	cpsid	i
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	b662      	cpsie	i
 800c2fa:	60bb      	str	r3, [r7, #8]
 800c2fc:	e7fe      	b.n	800c2fc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	685a      	ldr	r2, [r3, #4]
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <vPortFree+0xb0>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4013      	ands	r3, r2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d019      	beq.n	800c340 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d115      	bne.n	800c340 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <vPortFree+0xb0>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	43db      	mvns	r3, r3
 800c31e:	401a      	ands	r2, r3
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c324:	f7ff f848 	bl	800b3b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <vPortFree+0xb4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4413      	add	r3, r2
 800c332:	4a06      	ldr	r2, [pc, #24]	; (800c34c <vPortFree+0xb4>)
 800c334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c336:	6938      	ldr	r0, [r7, #16]
 800c338:	f000 f86c 	bl	800c414 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c33c:	f7ff f84a 	bl	800b3d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20008618 	.word	0x20008618
 800c34c:	20008610 	.word	0x20008610

0800c350 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c35a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c35c:	4b27      	ldr	r3, [pc, #156]	; (800c3fc <prvHeapInit+0xac>)
 800c35e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00c      	beq.n	800c384 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3307      	adds	r3, #7
 800c36e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <prvHeapInit+0xac>)
 800c380:	4413      	add	r3, r2
 800c382:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c388:	4a1d      	ldr	r2, [pc, #116]	; (800c400 <prvHeapInit+0xb0>)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c38e:	4b1c      	ldr	r3, [pc, #112]	; (800c400 <prvHeapInit+0xb0>)
 800c390:	2200      	movs	r2, #0
 800c392:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	4413      	add	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c39c:	2208      	movs	r2, #8
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	1a9b      	subs	r3, r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 0307 	bic.w	r3, r3, #7
 800c3aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4a15      	ldr	r2, [pc, #84]	; (800c404 <prvHeapInit+0xb4>)
 800c3b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3b2:	4b14      	ldr	r3, [pc, #80]	; (800c404 <prvHeapInit+0xb4>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3ba:	4b12      	ldr	r3, [pc, #72]	; (800c404 <prvHeapInit+0xb4>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	1ad2      	subs	r2, r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3d0:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <prvHeapInit+0xb4>)
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	4a0a      	ldr	r2, [pc, #40]	; (800c408 <prvHeapInit+0xb8>)
 800c3de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	4a09      	ldr	r2, [pc, #36]	; (800c40c <prvHeapInit+0xbc>)
 800c3e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <prvHeapInit+0xc0>)
 800c3ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3ee:	601a      	str	r2, [r3, #0]
}
 800c3f0:	bf00      	nop
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20000604 	.word	0x20000604
 800c400:	20008604 	.word	0x20008604
 800c404:	2000860c 	.word	0x2000860c
 800c408:	20008614 	.word	0x20008614
 800c40c:	20008610 	.word	0x20008610
 800c410:	20008618 	.word	0x20008618

0800c414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c41c:	4b28      	ldr	r3, [pc, #160]	; (800c4c0 <prvInsertBlockIntoFreeList+0xac>)
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	e002      	b.n	800c428 <prvInsertBlockIntoFreeList+0x14>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d8f7      	bhi.n	800c422 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	4413      	add	r3, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	429a      	cmp	r2, r3
 800c442:	d108      	bne.n	800c456 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	441a      	add	r2, r3
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	68ba      	ldr	r2, [r7, #8]
 800c460:	441a      	add	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d118      	bne.n	800c49c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d00d      	beq.n	800c492 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	441a      	add	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	e008      	b.n	800c4a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c492:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	e003      	b.n	800c4a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d002      	beq.n	800c4b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4b2:	bf00      	nop
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	20008604 	.word	0x20008604
 800c4c4:	2000860c 	.word	0x2000860c

0800c4c8 <__libc_init_array>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	4e0d      	ldr	r6, [pc, #52]	; (800c500 <__libc_init_array+0x38>)
 800c4cc:	4c0d      	ldr	r4, [pc, #52]	; (800c504 <__libc_init_array+0x3c>)
 800c4ce:	1ba4      	subs	r4, r4, r6
 800c4d0:	10a4      	asrs	r4, r4, #2
 800c4d2:	2500      	movs	r5, #0
 800c4d4:	42a5      	cmp	r5, r4
 800c4d6:	d109      	bne.n	800c4ec <__libc_init_array+0x24>
 800c4d8:	4e0b      	ldr	r6, [pc, #44]	; (800c508 <__libc_init_array+0x40>)
 800c4da:	4c0c      	ldr	r4, [pc, #48]	; (800c50c <__libc_init_array+0x44>)
 800c4dc:	f000 f82c 	bl	800c538 <_init>
 800c4e0:	1ba4      	subs	r4, r4, r6
 800c4e2:	10a4      	asrs	r4, r4, #2
 800c4e4:	2500      	movs	r5, #0
 800c4e6:	42a5      	cmp	r5, r4
 800c4e8:	d105      	bne.n	800c4f6 <__libc_init_array+0x2e>
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4f0:	4798      	blx	r3
 800c4f2:	3501      	adds	r5, #1
 800c4f4:	e7ee      	b.n	800c4d4 <__libc_init_array+0xc>
 800c4f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4fa:	4798      	blx	r3
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	e7f2      	b.n	800c4e6 <__libc_init_array+0x1e>
 800c500:	0800e520 	.word	0x0800e520
 800c504:	0800e520 	.word	0x0800e520
 800c508:	0800e520 	.word	0x0800e520
 800c50c:	0800e524 	.word	0x0800e524

0800c510 <memcpy>:
 800c510:	b510      	push	{r4, lr}
 800c512:	1e43      	subs	r3, r0, #1
 800c514:	440a      	add	r2, r1
 800c516:	4291      	cmp	r1, r2
 800c518:	d100      	bne.n	800c51c <memcpy+0xc>
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c520:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c524:	e7f7      	b.n	800c516 <memcpy+0x6>

0800c526 <memset>:
 800c526:	4402      	add	r2, r0
 800c528:	4603      	mov	r3, r0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d100      	bne.n	800c530 <memset+0xa>
 800c52e:	4770      	bx	lr
 800c530:	f803 1b01 	strb.w	r1, [r3], #1
 800c534:	e7f9      	b.n	800c52a <memset+0x4>
	...

0800c538 <_init>:
 800c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53a:	bf00      	nop
 800c53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53e:	bc08      	pop	{r3}
 800c540:	469e      	mov	lr, r3
 800c542:	4770      	bx	lr

0800c544 <_fini>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	bf00      	nop
 800c548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54a:	bc08      	pop	{r3}
 800c54c:	469e      	mov	lr, r3
 800c54e:	4770      	bx	lr
